/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/Cursor.h>

#include <thrift/lib/cpp2/GeneratedHeaderHelper.h>



namespace example { namespace thrift27 {

class Struct0;
class Struct1;
class Struct2;
class Struct3;
class Struct4;
class Struct5;
class Struct6;
class Struct7;
class Struct8;
class Struct9;
class Struct10;
class Struct11;
class Struct12;
class Struct13;

class Struct0 : private apache::thrift::detail::st::ComparisonOperators<Struct0> {
 public:

  Struct0() :
      field5(0),
      field8(0),
      field9(0),
      field12(0),
      field13(0),
      field15(0),
      field16(0),
      field17(0),
      field20(0),
      field21(0),
      field28(0),
      field29(0),
      field30(0),
      field31(0),
      field33(0),
      field34(0),
      field36(0),
      field37(0),
      field39(0) {}
  // FragileConstructor for use in initialization lists only

  Struct0(apache::thrift::FragileConstructor, std::map<bool, double> field1__arg, std::vector<int64_t> field2__arg, std::string field3__arg, std::map<std::string, int8_t> field4__arg, int16_t field5__arg, std::map<int16_t, std::map<double, std::string>> field6__arg, std::map<int32_t, int8_t> field7__arg, float field8__arg, int64_t field9__arg, std::map<bool, bool> field10__arg, std::set<std::vector<std::string>> field11__arg, double field12__arg, double field13__arg, std::string field14__arg, int16_t field15__arg, bool field16__arg, int8_t field17__arg, std::string field18__arg, std::vector<double> field19__arg, bool field20__arg, int64_t field21__arg, std::set<int16_t> field22__arg, std::string field23__arg, std::string field24__arg, std::map<bool, int32_t> field25__arg, std::string field26__arg, std::set<std::string> field27__arg, bool field28__arg, int32_t field29__arg, bool field30__arg, int32_t field31__arg, std::map<std::string, double> field32__arg, bool field33__arg, bool field34__arg, std::vector<int8_t> field35__arg, int16_t field36__arg, bool field37__arg, std::string field38__arg, bool field39__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }

  Struct0(Struct0&&) = default;

  Struct0(const Struct0&) = default;

  Struct0& operator=(Struct0&&) = default;

  Struct0& operator=(const Struct0&) = default;
  void __clear();

  virtual ~Struct0() {}

  std::map<bool, double> field1;
  std::vector<int64_t> field2;
  std::string field3;
  std::map<std::string, int8_t> field4;
  int16_t field5;
  std::map<int16_t, std::map<double, std::string>> field6;
  std::map<int32_t, int8_t> field7;
  float field8;
  int64_t field9;
  std::map<bool, bool> field10;
  std::set<std::vector<std::string>> field11;
  double field12;
  double field13;
  std::string field14;
  int16_t field15;
  bool field16;
  int8_t field17;
  std::string field18;
  std::vector<double> field19;
  bool field20;
  int64_t field21;
  std::set<int16_t> field22;
  std::string field23;
  std::string field24;
  std::map<bool, int32_t> field25;
  std::string field26;
  std::set<std::string> field27;
  bool field28;
  int32_t field29;
  bool field30;
  int32_t field31;
  std::map<std::string, double> field32;
  bool field33;
  bool field34;
  std::vector<int8_t> field35;
  int16_t field36;
  bool field37;
  std::string field38;
  bool field39;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
  } __isset;
  bool operator==(const Struct0& rhs) const;

  bool operator < (const Struct0& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    (void)rhs;
    return false;
  }
  const std::map<bool, double>& get_field1() const&;
  std::map<bool, double> get_field1() &&;

  template <typename T_Struct0_field1_struct_setter>
  std::map<bool, double>& set_field1(T_Struct0_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct0_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const std::vector<int64_t>& get_field2() const&;
  std::vector<int64_t> get_field2() &&;

  template <typename T_Struct0_field2_struct_setter>
  std::vector<int64_t>& set_field2(T_Struct0_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct0_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  const std::string& get_field3() const& {
    return field3;
  }

  std::string get_field3() && {
    return std::move(field3);
  }

  template <typename T_Struct0_field3_struct_setter>
  std::string& set_field3(T_Struct0_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct0_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }
  const std::map<std::string, int8_t>& get_field4() const&;
  std::map<std::string, int8_t> get_field4() &&;

  template <typename T_Struct0_field4_struct_setter>
  std::map<std::string, int8_t>& set_field4(T_Struct0_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct0_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }

  int16_t get_field5() const {
    return field5;
  }

  int16_t& set_field5(int16_t field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }
  const std::map<int16_t, std::map<double, std::string>>& get_field6() const&;
  std::map<int16_t, std::map<double, std::string>> get_field6() &&;

  template <typename T_Struct0_field6_struct_setter>
  std::map<int16_t, std::map<double, std::string>>& set_field6(T_Struct0_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct0_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }
  const std::map<int32_t, int8_t>& get_field7() const&;
  std::map<int32_t, int8_t> get_field7() &&;

  template <typename T_Struct0_field7_struct_setter>
  std::map<int32_t, int8_t>& set_field7(T_Struct0_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct0_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }

  float get_field8() const {
    return field8;
  }

  float& set_field8(float field8_) {
    field8 = field8_;
    __isset.field8 = true;
    return field8;
  }

  int64_t get_field9() const {
    return field9;
  }

  int64_t& set_field9(int64_t field9_) {
    field9 = field9_;
    __isset.field9 = true;
    return field9;
  }
  const std::map<bool, bool>& get_field10() const&;
  std::map<bool, bool> get_field10() &&;

  template <typename T_Struct0_field10_struct_setter>
  std::map<bool, bool>& set_field10(T_Struct0_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct0_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }
  const std::set<std::vector<std::string>>& get_field11() const&;
  std::set<std::vector<std::string>> get_field11() &&;

  template <typename T_Struct0_field11_struct_setter>
  std::set<std::vector<std::string>>& set_field11(T_Struct0_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct0_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }

  double get_field12() const {
    return field12;
  }

  double& set_field12(double field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }

  double get_field13() const {
    return field13;
  }

  double& set_field13(double field13_) {
    field13 = field13_;
    __isset.field13 = true;
    return field13;
  }

  const std::string& get_field14() const& {
    return field14;
  }

  std::string get_field14() && {
    return std::move(field14);
  }

  template <typename T_Struct0_field14_struct_setter>
  std::string& set_field14(T_Struct0_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct0_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }

  int16_t get_field15() const {
    return field15;
  }

  int16_t& set_field15(int16_t field15_) {
    field15 = field15_;
    __isset.field15 = true;
    return field15;
  }

  bool get_field16() const {
    return field16;
  }

  bool& set_field16(bool field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }

  int8_t get_field17() const {
    return field17;
  }

  int8_t& set_field17(int8_t field17_) {
    field17 = field17_;
    __isset.field17 = true;
    return field17;
  }

  const std::string& get_field18() const& {
    return field18;
  }

  std::string get_field18() && {
    return std::move(field18);
  }

  template <typename T_Struct0_field18_struct_setter>
  std::string& set_field18(T_Struct0_field18_struct_setter&& field18_) {
    field18 = std::forward<T_Struct0_field18_struct_setter>(field18_);
    __isset.field18 = true;
    return field18;
  }
  const std::vector<double>& get_field19() const&;
  std::vector<double> get_field19() &&;

  template <typename T_Struct0_field19_struct_setter>
  std::vector<double>& set_field19(T_Struct0_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct0_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }

  bool get_field20() const {
    return field20;
  }

  bool& set_field20(bool field20_) {
    field20 = field20_;
    __isset.field20 = true;
    return field20;
  }

  int64_t get_field21() const {
    return field21;
  }

  int64_t& set_field21(int64_t field21_) {
    field21 = field21_;
    __isset.field21 = true;
    return field21;
  }
  const std::set<int16_t>& get_field22() const&;
  std::set<int16_t> get_field22() &&;

  template <typename T_Struct0_field22_struct_setter>
  std::set<int16_t>& set_field22(T_Struct0_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct0_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }

  const std::string& get_field23() const& {
    return field23;
  }

  std::string get_field23() && {
    return std::move(field23);
  }

  template <typename T_Struct0_field23_struct_setter>
  std::string& set_field23(T_Struct0_field23_struct_setter&& field23_) {
    field23 = std::forward<T_Struct0_field23_struct_setter>(field23_);
    __isset.field23 = true;
    return field23;
  }

  const std::string& get_field24() const& {
    return field24;
  }

  std::string get_field24() && {
    return std::move(field24);
  }

  template <typename T_Struct0_field24_struct_setter>
  std::string& set_field24(T_Struct0_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct0_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }
  const std::map<bool, int32_t>& get_field25() const&;
  std::map<bool, int32_t> get_field25() &&;

  template <typename T_Struct0_field25_struct_setter>
  std::map<bool, int32_t>& set_field25(T_Struct0_field25_struct_setter&& field25_) {
    field25 = std::forward<T_Struct0_field25_struct_setter>(field25_);
    __isset.field25 = true;
    return field25;
  }

  const std::string& get_field26() const& {
    return field26;
  }

  std::string get_field26() && {
    return std::move(field26);
  }

  template <typename T_Struct0_field26_struct_setter>
  std::string& set_field26(T_Struct0_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct0_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }
  const std::set<std::string>& get_field27() const&;
  std::set<std::string> get_field27() &&;

  template <typename T_Struct0_field27_struct_setter>
  std::set<std::string>& set_field27(T_Struct0_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct0_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }

  bool get_field28() const {
    return field28;
  }

  bool& set_field28(bool field28_) {
    field28 = field28_;
    __isset.field28 = true;
    return field28;
  }

  int32_t get_field29() const {
    return field29;
  }

  int32_t& set_field29(int32_t field29_) {
    field29 = field29_;
    __isset.field29 = true;
    return field29;
  }

  bool get_field30() const {
    return field30;
  }

  bool& set_field30(bool field30_) {
    field30 = field30_;
    __isset.field30 = true;
    return field30;
  }

  int32_t get_field31() const {
    return field31;
  }

  int32_t& set_field31(int32_t field31_) {
    field31 = field31_;
    __isset.field31 = true;
    return field31;
  }
  const std::map<std::string, double>& get_field32() const&;
  std::map<std::string, double> get_field32() &&;

  template <typename T_Struct0_field32_struct_setter>
  std::map<std::string, double>& set_field32(T_Struct0_field32_struct_setter&& field32_) {
    field32 = std::forward<T_Struct0_field32_struct_setter>(field32_);
    __isset.field32 = true;
    return field32;
  }

  bool get_field33() const {
    return field33;
  }

  bool& set_field33(bool field33_) {
    field33 = field33_;
    __isset.field33 = true;
    return field33;
  }

  bool get_field34() const {
    return field34;
  }

  bool& set_field34(bool field34_) {
    field34 = field34_;
    __isset.field34 = true;
    return field34;
  }
  const std::vector<int8_t>& get_field35() const&;
  std::vector<int8_t> get_field35() &&;

  template <typename T_Struct0_field35_struct_setter>
  std::vector<int8_t>& set_field35(T_Struct0_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct0_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }

  int16_t get_field36() const {
    return field36;
  }

  int16_t& set_field36(int16_t field36_) {
    field36 = field36_;
    __isset.field36 = true;
    return field36;
  }

  bool get_field37() const {
    return field37;
  }

  bool& set_field37(bool field37_) {
    field37 = field37_;
    __isset.field37 = true;
    return field37;
  }

  const std::string& get_field38() const& {
    return field38;
  }

  std::string get_field38() && {
    return std::move(field38);
  }

  template <typename T_Struct0_field38_struct_setter>
  std::string& set_field38(T_Struct0_field38_struct_setter&& field38_) {
    field38 = std::forward<T_Struct0_field38_struct_setter>(field38_);
    __isset.field38 = true;
    return field38;
  }

  bool get_field39() const {
    return field39;
  }

  bool& set_field39(bool field39_) {
    field39 = field39_;
    __isset.field39 = true;
    return field39;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct0& a, Struct0& b);
extern template uint32_t Struct0::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct0::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct0::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct0::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct0::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct0::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct0::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct0::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift27::Struct0>::clear( ::example::thrift27::Struct0* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift27::Struct0>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct0>::write(Protocol* proto,  ::example::thrift27::Struct0 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct0>::read(Protocol* proto,  ::example::thrift27::Struct0* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct0>::serializedSize(Protocol const* proto,  ::example::thrift27::Struct0 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct0>::serializedSizeZC(Protocol const* proto,  ::example::thrift27::Struct0 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift27 {

class Struct1 : private apache::thrift::detail::st::ComparisonOperators<Struct1> {
 public:

  Struct1() :
      field1(0),
      field4(0),
      field5(0),
      field7(0),
      field8(0) {}
  // FragileConstructor for use in initialization lists only

  Struct1(apache::thrift::FragileConstructor, float field1__arg,  ::example::thrift27::Struct0 field2__arg, std::set<int32_t> field3__arg, float field4__arg, float field5__arg, std::string field6__arg, float field7__arg, int16_t field8__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }

  Struct1(Struct1&&) = default;

  Struct1(const Struct1&) = default;

  Struct1& operator=(Struct1&&) = default;

  Struct1& operator=(const Struct1&) = default;
  void __clear();

  virtual ~Struct1() {}

  float field1;
   ::example::thrift27::Struct0 field2;
  std::set<int32_t> field3;
  float field4;
  float field5;
  std::string field6;
  float field7;
  int16_t field8;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
  } __isset;
  bool operator==(const Struct1& rhs) const;

  bool operator < (const Struct1& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    (void)rhs;
    return false;
  }

  float get_field1() const {
    return field1;
  }

  float& set_field1(float field1_) {
    field1 = field1_;
    __isset.field1 = true;
    return field1;
  }
  const  ::example::thrift27::Struct0& get_field2() const&;
   ::example::thrift27::Struct0 get_field2() &&;

  template <typename T_Struct1_field2_struct_setter>
   ::example::thrift27::Struct0& set_field2(T_Struct1_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct1_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const std::set<int32_t>& get_field3() const&;
  std::set<int32_t> get_field3() &&;

  template <typename T_Struct1_field3_struct_setter>
  std::set<int32_t>& set_field3(T_Struct1_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct1_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  float get_field4() const {
    return field4;
  }

  float& set_field4(float field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }

  float get_field5() const {
    return field5;
  }

  float& set_field5(float field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }

  const std::string& get_field6() const& {
    return field6;
  }

  std::string get_field6() && {
    return std::move(field6);
  }

  template <typename T_Struct1_field6_struct_setter>
  std::string& set_field6(T_Struct1_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct1_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }

  float get_field7() const {
    return field7;
  }

  float& set_field7(float field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }

  int16_t get_field8() const {
    return field8;
  }

  int16_t& set_field8(int16_t field8_) {
    field8 = field8_;
    __isset.field8 = true;
    return field8;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct1& a, Struct1& b);
extern template uint32_t Struct1::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct1::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct1::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct1::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct1::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct1::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct1::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct1::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift27::Struct1>::clear( ::example::thrift27::Struct1* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift27::Struct1>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct1>::write(Protocol* proto,  ::example::thrift27::Struct1 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct1>::read(Protocol* proto,  ::example::thrift27::Struct1* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct1>::serializedSize(Protocol const* proto,  ::example::thrift27::Struct1 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct1>::serializedSizeZC(Protocol const* proto,  ::example::thrift27::Struct1 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift27 {

class Struct2 : private apache::thrift::detail::st::ComparisonOperators<Struct2> {
 public:

  Struct2() :
      field1(0),
      field2(0) {}
  // FragileConstructor for use in initialization lists only

  Struct2(apache::thrift::FragileConstructor, int32_t field1__arg, int16_t field2__arg,  ::example::thrift27::Struct0 field3__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }

  Struct2(Struct2&&) = default;

  Struct2(const Struct2&) = default;

  Struct2& operator=(Struct2&&) = default;

  Struct2& operator=(const Struct2&) = default;
  void __clear();

  virtual ~Struct2() {}

  int32_t field1;
  int16_t field2;
   ::example::thrift27::Struct0 field3;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
  } __isset;
  bool operator==(const Struct2& rhs) const;

  bool operator < (const Struct2& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    (void)rhs;
    return false;
  }

  int32_t get_field1() const {
    return field1;
  }

  int32_t& set_field1(int32_t field1_) {
    field1 = field1_;
    __isset.field1 = true;
    return field1;
  }

  int16_t get_field2() const {
    return field2;
  }

  int16_t& set_field2(int16_t field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }
  const  ::example::thrift27::Struct0& get_field3() const&;
   ::example::thrift27::Struct0 get_field3() &&;

  template <typename T_Struct2_field3_struct_setter>
   ::example::thrift27::Struct0& set_field3(T_Struct2_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct2_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct2& a, Struct2& b);
extern template uint32_t Struct2::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct2::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct2::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct2::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct2::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct2::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct2::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct2::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift27::Struct2>::clear( ::example::thrift27::Struct2* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift27::Struct2>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct2>::write(Protocol* proto,  ::example::thrift27::Struct2 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct2>::read(Protocol* proto,  ::example::thrift27::Struct2* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct2>::serializedSize(Protocol const* proto,  ::example::thrift27::Struct2 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct2>::serializedSizeZC(Protocol const* proto,  ::example::thrift27::Struct2 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift27 {

class Struct3 : private apache::thrift::detail::st::ComparisonOperators<Struct3> {
 public:

  Struct3() :
      field5(0),
      field7(0),
      field8(0),
      field15(0),
      field16(0),
      field17(0) {}
  // FragileConstructor for use in initialization lists only

  Struct3(apache::thrift::FragileConstructor, std::vector<std::string> field1__arg, std::string field2__arg, std::vector<std::vector<bool>> field3__arg, std::vector<std::string> field4__arg, double field5__arg, std::set<std::map<std::string, bool>> field6__arg, int64_t field7__arg, int64_t field8__arg,  ::example::thrift27::Struct1 field9__arg, std::vector<std::string> field10__arg, std::vector<std::string> field11__arg, std::vector<int16_t> field12__arg, std::string field13__arg, std::set<int64_t> field14__arg, float field15__arg, int32_t field16__arg, int32_t field17__arg, std::vector<float> field18__arg, std::vector<std::string> field19__arg, std::set<int64_t> field20__arg, std::set<std::set<bool>> field21__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }

  Struct3(Struct3&&) = default;

  Struct3(const Struct3&) = default;

  Struct3& operator=(Struct3&&) = default;

  Struct3& operator=(const Struct3&) = default;
  void __clear();

  virtual ~Struct3() {}

  std::vector<std::string> field1;
  std::string field2;
  std::vector<std::vector<bool>> field3;
  std::vector<std::string> field4;
  double field5;
  std::set<std::map<std::string, bool>> field6;
  int64_t field7;
  int64_t field8;
   ::example::thrift27::Struct1 field9;
  std::vector<std::string> field10;
  std::vector<std::string> field11;
  std::vector<int16_t> field12;
  std::string field13;
  std::set<int64_t> field14;
  float field15;
  int32_t field16;
  int32_t field17;
  std::vector<float> field18;
  std::vector<std::string> field19;
  std::set<int64_t> field20;
  std::set<std::set<bool>> field21;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
  } __isset;
  bool operator==(const Struct3& rhs) const;

  bool operator < (const Struct3& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    (void)rhs;
    return false;
  }
  const std::vector<std::string>& get_field1() const&;
  std::vector<std::string> get_field1() &&;

  template <typename T_Struct3_field1_struct_setter>
  std::vector<std::string>& set_field1(T_Struct3_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct3_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  const std::string& get_field2() const& {
    return field2;
  }

  std::string get_field2() && {
    return std::move(field2);
  }

  template <typename T_Struct3_field2_struct_setter>
  std::string& set_field2(T_Struct3_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct3_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const std::vector<std::vector<bool>>& get_field3() const&;
  std::vector<std::vector<bool>> get_field3() &&;

  template <typename T_Struct3_field3_struct_setter>
  std::vector<std::vector<bool>>& set_field3(T_Struct3_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct3_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }
  const std::vector<std::string>& get_field4() const&;
  std::vector<std::string> get_field4() &&;

  template <typename T_Struct3_field4_struct_setter>
  std::vector<std::string>& set_field4(T_Struct3_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct3_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }

  double get_field5() const {
    return field5;
  }

  double& set_field5(double field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }
  const std::set<std::map<std::string, bool>>& get_field6() const&;
  std::set<std::map<std::string, bool>> get_field6() &&;

  template <typename T_Struct3_field6_struct_setter>
  std::set<std::map<std::string, bool>>& set_field6(T_Struct3_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct3_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }

  int64_t get_field7() const {
    return field7;
  }

  int64_t& set_field7(int64_t field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }

  int64_t get_field8() const {
    return field8;
  }

  int64_t& set_field8(int64_t field8_) {
    field8 = field8_;
    __isset.field8 = true;
    return field8;
  }
  const  ::example::thrift27::Struct1& get_field9() const&;
   ::example::thrift27::Struct1 get_field9() &&;

  template <typename T_Struct3_field9_struct_setter>
   ::example::thrift27::Struct1& set_field9(T_Struct3_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct3_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }
  const std::vector<std::string>& get_field10() const&;
  std::vector<std::string> get_field10() &&;

  template <typename T_Struct3_field10_struct_setter>
  std::vector<std::string>& set_field10(T_Struct3_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct3_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }
  const std::vector<std::string>& get_field11() const&;
  std::vector<std::string> get_field11() &&;

  template <typename T_Struct3_field11_struct_setter>
  std::vector<std::string>& set_field11(T_Struct3_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct3_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }
  const std::vector<int16_t>& get_field12() const&;
  std::vector<int16_t> get_field12() &&;

  template <typename T_Struct3_field12_struct_setter>
  std::vector<int16_t>& set_field12(T_Struct3_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct3_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }

  const std::string& get_field13() const& {
    return field13;
  }

  std::string get_field13() && {
    return std::move(field13);
  }

  template <typename T_Struct3_field13_struct_setter>
  std::string& set_field13(T_Struct3_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct3_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }
  const std::set<int64_t>& get_field14() const&;
  std::set<int64_t> get_field14() &&;

  template <typename T_Struct3_field14_struct_setter>
  std::set<int64_t>& set_field14(T_Struct3_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct3_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }

  float get_field15() const {
    return field15;
  }

  float& set_field15(float field15_) {
    field15 = field15_;
    __isset.field15 = true;
    return field15;
  }

  int32_t get_field16() const {
    return field16;
  }

  int32_t& set_field16(int32_t field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }

  int32_t get_field17() const {
    return field17;
  }

  int32_t& set_field17(int32_t field17_) {
    field17 = field17_;
    __isset.field17 = true;
    return field17;
  }
  const std::vector<float>& get_field18() const&;
  std::vector<float> get_field18() &&;

  template <typename T_Struct3_field18_struct_setter>
  std::vector<float>& set_field18(T_Struct3_field18_struct_setter&& field18_) {
    field18 = std::forward<T_Struct3_field18_struct_setter>(field18_);
    __isset.field18 = true;
    return field18;
  }
  const std::vector<std::string>& get_field19() const&;
  std::vector<std::string> get_field19() &&;

  template <typename T_Struct3_field19_struct_setter>
  std::vector<std::string>& set_field19(T_Struct3_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct3_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }
  const std::set<int64_t>& get_field20() const&;
  std::set<int64_t> get_field20() &&;

  template <typename T_Struct3_field20_struct_setter>
  std::set<int64_t>& set_field20(T_Struct3_field20_struct_setter&& field20_) {
    field20 = std::forward<T_Struct3_field20_struct_setter>(field20_);
    __isset.field20 = true;
    return field20;
  }
  const std::set<std::set<bool>>& get_field21() const&;
  std::set<std::set<bool>> get_field21() &&;

  template <typename T_Struct3_field21_struct_setter>
  std::set<std::set<bool>>& set_field21(T_Struct3_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct3_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct3& a, Struct3& b);
extern template uint32_t Struct3::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct3::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct3::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct3::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct3::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct3::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct3::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct3::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift27::Struct3>::clear( ::example::thrift27::Struct3* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift27::Struct3>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct3>::write(Protocol* proto,  ::example::thrift27::Struct3 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct3>::read(Protocol* proto,  ::example::thrift27::Struct3* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct3>::serializedSize(Protocol const* proto,  ::example::thrift27::Struct3 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct3>::serializedSizeZC(Protocol const* proto,  ::example::thrift27::Struct3 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift27 {

class Struct4 : private apache::thrift::detail::st::ComparisonOperators<Struct4> {
 public:

  Struct4() {}
  // FragileConstructor for use in initialization lists only

  Struct4(apache::thrift::FragileConstructor, std::map<int16_t, int16_t> field1__arg) :
      field1(std::move(field1__arg)) {
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }

  Struct4(Struct4&&) = default;

  Struct4(const Struct4&) = default;

  Struct4& operator=(Struct4&&) = default;

  Struct4& operator=(const Struct4&) = default;
  void __clear();

  virtual ~Struct4() {}

  std::map<int16_t, int16_t> field1;

  struct __isset {
    void __clear() {
      field1 = false;
    }

    bool field1 = false;
  } __isset;
  bool operator==(const Struct4& rhs) const;

  bool operator < (const Struct4& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    (void)rhs;
    return false;
  }
  const std::map<int16_t, int16_t>& get_field1() const&;
  std::map<int16_t, int16_t> get_field1() &&;

  template <typename T_Struct4_field1_struct_setter>
  std::map<int16_t, int16_t>& set_field1(T_Struct4_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct4_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct4& a, Struct4& b);
extern template uint32_t Struct4::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct4::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct4::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct4::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct4::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct4::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct4::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct4::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift27::Struct4>::clear( ::example::thrift27::Struct4* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift27::Struct4>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct4>::write(Protocol* proto,  ::example::thrift27::Struct4 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct4>::read(Protocol* proto,  ::example::thrift27::Struct4* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct4>::serializedSize(Protocol const* proto,  ::example::thrift27::Struct4 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct4>::serializedSizeZC(Protocol const* proto,  ::example::thrift27::Struct4 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift27 {

class Struct5 : private apache::thrift::detail::st::ComparisonOperators<Struct5> {
 public:

  Struct5() :
      field2(0) {}
  // FragileConstructor for use in initialization lists only

  Struct5(apache::thrift::FragileConstructor,  ::example::thrift27::Struct1 field1__arg, int8_t field2__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }

  Struct5(Struct5&&) = default;

  Struct5(const Struct5&) = default;

  Struct5& operator=(Struct5&&) = default;

  Struct5& operator=(const Struct5&) = default;
  void __clear();

  virtual ~Struct5() {}

   ::example::thrift27::Struct1 field1;
  int8_t field2;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
    }

    bool field1 = false;
    bool field2 = false;
  } __isset;
  bool operator==(const Struct5& rhs) const;

  bool operator < (const Struct5& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    (void)rhs;
    return false;
  }
  const  ::example::thrift27::Struct1& get_field1() const&;
   ::example::thrift27::Struct1 get_field1() &&;

  template <typename T_Struct5_field1_struct_setter>
   ::example::thrift27::Struct1& set_field1(T_Struct5_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct5_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  int8_t get_field2() const {
    return field2;
  }

  int8_t& set_field2(int8_t field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct5& a, Struct5& b);
extern template uint32_t Struct5::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct5::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct5::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct5::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct5::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct5::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct5::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct5::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift27::Struct5>::clear( ::example::thrift27::Struct5* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift27::Struct5>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct5>::write(Protocol* proto,  ::example::thrift27::Struct5 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct5>::read(Protocol* proto,  ::example::thrift27::Struct5* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct5>::serializedSize(Protocol const* proto,  ::example::thrift27::Struct5 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct5>::serializedSizeZC(Protocol const* proto,  ::example::thrift27::Struct5 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift27 {

class Struct6 : private apache::thrift::detail::st::ComparisonOperators<Struct6> {
 public:

  Struct6() :
      field3(0),
      field4(0),
      field6(0) {}
  // FragileConstructor for use in initialization lists only

  Struct6(apache::thrift::FragileConstructor,  ::example::thrift27::Struct4 field1__arg, std::string field2__arg, int8_t field3__arg, int16_t field4__arg, std::set<std::vector<bool>> field5__arg, int16_t field6__arg, std::vector<int16_t> field7__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }

  Struct6(Struct6&&) = default;

  Struct6(const Struct6&) = default;

  Struct6& operator=(Struct6&&) = default;

  Struct6& operator=(const Struct6&) = default;
  void __clear();

  virtual ~Struct6() {}

   ::example::thrift27::Struct4 field1;
  std::string field2;
  int8_t field3;
  int16_t field4;
  std::set<std::vector<bool>> field5;
  int16_t field6;
  std::vector<int16_t> field7;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
  } __isset;
  bool operator==(const Struct6& rhs) const;

  bool operator < (const Struct6& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    (void)rhs;
    return false;
  }
  const  ::example::thrift27::Struct4& get_field1() const&;
   ::example::thrift27::Struct4 get_field1() &&;

  template <typename T_Struct6_field1_struct_setter>
   ::example::thrift27::Struct4& set_field1(T_Struct6_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct6_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  const std::string& get_field2() const& {
    return field2;
  }

  std::string get_field2() && {
    return std::move(field2);
  }

  template <typename T_Struct6_field2_struct_setter>
  std::string& set_field2(T_Struct6_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct6_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  int8_t get_field3() const {
    return field3;
  }

  int8_t& set_field3(int8_t field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }

  int16_t get_field4() const {
    return field4;
  }

  int16_t& set_field4(int16_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }
  const std::set<std::vector<bool>>& get_field5() const&;
  std::set<std::vector<bool>> get_field5() &&;

  template <typename T_Struct6_field5_struct_setter>
  std::set<std::vector<bool>>& set_field5(T_Struct6_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct6_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }

  int16_t get_field6() const {
    return field6;
  }

  int16_t& set_field6(int16_t field6_) {
    field6 = field6_;
    __isset.field6 = true;
    return field6;
  }
  const std::vector<int16_t>& get_field7() const&;
  std::vector<int16_t> get_field7() &&;

  template <typename T_Struct6_field7_struct_setter>
  std::vector<int16_t>& set_field7(T_Struct6_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct6_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct6& a, Struct6& b);
extern template uint32_t Struct6::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct6::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct6::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct6::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct6::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct6::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct6::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct6::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift27::Struct6>::clear( ::example::thrift27::Struct6* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift27::Struct6>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct6>::write(Protocol* proto,  ::example::thrift27::Struct6 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct6>::read(Protocol* proto,  ::example::thrift27::Struct6* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct6>::serializedSize(Protocol const* proto,  ::example::thrift27::Struct6 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct6>::serializedSizeZC(Protocol const* proto,  ::example::thrift27::Struct6 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift27 {

class Struct7 : private apache::thrift::detail::st::ComparisonOperators<Struct7> {
 public:

  Struct7() {}
  // FragileConstructor for use in initialization lists only

  Struct7(apache::thrift::FragileConstructor, std::string field1__arg,  ::example::thrift27::Struct1 field2__arg,  ::example::thrift27::Struct5 field3__arg,  ::example::thrift27::Struct6 field4__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }

  Struct7(Struct7&&) = default;

  Struct7(const Struct7&) = default;

  Struct7& operator=(Struct7&&) = default;

  Struct7& operator=(const Struct7&) = default;
  void __clear();

  virtual ~Struct7() {}

  std::string field1;
   ::example::thrift27::Struct1 field2;
   ::example::thrift27::Struct5 field3;
   ::example::thrift27::Struct6 field4;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
  } __isset;
  bool operator==(const Struct7& rhs) const;

  bool operator < (const Struct7& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    (void)rhs;
    return false;
  }

  const std::string& get_field1() const& {
    return field1;
  }

  std::string get_field1() && {
    return std::move(field1);
  }

  template <typename T_Struct7_field1_struct_setter>
  std::string& set_field1(T_Struct7_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct7_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const  ::example::thrift27::Struct1& get_field2() const&;
   ::example::thrift27::Struct1 get_field2() &&;

  template <typename T_Struct7_field2_struct_setter>
   ::example::thrift27::Struct1& set_field2(T_Struct7_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct7_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const  ::example::thrift27::Struct5& get_field3() const&;
   ::example::thrift27::Struct5 get_field3() &&;

  template <typename T_Struct7_field3_struct_setter>
   ::example::thrift27::Struct5& set_field3(T_Struct7_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct7_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }
  const  ::example::thrift27::Struct6& get_field4() const&;
   ::example::thrift27::Struct6 get_field4() &&;

  template <typename T_Struct7_field4_struct_setter>
   ::example::thrift27::Struct6& set_field4(T_Struct7_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct7_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct7& a, Struct7& b);
extern template uint32_t Struct7::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct7::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct7::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct7::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct7::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct7::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct7::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct7::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift27::Struct7>::clear( ::example::thrift27::Struct7* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift27::Struct7>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct7>::write(Protocol* proto,  ::example::thrift27::Struct7 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct7>::read(Protocol* proto,  ::example::thrift27::Struct7* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct7>::serializedSize(Protocol const* proto,  ::example::thrift27::Struct7 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct7>::serializedSizeZC(Protocol const* proto,  ::example::thrift27::Struct7 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift27 {

class Struct8 : private apache::thrift::detail::st::ComparisonOperators<Struct8> {
 public:

  Struct8() :
      field3(0),
      field6(0),
      field7(0) {}
  // FragileConstructor for use in initialization lists only

  Struct8(apache::thrift::FragileConstructor, std::map<int8_t, bool> field1__arg, std::set<std::string> field2__arg, int8_t field3__arg,  ::example::thrift27::Struct3 field4__arg, std::vector< ::example::thrift27::Struct1> field5__arg, int32_t field6__arg, int8_t field7__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }

  Struct8(Struct8&&) = default;

  Struct8(const Struct8&) = default;

  Struct8& operator=(Struct8&&) = default;

  Struct8& operator=(const Struct8&) = default;
  void __clear();

  virtual ~Struct8() {}

  std::map<int8_t, bool> field1;
  std::set<std::string> field2;
  int8_t field3;
   ::example::thrift27::Struct3 field4;
  std::vector< ::example::thrift27::Struct1> field5;
  int32_t field6;
  int8_t field7;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
  } __isset;
  bool operator==(const Struct8& rhs) const;

  bool operator < (const Struct8& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    (void)rhs;
    return false;
  }
  const std::map<int8_t, bool>& get_field1() const&;
  std::map<int8_t, bool> get_field1() &&;

  template <typename T_Struct8_field1_struct_setter>
  std::map<int8_t, bool>& set_field1(T_Struct8_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct8_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const std::set<std::string>& get_field2() const&;
  std::set<std::string> get_field2() &&;

  template <typename T_Struct8_field2_struct_setter>
  std::set<std::string>& set_field2(T_Struct8_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct8_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  int8_t get_field3() const {
    return field3;
  }

  int8_t& set_field3(int8_t field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }
  const  ::example::thrift27::Struct3& get_field4() const&;
   ::example::thrift27::Struct3 get_field4() &&;

  template <typename T_Struct8_field4_struct_setter>
   ::example::thrift27::Struct3& set_field4(T_Struct8_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct8_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }
  const std::vector< ::example::thrift27::Struct1>& get_field5() const&;
  std::vector< ::example::thrift27::Struct1> get_field5() &&;

  template <typename T_Struct8_field5_struct_setter>
  std::vector< ::example::thrift27::Struct1>& set_field5(T_Struct8_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct8_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }

  int32_t get_field6() const {
    return field6;
  }

  int32_t& set_field6(int32_t field6_) {
    field6 = field6_;
    __isset.field6 = true;
    return field6;
  }

  int8_t get_field7() const {
    return field7;
  }

  int8_t& set_field7(int8_t field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct8& a, Struct8& b);
extern template uint32_t Struct8::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct8::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct8::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct8::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct8::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct8::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct8::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct8::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift27::Struct8>::clear( ::example::thrift27::Struct8* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift27::Struct8>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct8>::write(Protocol* proto,  ::example::thrift27::Struct8 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct8>::read(Protocol* proto,  ::example::thrift27::Struct8* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct8>::serializedSize(Protocol const* proto,  ::example::thrift27::Struct8 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct8>::serializedSizeZC(Protocol const* proto,  ::example::thrift27::Struct8 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift27 {

class Struct9 : private apache::thrift::detail::st::ComparisonOperators<Struct9> {
 public:

  Struct9() :
      field1(0) {}
  // FragileConstructor for use in initialization lists only

  Struct9(apache::thrift::FragileConstructor, double field1__arg,  ::example::thrift27::Struct1 field2__arg, std::vector<int16_t> field3__arg, std::vector<int8_t> field4__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }

  Struct9(Struct9&&) = default;

  Struct9(const Struct9&) = default;

  Struct9& operator=(Struct9&&) = default;

  Struct9& operator=(const Struct9&) = default;
  void __clear();

  virtual ~Struct9() {}

  double field1;
   ::example::thrift27::Struct1 field2;
  std::vector<int16_t> field3;
  std::vector<int8_t> field4;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
  } __isset;
  bool operator==(const Struct9& rhs) const;

  bool operator < (const Struct9& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    (void)rhs;
    return false;
  }

  double get_field1() const {
    return field1;
  }

  double& set_field1(double field1_) {
    field1 = field1_;
    __isset.field1 = true;
    return field1;
  }
  const  ::example::thrift27::Struct1& get_field2() const&;
   ::example::thrift27::Struct1 get_field2() &&;

  template <typename T_Struct9_field2_struct_setter>
   ::example::thrift27::Struct1& set_field2(T_Struct9_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct9_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const std::vector<int16_t>& get_field3() const&;
  std::vector<int16_t> get_field3() &&;

  template <typename T_Struct9_field3_struct_setter>
  std::vector<int16_t>& set_field3(T_Struct9_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct9_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }
  const std::vector<int8_t>& get_field4() const&;
  std::vector<int8_t> get_field4() &&;

  template <typename T_Struct9_field4_struct_setter>
  std::vector<int8_t>& set_field4(T_Struct9_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct9_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct9& a, Struct9& b);
extern template uint32_t Struct9::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct9::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct9::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct9::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct9::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct9::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct9::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct9::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift27::Struct9>::clear( ::example::thrift27::Struct9* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift27::Struct9>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct9>::write(Protocol* proto,  ::example::thrift27::Struct9 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct9>::read(Protocol* proto,  ::example::thrift27::Struct9* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct9>::serializedSize(Protocol const* proto,  ::example::thrift27::Struct9 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct9>::serializedSizeZC(Protocol const* proto,  ::example::thrift27::Struct9 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift27 {

class Struct10 : private apache::thrift::detail::st::ComparisonOperators<Struct10> {
 public:

  Struct10() :
      field5(0),
      field11(0),
      field18(0),
      field20(0),
      field21(0),
      field22(0),
      field27(0),
      field34(0) {}
  // FragileConstructor for use in initialization lists only

  Struct10(apache::thrift::FragileConstructor, std::set<float> field1__arg,  ::example::thrift27::Struct5 field2__arg,  ::example::thrift27::Struct8 field3__arg, std::string field4__arg, int16_t field5__arg, std::string field6__arg, std::map<std::map<std::string, double>, int64_t> field7__arg, std::vector<float> field8__arg, std::string field9__arg, std::map<bool, int8_t> field10__arg, bool field11__arg, std::set<bool> field12__arg, std::vector<std::map< ::example::thrift27::Struct2, int32_t>> field13__arg, std::vector<std::string> field14__arg, std::map<int64_t, std::string> field15__arg, std::string field16__arg, std::set<double> field17__arg, int64_t field18__arg, std::set< ::example::thrift27::Struct2> field19__arg, int32_t field20__arg, int64_t field21__arg, float field22__arg, std::map<std::map<float, float>, int32_t> field23__arg,  ::example::thrift27::Struct1 field24__arg,  ::example::thrift27::Struct5 field25__arg, std::string field26__arg, int64_t field27__arg, std::set<int8_t> field28__arg, std::vector<int16_t> field29__arg, std::vector<std::set<std::string>> field30__arg, std::set<float> field31__arg, std::string field32__arg, std::string field33__arg, bool field34__arg, std::map<int8_t, float> field35__arg, std::set<std::string> field36__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }

  Struct10(Struct10&&) = default;

  Struct10(const Struct10&) = default;

  Struct10& operator=(Struct10&&) = default;

  Struct10& operator=(const Struct10&) = default;
  void __clear();

  virtual ~Struct10() {}

  std::set<float> field1;
   ::example::thrift27::Struct5 field2;
   ::example::thrift27::Struct8 field3;
  std::string field4;
  int16_t field5;
  std::string field6;
  std::map<std::map<std::string, double>, int64_t> field7;
  std::vector<float> field8;
  std::string field9;
  std::map<bool, int8_t> field10;
  bool field11;
  std::set<bool> field12;
  std::vector<std::map< ::example::thrift27::Struct2, int32_t>> field13;
  std::vector<std::string> field14;
  std::map<int64_t, std::string> field15;
  std::string field16;
  std::set<double> field17;
  int64_t field18;
  std::set< ::example::thrift27::Struct2> field19;
  int32_t field20;
  int64_t field21;
  float field22;
  std::map<std::map<float, float>, int32_t> field23;
   ::example::thrift27::Struct1 field24;
   ::example::thrift27::Struct5 field25;
  std::string field26;
  int64_t field27;
  std::set<int8_t> field28;
  std::vector<int16_t> field29;
  std::vector<std::set<std::string>> field30;
  std::set<float> field31;
  std::string field32;
  std::string field33;
  bool field34;
  std::map<int8_t, float> field35;
  std::set<std::string> field36;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
  } __isset;
  bool operator==(const Struct10& rhs) const;

  bool operator < (const Struct10& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    (void)rhs;
    return false;
  }
  const std::set<float>& get_field1() const&;
  std::set<float> get_field1() &&;

  template <typename T_Struct10_field1_struct_setter>
  std::set<float>& set_field1(T_Struct10_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct10_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const  ::example::thrift27::Struct5& get_field2() const&;
   ::example::thrift27::Struct5 get_field2() &&;

  template <typename T_Struct10_field2_struct_setter>
   ::example::thrift27::Struct5& set_field2(T_Struct10_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct10_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const  ::example::thrift27::Struct8& get_field3() const&;
   ::example::thrift27::Struct8 get_field3() &&;

  template <typename T_Struct10_field3_struct_setter>
   ::example::thrift27::Struct8& set_field3(T_Struct10_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct10_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  const std::string& get_field4() const& {
    return field4;
  }

  std::string get_field4() && {
    return std::move(field4);
  }

  template <typename T_Struct10_field4_struct_setter>
  std::string& set_field4(T_Struct10_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct10_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }

  int16_t get_field5() const {
    return field5;
  }

  int16_t& set_field5(int16_t field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }

  const std::string& get_field6() const& {
    return field6;
  }

  std::string get_field6() && {
    return std::move(field6);
  }

  template <typename T_Struct10_field6_struct_setter>
  std::string& set_field6(T_Struct10_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct10_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }
  const std::map<std::map<std::string, double>, int64_t>& get_field7() const&;
  std::map<std::map<std::string, double>, int64_t> get_field7() &&;

  template <typename T_Struct10_field7_struct_setter>
  std::map<std::map<std::string, double>, int64_t>& set_field7(T_Struct10_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct10_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }
  const std::vector<float>& get_field8() const&;
  std::vector<float> get_field8() &&;

  template <typename T_Struct10_field8_struct_setter>
  std::vector<float>& set_field8(T_Struct10_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct10_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }

  const std::string& get_field9() const& {
    return field9;
  }

  std::string get_field9() && {
    return std::move(field9);
  }

  template <typename T_Struct10_field9_struct_setter>
  std::string& set_field9(T_Struct10_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct10_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }
  const std::map<bool, int8_t>& get_field10() const&;
  std::map<bool, int8_t> get_field10() &&;

  template <typename T_Struct10_field10_struct_setter>
  std::map<bool, int8_t>& set_field10(T_Struct10_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct10_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }

  bool get_field11() const {
    return field11;
  }

  bool& set_field11(bool field11_) {
    field11 = field11_;
    __isset.field11 = true;
    return field11;
  }
  const std::set<bool>& get_field12() const&;
  std::set<bool> get_field12() &&;

  template <typename T_Struct10_field12_struct_setter>
  std::set<bool>& set_field12(T_Struct10_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct10_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }
  const std::vector<std::map< ::example::thrift27::Struct2, int32_t>>& get_field13() const&;
  std::vector<std::map< ::example::thrift27::Struct2, int32_t>> get_field13() &&;

  template <typename T_Struct10_field13_struct_setter>
  std::vector<std::map< ::example::thrift27::Struct2, int32_t>>& set_field13(T_Struct10_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct10_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }
  const std::vector<std::string>& get_field14() const&;
  std::vector<std::string> get_field14() &&;

  template <typename T_Struct10_field14_struct_setter>
  std::vector<std::string>& set_field14(T_Struct10_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct10_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }
  const std::map<int64_t, std::string>& get_field15() const&;
  std::map<int64_t, std::string> get_field15() &&;

  template <typename T_Struct10_field15_struct_setter>
  std::map<int64_t, std::string>& set_field15(T_Struct10_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct10_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }

  const std::string& get_field16() const& {
    return field16;
  }

  std::string get_field16() && {
    return std::move(field16);
  }

  template <typename T_Struct10_field16_struct_setter>
  std::string& set_field16(T_Struct10_field16_struct_setter&& field16_) {
    field16 = std::forward<T_Struct10_field16_struct_setter>(field16_);
    __isset.field16 = true;
    return field16;
  }
  const std::set<double>& get_field17() const&;
  std::set<double> get_field17() &&;

  template <typename T_Struct10_field17_struct_setter>
  std::set<double>& set_field17(T_Struct10_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct10_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }

  int64_t get_field18() const {
    return field18;
  }

  int64_t& set_field18(int64_t field18_) {
    field18 = field18_;
    __isset.field18 = true;
    return field18;
  }
  const std::set< ::example::thrift27::Struct2>& get_field19() const&;
  std::set< ::example::thrift27::Struct2> get_field19() &&;

  template <typename T_Struct10_field19_struct_setter>
  std::set< ::example::thrift27::Struct2>& set_field19(T_Struct10_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct10_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }

  int32_t get_field20() const {
    return field20;
  }

  int32_t& set_field20(int32_t field20_) {
    field20 = field20_;
    __isset.field20 = true;
    return field20;
  }

  int64_t get_field21() const {
    return field21;
  }

  int64_t& set_field21(int64_t field21_) {
    field21 = field21_;
    __isset.field21 = true;
    return field21;
  }

  float get_field22() const {
    return field22;
  }

  float& set_field22(float field22_) {
    field22 = field22_;
    __isset.field22 = true;
    return field22;
  }
  const std::map<std::map<float, float>, int32_t>& get_field23() const&;
  std::map<std::map<float, float>, int32_t> get_field23() &&;

  template <typename T_Struct10_field23_struct_setter>
  std::map<std::map<float, float>, int32_t>& set_field23(T_Struct10_field23_struct_setter&& field23_) {
    field23 = std::forward<T_Struct10_field23_struct_setter>(field23_);
    __isset.field23 = true;
    return field23;
  }
  const  ::example::thrift27::Struct1& get_field24() const&;
   ::example::thrift27::Struct1 get_field24() &&;

  template <typename T_Struct10_field24_struct_setter>
   ::example::thrift27::Struct1& set_field24(T_Struct10_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct10_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }
  const  ::example::thrift27::Struct5& get_field25() const&;
   ::example::thrift27::Struct5 get_field25() &&;

  template <typename T_Struct10_field25_struct_setter>
   ::example::thrift27::Struct5& set_field25(T_Struct10_field25_struct_setter&& field25_) {
    field25 = std::forward<T_Struct10_field25_struct_setter>(field25_);
    __isset.field25 = true;
    return field25;
  }

  const std::string& get_field26() const& {
    return field26;
  }

  std::string get_field26() && {
    return std::move(field26);
  }

  template <typename T_Struct10_field26_struct_setter>
  std::string& set_field26(T_Struct10_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct10_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }

  int64_t get_field27() const {
    return field27;
  }

  int64_t& set_field27(int64_t field27_) {
    field27 = field27_;
    __isset.field27 = true;
    return field27;
  }
  const std::set<int8_t>& get_field28() const&;
  std::set<int8_t> get_field28() &&;

  template <typename T_Struct10_field28_struct_setter>
  std::set<int8_t>& set_field28(T_Struct10_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct10_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }
  const std::vector<int16_t>& get_field29() const&;
  std::vector<int16_t> get_field29() &&;

  template <typename T_Struct10_field29_struct_setter>
  std::vector<int16_t>& set_field29(T_Struct10_field29_struct_setter&& field29_) {
    field29 = std::forward<T_Struct10_field29_struct_setter>(field29_);
    __isset.field29 = true;
    return field29;
  }
  const std::vector<std::set<std::string>>& get_field30() const&;
  std::vector<std::set<std::string>> get_field30() &&;

  template <typename T_Struct10_field30_struct_setter>
  std::vector<std::set<std::string>>& set_field30(T_Struct10_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct10_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }
  const std::set<float>& get_field31() const&;
  std::set<float> get_field31() &&;

  template <typename T_Struct10_field31_struct_setter>
  std::set<float>& set_field31(T_Struct10_field31_struct_setter&& field31_) {
    field31 = std::forward<T_Struct10_field31_struct_setter>(field31_);
    __isset.field31 = true;
    return field31;
  }

  const std::string& get_field32() const& {
    return field32;
  }

  std::string get_field32() && {
    return std::move(field32);
  }

  template <typename T_Struct10_field32_struct_setter>
  std::string& set_field32(T_Struct10_field32_struct_setter&& field32_) {
    field32 = std::forward<T_Struct10_field32_struct_setter>(field32_);
    __isset.field32 = true;
    return field32;
  }

  const std::string& get_field33() const& {
    return field33;
  }

  std::string get_field33() && {
    return std::move(field33);
  }

  template <typename T_Struct10_field33_struct_setter>
  std::string& set_field33(T_Struct10_field33_struct_setter&& field33_) {
    field33 = std::forward<T_Struct10_field33_struct_setter>(field33_);
    __isset.field33 = true;
    return field33;
  }

  bool get_field34() const {
    return field34;
  }

  bool& set_field34(bool field34_) {
    field34 = field34_;
    __isset.field34 = true;
    return field34;
  }
  const std::map<int8_t, float>& get_field35() const&;
  std::map<int8_t, float> get_field35() &&;

  template <typename T_Struct10_field35_struct_setter>
  std::map<int8_t, float>& set_field35(T_Struct10_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct10_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }
  const std::set<std::string>& get_field36() const&;
  std::set<std::string> get_field36() &&;

  template <typename T_Struct10_field36_struct_setter>
  std::set<std::string>& set_field36(T_Struct10_field36_struct_setter&& field36_) {
    field36 = std::forward<T_Struct10_field36_struct_setter>(field36_);
    __isset.field36 = true;
    return field36;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct10& a, Struct10& b);
extern template uint32_t Struct10::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct10::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct10::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct10::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct10::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct10::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct10::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct10::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift27::Struct10>::clear( ::example::thrift27::Struct10* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift27::Struct10>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct10>::write(Protocol* proto,  ::example::thrift27::Struct10 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct10>::read(Protocol* proto,  ::example::thrift27::Struct10* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct10>::serializedSize(Protocol const* proto,  ::example::thrift27::Struct10 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct10>::serializedSizeZC(Protocol const* proto,  ::example::thrift27::Struct10 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift27 {

class Struct11 : private apache::thrift::detail::st::ComparisonOperators<Struct11> {
 public:

  Struct11() :
      field1(0),
      field3(0),
      field4(0) {}
  // FragileConstructor for use in initialization lists only

  Struct11(apache::thrift::FragileConstructor, double field1__arg, std::string field2__arg, int32_t field3__arg, bool field4__arg, std::string field5__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }

  Struct11(Struct11&&) = default;

  Struct11(const Struct11&) = default;

  Struct11& operator=(Struct11&&) = default;

  Struct11& operator=(const Struct11&) = default;
  void __clear();

  virtual ~Struct11() {}

  double field1;
  std::string field2;
  int32_t field3;
  bool field4;
  std::string field5;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
  } __isset;
  bool operator==(const Struct11& rhs) const;

  bool operator < (const Struct11& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    (void)rhs;
    return false;
  }

  double get_field1() const {
    return field1;
  }

  double& set_field1(double field1_) {
    field1 = field1_;
    __isset.field1 = true;
    return field1;
  }

  const std::string& get_field2() const& {
    return field2;
  }

  std::string get_field2() && {
    return std::move(field2);
  }

  template <typename T_Struct11_field2_struct_setter>
  std::string& set_field2(T_Struct11_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct11_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  int32_t get_field3() const {
    return field3;
  }

  int32_t& set_field3(int32_t field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }

  bool get_field4() const {
    return field4;
  }

  bool& set_field4(bool field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }

  const std::string& get_field5() const& {
    return field5;
  }

  std::string get_field5() && {
    return std::move(field5);
  }

  template <typename T_Struct11_field5_struct_setter>
  std::string& set_field5(T_Struct11_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct11_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct11& a, Struct11& b);
extern template uint32_t Struct11::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct11::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct11::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct11::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct11::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct11::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct11::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct11::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift27::Struct11>::clear( ::example::thrift27::Struct11* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift27::Struct11>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct11>::write(Protocol* proto,  ::example::thrift27::Struct11 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct11>::read(Protocol* proto,  ::example::thrift27::Struct11* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct11>::serializedSize(Protocol const* proto,  ::example::thrift27::Struct11 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct11>::serializedSizeZC(Protocol const* proto,  ::example::thrift27::Struct11 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift27 {

class Struct12 : private apache::thrift::detail::st::ComparisonOperators<Struct12> {
 public:

  Struct12() :
      field2(0),
      field5(0),
      field7(0) {}
  // FragileConstructor for use in initialization lists only

  Struct12(apache::thrift::FragileConstructor, std::set<float> field1__arg, int8_t field2__arg, std::string field3__arg, std::map<int64_t, int64_t> field4__arg, int16_t field5__arg, std::string field6__arg, float field7__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }

  Struct12(Struct12&&) = default;

  Struct12(const Struct12&) = default;

  Struct12& operator=(Struct12&&) = default;

  Struct12& operator=(const Struct12&) = default;
  void __clear();

  virtual ~Struct12() {}

  std::set<float> field1;
  int8_t field2;
  std::string field3;
  std::map<int64_t, int64_t> field4;
  int16_t field5;
  std::string field6;
  float field7;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
  } __isset;
  bool operator==(const Struct12& rhs) const;

  bool operator < (const Struct12& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    (void)rhs;
    return false;
  }
  const std::set<float>& get_field1() const&;
  std::set<float> get_field1() &&;

  template <typename T_Struct12_field1_struct_setter>
  std::set<float>& set_field1(T_Struct12_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct12_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  int8_t get_field2() const {
    return field2;
  }

  int8_t& set_field2(int8_t field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }

  const std::string& get_field3() const& {
    return field3;
  }

  std::string get_field3() && {
    return std::move(field3);
  }

  template <typename T_Struct12_field3_struct_setter>
  std::string& set_field3(T_Struct12_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct12_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }
  const std::map<int64_t, int64_t>& get_field4() const&;
  std::map<int64_t, int64_t> get_field4() &&;

  template <typename T_Struct12_field4_struct_setter>
  std::map<int64_t, int64_t>& set_field4(T_Struct12_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct12_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }

  int16_t get_field5() const {
    return field5;
  }

  int16_t& set_field5(int16_t field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }

  const std::string& get_field6() const& {
    return field6;
  }

  std::string get_field6() && {
    return std::move(field6);
  }

  template <typename T_Struct12_field6_struct_setter>
  std::string& set_field6(T_Struct12_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct12_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }

  float get_field7() const {
    return field7;
  }

  float& set_field7(float field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct12& a, Struct12& b);
extern template uint32_t Struct12::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct12::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct12::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct12::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct12::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct12::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct12::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct12::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift27::Struct12>::clear( ::example::thrift27::Struct12* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift27::Struct12>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct12>::write(Protocol* proto,  ::example::thrift27::Struct12 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct12>::read(Protocol* proto,  ::example::thrift27::Struct12* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct12>::serializedSize(Protocol const* proto,  ::example::thrift27::Struct12 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct12>::serializedSizeZC(Protocol const* proto,  ::example::thrift27::Struct12 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift27 {

class Struct13 : private apache::thrift::detail::st::ComparisonOperators<Struct13> {
 public:

  Struct13() :
      field1(0),
      field2(0),
      field5(0),
      field6(0),
      field7(0),
      field11(0) {}
  // FragileConstructor for use in initialization lists only

  Struct13(apache::thrift::FragileConstructor, float field1__arg, double field2__arg, std::string field3__arg,  ::example::thrift27::Struct2 field4__arg, int64_t field5__arg, double field6__arg, int16_t field7__arg, std::map<bool, int64_t> field8__arg, std::string field9__arg,  ::example::thrift27::Struct1 field10__arg, int32_t field11__arg,  ::example::thrift27::Struct6 field12__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }

  Struct13(Struct13&&) = default;

  Struct13(const Struct13&) = default;

  Struct13& operator=(Struct13&&) = default;

  Struct13& operator=(const Struct13&) = default;
  void __clear();

  virtual ~Struct13() {}

  float field1;
  double field2;
  std::string field3;
   ::example::thrift27::Struct2 field4;
  int64_t field5;
  double field6;
  int16_t field7;
  std::map<bool, int64_t> field8;
  std::string field9;
   ::example::thrift27::Struct1 field10;
  int32_t field11;
   ::example::thrift27::Struct6 field12;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
  } __isset;
  bool operator==(const Struct13& rhs) const;

  bool operator < (const Struct13& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    (void)rhs;
    return false;
  }

  float get_field1() const {
    return field1;
  }

  float& set_field1(float field1_) {
    field1 = field1_;
    __isset.field1 = true;
    return field1;
  }

  double get_field2() const {
    return field2;
  }

  double& set_field2(double field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }

  const std::string& get_field3() const& {
    return field3;
  }

  std::string get_field3() && {
    return std::move(field3);
  }

  template <typename T_Struct13_field3_struct_setter>
  std::string& set_field3(T_Struct13_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct13_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }
  const  ::example::thrift27::Struct2& get_field4() const&;
   ::example::thrift27::Struct2 get_field4() &&;

  template <typename T_Struct13_field4_struct_setter>
   ::example::thrift27::Struct2& set_field4(T_Struct13_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct13_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }

  int64_t get_field5() const {
    return field5;
  }

  int64_t& set_field5(int64_t field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }

  double get_field6() const {
    return field6;
  }

  double& set_field6(double field6_) {
    field6 = field6_;
    __isset.field6 = true;
    return field6;
  }

  int16_t get_field7() const {
    return field7;
  }

  int16_t& set_field7(int16_t field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }
  const std::map<bool, int64_t>& get_field8() const&;
  std::map<bool, int64_t> get_field8() &&;

  template <typename T_Struct13_field8_struct_setter>
  std::map<bool, int64_t>& set_field8(T_Struct13_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct13_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }

  const std::string& get_field9() const& {
    return field9;
  }

  std::string get_field9() && {
    return std::move(field9);
  }

  template <typename T_Struct13_field9_struct_setter>
  std::string& set_field9(T_Struct13_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct13_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }
  const  ::example::thrift27::Struct1& get_field10() const&;
   ::example::thrift27::Struct1 get_field10() &&;

  template <typename T_Struct13_field10_struct_setter>
   ::example::thrift27::Struct1& set_field10(T_Struct13_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct13_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }

  int32_t get_field11() const {
    return field11;
  }

  int32_t& set_field11(int32_t field11_) {
    field11 = field11_;
    __isset.field11 = true;
    return field11;
  }
  const  ::example::thrift27::Struct6& get_field12() const&;
   ::example::thrift27::Struct6 get_field12() &&;

  template <typename T_Struct13_field12_struct_setter>
   ::example::thrift27::Struct6& set_field12(T_Struct13_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct13_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct13& a, Struct13& b);
extern template uint32_t Struct13::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct13::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct13::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct13::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct13::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct13::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct13::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct13::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift27::Struct13>::clear( ::example::thrift27::Struct13* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift27::Struct13>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct13>::write(Protocol* proto,  ::example::thrift27::Struct13 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct13>::read(Protocol* proto,  ::example::thrift27::Struct13* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct13>::serializedSize(Protocol const* proto,  ::example::thrift27::Struct13 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift27::Struct13>::serializedSizeZC(Protocol const* proto,  ::example::thrift27::Struct13 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift27 {

}} // example::thrift27
