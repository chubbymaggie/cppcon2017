/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/Cursor.h>

#include <thrift/lib/cpp2/GeneratedHeaderHelper.h>
#include "file1_types.h"



namespace cpp2 {

class Struct28;

}// cpp2
namespace cpp2 {

class Struct28 : private apache::thrift::detail::st::ComparisonOperators<Struct28> {
 public:

  Struct28() :
      field4(0),
      field8(0),
      field10(0),
      field12(0),
      field16(0),
      field17(0),
      field18(0),
      field19(0),
      field20(0),
      field25(0),
      field31(0),
      field32(0),
      field33(0),
      field34(0),
      field36(0),
      field38(0),
      field41(0),
      field42(0),
      field43(0),
      field46(0),
      field48(0),
      field52(0),
      field53(0),
      field54(0),
      field58(0),
      field60(0),
      field63(0),
      field64(0),
      field65(0),
      field66(0),
      field67(0),
      field68(0),
      field71(0),
      field74(0),
      field85(0),
      field87(0),
      field90(0),
      field91(0),
      field94(0),
      field96(0),
      field97(0),
      field98(0),
      field102(0),
      field109(0),
      field114(0),
      field115(0),
      field119(0),
      field125(0),
      field126(0),
      field131(0),
      field133(0),
      field136(0),
      field137(0),
      field138(0),
      field140(0),
      field142(0),
      field143(0),
      field145(0),
      field147(0),
      field148(0),
      field149(0),
      field152(0),
      field154(0) {}
  // FragileConstructor for use in initialization lists only

  Struct28(apache::thrift::FragileConstructor, std::set<std::string> field1__arg, std::set< ::cpp2::Struct7> field2__arg, std::vector< ::cpp2::Struct11> field3__arg, int64_t field4__arg,  ::cpp2::Struct3 field5__arg, std::string field6__arg, std::vector<std::set<std::string>> field7__arg, int8_t field8__arg, std::string field9__arg, int64_t field10__arg, std::map<std::set< ::cpp2::Struct14>, int16_t> field11__arg, int64_t field12__arg, std::vector<int8_t> field13__arg, std::vector<float> field14__arg, std::vector<int32_t> field15__arg, bool field16__arg, int32_t field17__arg, float field18__arg, int16_t field19__arg, int16_t field20__arg, std::set<int16_t> field21__arg,  ::cpp2::Struct21 field22__arg, std::set<int32_t> field23__arg,  ::cpp2::Struct3 field24__arg, int64_t field25__arg, std::string field26__arg, std::vector<int64_t> field27__arg,  ::cpp2::Struct0 field28__arg,  ::cpp2::Struct2 field29__arg, std::vector<int16_t> field30__arg, int8_t field31__arg, int64_t field32__arg, int32_t field33__arg, int64_t field34__arg,  ::cpp2::Struct1 field35__arg, double field36__arg,  ::cpp2::Struct11 field37__arg, double field38__arg, std::set<int16_t> field39__arg,  ::cpp2::Struct6 field40__arg, int32_t field41__arg, int64_t field42__arg, float field43__arg,  ::cpp2::Struct10 field44__arg, std::vector<double> field45__arg, double field46__arg,  ::cpp2::Struct11 field47__arg, float field48__arg, std::map<int64_t, int32_t> field49__arg,  ::cpp2::Struct6 field50__arg, std::string field51__arg, bool field52__arg, int8_t field53__arg, int16_t field54__arg, std::vector<double> field55__arg,  ::cpp2::Struct23 field56__arg, std::set<int64_t> field57__arg, float field58__arg, std::map<std::vector<float>, int32_t> field59__arg, bool field60__arg, std::string field61__arg, std::vector<int64_t> field62__arg, int8_t field63__arg, int32_t field64__arg, int8_t field65__arg, float field66__arg, int8_t field67__arg, int64_t field68__arg, std::map<bool, int8_t> field69__arg, std::set<int64_t> field70__arg, double field71__arg, std::set<double> field72__arg, std::map<int8_t, std::map<std::vector<double>, int16_t>> field73__arg, int8_t field74__arg, std::map< ::cpp2::Struct13, bool> field75__arg, std::vector<std::vector<int32_t>> field76__arg, std::string field77__arg, std::map<bool, std::set<std::set<int16_t>>> field78__arg, std::map<bool, std::string> field79__arg, std::set<int16_t> field80__arg, std::string field81__arg, std::vector<std::vector<std::string>> field82__arg, std::string field83__arg, std::vector<int64_t> field84__arg, int16_t field85__arg, std::string field86__arg, int64_t field87__arg, std::set<std::map<std::string, bool>> field88__arg, std::string field89__arg, float field90__arg, int8_t field91__arg, std::string field92__arg, std::map< ::cpp2::Struct20, int32_t> field93__arg, float field94__arg, std::string field95__arg, int8_t field96__arg, bool field97__arg, double field98__arg, std::set< ::cpp2::Struct12> field99__arg, std::map<std::set<std::set<std::string>>, float> field100__arg, std::string field101__arg, int8_t field102__arg, std::string field103__arg,  ::cpp2::Struct13 field104__arg, std::string field105__arg,  ::cpp2::Struct5 field106__arg, std::map<int32_t, std::map<int16_t, double>> field107__arg, std::string field108__arg, int32_t field109__arg,  ::cpp2::Struct7 field110__arg,  ::cpp2::Struct9 field111__arg,  ::cpp2::Struct12 field112__arg, std::set<int16_t> field113__arg, float field114__arg, float field115__arg,  ::cpp2::Struct12 field116__arg, std::set<std::set<int8_t>> field117__arg,  ::cpp2::Struct1 field118__arg, bool field119__arg, std::string field120__arg,  ::cpp2::Struct12 field121__arg,  ::cpp2::Struct3 field122__arg, std::set<int32_t> field123__arg, std::string field124__arg, double field125__arg, double field126__arg, std::map<std::vector<int64_t>, bool> field127__arg,  ::cpp2::Struct25 field128__arg,  ::cpp2::Struct4 field129__arg, std::string field130__arg, bool field131__arg, std::set<std::string> field132__arg, int32_t field133__arg, std::map<std::string, std::map<int64_t, int16_t>> field134__arg, std::vector<std::string> field135__arg, double field136__arg, int8_t field137__arg, int8_t field138__arg, std::set<int16_t> field139__arg, int8_t field140__arg, std::map<int8_t, int8_t> field141__arg, bool field142__arg, bool field143__arg, std::string field144__arg, int32_t field145__arg, std::set< ::cpp2::Struct18> field146__arg, int16_t field147__arg, bool field148__arg, int32_t field149__arg, std::map<int8_t, std::string> field150__arg, std::map<std::string, bool> field151__arg, float field152__arg, std::set<int64_t> field153__arg, double field154__arg, std::vector<std::string> field155__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)),
      field97(std::move(field97__arg)),
      field98(std::move(field98__arg)),
      field99(std::move(field99__arg)),
      field100(std::move(field100__arg)),
      field101(std::move(field101__arg)),
      field102(std::move(field102__arg)),
      field103(std::move(field103__arg)),
      field104(std::move(field104__arg)),
      field105(std::move(field105__arg)),
      field106(std::move(field106__arg)),
      field107(std::move(field107__arg)),
      field108(std::move(field108__arg)),
      field109(std::move(field109__arg)),
      field110(std::move(field110__arg)),
      field111(std::move(field111__arg)),
      field112(std::move(field112__arg)),
      field113(std::move(field113__arg)),
      field114(std::move(field114__arg)),
      field115(std::move(field115__arg)),
      field116(std::move(field116__arg)),
      field117(std::move(field117__arg)),
      field118(std::move(field118__arg)),
      field119(std::move(field119__arg)),
      field120(std::move(field120__arg)),
      field121(std::move(field121__arg)),
      field122(std::move(field122__arg)),
      field123(std::move(field123__arg)),
      field124(std::move(field124__arg)),
      field125(std::move(field125__arg)),
      field126(std::move(field126__arg)),
      field127(std::move(field127__arg)),
      field128(std::move(field128__arg)),
      field129(std::move(field129__arg)),
      field130(std::move(field130__arg)),
      field131(std::move(field131__arg)),
      field132(std::move(field132__arg)),
      field133(std::move(field133__arg)),
      field134(std::move(field134__arg)),
      field135(std::move(field135__arg)),
      field136(std::move(field136__arg)),
      field137(std::move(field137__arg)),
      field138(std::move(field138__arg)),
      field139(std::move(field139__arg)),
      field140(std::move(field140__arg)),
      field141(std::move(field141__arg)),
      field142(std::move(field142__arg)),
      field143(std::move(field143__arg)),
      field144(std::move(field144__arg)),
      field145(std::move(field145__arg)),
      field146(std::move(field146__arg)),
      field147(std::move(field147__arg)),
      field148(std::move(field148__arg)),
      field149(std::move(field149__arg)),
      field150(std::move(field150__arg)),
      field151(std::move(field151__arg)),
      field152(std::move(field152__arg)),
      field153(std::move(field153__arg)),
      field154(std::move(field154__arg)),
      field155(std::move(field155__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
    __isset.field97 = true;
    __isset.field98 = true;
    __isset.field99 = true;
    __isset.field100 = true;
    __isset.field101 = true;
    __isset.field102 = true;
    __isset.field103 = true;
    __isset.field104 = true;
    __isset.field105 = true;
    __isset.field106 = true;
    __isset.field107 = true;
    __isset.field108 = true;
    __isset.field109 = true;
    __isset.field110 = true;
    __isset.field111 = true;
    __isset.field112 = true;
    __isset.field113 = true;
    __isset.field114 = true;
    __isset.field115 = true;
    __isset.field116 = true;
    __isset.field117 = true;
    __isset.field118 = true;
    __isset.field119 = true;
    __isset.field120 = true;
    __isset.field121 = true;
    __isset.field122 = true;
    __isset.field123 = true;
    __isset.field124 = true;
    __isset.field125 = true;
    __isset.field126 = true;
    __isset.field127 = true;
    __isset.field128 = true;
    __isset.field129 = true;
    __isset.field130 = true;
    __isset.field131 = true;
    __isset.field132 = true;
    __isset.field133 = true;
    __isset.field134 = true;
    __isset.field135 = true;
    __isset.field136 = true;
    __isset.field137 = true;
    __isset.field138 = true;
    __isset.field139 = true;
    __isset.field140 = true;
    __isset.field141 = true;
    __isset.field142 = true;
    __isset.field143 = true;
    __isset.field144 = true;
    __isset.field145 = true;
    __isset.field146 = true;
    __isset.field147 = true;
    __isset.field148 = true;
    __isset.field149 = true;
    __isset.field150 = true;
    __isset.field151 = true;
    __isset.field152 = true;
    __isset.field153 = true;
    __isset.field154 = true;
    __isset.field155 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<97, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field97 = arg.move();
    __isset.field97 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<98, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field98 = arg.move();
    __isset.field98 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<99, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field99 = arg.move();
    __isset.field99 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field100 = arg.move();
    __isset.field100 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field101 = arg.move();
    __isset.field101 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<102, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field102 = arg.move();
    __isset.field102 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<103, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field103 = arg.move();
    __isset.field103 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<104, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field104 = arg.move();
    __isset.field104 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<105, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field105 = arg.move();
    __isset.field105 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<106, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field106 = arg.move();
    __isset.field106 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<107, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field107 = arg.move();
    __isset.field107 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<108, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field108 = arg.move();
    __isset.field108 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<109, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field109 = arg.move();
    __isset.field109 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<110, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field110 = arg.move();
    __isset.field110 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<111, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field111 = arg.move();
    __isset.field111 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<112, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field112 = arg.move();
    __isset.field112 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<113, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field113 = arg.move();
    __isset.field113 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<114, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field114 = arg.move();
    __isset.field114 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<115, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field115 = arg.move();
    __isset.field115 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<116, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field116 = arg.move();
    __isset.field116 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<117, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field117 = arg.move();
    __isset.field117 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<118, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field118 = arg.move();
    __isset.field118 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<119, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field119 = arg.move();
    __isset.field119 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<120, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field120 = arg.move();
    __isset.field120 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<121, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field121 = arg.move();
    __isset.field121 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<122, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field122 = arg.move();
    __isset.field122 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<123, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field123 = arg.move();
    __isset.field123 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<124, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field124 = arg.move();
    __isset.field124 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<125, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field125 = arg.move();
    __isset.field125 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<126, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field126 = arg.move();
    __isset.field126 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<127, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field127 = arg.move();
    __isset.field127 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<128, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field128 = arg.move();
    __isset.field128 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<129, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field129 = arg.move();
    __isset.field129 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<130, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field130 = arg.move();
    __isset.field130 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<131, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field131 = arg.move();
    __isset.field131 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<132, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field132 = arg.move();
    __isset.field132 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<133, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field133 = arg.move();
    __isset.field133 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<134, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field134 = arg.move();
    __isset.field134 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<135, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field135 = arg.move();
    __isset.field135 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<136, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field136 = arg.move();
    __isset.field136 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<137, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field137 = arg.move();
    __isset.field137 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<138, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field138 = arg.move();
    __isset.field138 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<139, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field139 = arg.move();
    __isset.field139 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<140, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field140 = arg.move();
    __isset.field140 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<141, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field141 = arg.move();
    __isset.field141 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<142, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field142 = arg.move();
    __isset.field142 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<143, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field143 = arg.move();
    __isset.field143 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<144, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field144 = arg.move();
    __isset.field144 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<145, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field145 = arg.move();
    __isset.field145 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<146, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field146 = arg.move();
    __isset.field146 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<147, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field147 = arg.move();
    __isset.field147 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<148, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field148 = arg.move();
    __isset.field148 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<149, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field149 = arg.move();
    __isset.field149 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<150, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field150 = arg.move();
    __isset.field150 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<151, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field151 = arg.move();
    __isset.field151 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<152, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field152 = arg.move();
    __isset.field152 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<153, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field153 = arg.move();
    __isset.field153 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<154, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field154 = arg.move();
    __isset.field154 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<155, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field155 = arg.move();
    __isset.field155 = true;
  }

  Struct28(Struct28&&) = default;

  Struct28(const Struct28&) = default;

  Struct28& operator=(Struct28&&) = default;

  Struct28& operator=(const Struct28&) = default;
  void __clear();

  virtual ~Struct28() {}

  std::set<std::string> field1;
  std::set< ::cpp2::Struct7> field2;
  std::vector< ::cpp2::Struct11> field3;
  int64_t field4;
   ::cpp2::Struct3 field5;
  std::string field6;
  std::vector<std::set<std::string>> field7;
  int8_t field8;
  std::string field9;
  int64_t field10;
  std::map<std::set< ::cpp2::Struct14>, int16_t> field11;
  int64_t field12;
  std::vector<int8_t> field13;
  std::vector<float> field14;
  std::vector<int32_t> field15;
  bool field16;
  int32_t field17;
  float field18;
  int16_t field19;
  int16_t field20;
  std::set<int16_t> field21;
   ::cpp2::Struct21 field22;
  std::set<int32_t> field23;
   ::cpp2::Struct3 field24;
  int64_t field25;
  std::string field26;
  std::vector<int64_t> field27;
   ::cpp2::Struct0 field28;
   ::cpp2::Struct2 field29;
  std::vector<int16_t> field30;
  int8_t field31;
  int64_t field32;
  int32_t field33;
  int64_t field34;
   ::cpp2::Struct1 field35;
  double field36;
   ::cpp2::Struct11 field37;
  double field38;
  std::set<int16_t> field39;
   ::cpp2::Struct6 field40;
  int32_t field41;
  int64_t field42;
  float field43;
   ::cpp2::Struct10 field44;
  std::vector<double> field45;
  double field46;
   ::cpp2::Struct11 field47;
  float field48;
  std::map<int64_t, int32_t> field49;
   ::cpp2::Struct6 field50;
  std::string field51;
  bool field52;
  int8_t field53;
  int16_t field54;
  std::vector<double> field55;
   ::cpp2::Struct23 field56;
  std::set<int64_t> field57;
  float field58;
  std::map<std::vector<float>, int32_t> field59;
  bool field60;
  std::string field61;
  std::vector<int64_t> field62;
  int8_t field63;
  int32_t field64;
  int8_t field65;
  float field66;
  int8_t field67;
  int64_t field68;
  std::map<bool, int8_t> field69;
  std::set<int64_t> field70;
  double field71;
  std::set<double> field72;
  std::map<int8_t, std::map<std::vector<double>, int16_t>> field73;
  int8_t field74;
  std::map< ::cpp2::Struct13, bool> field75;
  std::vector<std::vector<int32_t>> field76;
  std::string field77;
  std::map<bool, std::set<std::set<int16_t>>> field78;
  std::map<bool, std::string> field79;
  std::set<int16_t> field80;
  std::string field81;
  std::vector<std::vector<std::string>> field82;
  std::string field83;
  std::vector<int64_t> field84;
  int16_t field85;
  std::string field86;
  int64_t field87;
  std::set<std::map<std::string, bool>> field88;
  std::string field89;
  float field90;
  int8_t field91;
  std::string field92;
  std::map< ::cpp2::Struct20, int32_t> field93;
  float field94;
  std::string field95;
  int8_t field96;
  bool field97;
  double field98;
  std::set< ::cpp2::Struct12> field99;
  std::map<std::set<std::set<std::string>>, float> field100;
  std::string field101;
  int8_t field102;
  std::string field103;
   ::cpp2::Struct13 field104;
  std::string field105;
   ::cpp2::Struct5 field106;
  std::map<int32_t, std::map<int16_t, double>> field107;
  std::string field108;
  int32_t field109;
   ::cpp2::Struct7 field110;
   ::cpp2::Struct9 field111;
   ::cpp2::Struct12 field112;
  std::set<int16_t> field113;
  float field114;
  float field115;
   ::cpp2::Struct12 field116;
  std::set<std::set<int8_t>> field117;
   ::cpp2::Struct1 field118;
  bool field119;
  std::string field120;
   ::cpp2::Struct12 field121;
   ::cpp2::Struct3 field122;
  std::set<int32_t> field123;
  std::string field124;
  double field125;
  double field126;
  std::map<std::vector<int64_t>, bool> field127;
   ::cpp2::Struct25 field128;
   ::cpp2::Struct4 field129;
  std::string field130;
  bool field131;
  std::set<std::string> field132;
  int32_t field133;
  std::map<std::string, std::map<int64_t, int16_t>> field134;
  std::vector<std::string> field135;
  double field136;
  int8_t field137;
  int8_t field138;
  std::set<int16_t> field139;
  int8_t field140;
  std::map<int8_t, int8_t> field141;
  bool field142;
  bool field143;
  std::string field144;
  int32_t field145;
  std::set< ::cpp2::Struct18> field146;
  int16_t field147;
  bool field148;
  int32_t field149;
  std::map<int8_t, std::string> field150;
  std::map<std::string, bool> field151;
  float field152;
  std::set<int64_t> field153;
  double field154;
  std::vector<std::string> field155;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
      field97 = false;
      field98 = false;
      field99 = false;
      field100 = false;
      field101 = false;
      field102 = false;
      field103 = false;
      field104 = false;
      field105 = false;
      field106 = false;
      field107 = false;
      field108 = false;
      field109 = false;
      field110 = false;
      field111 = false;
      field112 = false;
      field113 = false;
      field114 = false;
      field115 = false;
      field116 = false;
      field117 = false;
      field118 = false;
      field119 = false;
      field120 = false;
      field121 = false;
      field122 = false;
      field123 = false;
      field124 = false;
      field125 = false;
      field126 = false;
      field127 = false;
      field128 = false;
      field129 = false;
      field130 = false;
      field131 = false;
      field132 = false;
      field133 = false;
      field134 = false;
      field135 = false;
      field136 = false;
      field137 = false;
      field138 = false;
      field139 = false;
      field140 = false;
      field141 = false;
      field142 = false;
      field143 = false;
      field144 = false;
      field145 = false;
      field146 = false;
      field147 = false;
      field148 = false;
      field149 = false;
      field150 = false;
      field151 = false;
      field152 = false;
      field153 = false;
      field154 = false;
      field155 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
    bool field97 = false;
    bool field98 = false;
    bool field99 = false;
    bool field100 = false;
    bool field101 = false;
    bool field102 = false;
    bool field103 = false;
    bool field104 = false;
    bool field105 = false;
    bool field106 = false;
    bool field107 = false;
    bool field108 = false;
    bool field109 = false;
    bool field110 = false;
    bool field111 = false;
    bool field112 = false;
    bool field113 = false;
    bool field114 = false;
    bool field115 = false;
    bool field116 = false;
    bool field117 = false;
    bool field118 = false;
    bool field119 = false;
    bool field120 = false;
    bool field121 = false;
    bool field122 = false;
    bool field123 = false;
    bool field124 = false;
    bool field125 = false;
    bool field126 = false;
    bool field127 = false;
    bool field128 = false;
    bool field129 = false;
    bool field130 = false;
    bool field131 = false;
    bool field132 = false;
    bool field133 = false;
    bool field134 = false;
    bool field135 = false;
    bool field136 = false;
    bool field137 = false;
    bool field138 = false;
    bool field139 = false;
    bool field140 = false;
    bool field141 = false;
    bool field142 = false;
    bool field143 = false;
    bool field144 = false;
    bool field145 = false;
    bool field146 = false;
    bool field147 = false;
    bool field148 = false;
    bool field149 = false;
    bool field150 = false;
    bool field151 = false;
    bool field152 = false;
    bool field153 = false;
    bool field154 = false;
    bool field155 = false;
  } __isset;
  bool operator==(const Struct28& rhs) const;

  bool operator < (const Struct28& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    if (!(field97 == rhs.field97)) {
      return field97 < rhs.field97;
    }
    if (!(field98 == rhs.field98)) {
      return field98 < rhs.field98;
    }
    if (!(field99 == rhs.field99)) {
      return field99 < rhs.field99;
    }
    if (!(field100 == rhs.field100)) {
      return field100 < rhs.field100;
    }
    if (!(field101 == rhs.field101)) {
      return field101 < rhs.field101;
    }
    if (!(field102 == rhs.field102)) {
      return field102 < rhs.field102;
    }
    if (!(field103 == rhs.field103)) {
      return field103 < rhs.field103;
    }
    if (!(field104 == rhs.field104)) {
      return field104 < rhs.field104;
    }
    if (!(field105 == rhs.field105)) {
      return field105 < rhs.field105;
    }
    if (!(field106 == rhs.field106)) {
      return field106 < rhs.field106;
    }
    if (!(field107 == rhs.field107)) {
      return field107 < rhs.field107;
    }
    if (!(field108 == rhs.field108)) {
      return field108 < rhs.field108;
    }
    if (!(field109 == rhs.field109)) {
      return field109 < rhs.field109;
    }
    if (!(field110 == rhs.field110)) {
      return field110 < rhs.field110;
    }
    if (!(field111 == rhs.field111)) {
      return field111 < rhs.field111;
    }
    if (!(field112 == rhs.field112)) {
      return field112 < rhs.field112;
    }
    if (!(field113 == rhs.field113)) {
      return field113 < rhs.field113;
    }
    if (!(field114 == rhs.field114)) {
      return field114 < rhs.field114;
    }
    if (!(field115 == rhs.field115)) {
      return field115 < rhs.field115;
    }
    if (!(field116 == rhs.field116)) {
      return field116 < rhs.field116;
    }
    if (!(field117 == rhs.field117)) {
      return field117 < rhs.field117;
    }
    if (!(field118 == rhs.field118)) {
      return field118 < rhs.field118;
    }
    if (!(field119 == rhs.field119)) {
      return field119 < rhs.field119;
    }
    if (!(field120 == rhs.field120)) {
      return field120 < rhs.field120;
    }
    if (!(field121 == rhs.field121)) {
      return field121 < rhs.field121;
    }
    if (!(field122 == rhs.field122)) {
      return field122 < rhs.field122;
    }
    if (!(field123 == rhs.field123)) {
      return field123 < rhs.field123;
    }
    if (!(field124 == rhs.field124)) {
      return field124 < rhs.field124;
    }
    if (!(field125 == rhs.field125)) {
      return field125 < rhs.field125;
    }
    if (!(field126 == rhs.field126)) {
      return field126 < rhs.field126;
    }
    if (!(field127 == rhs.field127)) {
      return field127 < rhs.field127;
    }
    if (!(field128 == rhs.field128)) {
      return field128 < rhs.field128;
    }
    if (!(field129 == rhs.field129)) {
      return field129 < rhs.field129;
    }
    if (!(field130 == rhs.field130)) {
      return field130 < rhs.field130;
    }
    if (!(field131 == rhs.field131)) {
      return field131 < rhs.field131;
    }
    if (!(field132 == rhs.field132)) {
      return field132 < rhs.field132;
    }
    if (!(field133 == rhs.field133)) {
      return field133 < rhs.field133;
    }
    if (!(field134 == rhs.field134)) {
      return field134 < rhs.field134;
    }
    if (!(field135 == rhs.field135)) {
      return field135 < rhs.field135;
    }
    if (!(field136 == rhs.field136)) {
      return field136 < rhs.field136;
    }
    if (!(field137 == rhs.field137)) {
      return field137 < rhs.field137;
    }
    if (!(field138 == rhs.field138)) {
      return field138 < rhs.field138;
    }
    if (!(field139 == rhs.field139)) {
      return field139 < rhs.field139;
    }
    if (!(field140 == rhs.field140)) {
      return field140 < rhs.field140;
    }
    if (!(field141 == rhs.field141)) {
      return field141 < rhs.field141;
    }
    if (!(field142 == rhs.field142)) {
      return field142 < rhs.field142;
    }
    if (!(field143 == rhs.field143)) {
      return field143 < rhs.field143;
    }
    if (!(field144 == rhs.field144)) {
      return field144 < rhs.field144;
    }
    if (!(field145 == rhs.field145)) {
      return field145 < rhs.field145;
    }
    if (!(field146 == rhs.field146)) {
      return field146 < rhs.field146;
    }
    if (!(field147 == rhs.field147)) {
      return field147 < rhs.field147;
    }
    if (!(field148 == rhs.field148)) {
      return field148 < rhs.field148;
    }
    if (!(field149 == rhs.field149)) {
      return field149 < rhs.field149;
    }
    if (!(field150 == rhs.field150)) {
      return field150 < rhs.field150;
    }
    if (!(field151 == rhs.field151)) {
      return field151 < rhs.field151;
    }
    if (!(field152 == rhs.field152)) {
      return field152 < rhs.field152;
    }
    if (!(field153 == rhs.field153)) {
      return field153 < rhs.field153;
    }
    if (!(field154 == rhs.field154)) {
      return field154 < rhs.field154;
    }
    if (!(field155 == rhs.field155)) {
      return field155 < rhs.field155;
    }
    (void)rhs;
    return false;
  }
  const std::set<std::string>& get_field1() const&;
  std::set<std::string> get_field1() &&;

  template <typename T_Struct28_field1_struct_setter>
  std::set<std::string>& set_field1(T_Struct28_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct28_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const std::set< ::cpp2::Struct7>& get_field2() const&;
  std::set< ::cpp2::Struct7> get_field2() &&;

  template <typename T_Struct28_field2_struct_setter>
  std::set< ::cpp2::Struct7>& set_field2(T_Struct28_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct28_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const std::vector< ::cpp2::Struct11>& get_field3() const&;
  std::vector< ::cpp2::Struct11> get_field3() &&;

  template <typename T_Struct28_field3_struct_setter>
  std::vector< ::cpp2::Struct11>& set_field3(T_Struct28_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct28_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  int64_t get_field4() const {
    return field4;
  }

  int64_t& set_field4(int64_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }
  const  ::cpp2::Struct3& get_field5() const&;
   ::cpp2::Struct3 get_field5() &&;

  template <typename T_Struct28_field5_struct_setter>
   ::cpp2::Struct3& set_field5(T_Struct28_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct28_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }

  const std::string& get_field6() const& {
    return field6;
  }

  std::string get_field6() && {
    return std::move(field6);
  }

  template <typename T_Struct28_field6_struct_setter>
  std::string& set_field6(T_Struct28_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct28_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }
  const std::vector<std::set<std::string>>& get_field7() const&;
  std::vector<std::set<std::string>> get_field7() &&;

  template <typename T_Struct28_field7_struct_setter>
  std::vector<std::set<std::string>>& set_field7(T_Struct28_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct28_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }

  int8_t get_field8() const {
    return field8;
  }

  int8_t& set_field8(int8_t field8_) {
    field8 = field8_;
    __isset.field8 = true;
    return field8;
  }

  const std::string& get_field9() const& {
    return field9;
  }

  std::string get_field9() && {
    return std::move(field9);
  }

  template <typename T_Struct28_field9_struct_setter>
  std::string& set_field9(T_Struct28_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct28_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }

  int64_t get_field10() const {
    return field10;
  }

  int64_t& set_field10(int64_t field10_) {
    field10 = field10_;
    __isset.field10 = true;
    return field10;
  }
  const std::map<std::set< ::cpp2::Struct14>, int16_t>& get_field11() const&;
  std::map<std::set< ::cpp2::Struct14>, int16_t> get_field11() &&;

  template <typename T_Struct28_field11_struct_setter>
  std::map<std::set< ::cpp2::Struct14>, int16_t>& set_field11(T_Struct28_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct28_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }

  int64_t get_field12() const {
    return field12;
  }

  int64_t& set_field12(int64_t field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }
  const std::vector<int8_t>& get_field13() const&;
  std::vector<int8_t> get_field13() &&;

  template <typename T_Struct28_field13_struct_setter>
  std::vector<int8_t>& set_field13(T_Struct28_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct28_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }
  const std::vector<float>& get_field14() const&;
  std::vector<float> get_field14() &&;

  template <typename T_Struct28_field14_struct_setter>
  std::vector<float>& set_field14(T_Struct28_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct28_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }
  const std::vector<int32_t>& get_field15() const&;
  std::vector<int32_t> get_field15() &&;

  template <typename T_Struct28_field15_struct_setter>
  std::vector<int32_t>& set_field15(T_Struct28_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct28_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }

  bool get_field16() const {
    return field16;
  }

  bool& set_field16(bool field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }

  int32_t get_field17() const {
    return field17;
  }

  int32_t& set_field17(int32_t field17_) {
    field17 = field17_;
    __isset.field17 = true;
    return field17;
  }

  float get_field18() const {
    return field18;
  }

  float& set_field18(float field18_) {
    field18 = field18_;
    __isset.field18 = true;
    return field18;
  }

  int16_t get_field19() const {
    return field19;
  }

  int16_t& set_field19(int16_t field19_) {
    field19 = field19_;
    __isset.field19 = true;
    return field19;
  }

  int16_t get_field20() const {
    return field20;
  }

  int16_t& set_field20(int16_t field20_) {
    field20 = field20_;
    __isset.field20 = true;
    return field20;
  }
  const std::set<int16_t>& get_field21() const&;
  std::set<int16_t> get_field21() &&;

  template <typename T_Struct28_field21_struct_setter>
  std::set<int16_t>& set_field21(T_Struct28_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct28_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }
  const  ::cpp2::Struct21& get_field22() const&;
   ::cpp2::Struct21 get_field22() &&;

  template <typename T_Struct28_field22_struct_setter>
   ::cpp2::Struct21& set_field22(T_Struct28_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct28_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }
  const std::set<int32_t>& get_field23() const&;
  std::set<int32_t> get_field23() &&;

  template <typename T_Struct28_field23_struct_setter>
  std::set<int32_t>& set_field23(T_Struct28_field23_struct_setter&& field23_) {
    field23 = std::forward<T_Struct28_field23_struct_setter>(field23_);
    __isset.field23 = true;
    return field23;
  }
  const  ::cpp2::Struct3& get_field24() const&;
   ::cpp2::Struct3 get_field24() &&;

  template <typename T_Struct28_field24_struct_setter>
   ::cpp2::Struct3& set_field24(T_Struct28_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct28_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }

  int64_t get_field25() const {
    return field25;
  }

  int64_t& set_field25(int64_t field25_) {
    field25 = field25_;
    __isset.field25 = true;
    return field25;
  }

  const std::string& get_field26() const& {
    return field26;
  }

  std::string get_field26() && {
    return std::move(field26);
  }

  template <typename T_Struct28_field26_struct_setter>
  std::string& set_field26(T_Struct28_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct28_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }
  const std::vector<int64_t>& get_field27() const&;
  std::vector<int64_t> get_field27() &&;

  template <typename T_Struct28_field27_struct_setter>
  std::vector<int64_t>& set_field27(T_Struct28_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct28_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }
  const  ::cpp2::Struct0& get_field28() const&;
   ::cpp2::Struct0 get_field28() &&;

  template <typename T_Struct28_field28_struct_setter>
   ::cpp2::Struct0& set_field28(T_Struct28_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct28_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }
  const  ::cpp2::Struct2& get_field29() const&;
   ::cpp2::Struct2 get_field29() &&;

  template <typename T_Struct28_field29_struct_setter>
   ::cpp2::Struct2& set_field29(T_Struct28_field29_struct_setter&& field29_) {
    field29 = std::forward<T_Struct28_field29_struct_setter>(field29_);
    __isset.field29 = true;
    return field29;
  }
  const std::vector<int16_t>& get_field30() const&;
  std::vector<int16_t> get_field30() &&;

  template <typename T_Struct28_field30_struct_setter>
  std::vector<int16_t>& set_field30(T_Struct28_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct28_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }

  int8_t get_field31() const {
    return field31;
  }

  int8_t& set_field31(int8_t field31_) {
    field31 = field31_;
    __isset.field31 = true;
    return field31;
  }

  int64_t get_field32() const {
    return field32;
  }

  int64_t& set_field32(int64_t field32_) {
    field32 = field32_;
    __isset.field32 = true;
    return field32;
  }

  int32_t get_field33() const {
    return field33;
  }

  int32_t& set_field33(int32_t field33_) {
    field33 = field33_;
    __isset.field33 = true;
    return field33;
  }

  int64_t get_field34() const {
    return field34;
  }

  int64_t& set_field34(int64_t field34_) {
    field34 = field34_;
    __isset.field34 = true;
    return field34;
  }
  const  ::cpp2::Struct1& get_field35() const&;
   ::cpp2::Struct1 get_field35() &&;

  template <typename T_Struct28_field35_struct_setter>
   ::cpp2::Struct1& set_field35(T_Struct28_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct28_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }

  double get_field36() const {
    return field36;
  }

  double& set_field36(double field36_) {
    field36 = field36_;
    __isset.field36 = true;
    return field36;
  }
  const  ::cpp2::Struct11& get_field37() const&;
   ::cpp2::Struct11 get_field37() &&;

  template <typename T_Struct28_field37_struct_setter>
   ::cpp2::Struct11& set_field37(T_Struct28_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct28_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }

  double get_field38() const {
    return field38;
  }

  double& set_field38(double field38_) {
    field38 = field38_;
    __isset.field38 = true;
    return field38;
  }
  const std::set<int16_t>& get_field39() const&;
  std::set<int16_t> get_field39() &&;

  template <typename T_Struct28_field39_struct_setter>
  std::set<int16_t>& set_field39(T_Struct28_field39_struct_setter&& field39_) {
    field39 = std::forward<T_Struct28_field39_struct_setter>(field39_);
    __isset.field39 = true;
    return field39;
  }
  const  ::cpp2::Struct6& get_field40() const&;
   ::cpp2::Struct6 get_field40() &&;

  template <typename T_Struct28_field40_struct_setter>
   ::cpp2::Struct6& set_field40(T_Struct28_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct28_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }

  int32_t get_field41() const {
    return field41;
  }

  int32_t& set_field41(int32_t field41_) {
    field41 = field41_;
    __isset.field41 = true;
    return field41;
  }

  int64_t get_field42() const {
    return field42;
  }

  int64_t& set_field42(int64_t field42_) {
    field42 = field42_;
    __isset.field42 = true;
    return field42;
  }

  float get_field43() const {
    return field43;
  }

  float& set_field43(float field43_) {
    field43 = field43_;
    __isset.field43 = true;
    return field43;
  }
  const  ::cpp2::Struct10& get_field44() const&;
   ::cpp2::Struct10 get_field44() &&;

  template <typename T_Struct28_field44_struct_setter>
   ::cpp2::Struct10& set_field44(T_Struct28_field44_struct_setter&& field44_) {
    field44 = std::forward<T_Struct28_field44_struct_setter>(field44_);
    __isset.field44 = true;
    return field44;
  }
  const std::vector<double>& get_field45() const&;
  std::vector<double> get_field45() &&;

  template <typename T_Struct28_field45_struct_setter>
  std::vector<double>& set_field45(T_Struct28_field45_struct_setter&& field45_) {
    field45 = std::forward<T_Struct28_field45_struct_setter>(field45_);
    __isset.field45 = true;
    return field45;
  }

  double get_field46() const {
    return field46;
  }

  double& set_field46(double field46_) {
    field46 = field46_;
    __isset.field46 = true;
    return field46;
  }
  const  ::cpp2::Struct11& get_field47() const&;
   ::cpp2::Struct11 get_field47() &&;

  template <typename T_Struct28_field47_struct_setter>
   ::cpp2::Struct11& set_field47(T_Struct28_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct28_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }

  float get_field48() const {
    return field48;
  }

  float& set_field48(float field48_) {
    field48 = field48_;
    __isset.field48 = true;
    return field48;
  }
  const std::map<int64_t, int32_t>& get_field49() const&;
  std::map<int64_t, int32_t> get_field49() &&;

  template <typename T_Struct28_field49_struct_setter>
  std::map<int64_t, int32_t>& set_field49(T_Struct28_field49_struct_setter&& field49_) {
    field49 = std::forward<T_Struct28_field49_struct_setter>(field49_);
    __isset.field49 = true;
    return field49;
  }
  const  ::cpp2::Struct6& get_field50() const&;
   ::cpp2::Struct6 get_field50() &&;

  template <typename T_Struct28_field50_struct_setter>
   ::cpp2::Struct6& set_field50(T_Struct28_field50_struct_setter&& field50_) {
    field50 = std::forward<T_Struct28_field50_struct_setter>(field50_);
    __isset.field50 = true;
    return field50;
  }

  const std::string& get_field51() const& {
    return field51;
  }

  std::string get_field51() && {
    return std::move(field51);
  }

  template <typename T_Struct28_field51_struct_setter>
  std::string& set_field51(T_Struct28_field51_struct_setter&& field51_) {
    field51 = std::forward<T_Struct28_field51_struct_setter>(field51_);
    __isset.field51 = true;
    return field51;
  }

  bool get_field52() const {
    return field52;
  }

  bool& set_field52(bool field52_) {
    field52 = field52_;
    __isset.field52 = true;
    return field52;
  }

  int8_t get_field53() const {
    return field53;
  }

  int8_t& set_field53(int8_t field53_) {
    field53 = field53_;
    __isset.field53 = true;
    return field53;
  }

  int16_t get_field54() const {
    return field54;
  }

  int16_t& set_field54(int16_t field54_) {
    field54 = field54_;
    __isset.field54 = true;
    return field54;
  }
  const std::vector<double>& get_field55() const&;
  std::vector<double> get_field55() &&;

  template <typename T_Struct28_field55_struct_setter>
  std::vector<double>& set_field55(T_Struct28_field55_struct_setter&& field55_) {
    field55 = std::forward<T_Struct28_field55_struct_setter>(field55_);
    __isset.field55 = true;
    return field55;
  }
  const  ::cpp2::Struct23& get_field56() const&;
   ::cpp2::Struct23 get_field56() &&;

  template <typename T_Struct28_field56_struct_setter>
   ::cpp2::Struct23& set_field56(T_Struct28_field56_struct_setter&& field56_) {
    field56 = std::forward<T_Struct28_field56_struct_setter>(field56_);
    __isset.field56 = true;
    return field56;
  }
  const std::set<int64_t>& get_field57() const&;
  std::set<int64_t> get_field57() &&;

  template <typename T_Struct28_field57_struct_setter>
  std::set<int64_t>& set_field57(T_Struct28_field57_struct_setter&& field57_) {
    field57 = std::forward<T_Struct28_field57_struct_setter>(field57_);
    __isset.field57 = true;
    return field57;
  }

  float get_field58() const {
    return field58;
  }

  float& set_field58(float field58_) {
    field58 = field58_;
    __isset.field58 = true;
    return field58;
  }
  const std::map<std::vector<float>, int32_t>& get_field59() const&;
  std::map<std::vector<float>, int32_t> get_field59() &&;

  template <typename T_Struct28_field59_struct_setter>
  std::map<std::vector<float>, int32_t>& set_field59(T_Struct28_field59_struct_setter&& field59_) {
    field59 = std::forward<T_Struct28_field59_struct_setter>(field59_);
    __isset.field59 = true;
    return field59;
  }

  bool get_field60() const {
    return field60;
  }

  bool& set_field60(bool field60_) {
    field60 = field60_;
    __isset.field60 = true;
    return field60;
  }

  const std::string& get_field61() const& {
    return field61;
  }

  std::string get_field61() && {
    return std::move(field61);
  }

  template <typename T_Struct28_field61_struct_setter>
  std::string& set_field61(T_Struct28_field61_struct_setter&& field61_) {
    field61 = std::forward<T_Struct28_field61_struct_setter>(field61_);
    __isset.field61 = true;
    return field61;
  }
  const std::vector<int64_t>& get_field62() const&;
  std::vector<int64_t> get_field62() &&;

  template <typename T_Struct28_field62_struct_setter>
  std::vector<int64_t>& set_field62(T_Struct28_field62_struct_setter&& field62_) {
    field62 = std::forward<T_Struct28_field62_struct_setter>(field62_);
    __isset.field62 = true;
    return field62;
  }

  int8_t get_field63() const {
    return field63;
  }

  int8_t& set_field63(int8_t field63_) {
    field63 = field63_;
    __isset.field63 = true;
    return field63;
  }

  int32_t get_field64() const {
    return field64;
  }

  int32_t& set_field64(int32_t field64_) {
    field64 = field64_;
    __isset.field64 = true;
    return field64;
  }

  int8_t get_field65() const {
    return field65;
  }

  int8_t& set_field65(int8_t field65_) {
    field65 = field65_;
    __isset.field65 = true;
    return field65;
  }

  float get_field66() const {
    return field66;
  }

  float& set_field66(float field66_) {
    field66 = field66_;
    __isset.field66 = true;
    return field66;
  }

  int8_t get_field67() const {
    return field67;
  }

  int8_t& set_field67(int8_t field67_) {
    field67 = field67_;
    __isset.field67 = true;
    return field67;
  }

  int64_t get_field68() const {
    return field68;
  }

  int64_t& set_field68(int64_t field68_) {
    field68 = field68_;
    __isset.field68 = true;
    return field68;
  }
  const std::map<bool, int8_t>& get_field69() const&;
  std::map<bool, int8_t> get_field69() &&;

  template <typename T_Struct28_field69_struct_setter>
  std::map<bool, int8_t>& set_field69(T_Struct28_field69_struct_setter&& field69_) {
    field69 = std::forward<T_Struct28_field69_struct_setter>(field69_);
    __isset.field69 = true;
    return field69;
  }
  const std::set<int64_t>& get_field70() const&;
  std::set<int64_t> get_field70() &&;

  template <typename T_Struct28_field70_struct_setter>
  std::set<int64_t>& set_field70(T_Struct28_field70_struct_setter&& field70_) {
    field70 = std::forward<T_Struct28_field70_struct_setter>(field70_);
    __isset.field70 = true;
    return field70;
  }

  double get_field71() const {
    return field71;
  }

  double& set_field71(double field71_) {
    field71 = field71_;
    __isset.field71 = true;
    return field71;
  }
  const std::set<double>& get_field72() const&;
  std::set<double> get_field72() &&;

  template <typename T_Struct28_field72_struct_setter>
  std::set<double>& set_field72(T_Struct28_field72_struct_setter&& field72_) {
    field72 = std::forward<T_Struct28_field72_struct_setter>(field72_);
    __isset.field72 = true;
    return field72;
  }
  const std::map<int8_t, std::map<std::vector<double>, int16_t>>& get_field73() const&;
  std::map<int8_t, std::map<std::vector<double>, int16_t>> get_field73() &&;

  template <typename T_Struct28_field73_struct_setter>
  std::map<int8_t, std::map<std::vector<double>, int16_t>>& set_field73(T_Struct28_field73_struct_setter&& field73_) {
    field73 = std::forward<T_Struct28_field73_struct_setter>(field73_);
    __isset.field73 = true;
    return field73;
  }

  int8_t get_field74() const {
    return field74;
  }

  int8_t& set_field74(int8_t field74_) {
    field74 = field74_;
    __isset.field74 = true;
    return field74;
  }
  const std::map< ::cpp2::Struct13, bool>& get_field75() const&;
  std::map< ::cpp2::Struct13, bool> get_field75() &&;

  template <typename T_Struct28_field75_struct_setter>
  std::map< ::cpp2::Struct13, bool>& set_field75(T_Struct28_field75_struct_setter&& field75_) {
    field75 = std::forward<T_Struct28_field75_struct_setter>(field75_);
    __isset.field75 = true;
    return field75;
  }
  const std::vector<std::vector<int32_t>>& get_field76() const&;
  std::vector<std::vector<int32_t>> get_field76() &&;

  template <typename T_Struct28_field76_struct_setter>
  std::vector<std::vector<int32_t>>& set_field76(T_Struct28_field76_struct_setter&& field76_) {
    field76 = std::forward<T_Struct28_field76_struct_setter>(field76_);
    __isset.field76 = true;
    return field76;
  }

  const std::string& get_field77() const& {
    return field77;
  }

  std::string get_field77() && {
    return std::move(field77);
  }

  template <typename T_Struct28_field77_struct_setter>
  std::string& set_field77(T_Struct28_field77_struct_setter&& field77_) {
    field77 = std::forward<T_Struct28_field77_struct_setter>(field77_);
    __isset.field77 = true;
    return field77;
  }
  const std::map<bool, std::set<std::set<int16_t>>>& get_field78() const&;
  std::map<bool, std::set<std::set<int16_t>>> get_field78() &&;

  template <typename T_Struct28_field78_struct_setter>
  std::map<bool, std::set<std::set<int16_t>>>& set_field78(T_Struct28_field78_struct_setter&& field78_) {
    field78 = std::forward<T_Struct28_field78_struct_setter>(field78_);
    __isset.field78 = true;
    return field78;
  }
  const std::map<bool, std::string>& get_field79() const&;
  std::map<bool, std::string> get_field79() &&;

  template <typename T_Struct28_field79_struct_setter>
  std::map<bool, std::string>& set_field79(T_Struct28_field79_struct_setter&& field79_) {
    field79 = std::forward<T_Struct28_field79_struct_setter>(field79_);
    __isset.field79 = true;
    return field79;
  }
  const std::set<int16_t>& get_field80() const&;
  std::set<int16_t> get_field80() &&;

  template <typename T_Struct28_field80_struct_setter>
  std::set<int16_t>& set_field80(T_Struct28_field80_struct_setter&& field80_) {
    field80 = std::forward<T_Struct28_field80_struct_setter>(field80_);
    __isset.field80 = true;
    return field80;
  }

  const std::string& get_field81() const& {
    return field81;
  }

  std::string get_field81() && {
    return std::move(field81);
  }

  template <typename T_Struct28_field81_struct_setter>
  std::string& set_field81(T_Struct28_field81_struct_setter&& field81_) {
    field81 = std::forward<T_Struct28_field81_struct_setter>(field81_);
    __isset.field81 = true;
    return field81;
  }
  const std::vector<std::vector<std::string>>& get_field82() const&;
  std::vector<std::vector<std::string>> get_field82() &&;

  template <typename T_Struct28_field82_struct_setter>
  std::vector<std::vector<std::string>>& set_field82(T_Struct28_field82_struct_setter&& field82_) {
    field82 = std::forward<T_Struct28_field82_struct_setter>(field82_);
    __isset.field82 = true;
    return field82;
  }

  const std::string& get_field83() const& {
    return field83;
  }

  std::string get_field83() && {
    return std::move(field83);
  }

  template <typename T_Struct28_field83_struct_setter>
  std::string& set_field83(T_Struct28_field83_struct_setter&& field83_) {
    field83 = std::forward<T_Struct28_field83_struct_setter>(field83_);
    __isset.field83 = true;
    return field83;
  }
  const std::vector<int64_t>& get_field84() const&;
  std::vector<int64_t> get_field84() &&;

  template <typename T_Struct28_field84_struct_setter>
  std::vector<int64_t>& set_field84(T_Struct28_field84_struct_setter&& field84_) {
    field84 = std::forward<T_Struct28_field84_struct_setter>(field84_);
    __isset.field84 = true;
    return field84;
  }

  int16_t get_field85() const {
    return field85;
  }

  int16_t& set_field85(int16_t field85_) {
    field85 = field85_;
    __isset.field85 = true;
    return field85;
  }

  const std::string& get_field86() const& {
    return field86;
  }

  std::string get_field86() && {
    return std::move(field86);
  }

  template <typename T_Struct28_field86_struct_setter>
  std::string& set_field86(T_Struct28_field86_struct_setter&& field86_) {
    field86 = std::forward<T_Struct28_field86_struct_setter>(field86_);
    __isset.field86 = true;
    return field86;
  }

  int64_t get_field87() const {
    return field87;
  }

  int64_t& set_field87(int64_t field87_) {
    field87 = field87_;
    __isset.field87 = true;
    return field87;
  }
  const std::set<std::map<std::string, bool>>& get_field88() const&;
  std::set<std::map<std::string, bool>> get_field88() &&;

  template <typename T_Struct28_field88_struct_setter>
  std::set<std::map<std::string, bool>>& set_field88(T_Struct28_field88_struct_setter&& field88_) {
    field88 = std::forward<T_Struct28_field88_struct_setter>(field88_);
    __isset.field88 = true;
    return field88;
  }

  const std::string& get_field89() const& {
    return field89;
  }

  std::string get_field89() && {
    return std::move(field89);
  }

  template <typename T_Struct28_field89_struct_setter>
  std::string& set_field89(T_Struct28_field89_struct_setter&& field89_) {
    field89 = std::forward<T_Struct28_field89_struct_setter>(field89_);
    __isset.field89 = true;
    return field89;
  }

  float get_field90() const {
    return field90;
  }

  float& set_field90(float field90_) {
    field90 = field90_;
    __isset.field90 = true;
    return field90;
  }

  int8_t get_field91() const {
    return field91;
  }

  int8_t& set_field91(int8_t field91_) {
    field91 = field91_;
    __isset.field91 = true;
    return field91;
  }

  const std::string& get_field92() const& {
    return field92;
  }

  std::string get_field92() && {
    return std::move(field92);
  }

  template <typename T_Struct28_field92_struct_setter>
  std::string& set_field92(T_Struct28_field92_struct_setter&& field92_) {
    field92 = std::forward<T_Struct28_field92_struct_setter>(field92_);
    __isset.field92 = true;
    return field92;
  }
  const std::map< ::cpp2::Struct20, int32_t>& get_field93() const&;
  std::map< ::cpp2::Struct20, int32_t> get_field93() &&;

  template <typename T_Struct28_field93_struct_setter>
  std::map< ::cpp2::Struct20, int32_t>& set_field93(T_Struct28_field93_struct_setter&& field93_) {
    field93 = std::forward<T_Struct28_field93_struct_setter>(field93_);
    __isset.field93 = true;
    return field93;
  }

  float get_field94() const {
    return field94;
  }

  float& set_field94(float field94_) {
    field94 = field94_;
    __isset.field94 = true;
    return field94;
  }

  const std::string& get_field95() const& {
    return field95;
  }

  std::string get_field95() && {
    return std::move(field95);
  }

  template <typename T_Struct28_field95_struct_setter>
  std::string& set_field95(T_Struct28_field95_struct_setter&& field95_) {
    field95 = std::forward<T_Struct28_field95_struct_setter>(field95_);
    __isset.field95 = true;
    return field95;
  }

  int8_t get_field96() const {
    return field96;
  }

  int8_t& set_field96(int8_t field96_) {
    field96 = field96_;
    __isset.field96 = true;
    return field96;
  }

  bool get_field97() const {
    return field97;
  }

  bool& set_field97(bool field97_) {
    field97 = field97_;
    __isset.field97 = true;
    return field97;
  }

  double get_field98() const {
    return field98;
  }

  double& set_field98(double field98_) {
    field98 = field98_;
    __isset.field98 = true;
    return field98;
  }
  const std::set< ::cpp2::Struct12>& get_field99() const&;
  std::set< ::cpp2::Struct12> get_field99() &&;

  template <typename T_Struct28_field99_struct_setter>
  std::set< ::cpp2::Struct12>& set_field99(T_Struct28_field99_struct_setter&& field99_) {
    field99 = std::forward<T_Struct28_field99_struct_setter>(field99_);
    __isset.field99 = true;
    return field99;
  }
  const std::map<std::set<std::set<std::string>>, float>& get_field100() const&;
  std::map<std::set<std::set<std::string>>, float> get_field100() &&;

  template <typename T_Struct28_field100_struct_setter>
  std::map<std::set<std::set<std::string>>, float>& set_field100(T_Struct28_field100_struct_setter&& field100_) {
    field100 = std::forward<T_Struct28_field100_struct_setter>(field100_);
    __isset.field100 = true;
    return field100;
  }

  const std::string& get_field101() const& {
    return field101;
  }

  std::string get_field101() && {
    return std::move(field101);
  }

  template <typename T_Struct28_field101_struct_setter>
  std::string& set_field101(T_Struct28_field101_struct_setter&& field101_) {
    field101 = std::forward<T_Struct28_field101_struct_setter>(field101_);
    __isset.field101 = true;
    return field101;
  }

  int8_t get_field102() const {
    return field102;
  }

  int8_t& set_field102(int8_t field102_) {
    field102 = field102_;
    __isset.field102 = true;
    return field102;
  }

  const std::string& get_field103() const& {
    return field103;
  }

  std::string get_field103() && {
    return std::move(field103);
  }

  template <typename T_Struct28_field103_struct_setter>
  std::string& set_field103(T_Struct28_field103_struct_setter&& field103_) {
    field103 = std::forward<T_Struct28_field103_struct_setter>(field103_);
    __isset.field103 = true;
    return field103;
  }
  const  ::cpp2::Struct13& get_field104() const&;
   ::cpp2::Struct13 get_field104() &&;

  template <typename T_Struct28_field104_struct_setter>
   ::cpp2::Struct13& set_field104(T_Struct28_field104_struct_setter&& field104_) {
    field104 = std::forward<T_Struct28_field104_struct_setter>(field104_);
    __isset.field104 = true;
    return field104;
  }

  const std::string& get_field105() const& {
    return field105;
  }

  std::string get_field105() && {
    return std::move(field105);
  }

  template <typename T_Struct28_field105_struct_setter>
  std::string& set_field105(T_Struct28_field105_struct_setter&& field105_) {
    field105 = std::forward<T_Struct28_field105_struct_setter>(field105_);
    __isset.field105 = true;
    return field105;
  }
  const  ::cpp2::Struct5& get_field106() const&;
   ::cpp2::Struct5 get_field106() &&;

  template <typename T_Struct28_field106_struct_setter>
   ::cpp2::Struct5& set_field106(T_Struct28_field106_struct_setter&& field106_) {
    field106 = std::forward<T_Struct28_field106_struct_setter>(field106_);
    __isset.field106 = true;
    return field106;
  }
  const std::map<int32_t, std::map<int16_t, double>>& get_field107() const&;
  std::map<int32_t, std::map<int16_t, double>> get_field107() &&;

  template <typename T_Struct28_field107_struct_setter>
  std::map<int32_t, std::map<int16_t, double>>& set_field107(T_Struct28_field107_struct_setter&& field107_) {
    field107 = std::forward<T_Struct28_field107_struct_setter>(field107_);
    __isset.field107 = true;
    return field107;
  }

  const std::string& get_field108() const& {
    return field108;
  }

  std::string get_field108() && {
    return std::move(field108);
  }

  template <typename T_Struct28_field108_struct_setter>
  std::string& set_field108(T_Struct28_field108_struct_setter&& field108_) {
    field108 = std::forward<T_Struct28_field108_struct_setter>(field108_);
    __isset.field108 = true;
    return field108;
  }

  int32_t get_field109() const {
    return field109;
  }

  int32_t& set_field109(int32_t field109_) {
    field109 = field109_;
    __isset.field109 = true;
    return field109;
  }
  const  ::cpp2::Struct7& get_field110() const&;
   ::cpp2::Struct7 get_field110() &&;

  template <typename T_Struct28_field110_struct_setter>
   ::cpp2::Struct7& set_field110(T_Struct28_field110_struct_setter&& field110_) {
    field110 = std::forward<T_Struct28_field110_struct_setter>(field110_);
    __isset.field110 = true;
    return field110;
  }
  const  ::cpp2::Struct9& get_field111() const&;
   ::cpp2::Struct9 get_field111() &&;

  template <typename T_Struct28_field111_struct_setter>
   ::cpp2::Struct9& set_field111(T_Struct28_field111_struct_setter&& field111_) {
    field111 = std::forward<T_Struct28_field111_struct_setter>(field111_);
    __isset.field111 = true;
    return field111;
  }
  const  ::cpp2::Struct12& get_field112() const&;
   ::cpp2::Struct12 get_field112() &&;

  template <typename T_Struct28_field112_struct_setter>
   ::cpp2::Struct12& set_field112(T_Struct28_field112_struct_setter&& field112_) {
    field112 = std::forward<T_Struct28_field112_struct_setter>(field112_);
    __isset.field112 = true;
    return field112;
  }
  const std::set<int16_t>& get_field113() const&;
  std::set<int16_t> get_field113() &&;

  template <typename T_Struct28_field113_struct_setter>
  std::set<int16_t>& set_field113(T_Struct28_field113_struct_setter&& field113_) {
    field113 = std::forward<T_Struct28_field113_struct_setter>(field113_);
    __isset.field113 = true;
    return field113;
  }

  float get_field114() const {
    return field114;
  }

  float& set_field114(float field114_) {
    field114 = field114_;
    __isset.field114 = true;
    return field114;
  }

  float get_field115() const {
    return field115;
  }

  float& set_field115(float field115_) {
    field115 = field115_;
    __isset.field115 = true;
    return field115;
  }
  const  ::cpp2::Struct12& get_field116() const&;
   ::cpp2::Struct12 get_field116() &&;

  template <typename T_Struct28_field116_struct_setter>
   ::cpp2::Struct12& set_field116(T_Struct28_field116_struct_setter&& field116_) {
    field116 = std::forward<T_Struct28_field116_struct_setter>(field116_);
    __isset.field116 = true;
    return field116;
  }
  const std::set<std::set<int8_t>>& get_field117() const&;
  std::set<std::set<int8_t>> get_field117() &&;

  template <typename T_Struct28_field117_struct_setter>
  std::set<std::set<int8_t>>& set_field117(T_Struct28_field117_struct_setter&& field117_) {
    field117 = std::forward<T_Struct28_field117_struct_setter>(field117_);
    __isset.field117 = true;
    return field117;
  }
  const  ::cpp2::Struct1& get_field118() const&;
   ::cpp2::Struct1 get_field118() &&;

  template <typename T_Struct28_field118_struct_setter>
   ::cpp2::Struct1& set_field118(T_Struct28_field118_struct_setter&& field118_) {
    field118 = std::forward<T_Struct28_field118_struct_setter>(field118_);
    __isset.field118 = true;
    return field118;
  }

  bool get_field119() const {
    return field119;
  }

  bool& set_field119(bool field119_) {
    field119 = field119_;
    __isset.field119 = true;
    return field119;
  }

  const std::string& get_field120() const& {
    return field120;
  }

  std::string get_field120() && {
    return std::move(field120);
  }

  template <typename T_Struct28_field120_struct_setter>
  std::string& set_field120(T_Struct28_field120_struct_setter&& field120_) {
    field120 = std::forward<T_Struct28_field120_struct_setter>(field120_);
    __isset.field120 = true;
    return field120;
  }
  const  ::cpp2::Struct12& get_field121() const&;
   ::cpp2::Struct12 get_field121() &&;

  template <typename T_Struct28_field121_struct_setter>
   ::cpp2::Struct12& set_field121(T_Struct28_field121_struct_setter&& field121_) {
    field121 = std::forward<T_Struct28_field121_struct_setter>(field121_);
    __isset.field121 = true;
    return field121;
  }
  const  ::cpp2::Struct3& get_field122() const&;
   ::cpp2::Struct3 get_field122() &&;

  template <typename T_Struct28_field122_struct_setter>
   ::cpp2::Struct3& set_field122(T_Struct28_field122_struct_setter&& field122_) {
    field122 = std::forward<T_Struct28_field122_struct_setter>(field122_);
    __isset.field122 = true;
    return field122;
  }
  const std::set<int32_t>& get_field123() const&;
  std::set<int32_t> get_field123() &&;

  template <typename T_Struct28_field123_struct_setter>
  std::set<int32_t>& set_field123(T_Struct28_field123_struct_setter&& field123_) {
    field123 = std::forward<T_Struct28_field123_struct_setter>(field123_);
    __isset.field123 = true;
    return field123;
  }

  const std::string& get_field124() const& {
    return field124;
  }

  std::string get_field124() && {
    return std::move(field124);
  }

  template <typename T_Struct28_field124_struct_setter>
  std::string& set_field124(T_Struct28_field124_struct_setter&& field124_) {
    field124 = std::forward<T_Struct28_field124_struct_setter>(field124_);
    __isset.field124 = true;
    return field124;
  }

  double get_field125() const {
    return field125;
  }

  double& set_field125(double field125_) {
    field125 = field125_;
    __isset.field125 = true;
    return field125;
  }

  double get_field126() const {
    return field126;
  }

  double& set_field126(double field126_) {
    field126 = field126_;
    __isset.field126 = true;
    return field126;
  }
  const std::map<std::vector<int64_t>, bool>& get_field127() const&;
  std::map<std::vector<int64_t>, bool> get_field127() &&;

  template <typename T_Struct28_field127_struct_setter>
  std::map<std::vector<int64_t>, bool>& set_field127(T_Struct28_field127_struct_setter&& field127_) {
    field127 = std::forward<T_Struct28_field127_struct_setter>(field127_);
    __isset.field127 = true;
    return field127;
  }
  const  ::cpp2::Struct25& get_field128() const&;
   ::cpp2::Struct25 get_field128() &&;

  template <typename T_Struct28_field128_struct_setter>
   ::cpp2::Struct25& set_field128(T_Struct28_field128_struct_setter&& field128_) {
    field128 = std::forward<T_Struct28_field128_struct_setter>(field128_);
    __isset.field128 = true;
    return field128;
  }
  const  ::cpp2::Struct4& get_field129() const&;
   ::cpp2::Struct4 get_field129() &&;

  template <typename T_Struct28_field129_struct_setter>
   ::cpp2::Struct4& set_field129(T_Struct28_field129_struct_setter&& field129_) {
    field129 = std::forward<T_Struct28_field129_struct_setter>(field129_);
    __isset.field129 = true;
    return field129;
  }

  const std::string& get_field130() const& {
    return field130;
  }

  std::string get_field130() && {
    return std::move(field130);
  }

  template <typename T_Struct28_field130_struct_setter>
  std::string& set_field130(T_Struct28_field130_struct_setter&& field130_) {
    field130 = std::forward<T_Struct28_field130_struct_setter>(field130_);
    __isset.field130 = true;
    return field130;
  }

  bool get_field131() const {
    return field131;
  }

  bool& set_field131(bool field131_) {
    field131 = field131_;
    __isset.field131 = true;
    return field131;
  }
  const std::set<std::string>& get_field132() const&;
  std::set<std::string> get_field132() &&;

  template <typename T_Struct28_field132_struct_setter>
  std::set<std::string>& set_field132(T_Struct28_field132_struct_setter&& field132_) {
    field132 = std::forward<T_Struct28_field132_struct_setter>(field132_);
    __isset.field132 = true;
    return field132;
  }

  int32_t get_field133() const {
    return field133;
  }

  int32_t& set_field133(int32_t field133_) {
    field133 = field133_;
    __isset.field133 = true;
    return field133;
  }
  const std::map<std::string, std::map<int64_t, int16_t>>& get_field134() const&;
  std::map<std::string, std::map<int64_t, int16_t>> get_field134() &&;

  template <typename T_Struct28_field134_struct_setter>
  std::map<std::string, std::map<int64_t, int16_t>>& set_field134(T_Struct28_field134_struct_setter&& field134_) {
    field134 = std::forward<T_Struct28_field134_struct_setter>(field134_);
    __isset.field134 = true;
    return field134;
  }
  const std::vector<std::string>& get_field135() const&;
  std::vector<std::string> get_field135() &&;

  template <typename T_Struct28_field135_struct_setter>
  std::vector<std::string>& set_field135(T_Struct28_field135_struct_setter&& field135_) {
    field135 = std::forward<T_Struct28_field135_struct_setter>(field135_);
    __isset.field135 = true;
    return field135;
  }

  double get_field136() const {
    return field136;
  }

  double& set_field136(double field136_) {
    field136 = field136_;
    __isset.field136 = true;
    return field136;
  }

  int8_t get_field137() const {
    return field137;
  }

  int8_t& set_field137(int8_t field137_) {
    field137 = field137_;
    __isset.field137 = true;
    return field137;
  }

  int8_t get_field138() const {
    return field138;
  }

  int8_t& set_field138(int8_t field138_) {
    field138 = field138_;
    __isset.field138 = true;
    return field138;
  }
  const std::set<int16_t>& get_field139() const&;
  std::set<int16_t> get_field139() &&;

  template <typename T_Struct28_field139_struct_setter>
  std::set<int16_t>& set_field139(T_Struct28_field139_struct_setter&& field139_) {
    field139 = std::forward<T_Struct28_field139_struct_setter>(field139_);
    __isset.field139 = true;
    return field139;
  }

  int8_t get_field140() const {
    return field140;
  }

  int8_t& set_field140(int8_t field140_) {
    field140 = field140_;
    __isset.field140 = true;
    return field140;
  }
  const std::map<int8_t, int8_t>& get_field141() const&;
  std::map<int8_t, int8_t> get_field141() &&;

  template <typename T_Struct28_field141_struct_setter>
  std::map<int8_t, int8_t>& set_field141(T_Struct28_field141_struct_setter&& field141_) {
    field141 = std::forward<T_Struct28_field141_struct_setter>(field141_);
    __isset.field141 = true;
    return field141;
  }

  bool get_field142() const {
    return field142;
  }

  bool& set_field142(bool field142_) {
    field142 = field142_;
    __isset.field142 = true;
    return field142;
  }

  bool get_field143() const {
    return field143;
  }

  bool& set_field143(bool field143_) {
    field143 = field143_;
    __isset.field143 = true;
    return field143;
  }

  const std::string& get_field144() const& {
    return field144;
  }

  std::string get_field144() && {
    return std::move(field144);
  }

  template <typename T_Struct28_field144_struct_setter>
  std::string& set_field144(T_Struct28_field144_struct_setter&& field144_) {
    field144 = std::forward<T_Struct28_field144_struct_setter>(field144_);
    __isset.field144 = true;
    return field144;
  }

  int32_t get_field145() const {
    return field145;
  }

  int32_t& set_field145(int32_t field145_) {
    field145 = field145_;
    __isset.field145 = true;
    return field145;
  }
  const std::set< ::cpp2::Struct18>& get_field146() const&;
  std::set< ::cpp2::Struct18> get_field146() &&;

  template <typename T_Struct28_field146_struct_setter>
  std::set< ::cpp2::Struct18>& set_field146(T_Struct28_field146_struct_setter&& field146_) {
    field146 = std::forward<T_Struct28_field146_struct_setter>(field146_);
    __isset.field146 = true;
    return field146;
  }

  int16_t get_field147() const {
    return field147;
  }

  int16_t& set_field147(int16_t field147_) {
    field147 = field147_;
    __isset.field147 = true;
    return field147;
  }

  bool get_field148() const {
    return field148;
  }

  bool& set_field148(bool field148_) {
    field148 = field148_;
    __isset.field148 = true;
    return field148;
  }

  int32_t get_field149() const {
    return field149;
  }

  int32_t& set_field149(int32_t field149_) {
    field149 = field149_;
    __isset.field149 = true;
    return field149;
  }
  const std::map<int8_t, std::string>& get_field150() const&;
  std::map<int8_t, std::string> get_field150() &&;

  template <typename T_Struct28_field150_struct_setter>
  std::map<int8_t, std::string>& set_field150(T_Struct28_field150_struct_setter&& field150_) {
    field150 = std::forward<T_Struct28_field150_struct_setter>(field150_);
    __isset.field150 = true;
    return field150;
  }
  const std::map<std::string, bool>& get_field151() const&;
  std::map<std::string, bool> get_field151() &&;

  template <typename T_Struct28_field151_struct_setter>
  std::map<std::string, bool>& set_field151(T_Struct28_field151_struct_setter&& field151_) {
    field151 = std::forward<T_Struct28_field151_struct_setter>(field151_);
    __isset.field151 = true;
    return field151;
  }

  float get_field152() const {
    return field152;
  }

  float& set_field152(float field152_) {
    field152 = field152_;
    __isset.field152 = true;
    return field152;
  }
  const std::set<int64_t>& get_field153() const&;
  std::set<int64_t> get_field153() &&;

  template <typename T_Struct28_field153_struct_setter>
  std::set<int64_t>& set_field153(T_Struct28_field153_struct_setter&& field153_) {
    field153 = std::forward<T_Struct28_field153_struct_setter>(field153_);
    __isset.field153 = true;
    return field153;
  }

  double get_field154() const {
    return field154;
  }

  double& set_field154(double field154_) {
    field154 = field154_;
    __isset.field154 = true;
    return field154;
  }
  const std::vector<std::string>& get_field155() const&;
  std::vector<std::string> get_field155() &&;

  template <typename T_Struct28_field155_struct_setter>
  std::vector<std::string>& set_field155(T_Struct28_field155_struct_setter&& field155_) {
    field155 = std::forward<T_Struct28_field155_struct_setter>(field155_);
    __isset.field155 = true;
    return field155;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct28& a, Struct28& b);
extern template uint32_t Struct28::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct28::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct28::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct28::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct28::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct28::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct28::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct28::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct28>::clear( ::cpp2::Struct28* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct28>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct28>::write(Protocol* proto,  ::cpp2::Struct28 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct28>::read(Protocol* proto,  ::cpp2::Struct28* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct28>::serializedSize(Protocol const* proto,  ::cpp2::Struct28 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct28>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct28 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {

} // cpp2
