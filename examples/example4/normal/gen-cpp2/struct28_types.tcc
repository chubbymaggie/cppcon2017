/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "struct28_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>
#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace cpp2 {

template <class Protocol_>
uint32_t Struct28::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field1 = std::set<std::string>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              std::string _elem;
              xfer += iprot->readString(_elem);
              this->field1.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              std::string _elem;
              xfer += iprot->readString(_elem);
              this->field1.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field2 = std::set< ::cpp2::Struct7>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
               ::cpp2::Struct7 _elem;
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &_elem);
              this->field2.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
               ::cpp2::Struct7 _elem;
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &_elem);
              this->field2.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field3 = std::vector< ::cpp2::Struct11>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field3.resize(_i_r + 1);
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::read(iprot, &this->field3[_i_r]);
            }
          }
          else {
            this->field3.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::read(iprot, &this->field3[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field7 = std::vector<std::set<std::string>>();
          uint32_t _size_r_r;
          apache::thrift::protocol::TType _etype_r_r;
          xfer += iprot->readListBegin(_etype_r_r, _size_r_r);
          uint32_t _i_r_r;
          if (_size_r_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r_r = 0; iprot->peekList(); ++_i_r_r) {
              this->field7.resize(_i_r_r + 1);
              this->field7[_i_r_r] = std::set<std::string>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readSetBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekSet(); ++_i_r) {
                  std::string _elem;
                  xfer += iprot->readBinary(_elem);
                  this->field7[_i_r_r].insert(std::move(_elem));
                }
              }
              else {
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  std::string _elem;
                  xfer += iprot->readBinary(_elem);
                  this->field7[_i_r_r].insert(std::move(_elem));
                }
              }
              xfer += iprot->readSetEnd();
            }
          }
          else {
            this->field7.resize(_size_r_r);
            for (_i_r_r = 0; _i_r_r < _size_r_r; ++_i_r_r) {
              this->field7[_i_r_r] = std::set<std::string>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readSetBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekSet(); ++_i_r) {
                  std::string _elem;
                  xfer += iprot->readBinary(_elem);
                  this->field7[_i_r_r].insert(std::move(_elem));
                }
              }
              else {
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  std::string _elem;
                  xfer += iprot->readBinary(_elem);
                  this->field7[_i_r_r].insert(std::move(_elem));
                }
              }
              xfer += iprot->readSetEnd();
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field11 = std::map<std::set< ::cpp2::Struct14>, int16_t>();
          uint32_t _size_rk_r_rv;
          apache::thrift::protocol::TType _ktype_rk_r_rv;
          apache::thrift::protocol::TType _vtype_rk_r_rv;
          xfer += iprot->readMapBegin(_ktype_rk_r_rv, _vtype_rk_r_rv, _size_rk_r_rv);
          uint32_t _i_rk_r_rv;
          if (_size_rk_r_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_r_rv = 0; iprot->peekMap(); ++_i_rk_r_rv) {
              auto const _key_index_rk_r_rv = [&] {
                std::set< ::cpp2::Struct14> _key_r;
                _key_r = std::set< ::cpp2::Struct14>();
                uint32_t _size_r;
                apache::thrift::protocol::TType _etype_r;
                xfer += iprot->readSetBegin(_etype_r, _size_r);
                uint32_t _i_r;
                if (_size_r == std::numeric_limits<uint32_t>::max()) {
                  for (_i_r = 0; iprot->peekSet(); ++_i_r) {
                     ::cpp2::Struct14 _elem;
                    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::read(iprot, &_elem);
                    _key_r.insert(std::move(_elem));
                  }
                }
                else {
                  for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                     ::cpp2::Struct14 _elem;
                    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::read(iprot, &_elem);
                    _key_r.insert(std::move(_elem));
                  }
                }
                xfer += iprot->readSetEnd();
                return _key_r;
              }
              ();
              int16_t& _val = this->field11[std::move(_key_index_rk_r_rv)];
              xfer += iprot->readI16(_val);
            }
          }
          else {
            auto const _kreader_rk_r_rv = [&xfer, &iprot](auto& _key_r) {
              _key_r = std::set< ::cpp2::Struct14>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readSetBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekSet(); ++_i_r) {
                   ::cpp2::Struct14 _elem;
                  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::read(iprot, &_elem);
                  _key_r.insert(std::move(_elem));
                }
              }
              else {
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                   ::cpp2::Struct14 _elem;
                  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::read(iprot, &_elem);
                  _key_r.insert(std::move(_elem));
                }
              }
              xfer += iprot->readSetEnd();
            }
            ;
            auto const _vreader_rk_r_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readI16(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field11, _size_rk_r_rv, _kreader_rk_r_rv, _vreader_rk_r_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field13 = std::vector<int8_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field13.resize(_i_r + 1);
              xfer += iprot->readByte(this->field13[_i_r]);
            }
          }
          else {
            this->field13.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readByte(this->field13[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field14 = std::vector<float>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field14.resize(_i_r + 1);
              xfer += iprot->readFloat(this->field14[_i_r]);
            }
          }
          else {
            this->field14.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readFloat(this->field14[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field15 = std::vector<int32_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field15.resize(_i_r + 1);
              xfer += iprot->readI32(this->field15[_i_r]);
            }
          }
          else {
            this->field15.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readI32(this->field15[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field21 = std::set<int16_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int16_t _elem;
              xfer += iprot->readI16(_elem);
              this->field21.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int16_t _elem;
              xfer += iprot->readI16(_elem);
              this->field21.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::read(iprot, &this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field23 = std::set<int32_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int32_t _elem;
              xfer += iprot->readI32(_elem);
              this->field23.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int32_t _elem;
              xfer += iprot->readI32(_elem);
              this->field23.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field27 = std::vector<int64_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field27.resize(_i_r + 1);
              xfer += iprot->readI64(this->field27[_i_r]);
            }
          }
          else {
            this->field27.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readI64(this->field27[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field30 = std::vector<int16_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field30.resize(_i_r + 1);
              xfer += iprot->readI16(this->field30[_i_r]);
            }
          }
          else {
            this->field30.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readI16(this->field30[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::read(iprot, &this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field39 = std::set<int16_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int16_t _elem;
              xfer += iprot->readI16(_elem);
              this->field39.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int16_t _elem;
              xfer += iprot->readI16(_elem);
              this->field39.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::read(iprot, &this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field45 = std::vector<double>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field45.resize(_i_r + 1);
              xfer += iprot->readDouble(this->field45[_i_r]);
            }
          }
          else {
            this->field45.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readDouble(this->field45[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::read(iprot, &this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field49 = std::map<int64_t, int32_t>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                int64_t _key;
                xfer += iprot->readI64(_key);
                return _key;
              }
              ();
              int32_t& _val = this->field49[std::move(_key_index_rk_rv)];
              xfer += iprot->readI32(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readI64(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readI32(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field49, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field55 = std::vector<double>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field55.resize(_i_r + 1);
              xfer += iprot->readDouble(this->field55[_i_r]);
            }
          }
          else {
            this->field55.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readDouble(this->field55[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct23>::read(iprot, &this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field57 = std::set<int64_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int64_t _elem;
              xfer += iprot->readI64(_elem);
              this->field57.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int64_t _elem;
              xfer += iprot->readI64(_elem);
              this->field57.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field59 = std::map<std::vector<float>, int32_t>();
          uint32_t _size_rk_r_rv;
          apache::thrift::protocol::TType _ktype_rk_r_rv;
          apache::thrift::protocol::TType _vtype_rk_r_rv;
          xfer += iprot->readMapBegin(_ktype_rk_r_rv, _vtype_rk_r_rv, _size_rk_r_rv);
          uint32_t _i_rk_r_rv;
          if (_size_rk_r_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_r_rv = 0; iprot->peekMap(); ++_i_rk_r_rv) {
              auto const _key_index_rk_r_rv = [&] {
                std::vector<float> _key_r;
                _key_r = std::vector<float>();
                uint32_t _size_r;
                apache::thrift::protocol::TType _etype_r;
                xfer += iprot->readListBegin(_etype_r, _size_r);
                uint32_t _i_r;
                if (_size_r == std::numeric_limits<uint32_t>::max()) {
                  for (_i_r = 0; iprot->peekList(); ++_i_r) {
                    _key_r.resize(_i_r + 1);
                    xfer += iprot->readFloat(_key_r[_i_r]);
                  }
                }
                else {
                  _key_r.resize(_size_r);
                  for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                    xfer += iprot->readFloat(_key_r[_i_r]);
                  }
                }
                xfer += iprot->readListEnd();
                return _key_r;
              }
              ();
              int32_t& _val = this->field59[std::move(_key_index_rk_r_rv)];
              xfer += iprot->readI32(_val);
            }
          }
          else {
            auto const _kreader_rk_r_rv = [&xfer, &iprot](auto& _key_r) {
              _key_r = std::vector<float>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readListBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekList(); ++_i_r) {
                  _key_r.resize(_i_r + 1);
                  xfer += iprot->readFloat(_key_r[_i_r]);
                }
              }
              else {
                _key_r.resize(_size_r);
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  xfer += iprot->readFloat(_key_r[_i_r]);
                }
              }
              xfer += iprot->readListEnd();
            }
            ;
            auto const _vreader_rk_r_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readI32(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field59, _size_rk_r_rv, _kreader_rk_r_rv, _vreader_rk_r_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field62 = std::vector<int64_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field62.resize(_i_r + 1);
              xfer += iprot->readI64(this->field62[_i_r]);
            }
          }
          else {
            this->field62.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readI64(this->field62[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field69 = std::map<bool, int8_t>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                bool _key;
                xfer += iprot->readBool(_key);
                return _key;
              }
              ();
              int8_t& _val = this->field69[std::move(_key_index_rk_rv)];
              xfer += iprot->readByte(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readBool(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readByte(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field69, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field70 = std::set<int64_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int64_t _elem;
              xfer += iprot->readI64(_elem);
              this->field70.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int64_t _elem;
              xfer += iprot->readI64(_elem);
              this->field70.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field72 = std::set<double>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              double _elem;
              xfer += iprot->readDouble(_elem);
              this->field72.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              double _elem;
              xfer += iprot->readDouble(_elem);
              this->field72.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field73 = std::map<int8_t, std::map<std::vector<double>, int16_t>>();
          uint32_t _size_rk_rv_rk_r_rv;
          apache::thrift::protocol::TType _ktype_rk_rv_rk_r_rv;
          apache::thrift::protocol::TType _vtype_rk_rv_rk_r_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv_rk_r_rv, _vtype_rk_rv_rk_r_rv, _size_rk_rv_rk_r_rv);
          uint32_t _i_rk_rv_rk_r_rv;
          if (_size_rk_rv_rk_r_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv_rk_r_rv = 0; iprot->peekMap(); ++_i_rk_rv_rk_r_rv) {
              auto const _key_index_rk_rv_rk_r_rv = [&] {
                int8_t _key;
                xfer += iprot->readByte(_key);
                return _key;
              }
              ();
              std::map<std::vector<double>, int16_t>& _val_rk_r_rv = this->field73[std::move(_key_index_rk_rv_rk_r_rv)];
              _val_rk_r_rv = std::map<std::vector<double>, int16_t>();
              uint32_t _size_rk_r_rv;
              apache::thrift::protocol::TType _ktype_rk_r_rv;
              apache::thrift::protocol::TType _vtype_rk_r_rv;
              xfer += iprot->readMapBegin(_ktype_rk_r_rv, _vtype_rk_r_rv, _size_rk_r_rv);
              uint32_t _i_rk_r_rv;
              if (_size_rk_r_rv == std::numeric_limits<uint32_t>::max()) {
                for (_i_rk_r_rv = 0; iprot->peekMap(); ++_i_rk_r_rv) {
                  auto const _key_index_rk_r_rv = [&] {
                    std::vector<double> _key_r;
                    _key_r = std::vector<double>();
                    uint32_t _size_r;
                    apache::thrift::protocol::TType _etype_r;
                    xfer += iprot->readListBegin(_etype_r, _size_r);
                    uint32_t _i_r;
                    if (_size_r == std::numeric_limits<uint32_t>::max()) {
                      for (_i_r = 0; iprot->peekList(); ++_i_r) {
                        _key_r.resize(_i_r + 1);
                        xfer += iprot->readDouble(_key_r[_i_r]);
                      }
                    }
                    else {
                      _key_r.resize(_size_r);
                      for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                        xfer += iprot->readDouble(_key_r[_i_r]);
                      }
                    }
                    xfer += iprot->readListEnd();
                    return _key_r;
                  }
                  ();
                  int16_t& _val = _val_rk_r_rv[std::move(_key_index_rk_r_rv)];
                  xfer += iprot->readI16(_val);
                }
              }
              else {
                auto const _kreader_rk_r_rv = [&xfer, &iprot](auto& _key_r) {
                  _key_r = std::vector<double>();
                  uint32_t _size_r;
                  apache::thrift::protocol::TType _etype_r;
                  xfer += iprot->readListBegin(_etype_r, _size_r);
                  uint32_t _i_r;
                  if (_size_r == std::numeric_limits<uint32_t>::max()) {
                    for (_i_r = 0; iprot->peekList(); ++_i_r) {
                      _key_r.resize(_i_r + 1);
                      xfer += iprot->readDouble(_key_r[_i_r]);
                    }
                  }
                  else {
                    _key_r.resize(_size_r);
                    for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                      xfer += iprot->readDouble(_key_r[_i_r]);
                    }
                  }
                  xfer += iprot->readListEnd();
                }
                ;
                auto const _vreader_rk_r_rv = [&xfer, &iprot](auto& _val) {
                  xfer += iprot->readI16(_val);
                }
                ;
                ::apache::thrift::deserialize_known_length_map(_val_rk_r_rv, _size_rk_r_rv, _kreader_rk_r_rv, _vreader_rk_r_rv);
              }
              xfer += iprot->readMapEnd();
            }
          }
          else {
            auto const _kreader_rk_rv_rk_r_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readByte(_key);
            }
            ;
            auto const _vreader_rk_rv_rk_r_rv = [&xfer, &iprot](auto& _val_rk_r_rv) {
              _val_rk_r_rv = std::map<std::vector<double>, int16_t>();
              uint32_t _size_rk_r_rv;
              apache::thrift::protocol::TType _ktype_rk_r_rv;
              apache::thrift::protocol::TType _vtype_rk_r_rv;
              xfer += iprot->readMapBegin(_ktype_rk_r_rv, _vtype_rk_r_rv, _size_rk_r_rv);
              uint32_t _i_rk_r_rv;
              if (_size_rk_r_rv == std::numeric_limits<uint32_t>::max()) {
                for (_i_rk_r_rv = 0; iprot->peekMap(); ++_i_rk_r_rv) {
                  auto const _key_index_rk_r_rv = [&] {
                    std::vector<double> _key_r;
                    _key_r = std::vector<double>();
                    uint32_t _size_r;
                    apache::thrift::protocol::TType _etype_r;
                    xfer += iprot->readListBegin(_etype_r, _size_r);
                    uint32_t _i_r;
                    if (_size_r == std::numeric_limits<uint32_t>::max()) {
                      for (_i_r = 0; iprot->peekList(); ++_i_r) {
                        _key_r.resize(_i_r + 1);
                        xfer += iprot->readDouble(_key_r[_i_r]);
                      }
                    }
                    else {
                      _key_r.resize(_size_r);
                      for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                        xfer += iprot->readDouble(_key_r[_i_r]);
                      }
                    }
                    xfer += iprot->readListEnd();
                    return _key_r;
                  }
                  ();
                  int16_t& _val = _val_rk_r_rv[std::move(_key_index_rk_r_rv)];
                  xfer += iprot->readI16(_val);
                }
              }
              else {
                auto const _kreader_rk_r_rv = [&xfer, &iprot](auto& _key_r) {
                  _key_r = std::vector<double>();
                  uint32_t _size_r;
                  apache::thrift::protocol::TType _etype_r;
                  xfer += iprot->readListBegin(_etype_r, _size_r);
                  uint32_t _i_r;
                  if (_size_r == std::numeric_limits<uint32_t>::max()) {
                    for (_i_r = 0; iprot->peekList(); ++_i_r) {
                      _key_r.resize(_i_r + 1);
                      xfer += iprot->readDouble(_key_r[_i_r]);
                    }
                  }
                  else {
                    _key_r.resize(_size_r);
                    for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                      xfer += iprot->readDouble(_key_r[_i_r]);
                    }
                  }
                  xfer += iprot->readListEnd();
                }
                ;
                auto const _vreader_rk_r_rv = [&xfer, &iprot](auto& _val) {
                  xfer += iprot->readI16(_val);
                }
                ;
                ::apache::thrift::deserialize_known_length_map(_val_rk_r_rv, _size_rk_r_rv, _kreader_rk_r_rv, _vreader_rk_r_rv);
              }
              xfer += iprot->readMapEnd();
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field73, _size_rk_rv_rk_r_rv, _kreader_rk_rv_rk_r_rv, _vreader_rk_rv_rk_r_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field75 = std::map< ::cpp2::Struct13, bool>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                 ::cpp2::Struct13 _key;
                xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::read(iprot, &_key);
                return _key;
              }
              ();
              bool& _val = this->field75[std::move(_key_index_rk_rv)];
              xfer += iprot->readBool(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::read(iprot, &_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readBool(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field75, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field76 = std::vector<std::vector<int32_t>>();
          uint32_t _size_r_r;
          apache::thrift::protocol::TType _etype_r_r;
          xfer += iprot->readListBegin(_etype_r_r, _size_r_r);
          uint32_t _i_r_r;
          if (_size_r_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r_r = 0; iprot->peekList(); ++_i_r_r) {
              this->field76.resize(_i_r_r + 1);
              this->field76[_i_r_r] = std::vector<int32_t>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readListBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekList(); ++_i_r) {
                  this->field76[_i_r_r].resize(_i_r + 1);
                  xfer += iprot->readI32(this->field76[_i_r_r][_i_r]);
                }
              }
              else {
                this->field76[_i_r_r].resize(_size_r);
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  xfer += iprot->readI32(this->field76[_i_r_r][_i_r]);
                }
              }
              xfer += iprot->readListEnd();
            }
          }
          else {
            this->field76.resize(_size_r_r);
            for (_i_r_r = 0; _i_r_r < _size_r_r; ++_i_r_r) {
              this->field76[_i_r_r] = std::vector<int32_t>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readListBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekList(); ++_i_r) {
                  this->field76[_i_r_r].resize(_i_r + 1);
                  xfer += iprot->readI32(this->field76[_i_r_r][_i_r]);
                }
              }
              else {
                this->field76[_i_r_r].resize(_size_r);
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  xfer += iprot->readI32(this->field76[_i_r_r][_i_r]);
                }
              }
              xfer += iprot->readListEnd();
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field78 = std::map<bool, std::set<std::set<int16_t>>>();
          uint32_t _size_rk_rv_r_r;
          apache::thrift::protocol::TType _ktype_rk_rv_r_r;
          apache::thrift::protocol::TType _vtype_rk_rv_r_r;
          xfer += iprot->readMapBegin(_ktype_rk_rv_r_r, _vtype_rk_rv_r_r, _size_rk_rv_r_r);
          uint32_t _i_rk_rv_r_r;
          if (_size_rk_rv_r_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv_r_r = 0; iprot->peekMap(); ++_i_rk_rv_r_r) {
              auto const _key_index_rk_rv_r_r = [&] {
                bool _key;
                xfer += iprot->readBool(_key);
                return _key;
              }
              ();
              std::set<std::set<int16_t>>& _val_r_r = this->field78[std::move(_key_index_rk_rv_r_r)];
              _val_r_r = std::set<std::set<int16_t>>();
              uint32_t _size_r_r;
              apache::thrift::protocol::TType _etype_r_r;
              xfer += iprot->readSetBegin(_etype_r_r, _size_r_r);
              uint32_t _i_r_r;
              if (_size_r_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r_r = 0; iprot->peekSet(); ++_i_r_r) {
                  std::set<int16_t> _elem_r;
                  _elem_r = std::set<int16_t>();
                  uint32_t _size_r;
                  apache::thrift::protocol::TType _etype_r;
                  xfer += iprot->readSetBegin(_etype_r, _size_r);
                  uint32_t _i_r;
                  if (_size_r == std::numeric_limits<uint32_t>::max()) {
                    for (_i_r = 0; iprot->peekSet(); ++_i_r) {
                      int16_t _elem;
                      xfer += iprot->readI16(_elem);
                      _elem_r.insert(std::move(_elem));
                    }
                  }
                  else {
                    for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                      int16_t _elem;
                      xfer += iprot->readI16(_elem);
                      _elem_r.insert(std::move(_elem));
                    }
                  }
                  xfer += iprot->readSetEnd();
                  _val_r_r.insert(std::move(_elem_r));
                }
              }
              else {
                for (_i_r_r = 0; _i_r_r < _size_r_r; ++_i_r_r) {
                  std::set<int16_t> _elem_r;
                  _elem_r = std::set<int16_t>();
                  uint32_t _size_r;
                  apache::thrift::protocol::TType _etype_r;
                  xfer += iprot->readSetBegin(_etype_r, _size_r);
                  uint32_t _i_r;
                  if (_size_r == std::numeric_limits<uint32_t>::max()) {
                    for (_i_r = 0; iprot->peekSet(); ++_i_r) {
                      int16_t _elem;
                      xfer += iprot->readI16(_elem);
                      _elem_r.insert(std::move(_elem));
                    }
                  }
                  else {
                    for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                      int16_t _elem;
                      xfer += iprot->readI16(_elem);
                      _elem_r.insert(std::move(_elem));
                    }
                  }
                  xfer += iprot->readSetEnd();
                  _val_r_r.insert(std::move(_elem_r));
                }
              }
              xfer += iprot->readSetEnd();
            }
          }
          else {
            auto const _kreader_rk_rv_r_r = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readBool(_key);
            }
            ;
            auto const _vreader_rk_rv_r_r = [&xfer, &iprot](auto& _val_r_r) {
              _val_r_r = std::set<std::set<int16_t>>();
              uint32_t _size_r_r;
              apache::thrift::protocol::TType _etype_r_r;
              xfer += iprot->readSetBegin(_etype_r_r, _size_r_r);
              uint32_t _i_r_r;
              if (_size_r_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r_r = 0; iprot->peekSet(); ++_i_r_r) {
                  std::set<int16_t> _elem_r;
                  _elem_r = std::set<int16_t>();
                  uint32_t _size_r;
                  apache::thrift::protocol::TType _etype_r;
                  xfer += iprot->readSetBegin(_etype_r, _size_r);
                  uint32_t _i_r;
                  if (_size_r == std::numeric_limits<uint32_t>::max()) {
                    for (_i_r = 0; iprot->peekSet(); ++_i_r) {
                      int16_t _elem;
                      xfer += iprot->readI16(_elem);
                      _elem_r.insert(std::move(_elem));
                    }
                  }
                  else {
                    for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                      int16_t _elem;
                      xfer += iprot->readI16(_elem);
                      _elem_r.insert(std::move(_elem));
                    }
                  }
                  xfer += iprot->readSetEnd();
                  _val_r_r.insert(std::move(_elem_r));
                }
              }
              else {
                for (_i_r_r = 0; _i_r_r < _size_r_r; ++_i_r_r) {
                  std::set<int16_t> _elem_r;
                  _elem_r = std::set<int16_t>();
                  uint32_t _size_r;
                  apache::thrift::protocol::TType _etype_r;
                  xfer += iprot->readSetBegin(_etype_r, _size_r);
                  uint32_t _i_r;
                  if (_size_r == std::numeric_limits<uint32_t>::max()) {
                    for (_i_r = 0; iprot->peekSet(); ++_i_r) {
                      int16_t _elem;
                      xfer += iprot->readI16(_elem);
                      _elem_r.insert(std::move(_elem));
                    }
                  }
                  else {
                    for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                      int16_t _elem;
                      xfer += iprot->readI16(_elem);
                      _elem_r.insert(std::move(_elem));
                    }
                  }
                  xfer += iprot->readSetEnd();
                  _val_r_r.insert(std::move(_elem_r));
                }
              }
              xfer += iprot->readSetEnd();
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field78, _size_rk_rv_r_r, _kreader_rk_rv_r_r, _vreader_rk_rv_r_r);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field79 = std::map<bool, std::string>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                bool _key;
                xfer += iprot->readBool(_key);
                return _key;
              }
              ();
              std::string& _val = this->field79[std::move(_key_index_rk_rv)];
              xfer += iprot->readBinary(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readBool(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readBinary(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field79, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field80 = std::set<int16_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int16_t _elem;
              xfer += iprot->readI16(_elem);
              this->field80.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int16_t _elem;
              xfer += iprot->readI16(_elem);
              this->field80.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field82 = std::vector<std::vector<std::string>>();
          uint32_t _size_r_r;
          apache::thrift::protocol::TType _etype_r_r;
          xfer += iprot->readListBegin(_etype_r_r, _size_r_r);
          uint32_t _i_r_r;
          if (_size_r_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r_r = 0; iprot->peekList(); ++_i_r_r) {
              this->field82.resize(_i_r_r + 1);
              this->field82[_i_r_r] = std::vector<std::string>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readListBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekList(); ++_i_r) {
                  this->field82[_i_r_r].resize(_i_r + 1);
                  xfer += iprot->readBinary(this->field82[_i_r_r][_i_r]);
                }
              }
              else {
                this->field82[_i_r_r].resize(_size_r);
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  xfer += iprot->readBinary(this->field82[_i_r_r][_i_r]);
                }
              }
              xfer += iprot->readListEnd();
            }
          }
          else {
            this->field82.resize(_size_r_r);
            for (_i_r_r = 0; _i_r_r < _size_r_r; ++_i_r_r) {
              this->field82[_i_r_r] = std::vector<std::string>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readListBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekList(); ++_i_r) {
                  this->field82[_i_r_r].resize(_i_r + 1);
                  xfer += iprot->readBinary(this->field82[_i_r_r][_i_r]);
                }
              }
              else {
                this->field82[_i_r_r].resize(_size_r);
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  xfer += iprot->readBinary(this->field82[_i_r_r][_i_r]);
                }
              }
              xfer += iprot->readListEnd();
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field84 = std::vector<int64_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field84.resize(_i_r + 1);
              xfer += iprot->readI64(this->field84[_i_r]);
            }
          }
          else {
            this->field84.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readI64(this->field84[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field88 = std::set<std::map<std::string, bool>>();
          uint32_t _size_r_rk_rv;
          apache::thrift::protocol::TType _etype_r_rk_rv;
          xfer += iprot->readSetBegin(_etype_r_rk_rv, _size_r_rk_rv);
          uint32_t _i_r_rk_rv;
          if (_size_r_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_r_rk_rv = 0; iprot->peekSet(); ++_i_r_rk_rv) {
              std::map<std::string, bool> _elem_rk_rv;
              _elem_rk_rv = std::map<std::string, bool>();
              uint32_t _size_rk_rv;
              apache::thrift::protocol::TType _ktype_rk_rv;
              apache::thrift::protocol::TType _vtype_rk_rv;
              xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
              uint32_t _i_rk_rv;
              if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
                for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
                  auto const _key_index_rk_rv = [&] {
                    std::string _key;
                    xfer += iprot->readBinary(_key);
                    return _key;
                  }
                  ();
                  bool& _val = _elem_rk_rv[std::move(_key_index_rk_rv)];
                  xfer += iprot->readBool(_val);
                }
              }
              else {
                auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
                  xfer += iprot->readBinary(_key);
                }
                ;
                auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
                  xfer += iprot->readBool(_val);
                }
                ;
                ::apache::thrift::deserialize_known_length_map(_elem_rk_rv, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
              }
              xfer += iprot->readMapEnd();
              this->field88.insert(std::move(_elem_rk_rv));
            }
          }
          else {
            for (_i_r_rk_rv = 0; _i_r_rk_rv < _size_r_rk_rv; ++_i_r_rk_rv) {
              std::map<std::string, bool> _elem_rk_rv;
              _elem_rk_rv = std::map<std::string, bool>();
              uint32_t _size_rk_rv;
              apache::thrift::protocol::TType _ktype_rk_rv;
              apache::thrift::protocol::TType _vtype_rk_rv;
              xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
              uint32_t _i_rk_rv;
              if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
                for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
                  auto const _key_index_rk_rv = [&] {
                    std::string _key;
                    xfer += iprot->readBinary(_key);
                    return _key;
                  }
                  ();
                  bool& _val = _elem_rk_rv[std::move(_key_index_rk_rv)];
                  xfer += iprot->readBool(_val);
                }
              }
              else {
                auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
                  xfer += iprot->readBinary(_key);
                }
                ;
                auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
                  xfer += iprot->readBool(_val);
                }
                ;
                ::apache::thrift::deserialize_known_length_map(_elem_rk_rv, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
              }
              xfer += iprot->readMapEnd();
              this->field88.insert(std::move(_elem_rk_rv));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field93 = std::map< ::cpp2::Struct20, int32_t>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                 ::cpp2::Struct20 _key;
                xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct20>::read(iprot, &_key);
                return _key;
              }
              ();
              int32_t& _val = this->field93[std::move(_key_index_rk_rv)];
              xfer += iprot->readI32(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct20>::read(iprot, &_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readI32(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field93, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 96:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field96);
          this->__isset.field96 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 97:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field97);
          this->__isset.field97 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 98:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field98);
          this->__isset.field98 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 99:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field99 = std::set< ::cpp2::Struct12>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
               ::cpp2::Struct12 _elem;
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::read(iprot, &_elem);
              this->field99.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
               ::cpp2::Struct12 _elem;
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::read(iprot, &_elem);
              this->field99.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field99 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 100:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field100 = std::map<std::set<std::set<std::string>>, float>();
          uint32_t _size_rk_r_r_rv;
          apache::thrift::protocol::TType _ktype_rk_r_r_rv;
          apache::thrift::protocol::TType _vtype_rk_r_r_rv;
          xfer += iprot->readMapBegin(_ktype_rk_r_r_rv, _vtype_rk_r_r_rv, _size_rk_r_r_rv);
          uint32_t _i_rk_r_r_rv;
          if (_size_rk_r_r_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_r_r_rv = 0; iprot->peekMap(); ++_i_rk_r_r_rv) {
              auto const _key_index_rk_r_r_rv = [&] {
                std::set<std::set<std::string>> _key_r_r;
                _key_r_r = std::set<std::set<std::string>>();
                uint32_t _size_r_r;
                apache::thrift::protocol::TType _etype_r_r;
                xfer += iprot->readSetBegin(_etype_r_r, _size_r_r);
                uint32_t _i_r_r;
                if (_size_r_r == std::numeric_limits<uint32_t>::max()) {
                  for (_i_r_r = 0; iprot->peekSet(); ++_i_r_r) {
                    std::set<std::string> _elem_r;
                    _elem_r = std::set<std::string>();
                    uint32_t _size_r;
                    apache::thrift::protocol::TType _etype_r;
                    xfer += iprot->readSetBegin(_etype_r, _size_r);
                    uint32_t _i_r;
                    if (_size_r == std::numeric_limits<uint32_t>::max()) {
                      for (_i_r = 0; iprot->peekSet(); ++_i_r) {
                        std::string _elem;
                        xfer += iprot->readBinary(_elem);
                        _elem_r.insert(std::move(_elem));
                      }
                    }
                    else {
                      for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                        std::string _elem;
                        xfer += iprot->readBinary(_elem);
                        _elem_r.insert(std::move(_elem));
                      }
                    }
                    xfer += iprot->readSetEnd();
                    _key_r_r.insert(std::move(_elem_r));
                  }
                }
                else {
                  for (_i_r_r = 0; _i_r_r < _size_r_r; ++_i_r_r) {
                    std::set<std::string> _elem_r;
                    _elem_r = std::set<std::string>();
                    uint32_t _size_r;
                    apache::thrift::protocol::TType _etype_r;
                    xfer += iprot->readSetBegin(_etype_r, _size_r);
                    uint32_t _i_r;
                    if (_size_r == std::numeric_limits<uint32_t>::max()) {
                      for (_i_r = 0; iprot->peekSet(); ++_i_r) {
                        std::string _elem;
                        xfer += iprot->readBinary(_elem);
                        _elem_r.insert(std::move(_elem));
                      }
                    }
                    else {
                      for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                        std::string _elem;
                        xfer += iprot->readBinary(_elem);
                        _elem_r.insert(std::move(_elem));
                      }
                    }
                    xfer += iprot->readSetEnd();
                    _key_r_r.insert(std::move(_elem_r));
                  }
                }
                xfer += iprot->readSetEnd();
                return _key_r_r;
              }
              ();
              float& _val = this->field100[std::move(_key_index_rk_r_r_rv)];
              xfer += iprot->readFloat(_val);
            }
          }
          else {
            auto const _kreader_rk_r_r_rv = [&xfer, &iprot](auto& _key_r_r) {
              _key_r_r = std::set<std::set<std::string>>();
              uint32_t _size_r_r;
              apache::thrift::protocol::TType _etype_r_r;
              xfer += iprot->readSetBegin(_etype_r_r, _size_r_r);
              uint32_t _i_r_r;
              if (_size_r_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r_r = 0; iprot->peekSet(); ++_i_r_r) {
                  std::set<std::string> _elem_r;
                  _elem_r = std::set<std::string>();
                  uint32_t _size_r;
                  apache::thrift::protocol::TType _etype_r;
                  xfer += iprot->readSetBegin(_etype_r, _size_r);
                  uint32_t _i_r;
                  if (_size_r == std::numeric_limits<uint32_t>::max()) {
                    for (_i_r = 0; iprot->peekSet(); ++_i_r) {
                      std::string _elem;
                      xfer += iprot->readBinary(_elem);
                      _elem_r.insert(std::move(_elem));
                    }
                  }
                  else {
                    for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                      std::string _elem;
                      xfer += iprot->readBinary(_elem);
                      _elem_r.insert(std::move(_elem));
                    }
                  }
                  xfer += iprot->readSetEnd();
                  _key_r_r.insert(std::move(_elem_r));
                }
              }
              else {
                for (_i_r_r = 0; _i_r_r < _size_r_r; ++_i_r_r) {
                  std::set<std::string> _elem_r;
                  _elem_r = std::set<std::string>();
                  uint32_t _size_r;
                  apache::thrift::protocol::TType _etype_r;
                  xfer += iprot->readSetBegin(_etype_r, _size_r);
                  uint32_t _i_r;
                  if (_size_r == std::numeric_limits<uint32_t>::max()) {
                    for (_i_r = 0; iprot->peekSet(); ++_i_r) {
                      std::string _elem;
                      xfer += iprot->readBinary(_elem);
                      _elem_r.insert(std::move(_elem));
                    }
                  }
                  else {
                    for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                      std::string _elem;
                      xfer += iprot->readBinary(_elem);
                      _elem_r.insert(std::move(_elem));
                    }
                  }
                  xfer += iprot->readSetEnd();
                  _key_r_r.insert(std::move(_elem_r));
                }
              }
              xfer += iprot->readSetEnd();
            }
            ;
            auto const _vreader_rk_r_r_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readFloat(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field100, _size_rk_r_r_rv, _kreader_rk_r_r_rv, _vreader_rk_r_r_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field100 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 101:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field101);
          this->__isset.field101 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 102:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field102);
          this->__isset.field102 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 103:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field103);
          this->__isset.field103 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 104:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::read(iprot, &this->field104);
          this->__isset.field104 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 105:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field105);
          this->__isset.field105 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 106:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field106);
          this->__isset.field106 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 107:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field107 = std::map<int32_t, std::map<int16_t, double>>();
          uint32_t _size_rk_rv_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv_rk_rv, _vtype_rk_rv_rk_rv, _size_rk_rv_rk_rv);
          uint32_t _i_rk_rv_rk_rv;
          if (_size_rk_rv_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv_rk_rv) {
              auto const _key_index_rk_rv_rk_rv = [&] {
                int32_t _key;
                xfer += iprot->readI32(_key);
                return _key;
              }
              ();
              std::map<int16_t, double>& _val_rk_rv = this->field107[std::move(_key_index_rk_rv_rk_rv)];
              _val_rk_rv = std::map<int16_t, double>();
              uint32_t _size_rk_rv;
              apache::thrift::protocol::TType _ktype_rk_rv;
              apache::thrift::protocol::TType _vtype_rk_rv;
              xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
              uint32_t _i_rk_rv;
              if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
                for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
                  auto const _key_index_rk_rv = [&] {
                    int16_t _key;
                    xfer += iprot->readI16(_key);
                    return _key;
                  }
                  ();
                  double& _val = _val_rk_rv[std::move(_key_index_rk_rv)];
                  xfer += iprot->readDouble(_val);
                }
              }
              else {
                auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
                  xfer += iprot->readI16(_key);
                }
                ;
                auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
                  xfer += iprot->readDouble(_val);
                }
                ;
                ::apache::thrift::deserialize_known_length_map(_val_rk_rv, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
              }
              xfer += iprot->readMapEnd();
            }
          }
          else {
            auto const _kreader_rk_rv_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readI32(_key);
            }
            ;
            auto const _vreader_rk_rv_rk_rv = [&xfer, &iprot](auto& _val_rk_rv) {
              _val_rk_rv = std::map<int16_t, double>();
              uint32_t _size_rk_rv;
              apache::thrift::protocol::TType _ktype_rk_rv;
              apache::thrift::protocol::TType _vtype_rk_rv;
              xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
              uint32_t _i_rk_rv;
              if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
                for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
                  auto const _key_index_rk_rv = [&] {
                    int16_t _key;
                    xfer += iprot->readI16(_key);
                    return _key;
                  }
                  ();
                  double& _val = _val_rk_rv[std::move(_key_index_rk_rv)];
                  xfer += iprot->readDouble(_val);
                }
              }
              else {
                auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
                  xfer += iprot->readI16(_key);
                }
                ;
                auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
                  xfer += iprot->readDouble(_val);
                }
                ;
                ::apache::thrift::deserialize_known_length_map(_val_rk_rv, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
              }
              xfer += iprot->readMapEnd();
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field107, _size_rk_rv_rk_rv, _kreader_rk_rv_rk_rv, _vreader_rk_rv_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field107 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 108:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field108);
          this->__isset.field108 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 109:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field109);
          this->__isset.field109 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 110:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field110);
          this->__isset.field110 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 111:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field111);
          this->__isset.field111 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 112:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::read(iprot, &this->field112);
          this->__isset.field112 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 113:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field113 = std::set<int16_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int16_t _elem;
              xfer += iprot->readI16(_elem);
              this->field113.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int16_t _elem;
              xfer += iprot->readI16(_elem);
              this->field113.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field113 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 114:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field114);
          this->__isset.field114 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 115:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field115);
          this->__isset.field115 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 116:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::read(iprot, &this->field116);
          this->__isset.field116 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 117:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field117 = std::set<std::set<int8_t>>();
          uint32_t _size_r_r;
          apache::thrift::protocol::TType _etype_r_r;
          xfer += iprot->readSetBegin(_etype_r_r, _size_r_r);
          uint32_t _i_r_r;
          if (_size_r_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r_r = 0; iprot->peekSet(); ++_i_r_r) {
              std::set<int8_t> _elem_r;
              _elem_r = std::set<int8_t>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readSetBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekSet(); ++_i_r) {
                  int8_t _elem;
                  xfer += iprot->readByte(_elem);
                  _elem_r.insert(std::move(_elem));
                }
              }
              else {
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  int8_t _elem;
                  xfer += iprot->readByte(_elem);
                  _elem_r.insert(std::move(_elem));
                }
              }
              xfer += iprot->readSetEnd();
              this->field117.insert(std::move(_elem_r));
            }
          }
          else {
            for (_i_r_r = 0; _i_r_r < _size_r_r; ++_i_r_r) {
              std::set<int8_t> _elem_r;
              _elem_r = std::set<int8_t>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readSetBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekSet(); ++_i_r) {
                  int8_t _elem;
                  xfer += iprot->readByte(_elem);
                  _elem_r.insert(std::move(_elem));
                }
              }
              else {
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  int8_t _elem;
                  xfer += iprot->readByte(_elem);
                  _elem_r.insert(std::move(_elem));
                }
              }
              xfer += iprot->readSetEnd();
              this->field117.insert(std::move(_elem_r));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field117 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 118:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field118);
          this->__isset.field118 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 119:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field119);
          this->__isset.field119 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 120:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field120);
          this->__isset.field120 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 121:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::read(iprot, &this->field121);
          this->__isset.field121 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 122:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field122);
          this->__isset.field122 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 123:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field123 = std::set<int32_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int32_t _elem;
              xfer += iprot->readI32(_elem);
              this->field123.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int32_t _elem;
              xfer += iprot->readI32(_elem);
              this->field123.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field123 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 124:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field124);
          this->__isset.field124 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 125:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field125);
          this->__isset.field125 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 126:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field126);
          this->__isset.field126 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 127:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field127 = std::map<std::vector<int64_t>, bool>();
          uint32_t _size_rk_r_rv;
          apache::thrift::protocol::TType _ktype_rk_r_rv;
          apache::thrift::protocol::TType _vtype_rk_r_rv;
          xfer += iprot->readMapBegin(_ktype_rk_r_rv, _vtype_rk_r_rv, _size_rk_r_rv);
          uint32_t _i_rk_r_rv;
          if (_size_rk_r_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_r_rv = 0; iprot->peekMap(); ++_i_rk_r_rv) {
              auto const _key_index_rk_r_rv = [&] {
                std::vector<int64_t> _key_r;
                _key_r = std::vector<int64_t>();
                uint32_t _size_r;
                apache::thrift::protocol::TType _etype_r;
                xfer += iprot->readListBegin(_etype_r, _size_r);
                uint32_t _i_r;
                if (_size_r == std::numeric_limits<uint32_t>::max()) {
                  for (_i_r = 0; iprot->peekList(); ++_i_r) {
                    _key_r.resize(_i_r + 1);
                    xfer += iprot->readI64(_key_r[_i_r]);
                  }
                }
                else {
                  _key_r.resize(_size_r);
                  for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                    xfer += iprot->readI64(_key_r[_i_r]);
                  }
                }
                xfer += iprot->readListEnd();
                return _key_r;
              }
              ();
              bool& _val = this->field127[std::move(_key_index_rk_r_rv)];
              xfer += iprot->readBool(_val);
            }
          }
          else {
            auto const _kreader_rk_r_rv = [&xfer, &iprot](auto& _key_r) {
              _key_r = std::vector<int64_t>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readListBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekList(); ++_i_r) {
                  _key_r.resize(_i_r + 1);
                  xfer += iprot->readI64(_key_r[_i_r]);
                }
              }
              else {
                _key_r.resize(_size_r);
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  xfer += iprot->readI64(_key_r[_i_r]);
                }
              }
              xfer += iprot->readListEnd();
            }
            ;
            auto const _vreader_rk_r_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readBool(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field127, _size_rk_r_rv, _kreader_rk_r_rv, _vreader_rk_r_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field127 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 128:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct25>::read(iprot, &this->field128);
          this->__isset.field128 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 129:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field129);
          this->__isset.field129 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 130:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field130);
          this->__isset.field130 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 131:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field131);
          this->__isset.field131 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 132:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field132 = std::set<std::string>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              std::string _elem;
              xfer += iprot->readBinary(_elem);
              this->field132.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              std::string _elem;
              xfer += iprot->readBinary(_elem);
              this->field132.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field132 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 133:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field133);
          this->__isset.field133 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 134:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field134 = std::map<std::string, std::map<int64_t, int16_t>>();
          uint32_t _size_rk_rv_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv_rk_rv, _vtype_rk_rv_rk_rv, _size_rk_rv_rk_rv);
          uint32_t _i_rk_rv_rk_rv;
          if (_size_rk_rv_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv_rk_rv) {
              auto const _key_index_rk_rv_rk_rv = [&] {
                std::string _key;
                xfer += iprot->readString(_key);
                return _key;
              }
              ();
              std::map<int64_t, int16_t>& _val_rk_rv = this->field134[std::move(_key_index_rk_rv_rk_rv)];
              _val_rk_rv = std::map<int64_t, int16_t>();
              uint32_t _size_rk_rv;
              apache::thrift::protocol::TType _ktype_rk_rv;
              apache::thrift::protocol::TType _vtype_rk_rv;
              xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
              uint32_t _i_rk_rv;
              if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
                for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
                  auto const _key_index_rk_rv = [&] {
                    int64_t _key;
                    xfer += iprot->readI64(_key);
                    return _key;
                  }
                  ();
                  int16_t& _val = _val_rk_rv[std::move(_key_index_rk_rv)];
                  xfer += iprot->readI16(_val);
                }
              }
              else {
                auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
                  xfer += iprot->readI64(_key);
                }
                ;
                auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
                  xfer += iprot->readI16(_val);
                }
                ;
                ::apache::thrift::deserialize_known_length_map(_val_rk_rv, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
              }
              xfer += iprot->readMapEnd();
            }
          }
          else {
            auto const _kreader_rk_rv_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readString(_key);
            }
            ;
            auto const _vreader_rk_rv_rk_rv = [&xfer, &iprot](auto& _val_rk_rv) {
              _val_rk_rv = std::map<int64_t, int16_t>();
              uint32_t _size_rk_rv;
              apache::thrift::protocol::TType _ktype_rk_rv;
              apache::thrift::protocol::TType _vtype_rk_rv;
              xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
              uint32_t _i_rk_rv;
              if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
                for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
                  auto const _key_index_rk_rv = [&] {
                    int64_t _key;
                    xfer += iprot->readI64(_key);
                    return _key;
                  }
                  ();
                  int16_t& _val = _val_rk_rv[std::move(_key_index_rk_rv)];
                  xfer += iprot->readI16(_val);
                }
              }
              else {
                auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
                  xfer += iprot->readI64(_key);
                }
                ;
                auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
                  xfer += iprot->readI16(_val);
                }
                ;
                ::apache::thrift::deserialize_known_length_map(_val_rk_rv, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
              }
              xfer += iprot->readMapEnd();
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field134, _size_rk_rv_rk_rv, _kreader_rk_rv_rk_rv, _vreader_rk_rv_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field134 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 135:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field135 = std::vector<std::string>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field135.resize(_i_r + 1);
              xfer += iprot->readBinary(this->field135[_i_r]);
            }
          }
          else {
            this->field135.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readBinary(this->field135[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field135 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 136:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field136);
          this->__isset.field136 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 137:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field137);
          this->__isset.field137 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 138:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field138);
          this->__isset.field138 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 139:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field139 = std::set<int16_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int16_t _elem;
              xfer += iprot->readI16(_elem);
              this->field139.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int16_t _elem;
              xfer += iprot->readI16(_elem);
              this->field139.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field139 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 140:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field140);
          this->__isset.field140 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 141:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field141 = std::map<int8_t, int8_t>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                int8_t _key;
                xfer += iprot->readByte(_key);
                return _key;
              }
              ();
              int8_t& _val = this->field141[std::move(_key_index_rk_rv)];
              xfer += iprot->readByte(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readByte(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readByte(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field141, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field141 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 142:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field142);
          this->__isset.field142 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 143:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field143);
          this->__isset.field143 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 144:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field144);
          this->__isset.field144 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 145:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field145);
          this->__isset.field145 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 146:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field146 = std::set< ::cpp2::Struct18>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
               ::cpp2::Struct18 _elem;
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::read(iprot, &_elem);
              this->field146.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
               ::cpp2::Struct18 _elem;
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::read(iprot, &_elem);
              this->field146.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field146 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 147:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field147);
          this->__isset.field147 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 148:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field148);
          this->__isset.field148 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 149:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field149);
          this->__isset.field149 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 150:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field150 = std::map<int8_t, std::string>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                int8_t _key;
                xfer += iprot->readByte(_key);
                return _key;
              }
              ();
              std::string& _val = this->field150[std::move(_key_index_rk_rv)];
              xfer += iprot->readString(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readByte(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readString(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field150, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field150 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 151:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field151 = std::map<std::string, bool>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                std::string _key;
                xfer += iprot->readBinary(_key);
                return _key;
              }
              ();
              bool& _val = this->field151[std::move(_key_index_rk_rv)];
              xfer += iprot->readBool(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readBinary(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readBool(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field151, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field151 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 152:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field152);
          this->__isset.field152 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 153:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field153 = std::set<int64_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int64_t _elem;
              xfer += iprot->readI64(_elem);
              this->field153.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int64_t _elem;
              xfer += iprot->readI64(_elem);
              this->field153.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field153 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 154:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field154);
          this->__isset.field154 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 155:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field155 = std::vector<std::string>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field155.resize(_i_r + 1);
              xfer += iprot->readBinary(this->field155[_i_r]);
            }
          }
          else {
            this->field155.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readBinary(this->field155[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field155 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct28::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct28");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, this->field1.size());
  for (auto _iter_r = this->field1.begin(); _iter_r != this->field1.end(); ++_iter_r) {
    xfer += prot_->serializedSizeString((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, this->field2.size());
  for (auto _iter_r = this->field2.begin(); _iter_r != this->field2.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->field3.size());
  for (auto _iter_r = this->field3.begin(); _iter_r != this->field3.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSize(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->serializedSizeI64(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeBinary(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_SET, this->field7.size());
  for (auto _iter_r_r = this->field7.begin(); _iter_r_r != this->field7.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeBinary((*_iter_r));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_BYTE, 8);
  xfer += prot_->serializedSizeByte(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->serializedSizeBinary(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->serializedSizeI64(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_SET, apache::thrift::protocol::T_I16, this->field11.size());
  for (auto _iter_rk_r_rv = this->field11.begin(); _iter_rk_r_rv != this->field11.end(); ++_iter_rk_r_rv) {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, _iter_rk_r_rv->first.size());
    for (auto _iter_r = _iter_rk_r_rv->first.begin(); _iter_r != _iter_rk_r_rv->first.end(); ++_iter_r) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::serializedSize(prot_, &(*_iter_r));
    }
    xfer += prot_->serializedSizeSetEnd();
    xfer += prot_->serializedSizeI16(_iter_rk_r_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->serializedSizeI64(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_BYTE, this->field13.size());
  for (auto _iter_r = this->field13.begin(); _iter_r != this->field13.end(); ++_iter_r) {
    xfer += prot_->serializedSizeByte((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_FLOAT, this->field14.size());
  for (auto _iter_r = this->field14.begin(); _iter_r != this->field14.end(); ++_iter_r) {
    xfer += prot_->serializedSizeFloat((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, this->field15.size());
  for (auto _iter_r = this->field15.begin(); _iter_r != this->field15.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BOOL, 16);
  xfer += prot_->serializedSizeBool(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->serializedSizeI32(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_FLOAT, 18);
  xfer += prot_->serializedSizeFloat(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_I16, 19);
  xfer += prot_->serializedSizeI16(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_I16, 20);
  xfer += prot_->serializedSizeI16(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_SET, 21);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I16, this->field21.size());
  for (auto _iter_r = this->field21.begin(); _iter_r != this->field21.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRUCT, 22);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::serializedSize(prot_, &this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_SET, 23);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, this->field23.size());
  for (auto _iter_r = this->field23.begin(); _iter_r != this->field23.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I64, 25);
  xfer += prot_->serializedSizeI64(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->serializedSizeBinary(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_LIST, 27);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I64, this->field27.size());
  for (auto _iter_r = this->field27.begin(); _iter_r != this->field27.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_STRUCT, 28);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_STRUCT, 29);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_LIST, 30);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I16, this->field30.size());
  for (auto _iter_r = this->field30.begin(); _iter_r != this->field30.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_BYTE, 31);
  xfer += prot_->serializedSizeByte(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_I64, 32);
  xfer += prot_->serializedSizeI64(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_I32, 33);
  xfer += prot_->serializedSizeI32(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->serializedSizeI64(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_DOUBLE, 36);
  xfer += prot_->serializedSizeDouble(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSize(prot_, &this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_DOUBLE, 38);
  xfer += prot_->serializedSizeDouble(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_SET, 39);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I16, this->field39.size());
  for (auto _iter_r = this->field39.begin(); _iter_r != this->field39.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_STRUCT, 40);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_I32, 41);
  xfer += prot_->serializedSizeI32(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_I64, 42);
  xfer += prot_->serializedSizeI64(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_FLOAT, 43);
  xfer += prot_->serializedSizeFloat(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRUCT, 44);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSize(prot_, &this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_LIST, 45);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_DOUBLE, this->field45.size());
  for (auto _iter_r = this->field45.begin(); _iter_r != this->field45.end(); ++_iter_r) {
    xfer += prot_->serializedSizeDouble((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_DOUBLE, 46);
  xfer += prot_->serializedSizeDouble(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRUCT, 47);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSize(prot_, &this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_FLOAT, 48);
  xfer += prot_->serializedSizeFloat(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_MAP, 49);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I64, apache::thrift::protocol::T_I32, this->field49.size());
  for (auto _iter_rk_rv = this->field49.begin(); _iter_rk_rv != this->field49.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI64(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_STRUCT, 50);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_STRING, 51);
  xfer += prot_->serializedSizeBinary(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_BOOL, 52);
  xfer += prot_->serializedSizeBool(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_BYTE, 53);
  xfer += prot_->serializedSizeByte(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_I16, 54);
  xfer += prot_->serializedSizeI16(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_LIST, 55);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_DOUBLE, this->field55.size());
  for (auto _iter_r = this->field55.begin(); _iter_r != this->field55.end(); ++_iter_r) {
    xfer += prot_->serializedSizeDouble((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_STRUCT, 56);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct23>::serializedSize(prot_, &this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_SET, 57);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I64, this->field57.size());
  for (auto _iter_r = this->field57.begin(); _iter_r != this->field57.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_FLOAT, 58);
  xfer += prot_->serializedSizeFloat(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_MAP, 59);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_I32, this->field59.size());
  for (auto _iter_rk_r_rv = this->field59.begin(); _iter_rk_r_rv != this->field59.end(); ++_iter_rk_r_rv) {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_FLOAT, _iter_rk_r_rv->first.size());
    for (auto _iter_r = _iter_rk_r_rv->first.begin(); _iter_r != _iter_rk_r_rv->first.end(); ++_iter_r) {
      xfer += prot_->serializedSizeFloat((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
    xfer += prot_->serializedSizeI32(_iter_rk_r_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_BOOL, 60);
  xfer += prot_->serializedSizeBool(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_STRING, 61);
  xfer += prot_->serializedSizeBinary(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_LIST, 62);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I64, this->field62.size());
  for (auto _iter_r = this->field62.begin(); _iter_r != this->field62.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_BYTE, 63);
  xfer += prot_->serializedSizeByte(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_I32, 64);
  xfer += prot_->serializedSizeI32(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_BYTE, 65);
  xfer += prot_->serializedSizeByte(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_FLOAT, 66);
  xfer += prot_->serializedSizeFloat(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_BYTE, 67);
  xfer += prot_->serializedSizeByte(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_I64, 68);
  xfer += prot_->serializedSizeI64(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_MAP, 69);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_BYTE, this->field69.size());
  for (auto _iter_rk_rv = this->field69.begin(); _iter_rk_rv != this->field69.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeBool(_iter_rk_rv->first);
    xfer += prot_->serializedSizeByte(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_SET, 70);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I64, this->field70.size());
  for (auto _iter_r = this->field70.begin(); _iter_r != this->field70.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_DOUBLE, 71);
  xfer += prot_->serializedSizeDouble(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_SET, 72);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_DOUBLE, this->field72.size());
  for (auto _iter_r = this->field72.begin(); _iter_r != this->field72.end(); ++_iter_r) {
    xfer += prot_->serializedSizeDouble((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_MAP, 73);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_MAP, this->field73.size());
  for (auto _iter_rk_rv_rk_r_rv = this->field73.begin(); _iter_rk_rv_rk_r_rv != this->field73.end(); ++_iter_rk_rv_rk_r_rv) {
    xfer += prot_->serializedSizeByte(_iter_rk_rv_rk_r_rv->first);
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_I16, _iter_rk_rv_rk_r_rv->second.size());
    for (auto _iter_rk_r_rv = _iter_rk_rv_rk_r_rv->second.begin(); _iter_rk_r_rv != _iter_rk_rv_rk_r_rv->second.end(); ++_iter_rk_r_rv) {
      xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_DOUBLE, _iter_rk_r_rv->first.size());
      for (auto _iter_r = _iter_rk_r_rv->first.begin(); _iter_r != _iter_rk_r_rv->first.end(); ++_iter_r) {
        xfer += prot_->serializedSizeDouble((*_iter_r));
      }
      xfer += prot_->serializedSizeListEnd();
      xfer += prot_->serializedSizeI16(_iter_rk_r_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_BYTE, 74);
  xfer += prot_->serializedSizeByte(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_MAP, 75);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_BOOL, this->field75.size());
  for (auto _iter_rk_rv = this->field75.begin(); _iter_rk_rv != this->field75.end(); ++_iter_rk_rv) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::serializedSize(prot_, &_iter_rk_rv->first);
    xfer += prot_->serializedSizeBool(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_LIST, 76);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_LIST, this->field76.size());
  for (auto _iter_r_r = this->field76.begin(); _iter_r_r != this->field76.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeI32((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_STRING, 77);
  xfer += prot_->serializedSizeBinary(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_MAP, 78);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_SET, this->field78.size());
  for (auto _iter_rk_rv_r_r = this->field78.begin(); _iter_rk_rv_r_r != this->field78.end(); ++_iter_rk_rv_r_r) {
    xfer += prot_->serializedSizeBool(_iter_rk_rv_r_r->first);
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_SET, _iter_rk_rv_r_r->second.size());
    for (auto _iter_r_r = _iter_rk_rv_r_r->second.begin(); _iter_r_r != _iter_rk_rv_r_r->second.end(); ++_iter_r_r) {
      xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I16, (*_iter_r_r).size());
      for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
        xfer += prot_->serializedSizeI16((*_iter_r));
      }
      xfer += prot_->serializedSizeSetEnd();
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_MAP, 79);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_STRING, this->field79.size());
  for (auto _iter_rk_rv = this->field79.begin(); _iter_rk_rv != this->field79.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeBool(_iter_rk_rv->first);
    xfer += prot_->serializedSizeBinary(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_SET, 80);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I16, this->field80.size());
  for (auto _iter_r = this->field80.begin(); _iter_r != this->field80.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_STRING, 81);
  xfer += prot_->serializedSizeBinary(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_LIST, 82);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_LIST, this->field82.size());
  for (auto _iter_r_r = this->field82.begin(); _iter_r_r != this->field82.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeBinary((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_STRING, 83);
  xfer += prot_->serializedSizeBinary(this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_LIST, 84);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I64, this->field84.size());
  for (auto _iter_r = this->field84.begin(); _iter_r != this->field84.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_I16, 85);
  xfer += prot_->serializedSizeI16(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_STRING, 86);
  xfer += prot_->serializedSizeBinary(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_I64, 87);
  xfer += prot_->serializedSizeI64(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_SET, 88);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_MAP, this->field88.size());
  for (auto _iter_r_rk_rv = this->field88.begin(); _iter_r_rk_rv != this->field88.end(); ++_iter_r_rk_rv) {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BOOL, (*_iter_r_rk_rv).size());
    for (auto _iter_rk_rv = (*_iter_r_rk_rv).begin(); _iter_rk_rv != (*_iter_r_rk_rv).end(); ++_iter_rk_rv) {
      xfer += prot_->serializedSizeBinary(_iter_rk_rv->first);
      xfer += prot_->serializedSizeBool(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_STRING, 89);
  xfer += prot_->serializedSizeString(this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_FLOAT, 90);
  xfer += prot_->serializedSizeFloat(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_BYTE, 91);
  xfer += prot_->serializedSizeByte(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_STRING, 92);
  xfer += prot_->serializedSizeString(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_MAP, 93);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_I32, this->field93.size());
  for (auto _iter_rk_rv = this->field93.begin(); _iter_rk_rv != this->field93.end(); ++_iter_rk_rv) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct20>::serializedSize(prot_, &_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_FLOAT, 94);
  xfer += prot_->serializedSizeFloat(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_STRING, 95);
  xfer += prot_->serializedSizeString(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_BYTE, 96);
  xfer += prot_->serializedSizeByte(this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_BOOL, 97);
  xfer += prot_->serializedSizeBool(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_DOUBLE, 98);
  xfer += prot_->serializedSizeDouble(this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_SET, 99);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, this->field99.size());
  for (auto _iter_r = this->field99.begin(); _iter_r != this->field99.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSize(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_MAP, 100);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_SET, apache::thrift::protocol::T_FLOAT, this->field100.size());
  for (auto _iter_rk_r_r_rv = this->field100.begin(); _iter_rk_r_r_rv != this->field100.end(); ++_iter_rk_r_r_rv) {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_SET, _iter_rk_r_r_rv->first.size());
    for (auto _iter_r_r = _iter_rk_r_r_rv->first.begin(); _iter_r_r != _iter_rk_r_r_rv->first.end(); ++_iter_r_r) {
      xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, (*_iter_r_r).size());
      for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
        xfer += prot_->serializedSizeBinary((*_iter_r));
      }
      xfer += prot_->serializedSizeSetEnd();
    }
    xfer += prot_->serializedSizeSetEnd();
    xfer += prot_->serializedSizeFloat(_iter_rk_r_r_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_STRING, 101);
  xfer += prot_->serializedSizeBinary(this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_BYTE, 102);
  xfer += prot_->serializedSizeByte(this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_STRING, 103);
  xfer += prot_->serializedSizeString(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_STRUCT, 104);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::serializedSize(prot_, &this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_STRING, 105);
  xfer += prot_->serializedSizeString(this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_STRUCT, 106);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_MAP, 107);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_MAP, this->field107.size());
  for (auto _iter_rk_rv_rk_rv = this->field107.begin(); _iter_rk_rv_rk_rv != this->field107.end(); ++_iter_rk_rv_rk_rv) {
    xfer += prot_->serializedSizeI32(_iter_rk_rv_rk_rv->first);
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_DOUBLE, _iter_rk_rv_rk_rv->second.size());
    for (auto _iter_rk_rv = _iter_rk_rv_rk_rv->second.begin(); _iter_rk_rv != _iter_rk_rv_rk_rv->second.end(); ++_iter_rk_rv) {
      xfer += prot_->serializedSizeI16(_iter_rk_rv->first);
      xfer += prot_->serializedSizeDouble(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_STRING, 108);
  xfer += prot_->serializedSizeString(this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_I32, 109);
  xfer += prot_->serializedSizeI32(this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_STRUCT, 110);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_STRUCT, 111);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_STRUCT, 112);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSize(prot_, &this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_SET, 113);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I16, this->field113.size());
  for (auto _iter_r = this->field113.begin(); _iter_r != this->field113.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_FLOAT, 114);
  xfer += prot_->serializedSizeFloat(this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_FLOAT, 115);
  xfer += prot_->serializedSizeFloat(this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_STRUCT, 116);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSize(prot_, &this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_SET, 117);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_SET, this->field117.size());
  for (auto _iter_r_r = this->field117.begin(); _iter_r_r != this->field117.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_BYTE, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeByte((*_iter_r));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_STRUCT, 118);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_BOOL, 119);
  xfer += prot_->serializedSizeBool(this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_STRING, 120);
  xfer += prot_->serializedSizeBinary(this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_STRUCT, 121);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSize(prot_, &this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_STRUCT, 122);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_SET, 123);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, this->field123.size());
  for (auto _iter_r = this->field123.begin(); _iter_r != this->field123.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_STRING, 124);
  xfer += prot_->serializedSizeBinary(this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_DOUBLE, 125);
  xfer += prot_->serializedSizeDouble(this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_DOUBLE, 126);
  xfer += prot_->serializedSizeDouble(this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_MAP, 127);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_BOOL, this->field127.size());
  for (auto _iter_rk_r_rv = this->field127.begin(); _iter_rk_r_rv != this->field127.end(); ++_iter_rk_r_rv) {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I64, _iter_rk_r_rv->first.size());
    for (auto _iter_r = _iter_rk_r_rv->first.begin(); _iter_r != _iter_rk_r_rv->first.end(); ++_iter_r) {
      xfer += prot_->serializedSizeI64((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
    xfer += prot_->serializedSizeBool(_iter_rk_r_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_STRUCT, 128);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct25>::serializedSize(prot_, &this->field128);
  xfer += prot_->serializedFieldSize("field129", apache::thrift::protocol::T_STRUCT, 129);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field129);
  xfer += prot_->serializedFieldSize("field130", apache::thrift::protocol::T_STRING, 130);
  xfer += prot_->serializedSizeString(this->field130);
  xfer += prot_->serializedFieldSize("field131", apache::thrift::protocol::T_BOOL, 131);
  xfer += prot_->serializedSizeBool(this->field131);
  xfer += prot_->serializedFieldSize("field132", apache::thrift::protocol::T_SET, 132);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, this->field132.size());
  for (auto _iter_r = this->field132.begin(); _iter_r != this->field132.end(); ++_iter_r) {
    xfer += prot_->serializedSizeBinary((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field133", apache::thrift::protocol::T_I32, 133);
  xfer += prot_->serializedSizeI32(this->field133);
  xfer += prot_->serializedFieldSize("field134", apache::thrift::protocol::T_MAP, 134);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_MAP, this->field134.size());
  for (auto _iter_rk_rv_rk_rv = this->field134.begin(); _iter_rk_rv_rk_rv != this->field134.end(); ++_iter_rk_rv_rk_rv) {
    xfer += prot_->serializedSizeString(_iter_rk_rv_rk_rv->first);
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I64, apache::thrift::protocol::T_I16, _iter_rk_rv_rk_rv->second.size());
    for (auto _iter_rk_rv = _iter_rk_rv_rk_rv->second.begin(); _iter_rk_rv != _iter_rk_rv_rk_rv->second.end(); ++_iter_rk_rv) {
      xfer += prot_->serializedSizeI64(_iter_rk_rv->first);
      xfer += prot_->serializedSizeI16(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field135", apache::thrift::protocol::T_LIST, 135);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->field135.size());
  for (auto _iter_r = this->field135.begin(); _iter_r != this->field135.end(); ++_iter_r) {
    xfer += prot_->serializedSizeBinary((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field136", apache::thrift::protocol::T_DOUBLE, 136);
  xfer += prot_->serializedSizeDouble(this->field136);
  xfer += prot_->serializedFieldSize("field137", apache::thrift::protocol::T_BYTE, 137);
  xfer += prot_->serializedSizeByte(this->field137);
  xfer += prot_->serializedFieldSize("field138", apache::thrift::protocol::T_BYTE, 138);
  xfer += prot_->serializedSizeByte(this->field138);
  xfer += prot_->serializedFieldSize("field139", apache::thrift::protocol::T_SET, 139);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I16, this->field139.size());
  for (auto _iter_r = this->field139.begin(); _iter_r != this->field139.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field140", apache::thrift::protocol::T_BYTE, 140);
  xfer += prot_->serializedSizeByte(this->field140);
  xfer += prot_->serializedFieldSize("field141", apache::thrift::protocol::T_MAP, 141);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_BYTE, this->field141.size());
  for (auto _iter_rk_rv = this->field141.begin(); _iter_rk_rv != this->field141.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeByte(_iter_rk_rv->first);
    xfer += prot_->serializedSizeByte(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field142", apache::thrift::protocol::T_BOOL, 142);
  xfer += prot_->serializedSizeBool(this->field142);
  xfer += prot_->serializedFieldSize("field143", apache::thrift::protocol::T_BOOL, 143);
  xfer += prot_->serializedSizeBool(this->field143);
  xfer += prot_->serializedFieldSize("field144", apache::thrift::protocol::T_STRING, 144);
  xfer += prot_->serializedSizeString(this->field144);
  xfer += prot_->serializedFieldSize("field145", apache::thrift::protocol::T_I32, 145);
  xfer += prot_->serializedSizeI32(this->field145);
  xfer += prot_->serializedFieldSize("field146", apache::thrift::protocol::T_SET, 146);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, this->field146.size());
  for (auto _iter_r = this->field146.begin(); _iter_r != this->field146.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::serializedSize(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field147", apache::thrift::protocol::T_I16, 147);
  xfer += prot_->serializedSizeI16(this->field147);
  xfer += prot_->serializedFieldSize("field148", apache::thrift::protocol::T_BOOL, 148);
  xfer += prot_->serializedSizeBool(this->field148);
  xfer += prot_->serializedFieldSize("field149", apache::thrift::protocol::T_I32, 149);
  xfer += prot_->serializedSizeI32(this->field149);
  xfer += prot_->serializedFieldSize("field150", apache::thrift::protocol::T_MAP, 150);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_STRING, this->field150.size());
  for (auto _iter_rk_rv = this->field150.begin(); _iter_rk_rv != this->field150.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeByte(_iter_rk_rv->first);
    xfer += prot_->serializedSizeString(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field151", apache::thrift::protocol::T_MAP, 151);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BOOL, this->field151.size());
  for (auto _iter_rk_rv = this->field151.begin(); _iter_rk_rv != this->field151.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeBinary(_iter_rk_rv->first);
    xfer += prot_->serializedSizeBool(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field152", apache::thrift::protocol::T_FLOAT, 152);
  xfer += prot_->serializedSizeFloat(this->field152);
  xfer += prot_->serializedFieldSize("field153", apache::thrift::protocol::T_SET, 153);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I64, this->field153.size());
  for (auto _iter_r = this->field153.begin(); _iter_r != this->field153.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field154", apache::thrift::protocol::T_DOUBLE, 154);
  xfer += prot_->serializedSizeDouble(this->field154);
  xfer += prot_->serializedFieldSize("field155", apache::thrift::protocol::T_LIST, 155);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->field155.size());
  for (auto _iter_r = this->field155.begin(); _iter_r != this->field155.end(); ++_iter_r) {
    xfer += prot_->serializedSizeBinary((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct28::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct28");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, this->field1.size());
  for (auto _iter_r = this->field1.begin(); _iter_r != this->field1.end(); ++_iter_r) {
    xfer += prot_->serializedSizeString((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, this->field2.size());
  for (auto _iter_r = this->field2.begin(); _iter_r != this->field2.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->field3.size());
  for (auto _iter_r = this->field3.begin(); _iter_r != this->field3.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSizeZC(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->serializedSizeI64(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeZCBinary(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_SET, this->field7.size());
  for (auto _iter_r_r = this->field7.begin(); _iter_r_r != this->field7.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeZCBinary((*_iter_r));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_BYTE, 8);
  xfer += prot_->serializedSizeByte(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->serializedSizeZCBinary(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->serializedSizeI64(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_SET, apache::thrift::protocol::T_I16, this->field11.size());
  for (auto _iter_rk_r_rv = this->field11.begin(); _iter_rk_r_rv != this->field11.end(); ++_iter_rk_r_rv) {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, _iter_rk_r_rv->first.size());
    for (auto _iter_r = _iter_rk_r_rv->first.begin(); _iter_r != _iter_rk_r_rv->first.end(); ++_iter_r) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::serializedSizeZC(prot_, &(*_iter_r));
    }
    xfer += prot_->serializedSizeSetEnd();
    xfer += prot_->serializedSizeI16(_iter_rk_r_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->serializedSizeI64(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_BYTE, this->field13.size());
  for (auto _iter_r = this->field13.begin(); _iter_r != this->field13.end(); ++_iter_r) {
    xfer += prot_->serializedSizeByte((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_FLOAT, this->field14.size());
  for (auto _iter_r = this->field14.begin(); _iter_r != this->field14.end(); ++_iter_r) {
    xfer += prot_->serializedSizeFloat((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, this->field15.size());
  for (auto _iter_r = this->field15.begin(); _iter_r != this->field15.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BOOL, 16);
  xfer += prot_->serializedSizeBool(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->serializedSizeI32(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_FLOAT, 18);
  xfer += prot_->serializedSizeFloat(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_I16, 19);
  xfer += prot_->serializedSizeI16(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_I16, 20);
  xfer += prot_->serializedSizeI16(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_SET, 21);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I16, this->field21.size());
  for (auto _iter_r = this->field21.begin(); _iter_r != this->field21.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRUCT, 22);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::serializedSizeZC(prot_, &this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_SET, 23);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, this->field23.size());
  for (auto _iter_r = this->field23.begin(); _iter_r != this->field23.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I64, 25);
  xfer += prot_->serializedSizeI64(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->serializedSizeZCBinary(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_LIST, 27);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I64, this->field27.size());
  for (auto _iter_r = this->field27.begin(); _iter_r != this->field27.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_STRUCT, 28);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_STRUCT, 29);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_LIST, 30);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I16, this->field30.size());
  for (auto _iter_r = this->field30.begin(); _iter_r != this->field30.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_BYTE, 31);
  xfer += prot_->serializedSizeByte(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_I64, 32);
  xfer += prot_->serializedSizeI64(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_I32, 33);
  xfer += prot_->serializedSizeI32(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->serializedSizeI64(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_DOUBLE, 36);
  xfer += prot_->serializedSizeDouble(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSizeZC(prot_, &this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_DOUBLE, 38);
  xfer += prot_->serializedSizeDouble(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_SET, 39);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I16, this->field39.size());
  for (auto _iter_r = this->field39.begin(); _iter_r != this->field39.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_STRUCT, 40);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_I32, 41);
  xfer += prot_->serializedSizeI32(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_I64, 42);
  xfer += prot_->serializedSizeI64(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_FLOAT, 43);
  xfer += prot_->serializedSizeFloat(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRUCT, 44);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSizeZC(prot_, &this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_LIST, 45);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_DOUBLE, this->field45.size());
  for (auto _iter_r = this->field45.begin(); _iter_r != this->field45.end(); ++_iter_r) {
    xfer += prot_->serializedSizeDouble((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_DOUBLE, 46);
  xfer += prot_->serializedSizeDouble(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRUCT, 47);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSizeZC(prot_, &this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_FLOAT, 48);
  xfer += prot_->serializedSizeFloat(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_MAP, 49);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I64, apache::thrift::protocol::T_I32, this->field49.size());
  for (auto _iter_rk_rv = this->field49.begin(); _iter_rk_rv != this->field49.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI64(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_STRUCT, 50);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_STRING, 51);
  xfer += prot_->serializedSizeZCBinary(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_BOOL, 52);
  xfer += prot_->serializedSizeBool(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_BYTE, 53);
  xfer += prot_->serializedSizeByte(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_I16, 54);
  xfer += prot_->serializedSizeI16(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_LIST, 55);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_DOUBLE, this->field55.size());
  for (auto _iter_r = this->field55.begin(); _iter_r != this->field55.end(); ++_iter_r) {
    xfer += prot_->serializedSizeDouble((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_STRUCT, 56);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct23>::serializedSizeZC(prot_, &this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_SET, 57);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I64, this->field57.size());
  for (auto _iter_r = this->field57.begin(); _iter_r != this->field57.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_FLOAT, 58);
  xfer += prot_->serializedSizeFloat(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_MAP, 59);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_I32, this->field59.size());
  for (auto _iter_rk_r_rv = this->field59.begin(); _iter_rk_r_rv != this->field59.end(); ++_iter_rk_r_rv) {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_FLOAT, _iter_rk_r_rv->first.size());
    for (auto _iter_r = _iter_rk_r_rv->first.begin(); _iter_r != _iter_rk_r_rv->first.end(); ++_iter_r) {
      xfer += prot_->serializedSizeFloat((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
    xfer += prot_->serializedSizeI32(_iter_rk_r_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_BOOL, 60);
  xfer += prot_->serializedSizeBool(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_STRING, 61);
  xfer += prot_->serializedSizeZCBinary(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_LIST, 62);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I64, this->field62.size());
  for (auto _iter_r = this->field62.begin(); _iter_r != this->field62.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_BYTE, 63);
  xfer += prot_->serializedSizeByte(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_I32, 64);
  xfer += prot_->serializedSizeI32(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_BYTE, 65);
  xfer += prot_->serializedSizeByte(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_FLOAT, 66);
  xfer += prot_->serializedSizeFloat(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_BYTE, 67);
  xfer += prot_->serializedSizeByte(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_I64, 68);
  xfer += prot_->serializedSizeI64(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_MAP, 69);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_BYTE, this->field69.size());
  for (auto _iter_rk_rv = this->field69.begin(); _iter_rk_rv != this->field69.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeBool(_iter_rk_rv->first);
    xfer += prot_->serializedSizeByte(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_SET, 70);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I64, this->field70.size());
  for (auto _iter_r = this->field70.begin(); _iter_r != this->field70.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_DOUBLE, 71);
  xfer += prot_->serializedSizeDouble(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_SET, 72);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_DOUBLE, this->field72.size());
  for (auto _iter_r = this->field72.begin(); _iter_r != this->field72.end(); ++_iter_r) {
    xfer += prot_->serializedSizeDouble((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_MAP, 73);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_MAP, this->field73.size());
  for (auto _iter_rk_rv_rk_r_rv = this->field73.begin(); _iter_rk_rv_rk_r_rv != this->field73.end(); ++_iter_rk_rv_rk_r_rv) {
    xfer += prot_->serializedSizeByte(_iter_rk_rv_rk_r_rv->first);
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_I16, _iter_rk_rv_rk_r_rv->second.size());
    for (auto _iter_rk_r_rv = _iter_rk_rv_rk_r_rv->second.begin(); _iter_rk_r_rv != _iter_rk_rv_rk_r_rv->second.end(); ++_iter_rk_r_rv) {
      xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_DOUBLE, _iter_rk_r_rv->first.size());
      for (auto _iter_r = _iter_rk_r_rv->first.begin(); _iter_r != _iter_rk_r_rv->first.end(); ++_iter_r) {
        xfer += prot_->serializedSizeDouble((*_iter_r));
      }
      xfer += prot_->serializedSizeListEnd();
      xfer += prot_->serializedSizeI16(_iter_rk_r_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_BYTE, 74);
  xfer += prot_->serializedSizeByte(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_MAP, 75);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_BOOL, this->field75.size());
  for (auto _iter_rk_rv = this->field75.begin(); _iter_rk_rv != this->field75.end(); ++_iter_rk_rv) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::serializedSizeZC(prot_, &_iter_rk_rv->first);
    xfer += prot_->serializedSizeBool(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_LIST, 76);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_LIST, this->field76.size());
  for (auto _iter_r_r = this->field76.begin(); _iter_r_r != this->field76.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeI32((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_STRING, 77);
  xfer += prot_->serializedSizeZCBinary(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_MAP, 78);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_SET, this->field78.size());
  for (auto _iter_rk_rv_r_r = this->field78.begin(); _iter_rk_rv_r_r != this->field78.end(); ++_iter_rk_rv_r_r) {
    xfer += prot_->serializedSizeBool(_iter_rk_rv_r_r->first);
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_SET, _iter_rk_rv_r_r->second.size());
    for (auto _iter_r_r = _iter_rk_rv_r_r->second.begin(); _iter_r_r != _iter_rk_rv_r_r->second.end(); ++_iter_r_r) {
      xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I16, (*_iter_r_r).size());
      for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
        xfer += prot_->serializedSizeI16((*_iter_r));
      }
      xfer += prot_->serializedSizeSetEnd();
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_MAP, 79);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_STRING, this->field79.size());
  for (auto _iter_rk_rv = this->field79.begin(); _iter_rk_rv != this->field79.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeBool(_iter_rk_rv->first);
    xfer += prot_->serializedSizeZCBinary(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_SET, 80);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I16, this->field80.size());
  for (auto _iter_r = this->field80.begin(); _iter_r != this->field80.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_STRING, 81);
  xfer += prot_->serializedSizeZCBinary(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_LIST, 82);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_LIST, this->field82.size());
  for (auto _iter_r_r = this->field82.begin(); _iter_r_r != this->field82.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeZCBinary((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_STRING, 83);
  xfer += prot_->serializedSizeZCBinary(this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_LIST, 84);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I64, this->field84.size());
  for (auto _iter_r = this->field84.begin(); _iter_r != this->field84.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_I16, 85);
  xfer += prot_->serializedSizeI16(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_STRING, 86);
  xfer += prot_->serializedSizeZCBinary(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_I64, 87);
  xfer += prot_->serializedSizeI64(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_SET, 88);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_MAP, this->field88.size());
  for (auto _iter_r_rk_rv = this->field88.begin(); _iter_r_rk_rv != this->field88.end(); ++_iter_r_rk_rv) {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BOOL, (*_iter_r_rk_rv).size());
    for (auto _iter_rk_rv = (*_iter_r_rk_rv).begin(); _iter_rk_rv != (*_iter_r_rk_rv).end(); ++_iter_rk_rv) {
      xfer += prot_->serializedSizeZCBinary(_iter_rk_rv->first);
      xfer += prot_->serializedSizeBool(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_STRING, 89);
  xfer += prot_->serializedSizeString(this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_FLOAT, 90);
  xfer += prot_->serializedSizeFloat(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_BYTE, 91);
  xfer += prot_->serializedSizeByte(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_STRING, 92);
  xfer += prot_->serializedSizeString(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_MAP, 93);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_I32, this->field93.size());
  for (auto _iter_rk_rv = this->field93.begin(); _iter_rk_rv != this->field93.end(); ++_iter_rk_rv) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct20>::serializedSizeZC(prot_, &_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_FLOAT, 94);
  xfer += prot_->serializedSizeFloat(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_STRING, 95);
  xfer += prot_->serializedSizeString(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_BYTE, 96);
  xfer += prot_->serializedSizeByte(this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_BOOL, 97);
  xfer += prot_->serializedSizeBool(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_DOUBLE, 98);
  xfer += prot_->serializedSizeDouble(this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_SET, 99);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, this->field99.size());
  for (auto _iter_r = this->field99.begin(); _iter_r != this->field99.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSizeZC(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_MAP, 100);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_SET, apache::thrift::protocol::T_FLOAT, this->field100.size());
  for (auto _iter_rk_r_r_rv = this->field100.begin(); _iter_rk_r_r_rv != this->field100.end(); ++_iter_rk_r_r_rv) {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_SET, _iter_rk_r_r_rv->first.size());
    for (auto _iter_r_r = _iter_rk_r_r_rv->first.begin(); _iter_r_r != _iter_rk_r_r_rv->first.end(); ++_iter_r_r) {
      xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, (*_iter_r_r).size());
      for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
        xfer += prot_->serializedSizeZCBinary((*_iter_r));
      }
      xfer += prot_->serializedSizeSetEnd();
    }
    xfer += prot_->serializedSizeSetEnd();
    xfer += prot_->serializedSizeFloat(_iter_rk_r_r_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_STRING, 101);
  xfer += prot_->serializedSizeZCBinary(this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_BYTE, 102);
  xfer += prot_->serializedSizeByte(this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_STRING, 103);
  xfer += prot_->serializedSizeString(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_STRUCT, 104);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::serializedSizeZC(prot_, &this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_STRING, 105);
  xfer += prot_->serializedSizeString(this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_STRUCT, 106);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_MAP, 107);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_MAP, this->field107.size());
  for (auto _iter_rk_rv_rk_rv = this->field107.begin(); _iter_rk_rv_rk_rv != this->field107.end(); ++_iter_rk_rv_rk_rv) {
    xfer += prot_->serializedSizeI32(_iter_rk_rv_rk_rv->first);
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_DOUBLE, _iter_rk_rv_rk_rv->second.size());
    for (auto _iter_rk_rv = _iter_rk_rv_rk_rv->second.begin(); _iter_rk_rv != _iter_rk_rv_rk_rv->second.end(); ++_iter_rk_rv) {
      xfer += prot_->serializedSizeI16(_iter_rk_rv->first);
      xfer += prot_->serializedSizeDouble(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_STRING, 108);
  xfer += prot_->serializedSizeString(this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_I32, 109);
  xfer += prot_->serializedSizeI32(this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_STRUCT, 110);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_STRUCT, 111);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_STRUCT, 112);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSizeZC(prot_, &this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_SET, 113);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I16, this->field113.size());
  for (auto _iter_r = this->field113.begin(); _iter_r != this->field113.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_FLOAT, 114);
  xfer += prot_->serializedSizeFloat(this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_FLOAT, 115);
  xfer += prot_->serializedSizeFloat(this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_STRUCT, 116);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSizeZC(prot_, &this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_SET, 117);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_SET, this->field117.size());
  for (auto _iter_r_r = this->field117.begin(); _iter_r_r != this->field117.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_BYTE, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeByte((*_iter_r));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_STRUCT, 118);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_BOOL, 119);
  xfer += prot_->serializedSizeBool(this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_STRING, 120);
  xfer += prot_->serializedSizeZCBinary(this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_STRUCT, 121);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSizeZC(prot_, &this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_STRUCT, 122);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_SET, 123);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, this->field123.size());
  for (auto _iter_r = this->field123.begin(); _iter_r != this->field123.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_STRING, 124);
  xfer += prot_->serializedSizeZCBinary(this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_DOUBLE, 125);
  xfer += prot_->serializedSizeDouble(this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_DOUBLE, 126);
  xfer += prot_->serializedSizeDouble(this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_MAP, 127);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_BOOL, this->field127.size());
  for (auto _iter_rk_r_rv = this->field127.begin(); _iter_rk_r_rv != this->field127.end(); ++_iter_rk_r_rv) {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I64, _iter_rk_r_rv->first.size());
    for (auto _iter_r = _iter_rk_r_rv->first.begin(); _iter_r != _iter_rk_r_rv->first.end(); ++_iter_r) {
      xfer += prot_->serializedSizeI64((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
    xfer += prot_->serializedSizeBool(_iter_rk_r_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_STRUCT, 128);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct25>::serializedSizeZC(prot_, &this->field128);
  xfer += prot_->serializedFieldSize("field129", apache::thrift::protocol::T_STRUCT, 129);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field129);
  xfer += prot_->serializedFieldSize("field130", apache::thrift::protocol::T_STRING, 130);
  xfer += prot_->serializedSizeString(this->field130);
  xfer += prot_->serializedFieldSize("field131", apache::thrift::protocol::T_BOOL, 131);
  xfer += prot_->serializedSizeBool(this->field131);
  xfer += prot_->serializedFieldSize("field132", apache::thrift::protocol::T_SET, 132);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, this->field132.size());
  for (auto _iter_r = this->field132.begin(); _iter_r != this->field132.end(); ++_iter_r) {
    xfer += prot_->serializedSizeZCBinary((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field133", apache::thrift::protocol::T_I32, 133);
  xfer += prot_->serializedSizeI32(this->field133);
  xfer += prot_->serializedFieldSize("field134", apache::thrift::protocol::T_MAP, 134);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_MAP, this->field134.size());
  for (auto _iter_rk_rv_rk_rv = this->field134.begin(); _iter_rk_rv_rk_rv != this->field134.end(); ++_iter_rk_rv_rk_rv) {
    xfer += prot_->serializedSizeString(_iter_rk_rv_rk_rv->first);
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I64, apache::thrift::protocol::T_I16, _iter_rk_rv_rk_rv->second.size());
    for (auto _iter_rk_rv = _iter_rk_rv_rk_rv->second.begin(); _iter_rk_rv != _iter_rk_rv_rk_rv->second.end(); ++_iter_rk_rv) {
      xfer += prot_->serializedSizeI64(_iter_rk_rv->first);
      xfer += prot_->serializedSizeI16(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field135", apache::thrift::protocol::T_LIST, 135);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->field135.size());
  for (auto _iter_r = this->field135.begin(); _iter_r != this->field135.end(); ++_iter_r) {
    xfer += prot_->serializedSizeZCBinary((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field136", apache::thrift::protocol::T_DOUBLE, 136);
  xfer += prot_->serializedSizeDouble(this->field136);
  xfer += prot_->serializedFieldSize("field137", apache::thrift::protocol::T_BYTE, 137);
  xfer += prot_->serializedSizeByte(this->field137);
  xfer += prot_->serializedFieldSize("field138", apache::thrift::protocol::T_BYTE, 138);
  xfer += prot_->serializedSizeByte(this->field138);
  xfer += prot_->serializedFieldSize("field139", apache::thrift::protocol::T_SET, 139);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I16, this->field139.size());
  for (auto _iter_r = this->field139.begin(); _iter_r != this->field139.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field140", apache::thrift::protocol::T_BYTE, 140);
  xfer += prot_->serializedSizeByte(this->field140);
  xfer += prot_->serializedFieldSize("field141", apache::thrift::protocol::T_MAP, 141);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_BYTE, this->field141.size());
  for (auto _iter_rk_rv = this->field141.begin(); _iter_rk_rv != this->field141.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeByte(_iter_rk_rv->first);
    xfer += prot_->serializedSizeByte(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field142", apache::thrift::protocol::T_BOOL, 142);
  xfer += prot_->serializedSizeBool(this->field142);
  xfer += prot_->serializedFieldSize("field143", apache::thrift::protocol::T_BOOL, 143);
  xfer += prot_->serializedSizeBool(this->field143);
  xfer += prot_->serializedFieldSize("field144", apache::thrift::protocol::T_STRING, 144);
  xfer += prot_->serializedSizeString(this->field144);
  xfer += prot_->serializedFieldSize("field145", apache::thrift::protocol::T_I32, 145);
  xfer += prot_->serializedSizeI32(this->field145);
  xfer += prot_->serializedFieldSize("field146", apache::thrift::protocol::T_SET, 146);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, this->field146.size());
  for (auto _iter_r = this->field146.begin(); _iter_r != this->field146.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::serializedSizeZC(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field147", apache::thrift::protocol::T_I16, 147);
  xfer += prot_->serializedSizeI16(this->field147);
  xfer += prot_->serializedFieldSize("field148", apache::thrift::protocol::T_BOOL, 148);
  xfer += prot_->serializedSizeBool(this->field148);
  xfer += prot_->serializedFieldSize("field149", apache::thrift::protocol::T_I32, 149);
  xfer += prot_->serializedSizeI32(this->field149);
  xfer += prot_->serializedFieldSize("field150", apache::thrift::protocol::T_MAP, 150);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_STRING, this->field150.size());
  for (auto _iter_rk_rv = this->field150.begin(); _iter_rk_rv != this->field150.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeByte(_iter_rk_rv->first);
    xfer += prot_->serializedSizeString(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field151", apache::thrift::protocol::T_MAP, 151);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BOOL, this->field151.size());
  for (auto _iter_rk_rv = this->field151.begin(); _iter_rk_rv != this->field151.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeZCBinary(_iter_rk_rv->first);
    xfer += prot_->serializedSizeBool(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field152", apache::thrift::protocol::T_FLOAT, 152);
  xfer += prot_->serializedSizeFloat(this->field152);
  xfer += prot_->serializedFieldSize("field153", apache::thrift::protocol::T_SET, 153);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I64, this->field153.size());
  for (auto _iter_r = this->field153.begin(); _iter_r != this->field153.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field154", apache::thrift::protocol::T_DOUBLE, 154);
  xfer += prot_->serializedSizeDouble(this->field154);
  xfer += prot_->serializedFieldSize("field155", apache::thrift::protocol::T_LIST, 155);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->field155.size());
  for (auto _iter_r = this->field155.begin(); _iter_r != this->field155.end(); ++_iter_r) {
    xfer += prot_->serializedSizeZCBinary((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct28::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct28");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_SET, 1);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRING, this->field1.size());
  for (auto _iter_r = this->field1.begin(); _iter_r != this->field1.end(); ++_iter_r) {
    xfer += prot_->writeString((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_SET, 2);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRUCT, this->field2.size());
  for (auto _iter_r = this->field2.begin(); _iter_r != this->field2.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &(*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRUCT, this->field3.size());
  for (auto _iter_r = this->field3.begin(); _iter_r != this->field3.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::write(prot_, &(*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->writeI64(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->writeBinary(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_SET, this->field7.size());
  for (auto _iter_r_r = this->field7.begin(); _iter_r_r != this->field7.end(); ++_iter_r_r) {
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRING, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->writeBinary((*_iter_r));
    }
    xfer += prot_->writeSetEnd();
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_BYTE, 8);
  xfer += prot_->writeByte(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->writeBinary(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->writeI64(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_SET, apache::thrift::protocol::T_I16, this->field11.size());
  for (auto _iter_rk_r_rv = this->field11.begin(); _iter_rk_r_rv != this->field11.end(); ++_iter_rk_r_rv) {
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRUCT, _iter_rk_r_rv->first.size());
    for (auto _iter_r = _iter_rk_r_rv->first.begin(); _iter_r != _iter_rk_r_rv->first.end(); ++_iter_r) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::write(prot_, &(*_iter_r));
    }
    xfer += prot_->writeSetEnd();
    xfer += prot_->writeI16(_iter_rk_r_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->writeI64(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_BYTE, this->field13.size());
  for (auto _iter_r = this->field13.begin(); _iter_r != this->field13.end(); ++_iter_r) {
    xfer += prot_->writeByte((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_FLOAT, this->field14.size());
  for (auto _iter_r = this->field14.begin(); _iter_r != this->field14.end(); ++_iter_r) {
    xfer += prot_->writeFloat((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, this->field15.size());
  for (auto _iter_r = this->field15.begin(); _iter_r != this->field15.end(); ++_iter_r) {
    xfer += prot_->writeI32((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_BOOL, 16);
  xfer += prot_->writeBool(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->writeI32(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_FLOAT, 18);
  xfer += prot_->writeFloat(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_I16, 19);
  xfer += prot_->writeI16(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_I16, 20);
  xfer += prot_->writeI16(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_SET, 21);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I16, this->field21.size());
  for (auto _iter_r = this->field21.begin(); _iter_r != this->field21.end(); ++_iter_r) {
    xfer += prot_->writeI16((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_STRUCT, 22);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::write(prot_, &this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_SET, 23);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, this->field23.size());
  for (auto _iter_r = this->field23.begin(); _iter_r != this->field23.end(); ++_iter_r) {
    xfer += prot_->writeI32((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_I64, 25);
  xfer += prot_->writeI64(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->writeBinary(this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_LIST, 27);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I64, this->field27.size());
  for (auto _iter_r = this->field27.begin(); _iter_r != this->field27.end(); ++_iter_r) {
    xfer += prot_->writeI64((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_STRUCT, 28);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_STRUCT, 29);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_LIST, 30);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I16, this->field30.size());
  for (auto _iter_r = this->field30.begin(); _iter_r != this->field30.end(); ++_iter_r) {
    xfer += prot_->writeI16((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_BYTE, 31);
  xfer += prot_->writeByte(this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_I64, 32);
  xfer += prot_->writeI64(this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_I32, 33);
  xfer += prot_->writeI32(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->writeI64(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_DOUBLE, 36);
  xfer += prot_->writeDouble(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::write(prot_, &this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_DOUBLE, 38);
  xfer += prot_->writeDouble(this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_SET, 39);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I16, this->field39.size());
  for (auto _iter_r = this->field39.begin(); _iter_r != this->field39.end(); ++_iter_r) {
    xfer += prot_->writeI16((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_STRUCT, 40);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_I32, 41);
  xfer += prot_->writeI32(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_I64, 42);
  xfer += prot_->writeI64(this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_FLOAT, 43);
  xfer += prot_->writeFloat(this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_STRUCT, 44);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::write(prot_, &this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_LIST, 45);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_DOUBLE, this->field45.size());
  for (auto _iter_r = this->field45.begin(); _iter_r != this->field45.end(); ++_iter_r) {
    xfer += prot_->writeDouble((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_DOUBLE, 46);
  xfer += prot_->writeDouble(this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_STRUCT, 47);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::write(prot_, &this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_FLOAT, 48);
  xfer += prot_->writeFloat(this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_MAP, 49);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I64, apache::thrift::protocol::T_I32, this->field49.size());
  for (auto _iter_rk_rv = this->field49.begin(); _iter_rk_rv != this->field49.end(); ++_iter_rk_rv) {
    xfer += prot_->writeI64(_iter_rk_rv->first);
    xfer += prot_->writeI32(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_STRUCT, 50);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_STRING, 51);
  xfer += prot_->writeBinary(this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_BOOL, 52);
  xfer += prot_->writeBool(this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_BYTE, 53);
  xfer += prot_->writeByte(this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_I16, 54);
  xfer += prot_->writeI16(this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_LIST, 55);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_DOUBLE, this->field55.size());
  for (auto _iter_r = this->field55.begin(); _iter_r != this->field55.end(); ++_iter_r) {
    xfer += prot_->writeDouble((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_STRUCT, 56);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct23>::write(prot_, &this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_SET, 57);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I64, this->field57.size());
  for (auto _iter_r = this->field57.begin(); _iter_r != this->field57.end(); ++_iter_r) {
    xfer += prot_->writeI64((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_FLOAT, 58);
  xfer += prot_->writeFloat(this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_MAP, 59);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_I32, this->field59.size());
  for (auto _iter_rk_r_rv = this->field59.begin(); _iter_rk_r_rv != this->field59.end(); ++_iter_rk_r_rv) {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_FLOAT, _iter_rk_r_rv->first.size());
    for (auto _iter_r = _iter_rk_r_rv->first.begin(); _iter_r != _iter_rk_r_rv->first.end(); ++_iter_r) {
      xfer += prot_->writeFloat((*_iter_r));
    }
    xfer += prot_->writeListEnd();
    xfer += prot_->writeI32(_iter_rk_r_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_BOOL, 60);
  xfer += prot_->writeBool(this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_STRING, 61);
  xfer += prot_->writeBinary(this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_LIST, 62);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I64, this->field62.size());
  for (auto _iter_r = this->field62.begin(); _iter_r != this->field62.end(); ++_iter_r) {
    xfer += prot_->writeI64((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_BYTE, 63);
  xfer += prot_->writeByte(this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_I32, 64);
  xfer += prot_->writeI32(this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_BYTE, 65);
  xfer += prot_->writeByte(this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_FLOAT, 66);
  xfer += prot_->writeFloat(this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_BYTE, 67);
  xfer += prot_->writeByte(this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_I64, 68);
  xfer += prot_->writeI64(this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_MAP, 69);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_BYTE, this->field69.size());
  for (auto _iter_rk_rv = this->field69.begin(); _iter_rk_rv != this->field69.end(); ++_iter_rk_rv) {
    xfer += prot_->writeBool(_iter_rk_rv->first);
    xfer += prot_->writeByte(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_SET, 70);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I64, this->field70.size());
  for (auto _iter_r = this->field70.begin(); _iter_r != this->field70.end(); ++_iter_r) {
    xfer += prot_->writeI64((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_DOUBLE, 71);
  xfer += prot_->writeDouble(this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_SET, 72);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_DOUBLE, this->field72.size());
  for (auto _iter_r = this->field72.begin(); _iter_r != this->field72.end(); ++_iter_r) {
    xfer += prot_->writeDouble((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_MAP, 73);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_MAP, this->field73.size());
  for (auto _iter_rk_rv_rk_r_rv = this->field73.begin(); _iter_rk_rv_rk_r_rv != this->field73.end(); ++_iter_rk_rv_rk_r_rv) {
    xfer += prot_->writeByte(_iter_rk_rv_rk_r_rv->first);
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_I16, _iter_rk_rv_rk_r_rv->second.size());
    for (auto _iter_rk_r_rv = _iter_rk_rv_rk_r_rv->second.begin(); _iter_rk_r_rv != _iter_rk_rv_rk_r_rv->second.end(); ++_iter_rk_r_rv) {
      xfer += prot_->writeListBegin(apache::thrift::protocol::T_DOUBLE, _iter_rk_r_rv->first.size());
      for (auto _iter_r = _iter_rk_r_rv->first.begin(); _iter_r != _iter_rk_r_rv->first.end(); ++_iter_r) {
        xfer += prot_->writeDouble((*_iter_r));
      }
      xfer += prot_->writeListEnd();
      xfer += prot_->writeI16(_iter_rk_r_rv->second);
    }
    xfer += prot_->writeMapEnd();
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_BYTE, 74);
  xfer += prot_->writeByte(this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_MAP, 75);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_BOOL, this->field75.size());
  for (auto _iter_rk_rv = this->field75.begin(); _iter_rk_rv != this->field75.end(); ++_iter_rk_rv) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::write(prot_, &_iter_rk_rv->first);
    xfer += prot_->writeBool(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_LIST, 76);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_LIST, this->field76.size());
  for (auto _iter_r_r = this->field76.begin(); _iter_r_r != this->field76.end(); ++_iter_r_r) {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->writeI32((*_iter_r));
    }
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_STRING, 77);
  xfer += prot_->writeBinary(this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_MAP, 78);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_SET, this->field78.size());
  for (auto _iter_rk_rv_r_r = this->field78.begin(); _iter_rk_rv_r_r != this->field78.end(); ++_iter_rk_rv_r_r) {
    xfer += prot_->writeBool(_iter_rk_rv_r_r->first);
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_SET, _iter_rk_rv_r_r->second.size());
    for (auto _iter_r_r = _iter_rk_rv_r_r->second.begin(); _iter_r_r != _iter_rk_rv_r_r->second.end(); ++_iter_r_r) {
      xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I16, (*_iter_r_r).size());
      for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
        xfer += prot_->writeI16((*_iter_r));
      }
      xfer += prot_->writeSetEnd();
    }
    xfer += prot_->writeSetEnd();
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_MAP, 79);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_STRING, this->field79.size());
  for (auto _iter_rk_rv = this->field79.begin(); _iter_rk_rv != this->field79.end(); ++_iter_rk_rv) {
    xfer += prot_->writeBool(_iter_rk_rv->first);
    xfer += prot_->writeBinary(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_SET, 80);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I16, this->field80.size());
  for (auto _iter_r = this->field80.begin(); _iter_r != this->field80.end(); ++_iter_r) {
    xfer += prot_->writeI16((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_STRING, 81);
  xfer += prot_->writeBinary(this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_LIST, 82);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_LIST, this->field82.size());
  for (auto _iter_r_r = this->field82.begin(); _iter_r_r != this->field82.end(); ++_iter_r_r) {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->writeBinary((*_iter_r));
    }
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_STRING, 83);
  xfer += prot_->writeBinary(this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_LIST, 84);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I64, this->field84.size());
  for (auto _iter_r = this->field84.begin(); _iter_r != this->field84.end(); ++_iter_r) {
    xfer += prot_->writeI64((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_I16, 85);
  xfer += prot_->writeI16(this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_STRING, 86);
  xfer += prot_->writeBinary(this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_I64, 87);
  xfer += prot_->writeI64(this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_SET, 88);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_MAP, this->field88.size());
  for (auto _iter_r_rk_rv = this->field88.begin(); _iter_r_rk_rv != this->field88.end(); ++_iter_r_rk_rv) {
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BOOL, (*_iter_r_rk_rv).size());
    for (auto _iter_rk_rv = (*_iter_r_rk_rv).begin(); _iter_rk_rv != (*_iter_r_rk_rv).end(); ++_iter_rk_rv) {
      xfer += prot_->writeBinary(_iter_rk_rv->first);
      xfer += prot_->writeBool(_iter_rk_rv->second);
    }
    xfer += prot_->writeMapEnd();
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_STRING, 89);
  xfer += prot_->writeString(this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_FLOAT, 90);
  xfer += prot_->writeFloat(this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_BYTE, 91);
  xfer += prot_->writeByte(this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_STRING, 92);
  xfer += prot_->writeString(this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_MAP, 93);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_I32, this->field93.size());
  for (auto _iter_rk_rv = this->field93.begin(); _iter_rk_rv != this->field93.end(); ++_iter_rk_rv) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct20>::write(prot_, &_iter_rk_rv->first);
    xfer += prot_->writeI32(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_FLOAT, 94);
  xfer += prot_->writeFloat(this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_STRING, 95);
  xfer += prot_->writeString(this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field96", apache::thrift::protocol::T_BYTE, 96);
  xfer += prot_->writeByte(this->field96);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field97", apache::thrift::protocol::T_BOOL, 97);
  xfer += prot_->writeBool(this->field97);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field98", apache::thrift::protocol::T_DOUBLE, 98);
  xfer += prot_->writeDouble(this->field98);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field99", apache::thrift::protocol::T_SET, 99);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRUCT, this->field99.size());
  for (auto _iter_r = this->field99.begin(); _iter_r != this->field99.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::write(prot_, &(*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field100", apache::thrift::protocol::T_MAP, 100);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_SET, apache::thrift::protocol::T_FLOAT, this->field100.size());
  for (auto _iter_rk_r_r_rv = this->field100.begin(); _iter_rk_r_r_rv != this->field100.end(); ++_iter_rk_r_r_rv) {
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_SET, _iter_rk_r_r_rv->first.size());
    for (auto _iter_r_r = _iter_rk_r_r_rv->first.begin(); _iter_r_r != _iter_rk_r_r_rv->first.end(); ++_iter_r_r) {
      xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRING, (*_iter_r_r).size());
      for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
        xfer += prot_->writeBinary((*_iter_r));
      }
      xfer += prot_->writeSetEnd();
    }
    xfer += prot_->writeSetEnd();
    xfer += prot_->writeFloat(_iter_rk_r_r_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field101", apache::thrift::protocol::T_STRING, 101);
  xfer += prot_->writeBinary(this->field101);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field102", apache::thrift::protocol::T_BYTE, 102);
  xfer += prot_->writeByte(this->field102);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field103", apache::thrift::protocol::T_STRING, 103);
  xfer += prot_->writeString(this->field103);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field104", apache::thrift::protocol::T_STRUCT, 104);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::write(prot_, &this->field104);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field105", apache::thrift::protocol::T_STRING, 105);
  xfer += prot_->writeString(this->field105);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field106", apache::thrift::protocol::T_STRUCT, 106);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field106);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field107", apache::thrift::protocol::T_MAP, 107);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_MAP, this->field107.size());
  for (auto _iter_rk_rv_rk_rv = this->field107.begin(); _iter_rk_rv_rk_rv != this->field107.end(); ++_iter_rk_rv_rk_rv) {
    xfer += prot_->writeI32(_iter_rk_rv_rk_rv->first);
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_DOUBLE, _iter_rk_rv_rk_rv->second.size());
    for (auto _iter_rk_rv = _iter_rk_rv_rk_rv->second.begin(); _iter_rk_rv != _iter_rk_rv_rk_rv->second.end(); ++_iter_rk_rv) {
      xfer += prot_->writeI16(_iter_rk_rv->first);
      xfer += prot_->writeDouble(_iter_rk_rv->second);
    }
    xfer += prot_->writeMapEnd();
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field108", apache::thrift::protocol::T_STRING, 108);
  xfer += prot_->writeString(this->field108);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field109", apache::thrift::protocol::T_I32, 109);
  xfer += prot_->writeI32(this->field109);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field110", apache::thrift::protocol::T_STRUCT, 110);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field110);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field111", apache::thrift::protocol::T_STRUCT, 111);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field111);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field112", apache::thrift::protocol::T_STRUCT, 112);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::write(prot_, &this->field112);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field113", apache::thrift::protocol::T_SET, 113);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I16, this->field113.size());
  for (auto _iter_r = this->field113.begin(); _iter_r != this->field113.end(); ++_iter_r) {
    xfer += prot_->writeI16((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field114", apache::thrift::protocol::T_FLOAT, 114);
  xfer += prot_->writeFloat(this->field114);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field115", apache::thrift::protocol::T_FLOAT, 115);
  xfer += prot_->writeFloat(this->field115);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field116", apache::thrift::protocol::T_STRUCT, 116);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::write(prot_, &this->field116);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field117", apache::thrift::protocol::T_SET, 117);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_SET, this->field117.size());
  for (auto _iter_r_r = this->field117.begin(); _iter_r_r != this->field117.end(); ++_iter_r_r) {
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_BYTE, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->writeByte((*_iter_r));
    }
    xfer += prot_->writeSetEnd();
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field118", apache::thrift::protocol::T_STRUCT, 118);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field118);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field119", apache::thrift::protocol::T_BOOL, 119);
  xfer += prot_->writeBool(this->field119);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field120", apache::thrift::protocol::T_STRING, 120);
  xfer += prot_->writeBinary(this->field120);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field121", apache::thrift::protocol::T_STRUCT, 121);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::write(prot_, &this->field121);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field122", apache::thrift::protocol::T_STRUCT, 122);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field122);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field123", apache::thrift::protocol::T_SET, 123);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, this->field123.size());
  for (auto _iter_r = this->field123.begin(); _iter_r != this->field123.end(); ++_iter_r) {
    xfer += prot_->writeI32((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field124", apache::thrift::protocol::T_STRING, 124);
  xfer += prot_->writeBinary(this->field124);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field125", apache::thrift::protocol::T_DOUBLE, 125);
  xfer += prot_->writeDouble(this->field125);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field126", apache::thrift::protocol::T_DOUBLE, 126);
  xfer += prot_->writeDouble(this->field126);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field127", apache::thrift::protocol::T_MAP, 127);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_BOOL, this->field127.size());
  for (auto _iter_rk_r_rv = this->field127.begin(); _iter_rk_r_rv != this->field127.end(); ++_iter_rk_r_rv) {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_I64, _iter_rk_r_rv->first.size());
    for (auto _iter_r = _iter_rk_r_rv->first.begin(); _iter_r != _iter_rk_r_rv->first.end(); ++_iter_r) {
      xfer += prot_->writeI64((*_iter_r));
    }
    xfer += prot_->writeListEnd();
    xfer += prot_->writeBool(_iter_rk_r_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field128", apache::thrift::protocol::T_STRUCT, 128);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct25>::write(prot_, &this->field128);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field129", apache::thrift::protocol::T_STRUCT, 129);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field129);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field130", apache::thrift::protocol::T_STRING, 130);
  xfer += prot_->writeString(this->field130);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field131", apache::thrift::protocol::T_BOOL, 131);
  xfer += prot_->writeBool(this->field131);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field132", apache::thrift::protocol::T_SET, 132);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRING, this->field132.size());
  for (auto _iter_r = this->field132.begin(); _iter_r != this->field132.end(); ++_iter_r) {
    xfer += prot_->writeBinary((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field133", apache::thrift::protocol::T_I32, 133);
  xfer += prot_->writeI32(this->field133);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field134", apache::thrift::protocol::T_MAP, 134);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_MAP, this->field134.size());
  for (auto _iter_rk_rv_rk_rv = this->field134.begin(); _iter_rk_rv_rk_rv != this->field134.end(); ++_iter_rk_rv_rk_rv) {
    xfer += prot_->writeString(_iter_rk_rv_rk_rv->first);
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I64, apache::thrift::protocol::T_I16, _iter_rk_rv_rk_rv->second.size());
    for (auto _iter_rk_rv = _iter_rk_rv_rk_rv->second.begin(); _iter_rk_rv != _iter_rk_rv_rk_rv->second.end(); ++_iter_rk_rv) {
      xfer += prot_->writeI64(_iter_rk_rv->first);
      xfer += prot_->writeI16(_iter_rk_rv->second);
    }
    xfer += prot_->writeMapEnd();
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field135", apache::thrift::protocol::T_LIST, 135);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, this->field135.size());
  for (auto _iter_r = this->field135.begin(); _iter_r != this->field135.end(); ++_iter_r) {
    xfer += prot_->writeBinary((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field136", apache::thrift::protocol::T_DOUBLE, 136);
  xfer += prot_->writeDouble(this->field136);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field137", apache::thrift::protocol::T_BYTE, 137);
  xfer += prot_->writeByte(this->field137);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field138", apache::thrift::protocol::T_BYTE, 138);
  xfer += prot_->writeByte(this->field138);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field139", apache::thrift::protocol::T_SET, 139);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I16, this->field139.size());
  for (auto _iter_r = this->field139.begin(); _iter_r != this->field139.end(); ++_iter_r) {
    xfer += prot_->writeI16((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field140", apache::thrift::protocol::T_BYTE, 140);
  xfer += prot_->writeByte(this->field140);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field141", apache::thrift::protocol::T_MAP, 141);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_BYTE, this->field141.size());
  for (auto _iter_rk_rv = this->field141.begin(); _iter_rk_rv != this->field141.end(); ++_iter_rk_rv) {
    xfer += prot_->writeByte(_iter_rk_rv->first);
    xfer += prot_->writeByte(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field142", apache::thrift::protocol::T_BOOL, 142);
  xfer += prot_->writeBool(this->field142);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field143", apache::thrift::protocol::T_BOOL, 143);
  xfer += prot_->writeBool(this->field143);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field144", apache::thrift::protocol::T_STRING, 144);
  xfer += prot_->writeString(this->field144);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field145", apache::thrift::protocol::T_I32, 145);
  xfer += prot_->writeI32(this->field145);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field146", apache::thrift::protocol::T_SET, 146);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRUCT, this->field146.size());
  for (auto _iter_r = this->field146.begin(); _iter_r != this->field146.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::write(prot_, &(*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field147", apache::thrift::protocol::T_I16, 147);
  xfer += prot_->writeI16(this->field147);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field148", apache::thrift::protocol::T_BOOL, 148);
  xfer += prot_->writeBool(this->field148);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field149", apache::thrift::protocol::T_I32, 149);
  xfer += prot_->writeI32(this->field149);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field150", apache::thrift::protocol::T_MAP, 150);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_STRING, this->field150.size());
  for (auto _iter_rk_rv = this->field150.begin(); _iter_rk_rv != this->field150.end(); ++_iter_rk_rv) {
    xfer += prot_->writeByte(_iter_rk_rv->first);
    xfer += prot_->writeString(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field151", apache::thrift::protocol::T_MAP, 151);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BOOL, this->field151.size());
  for (auto _iter_rk_rv = this->field151.begin(); _iter_rk_rv != this->field151.end(); ++_iter_rk_rv) {
    xfer += prot_->writeBinary(_iter_rk_rv->first);
    xfer += prot_->writeBool(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field152", apache::thrift::protocol::T_FLOAT, 152);
  xfer += prot_->writeFloat(this->field152);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field153", apache::thrift::protocol::T_SET, 153);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I64, this->field153.size());
  for (auto _iter_r = this->field153.begin(); _iter_r != this->field153.end(); ++_iter_r) {
    xfer += prot_->writeI64((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field154", apache::thrift::protocol::T_DOUBLE, 154);
  xfer += prot_->writeDouble(this->field154);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field155", apache::thrift::protocol::T_LIST, 155);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, this->field155.size());
  for (auto _iter_r = this->field155.begin(); _iter_r != this->field155.end(); ++_iter_r) {
    xfer += prot_->writeBinary((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

} // cpp2
