/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "file12_types.h"

#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>
#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>

namespace cpp2 {

template <class Protocol_>
uint32_t Struct0::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field2 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field4 = std::vector< ::cpp2::Struct3>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field5 = std::map<std::vector<std::string>, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::string>, int16_t>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field6 = std::map<std::map<std::map<bool, int64_t>, std::string>, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>, std::map<std::map<std::map<bool, int64_t>, std::string>, bool>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field9 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field10 = std::set< ::cpp2::Struct13>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct13>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field11 = std::vector<std::set<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int16_t>>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct0::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct0");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->serializedSizeFloat(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::string>, int16_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>, std::map<std::map<std::map<bool, int64_t>, std::string>, bool>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->serializedSizeFloat(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += prot_->serializedSizeDouble(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_SET, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct13>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int16_t>>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->serializedSizeByte(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_I32, 13);
  xfer += prot_->serializedSizeI32(this->field13);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct0::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct0");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->serializedSizeFloat(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::string>, int16_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>, std::map<std::map<std::map<bool, int64_t>, std::string>, bool>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->serializedSizeFloat(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += prot_->serializedSizeDouble(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_SET, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct13>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int16_t>>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->serializedSizeByte(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_I32, 13);
  xfer += prot_->serializedSizeI32(this->field13);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct0::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct0");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->writeFloat(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::string>, int16_t>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>, std::map<std::map<std::map<bool, int64_t>, std::string>, bool>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->writeFloat(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += prot_->writeDouble(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_SET, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct13>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int16_t>>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->writeByte(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_I32, 13);
  xfer += prot_->writeI32(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct1::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field2 = std::vector<std::vector<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int32_t>>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field3 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field4 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field8 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field9 = std::set<std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::set<std::vector<std::string>>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field13 = std::vector< ::cpp2::Struct8>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct8>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field14 = std::set< ::cpp2::Struct6>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct6>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field15 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field16 = std::map<std::set<int16_t>, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>, std::map<std::set<int16_t>, double>>::read(*iprot, this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field18 = std::map<int64_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int64_t, std::string>>::read(*iprot, this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field20 = std::map< ::cpp2::Struct0, std::map<std::string, std::set< ::cpp2::Struct7>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>>, std::map< ::cpp2::Struct0, std::map<std::string, std::set< ::cpp2::Struct7>>>>::read(*iprot, this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field22 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field24 = std::map<std::map<int16_t, std::string>, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>, std::map<std::map<int16_t, std::string>, int16_t>>::read(*iprot, this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field25 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field27 = std::map<int8_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::read(*iprot, this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field28 = std::map<bool, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::read(*iprot, this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field29 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct1::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct1");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeBinary(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_FLOAT, 6);
  xfer += prot_->serializedSizeFloat(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BOOL, 7);
  xfer += prot_->serializedSizeBool(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::set<std::vector<std::string>>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->serializedSizeI32(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->serializedSizeI32(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I16, 12);
  xfer += prot_->serializedSizeI16(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct8>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct6>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_MAP, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>, std::map<std::set<int16_t>, double>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_FLOAT, 17);
  xfer += prot_->serializedSizeFloat(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int64_t, std::string>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_STRUCT, 19);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>>, std::map< ::cpp2::Struct0, std::map<std::string, std::set< ::cpp2::Struct7>>>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_FLOAT, 21);
  xfer += prot_->serializedSizeFloat(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_SET, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->serializedSizeBinary(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>, std::map<std::map<int16_t, std::string>, int16_t>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_LIST, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRUCT, 26);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_SET, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct1::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct1");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeZCBinary(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_FLOAT, 6);
  xfer += prot_->serializedSizeFloat(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BOOL, 7);
  xfer += prot_->serializedSizeBool(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::set<std::vector<std::string>>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->serializedSizeI32(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->serializedSizeI32(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I16, 12);
  xfer += prot_->serializedSizeI16(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct8>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct6>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_MAP, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>, std::map<std::set<int16_t>, double>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_FLOAT, 17);
  xfer += prot_->serializedSizeFloat(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int64_t, std::string>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_STRUCT, 19);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>>, std::map< ::cpp2::Struct0, std::map<std::string, std::set< ::cpp2::Struct7>>>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_FLOAT, 21);
  xfer += prot_->serializedSizeFloat(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_SET, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->serializedSizeZCBinary(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>, std::map<std::map<int16_t, std::string>, int16_t>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_LIST, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRUCT, 26);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_SET, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct1::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct1");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int32_t>>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->writeBinary(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_FLOAT, 6);
  xfer += prot_->writeFloat(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_BOOL, 7);
  xfer += prot_->writeBool(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::set<std::vector<std::string>>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->writeI32(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->writeI32(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_I16, 12);
  xfer += prot_->writeI16(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct8>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct6>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_MAP, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>, std::map<std::set<int16_t>, double>>::write(*prot_, this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_FLOAT, 17);
  xfer += prot_->writeFloat(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int64_t, std::string>>::write(*prot_, this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_STRUCT, 19);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>>, std::map< ::cpp2::Struct0, std::map<std::string, std::set< ::cpp2::Struct7>>>>::write(*prot_, this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_FLOAT, 21);
  xfer += prot_->writeFloat(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_SET, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->writeBinary(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>, std::map<std::map<int16_t, std::string>, int16_t>>::write(*prot_, this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_LIST, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_STRUCT, 26);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::write(*prot_, this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::write(*prot_, this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_SET, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct2::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field2 = std::vector<std::set<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<bool>>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field3 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field4 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field5 = std::vector< ::cpp2::Struct15>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct15>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field6 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field9 = std::map<int16_t,  ::cpp2::Struct7>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct7>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field13 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field14 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::read(iprot, &this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field17 = std::map<int8_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field18 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field31 = std::map<std::string, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::read(*iprot, this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field35 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field36 = std::vector< ::cpp2::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::read(*iprot, this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field38 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field39 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct2::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct2");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<bool>>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct15>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_BOOL, 8);
  xfer += prot_->serializedSizeBool(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct7>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I16, 10);
  xfer += prot_->serializedSizeI16(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->serializedSizeBinary(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSize(prot_, &this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BYTE, 16);
  xfer += prot_->serializedSizeByte(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_LIST, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_FLOAT, 19);
  xfer += prot_->serializedSizeFloat(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_DOUBLE, 20);
  xfer += prot_->serializedSizeDouble(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_FLOAT, 21);
  xfer += prot_->serializedSizeFloat(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_I32, 22);
  xfer += prot_->serializedSizeI32(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_FLOAT, 23);
  xfer += prot_->serializedSizeFloat(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_I16, 24);
  xfer += prot_->serializedSizeI16(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_FLOAT, 25);
  xfer += prot_->serializedSizeFloat(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->serializedSizeBinary(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_BYTE, 27);
  xfer += prot_->serializedSizeByte(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_DOUBLE, 28);
  xfer += prot_->serializedSizeDouble(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_STRING, 29);
  xfer += prot_->serializedSizeString(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_STRUCT, 30);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_MAP, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_I64, 32);
  xfer += prot_->serializedSizeI64(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_STRUCT, 33);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->serializedSizeI64(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_LIST, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_LIST, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_I32, 37);
  xfer += prot_->serializedSizeI32(this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_LIST, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_SET, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_I16, 40);
  xfer += prot_->serializedSizeI16(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_FLOAT, 41);
  xfer += prot_->serializedSizeFloat(this->field41);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct2::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct2");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<bool>>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct15>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_BOOL, 8);
  xfer += prot_->serializedSizeBool(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct7>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I16, 10);
  xfer += prot_->serializedSizeI16(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->serializedSizeZCBinary(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSizeZC(prot_, &this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BYTE, 16);
  xfer += prot_->serializedSizeByte(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_LIST, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_FLOAT, 19);
  xfer += prot_->serializedSizeFloat(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_DOUBLE, 20);
  xfer += prot_->serializedSizeDouble(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_FLOAT, 21);
  xfer += prot_->serializedSizeFloat(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_I32, 22);
  xfer += prot_->serializedSizeI32(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_FLOAT, 23);
  xfer += prot_->serializedSizeFloat(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_I16, 24);
  xfer += prot_->serializedSizeI16(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_FLOAT, 25);
  xfer += prot_->serializedSizeFloat(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->serializedSizeZCBinary(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_BYTE, 27);
  xfer += prot_->serializedSizeByte(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_DOUBLE, 28);
  xfer += prot_->serializedSizeDouble(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_STRING, 29);
  xfer += prot_->serializedSizeString(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_STRUCT, 30);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_MAP, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_I64, 32);
  xfer += prot_->serializedSizeI64(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_STRUCT, 33);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->serializedSizeI64(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_LIST, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_LIST, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_I32, 37);
  xfer += prot_->serializedSizeI32(this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_LIST, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_SET, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_I16, 40);
  xfer += prot_->serializedSizeI16(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_FLOAT, 41);
  xfer += prot_->serializedSizeFloat(this->field41);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct2::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct2");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->writeBool(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<bool>>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct15>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->writeByte(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_BOOL, 8);
  xfer += prot_->writeBool(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct7>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_I16, 10);
  xfer += prot_->writeI16(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->writeBinary(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::write(prot_, &this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_BYTE, 16);
  xfer += prot_->writeByte(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_LIST, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_FLOAT, 19);
  xfer += prot_->writeFloat(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_DOUBLE, 20);
  xfer += prot_->writeDouble(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_FLOAT, 21);
  xfer += prot_->writeFloat(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_I32, 22);
  xfer += prot_->writeI32(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_FLOAT, 23);
  xfer += prot_->writeFloat(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_I16, 24);
  xfer += prot_->writeI16(this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_FLOAT, 25);
  xfer += prot_->writeFloat(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->writeBinary(this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_BYTE, 27);
  xfer += prot_->writeByte(this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_DOUBLE, 28);
  xfer += prot_->writeDouble(this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_STRING, 29);
  xfer += prot_->writeString(this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_STRUCT, 30);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_MAP, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::write(*prot_, this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_I64, 32);
  xfer += prot_->writeI64(this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_STRUCT, 33);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->writeI64(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_LIST, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_LIST, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::write(*prot_, this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_I32, 37);
  xfer += prot_->writeI32(this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_LIST, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_SET, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_I16, 40);
  xfer += prot_->writeI16(this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_FLOAT, 41);
  xfer += prot_->writeFloat(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct3::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field4 = std::map<double, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct3::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct3");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->serializedSizeI64(this->field6);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct3::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct3");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->serializedSizeI64(this->field6);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct3::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct3");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->writeDouble(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->writeI64(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->writeI64(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct4::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field1 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field3 = std::map<bool, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<bool, std::string>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field6 = std::vector< ::cpp2::Struct5>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct5>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field8 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field9 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field14 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field15 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field16 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field21 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field25 = std::map<int64_t, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, bool>>::read(*iprot, this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct4::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct4");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<bool, std::string>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_FLOAT, 4);
  xfer += prot_->serializedSizeFloat(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->serializedSizeFloat(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct5>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->serializedSizeDouble(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_BOOL, 10);
  xfer += prot_->serializedSizeBool(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_BOOL, 11);
  xfer += prot_->serializedSizeBool(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->serializedSizeI64(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->serializedSizeString(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRING, 17);
  xfer += prot_->serializedSizeString(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I16, 18);
  xfer += prot_->serializedSizeI16(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_I32, 19);
  xfer += prot_->serializedSizeI32(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_I64, 20);
  xfer += prot_->serializedSizeI64(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_SET, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_FLOAT, 22);
  xfer += prot_->serializedSizeFloat(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->serializedSizeString(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRING, 24);
  xfer += prot_->serializedSizeBinary(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_MAP, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, bool>>::serializedSize<false>(*prot_, this->field25);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct4::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct4");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<bool, std::string>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_FLOAT, 4);
  xfer += prot_->serializedSizeFloat(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->serializedSizeFloat(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct5>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->serializedSizeDouble(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_BOOL, 10);
  xfer += prot_->serializedSizeBool(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_BOOL, 11);
  xfer += prot_->serializedSizeBool(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->serializedSizeI64(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->serializedSizeString(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRING, 17);
  xfer += prot_->serializedSizeString(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I16, 18);
  xfer += prot_->serializedSizeI16(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_I32, 19);
  xfer += prot_->serializedSizeI32(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_I64, 20);
  xfer += prot_->serializedSizeI64(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_SET, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_FLOAT, 22);
  xfer += prot_->serializedSizeFloat(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->serializedSizeString(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRING, 24);
  xfer += prot_->serializedSizeZCBinary(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_MAP, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, bool>>::serializedSize<false>(*prot_, this->field25);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct4::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct4");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<bool, std::string>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_FLOAT, 4);
  xfer += prot_->writeFloat(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->writeFloat(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct5>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->writeDouble(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_BOOL, 10);
  xfer += prot_->writeBool(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_BOOL, 11);
  xfer += prot_->writeBool(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->writeI64(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->writeString(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_STRING, 17);
  xfer += prot_->writeString(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_I16, 18);
  xfer += prot_->writeI16(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_I32, 19);
  xfer += prot_->writeI32(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_I64, 20);
  xfer += prot_->writeI64(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_SET, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_FLOAT, 22);
  xfer += prot_->writeFloat(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->writeString(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_STRING, 24);
  xfer += prot_->writeBinary(this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_MAP, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, bool>>::write(*prot_, this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct5::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field2 = std::map< ::cpp2::Struct0, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::string>, std::map< ::cpp2::Struct0, std::string>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct5::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct5");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BYTE, 1);
  xfer += prot_->serializedSizeByte(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::string>, std::map< ::cpp2::Struct0, std::string>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct5::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct5");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BYTE, 1);
  xfer += prot_->serializedSizeByte(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::string>, std::map< ::cpp2::Struct0, std::string>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct5::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct5");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_BYTE, 1);
  xfer += prot_->writeByte(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::string>, std::map< ::cpp2::Struct0, std::string>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct6::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct6::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct6");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct6::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct6");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct6::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct6");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct7::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field1 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct7::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct7");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct7::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct7");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct7::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct7");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct8::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct8::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct8");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct8::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct8");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct8::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct8");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct9::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field1 = std::set<std::vector<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field2 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field4 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field8 = std::map<int32_t, std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<int32_t, std::vector<std::string>>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field9 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct9::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct9");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->serializedSizeFloat(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->serializedSizeDouble(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_MAP, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<int32_t, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->serializedSizeI32(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_BOOL, 11);
  xfer += prot_->serializedSizeBool(this->field11);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct9::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct9");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->serializedSizeFloat(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->serializedSizeDouble(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_MAP, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<int32_t, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->serializedSizeI32(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_BOOL, 11);
  xfer += prot_->serializedSizeBool(this->field11);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct9::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct9");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->writeFloat(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->writeI16(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->writeI32(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->writeDouble(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_MAP, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<int32_t, std::vector<std::string>>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->writeI32(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_BOOL, 11);
  xfer += prot_->writeBool(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct10::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field2 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct10::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct10");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct10::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct10");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct10::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct10");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct11::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<int8_t, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, bool>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field3 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct11::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct11");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, bool>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_FLOAT, 2);
  xfer += prot_->serializedSizeFloat(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field4);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct11::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct11");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, bool>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_FLOAT, 2);
  xfer += prot_->serializedSizeFloat(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field4);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct11::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct11");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, bool>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_FLOAT, 2);
  xfer += prot_->writeFloat(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct12::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field5 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field6 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field7 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct12::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct12");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BYTE, 2);
  xfer += prot_->serializedSizeByte(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct12::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct12");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BYTE, 2);
  xfer += prot_->serializedSizeByte(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct12::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct12");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_BYTE, 2);
  xfer += prot_->writeByte(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->writeDouble(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct13::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field1 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct13::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct13");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct13::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct13");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct13::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct13");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct14::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field1 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field2 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field6 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field8 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field9 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field14 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct14::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct14");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->serializedSizeByte(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->serializedSizeI64(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_BOOL, 10);
  xfer += prot_->serializedSizeBool(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_BYTE, 11);
  xfer += prot_->serializedSizeByte(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->serializedSizeI64(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BYTE, 15);
  xfer += prot_->serializedSizeByte(this->field15);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct14::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct14");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->serializedSizeByte(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->serializedSizeI64(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_BOOL, 10);
  xfer += prot_->serializedSizeBool(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_BYTE, 11);
  xfer += prot_->serializedSizeByte(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->serializedSizeI64(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BYTE, 15);
  xfer += prot_->serializedSizeByte(this->field15);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct14::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct14");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->writeByte(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->writeI64(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->writeI16(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->writeByte(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_BOOL, 10);
  xfer += prot_->writeBool(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_BYTE, 11);
  xfer += prot_->writeByte(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->writeI64(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_BYTE, 15);
  xfer += prot_->writeByte(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct15::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct15::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct15");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct15::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct15");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct15::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct15");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct16::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field4 = std::map<double, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct16::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct16");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeString(this->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct16::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct16");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeString(this->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct16::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct16");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->writeI64(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->writeDouble(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeString(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->writeString(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct17::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field2 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field4 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field5 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field6 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct17::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct17");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->serializedSizeI16(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->serializedSizeFloat(this->field7);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct17::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct17");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->serializedSizeI16(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->serializedSizeFloat(this->field7);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct17::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct17");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->writeI16(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->writeFloat(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct18::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field1 = std::set<std::vector<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field2 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field4 = std::map< ::cpp2::Struct0, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct0, std::string>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field6 = std::map<int8_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field11 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field12 = std::vector< ::cpp2::Struct1>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct18::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct18");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct0, std::string>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->serializedSizeBool(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->serializedSizeDouble(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->serializedSizeBinary(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct18::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct18");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct0, std::string>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->serializedSizeBool(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->serializedSizeDouble(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->serializedSizeZCBinary(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct18::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct18");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeString(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct0, std::string>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->writeBool(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->writeDouble(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->writeBinary(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct19::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<std::string, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field3 = std::map<std::set<double>, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::set<double>, double>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field4 = std::map<std::string, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct19::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct19");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::set<double>, double>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct19::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct19");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::set<double>, double>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct19::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct19");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->writeI64(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::set<double>, double>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct20::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<int64_t, std::map<double, int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<int64_t, std::map<double, int16_t>>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct20::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct20");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<int64_t, std::map<double, int16_t>>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->field2);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct20::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct20");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<int64_t, std::map<double, int16_t>>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->field2);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct20::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct20");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<int64_t, std::map<double, int16_t>>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->writeI16(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct21::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field3 = std::map<float, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int32_t>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct21::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct21");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BYTE, 1);
  xfer += prot_->serializedSizeByte(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int32_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->serializedSizeI16(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct21::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct21");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BYTE, 1);
  xfer += prot_->serializedSizeByte(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int32_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->serializedSizeI16(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct21::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct21");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_BYTE, 1);
  xfer += prot_->writeByte(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->writeBool(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int32_t>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->writeI16(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->writeI32(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct22::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field1 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field3 = std::map<float, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field6 = std::vector<std::map<double, int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::vector<std::map<double, int8_t>>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field8 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct22::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct22");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_FLOAT, 2);
  xfer += prot_->serializedSizeFloat(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->serializedSizeDouble(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::vector<std::map<double, int8_t>>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->serializedSizeString(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->serializedSizeDouble(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_FLOAT, 11);
  xfer += prot_->serializedSizeFloat(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field12);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct22::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct22");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_FLOAT, 2);
  xfer += prot_->serializedSizeFloat(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->serializedSizeDouble(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::vector<std::map<double, int8_t>>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->serializedSizeString(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->serializedSizeDouble(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_FLOAT, 11);
  xfer += prot_->serializedSizeFloat(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field12);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct22::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct22");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_FLOAT, 2);
  xfer += prot_->writeFloat(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->writeDouble(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::vector<std::map<double, int8_t>>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->writeByte(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->writeString(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->writeDouble(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_FLOAT, 11);
  xfer += prot_->writeFloat(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct23::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::read(iprot, &this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::read(iprot, &this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct23::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct23");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSize(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BYTE, 6);
  xfer += prot_->serializedSizeByte(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->serializedSizeFloat(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeBinary(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_FLOAT, 9);
  xfer += prot_->serializedSizeFloat(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->serializedSizeDouble(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I16, 11);
  xfer += prot_->serializedSizeI16(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->serializedSizeI64(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::serializedSize(prot_, &this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I32, 14);
  xfer += prot_->serializedSizeI32(this->field14);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct23::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct23");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSizeZC(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BYTE, 6);
  xfer += prot_->serializedSizeByte(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->serializedSizeFloat(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeZCBinary(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_FLOAT, 9);
  xfer += prot_->serializedSizeFloat(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->serializedSizeDouble(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I16, 11);
  xfer += prot_->serializedSizeI16(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->serializedSizeI64(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::serializedSizeZC(prot_, &this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I32, 14);
  xfer += prot_->serializedSizeI32(this->field14);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct23::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct23");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->writeBool(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->writeDouble(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->writeByte(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::write(prot_, &this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_BYTE, 6);
  xfer += prot_->writeByte(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->writeFloat(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->writeBinary(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_FLOAT, 9);
  xfer += prot_->writeFloat(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->writeDouble(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_I16, 11);
  xfer += prot_->writeI16(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->writeI64(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::write(prot_, &this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_I32, 14);
  xfer += prot_->writeI32(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct24::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<double, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field3 = std::vector<std::vector<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int16_t>>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct19>::read(iprot, &this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct24::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct24");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BYTE, 2);
  xfer += prot_->serializedSizeByte(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct19>::serializedSize(prot_, &this->field4);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct24::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct24");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BYTE, 2);
  xfer += prot_->serializedSizeByte(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct19>::serializedSizeZC(prot_, &this->field4);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct24::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct24");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_BYTE, 2);
  xfer += prot_->writeByte(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int16_t>>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct19>::write(prot_, &this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct25::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field3 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field6 = std::set<std::vector<int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int8_t>>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field7 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::read(iprot, &this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field11 = std::set< ::cpp2::Struct5>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct5>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field13 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field14 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field18 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field20 = std::vector<std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::vector<std::vector<std::string>>>::read(*iprot, this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct25::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct25");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->serializedSizeFloat(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->serializedSizeDouble(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int8_t>>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::serializedSize(prot_, &this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_FLOAT, 9);
  xfer += prot_->serializedSizeFloat(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->serializedSizeString(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct5>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRING, 12);
  xfer += prot_->serializedSizeString(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->serializedSizeString(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRUCT, 17);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_LIST, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_STRING, 19);
  xfer += prot_->serializedSizeString(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::vector<std::vector<std::string>>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct25::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct25");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->serializedSizeFloat(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeZCBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->serializedSizeDouble(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int8_t>>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::serializedSizeZC(prot_, &this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_FLOAT, 9);
  xfer += prot_->serializedSizeFloat(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->serializedSizeString(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct5>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRING, 12);
  xfer += prot_->serializedSizeString(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->serializedSizeString(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRUCT, 17);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_LIST, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_STRING, 19);
  xfer += prot_->serializedSizeString(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::vector<std::vector<std::string>>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct25::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct25");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->writeFloat(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->writeI16(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeBinary(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->writeDouble(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int8_t>>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::write(prot_, &this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_FLOAT, 9);
  xfer += prot_->writeFloat(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->writeString(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct5>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_STRING, 12);
  xfer += prot_->writeString(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->writeString(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_STRUCT, 17);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_LIST, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_STRING, 19);
  xfer += prot_->writeString(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::vector<std::vector<std::string>>>::write(*prot_, this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct26::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field5 = std::map<int16_t, std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<int16_t, std::vector<std::string>>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field8 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field12 = std::map<int16_t, std::vector< ::cpp2::Struct20>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, std::map<int16_t, std::vector< ::cpp2::Struct20>>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct26::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct26");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->serializedSizeBool(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<int16_t, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->serializedSizeBool(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I64, 7);
  xfer += prot_->serializedSizeI64(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->serializedSizeBinary(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->serializedSizeI64(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_DOUBLE, 11);
  xfer += prot_->serializedSizeDouble(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, std::map<int16_t, std::vector< ::cpp2::Struct20>>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_I16, 13);
  xfer += prot_->serializedSizeI16(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_BYTE, 14);
  xfer += prot_->serializedSizeByte(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BOOL, 15);
  xfer += prot_->serializedSizeBool(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_DOUBLE, 16);
  xfer += prot_->serializedSizeDouble(this->field16);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct26::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct26");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->serializedSizeBool(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<int16_t, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->serializedSizeBool(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I64, 7);
  xfer += prot_->serializedSizeI64(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->serializedSizeZCBinary(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->serializedSizeI64(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_DOUBLE, 11);
  xfer += prot_->serializedSizeDouble(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, std::map<int16_t, std::vector< ::cpp2::Struct20>>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_I16, 13);
  xfer += prot_->serializedSizeI16(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_BYTE, 14);
  xfer += prot_->serializedSizeByte(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BOOL, 15);
  xfer += prot_->serializedSizeBool(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_DOUBLE, 16);
  xfer += prot_->serializedSizeDouble(this->field16);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct26::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct26");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->writeI16(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->writeBool(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->writeByte(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<int16_t, std::vector<std::string>>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->writeBool(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_I64, 7);
  xfer += prot_->writeI64(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->writeBinary(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->writeI64(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_DOUBLE, 11);
  xfer += prot_->writeDouble(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, std::map<int16_t, std::vector< ::cpp2::Struct20>>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_I16, 13);
  xfer += prot_->writeI16(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_BYTE, 14);
  xfer += prot_->writeByte(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_BOOL, 15);
  xfer += prot_->writeBool(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_DOUBLE, 16);
  xfer += prot_->writeDouble(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct27::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field2 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field3 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field4 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::read(iprot, &this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field6 = std::map<double, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field7 = std::set<std::vector<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field9 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field11 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field14 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct26>::read(iprot, &this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field17 = std::map<std::set<bool>, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<bool>, int32_t>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field19 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct27::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct27");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->serializedSizeFloat(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSize(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeString(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRUCT, 10);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRING, 12);
  xfer += prot_->serializedSizeString(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_FLOAT, 15);
  xfer += prot_->serializedSizeFloat(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct26>::serializedSize(prot_, &this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<bool>, int32_t>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_SET, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_FLOAT, 20);
  xfer += prot_->serializedSizeFloat(this->field20);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct27::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct27");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->serializedSizeFloat(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSizeZC(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeString(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRUCT, 10);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRING, 12);
  xfer += prot_->serializedSizeString(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_FLOAT, 15);
  xfer += prot_->serializedSizeFloat(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct26>::serializedSizeZC(prot_, &this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<bool>, int32_t>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_SET, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_FLOAT, 20);
  xfer += prot_->serializedSizeFloat(this->field20);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct27::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct27");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->writeFloat(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::write(prot_, &this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->writeString(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_STRUCT, 10);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_STRING, 12);
  xfer += prot_->writeString(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_FLOAT, 15);
  xfer += prot_->writeFloat(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct26>::write(prot_, &this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<bool>, int32_t>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_SET, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_FLOAT, 20);
  xfer += prot_->writeFloat(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct28::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct24>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct28::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct28");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct24>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct28::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct28");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct24>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct28::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct28");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->writeBool(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct24>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct29::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field1 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field2 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field3 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field5 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct29::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct29");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->serializedSizeBool(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct29::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct29");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->serializedSizeBool(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct29::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct29");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->writeBool(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct30::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct30::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct30");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->serializedSizeFloat(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BYTE, 2);
  xfer += prot_->serializedSizeByte(this->field2);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct30::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct30");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->serializedSizeFloat(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BYTE, 2);
  xfer += prot_->serializedSizeByte(this->field2);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct30::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct30");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->writeFloat(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_BYTE, 2);
  xfer += prot_->writeByte(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct31::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field3 = std::map<int16_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field4 = std::set<std::set<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field7 = std::map<float, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field8 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field9 = std::map<int8_t, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field12 = std::map<int16_t, std::set<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::set<float>>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct22>::read(iprot, &this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field15 = std::map<int64_t, std::map<int64_t,  ::cpp2::Struct1>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>, std::map<int64_t, std::map<int64_t,  ::cpp2::Struct1>>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field16 = std::map<int8_t, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int64_t>>::read(*iprot, this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field17 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field19 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct31::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct31");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BYTE, 6);
  xfer += prot_->serializedSizeByte(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_BYTE, 10);
  xfer += prot_->serializedSizeByte(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_BYTE, 11);
  xfer += prot_->serializedSizeByte(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::set<float>>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct22>::serializedSize(prot_, &this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>, std::map<int64_t, std::map<int64_t,  ::cpp2::Struct1>>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_MAP, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int64_t>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_SET, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRING, 18);
  xfer += prot_->serializedSizeString(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_STRING, 20);
  xfer += prot_->serializedSizeString(this->field20);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct31::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct31");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BYTE, 6);
  xfer += prot_->serializedSizeByte(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_BYTE, 10);
  xfer += prot_->serializedSizeByte(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_BYTE, 11);
  xfer += prot_->serializedSizeByte(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::set<float>>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct22>::serializedSizeZC(prot_, &this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>, std::map<int64_t, std::map<int64_t,  ::cpp2::Struct1>>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_MAP, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int64_t>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_SET, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRING, 18);
  xfer += prot_->serializedSizeString(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_STRING, 20);
  xfer += prot_->serializedSizeString(this->field20);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct31::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct31");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->writeI64(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->writeI32(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_BYTE, 6);
  xfer += prot_->writeByte(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_BYTE, 10);
  xfer += prot_->writeByte(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_BYTE, 11);
  xfer += prot_->writeByte(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::set<float>>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct22>::write(prot_, &this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>, std::map<int64_t, std::map<int64_t,  ::cpp2::Struct1>>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_MAP, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int64_t>>::write(*prot_, this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_SET, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_STRING, 18);
  xfer += prot_->writeString(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_STRING, 20);
  xfer += prot_->writeString(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct32::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::read(iprot, &this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field2 = std::map<int16_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field4 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field7 = std::map<float,  ::cpp2::Struct3>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<float,  ::cpp2::Struct3>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct32::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct32");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSize(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->serializedSizeFloat(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->serializedSizeI16(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<float,  ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct32::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct32");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSizeZC(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->serializedSizeFloat(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->serializedSizeI16(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<float,  ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct32::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct32");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::write(prot_, &this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeString(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->writeFloat(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->writeI16(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<float,  ::cpp2::Struct3>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct33::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field5 = std::map<int16_t, std::vector< ::cpp2::Struct4>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, std::map<int16_t, std::vector< ::cpp2::Struct4>>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field6 = std::map<double, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, double>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field9 = std::map<std::vector<std::string>, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::string>, int16_t>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field11 = std::map<bool,  ::cpp2::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<bool,  ::cpp2::Struct0>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field15 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct19>::read(iprot, &this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct33::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct33");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->serializedSizeI16(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->serializedSizeI16(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, std::map<int16_t, std::vector< ::cpp2::Struct4>>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, double>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BOOL, 7);
  xfer += prot_->serializedSizeBool(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->serializedSizeI32(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::string>, int16_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->serializedSizeI64(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<bool,  ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->serializedSizeByte(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_I64, 13);
  xfer += prot_->serializedSizeI64(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_FLOAT, 14);
  xfer += prot_->serializedSizeFloat(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct19>::serializedSize(prot_, &this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRUCT, 17);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field17);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct33::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct33");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->serializedSizeI16(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->serializedSizeI16(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, std::map<int16_t, std::vector< ::cpp2::Struct4>>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, double>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BOOL, 7);
  xfer += prot_->serializedSizeBool(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->serializedSizeI32(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::string>, int16_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->serializedSizeI64(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<bool,  ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->serializedSizeByte(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_I64, 13);
  xfer += prot_->serializedSizeI64(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_FLOAT, 14);
  xfer += prot_->serializedSizeFloat(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct19>::serializedSizeZC(prot_, &this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRUCT, 17);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field17);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct33::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct33");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->writeDouble(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->writeI16(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->writeI16(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->writeI16(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, std::map<int16_t, std::vector< ::cpp2::Struct4>>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, double>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_BOOL, 7);
  xfer += prot_->writeBool(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->writeI32(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::string>, int16_t>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->writeI64(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<bool,  ::cpp2::Struct0>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->writeByte(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_I64, 13);
  xfer += prot_->writeI64(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_FLOAT, 14);
  xfer += prot_->writeFloat(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct19>::write(prot_, &this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_STRUCT, 17);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct34::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct20>::read(iprot, &this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::read(iprot, &this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field10 = std::map<std::vector<std::map<double,  ::cpp2::Struct15>>,  ::cpp2::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>>, ::apache::thrift::type_class::structure>, std::map<std::vector<std::map<double,  ::cpp2::Struct15>>,  ::cpp2::Struct0>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field11 = std::vector<std::vector<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field14 = std::map<std::string, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>, std::map<std::string, double>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field15 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field20 = std::map<int16_t, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, double>>::read(*iprot, this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field22 = std::set<std::map<bool, float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::set<std::map<bool, float>>>::read(*iprot, this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field27 = std::map<std::string, std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<std::string, std::vector<std::string>>>::read(*iprot, this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field30 = std::set<std::vector<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::read(*iprot, this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field31 = std::set<std::map<std::set<std::string>, double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::apache::thrift::type_class::floating_point>>, std::set<std::map<std::set<std::string>, double>>>::read(*iprot, this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field36 = std::map<bool, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int8_t>>::read(*iprot, this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::read(iprot, &this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field38 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field41 = std::map<std::string, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::read(*iprot, this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct31>::read(iprot, &this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field43 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field44 = std::map<int16_t, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, bool>>::read(*iprot, this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct34::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct34");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct20>::serializedSize(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeBinary(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::serializedSize(prot_, &this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I64, 9);
  xfer += prot_->serializedSizeI64(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>>, ::apache::thrift::type_class::structure>, std::map<std::vector<std::map<double,  ::cpp2::Struct15>>,  ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_FLOAT, 12);
  xfer += prot_->serializedSizeFloat(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_BOOL, 13);
  xfer += prot_->serializedSizeBool(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>, std::map<std::string, double>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BYTE, 16);
  xfer += prot_->serializedSizeByte(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I64, 17);
  xfer += prot_->serializedSizeI64(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_FLOAT, 18);
  xfer += prot_->serializedSizeFloat(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_STRING, 19);
  xfer += prot_->serializedSizeBinary(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, double>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I32, 21);
  xfer += prot_->serializedSizeI32(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_SET, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::set<std::map<bool, float>>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->serializedSizeBinary(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_FLOAT, 24);
  xfer += prot_->serializedSizeFloat(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I16, 25);
  xfer += prot_->serializedSizeI16(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRUCT, 26);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<std::string, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_DOUBLE, 28);
  xfer += prot_->serializedSizeDouble(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_I64, 29);
  xfer += prot_->serializedSizeI64(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_SET, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::apache::thrift::type_class::floating_point>>, std::set<std::map<std::set<std::string>, double>>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_FLOAT, 32);
  xfer += prot_->serializedSizeFloat(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_STRING, 33);
  xfer += prot_->serializedSizeString(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_FLOAT, 34);
  xfer += prot_->serializedSizeFloat(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_I16, 35);
  xfer += prot_->serializedSizeI16(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_MAP, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int8_t>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSize(prot_, &this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_LIST, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_FLOAT, 39);
  xfer += prot_->serializedSizeFloat(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_BOOL, 40);
  xfer += prot_->serializedSizeBool(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_MAP, 41);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::serializedSize<false>(*prot_, this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_STRUCT, 42);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct31>::serializedSize(prot_, &this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_SET, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_MAP, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, bool>>::serializedSize<false>(*prot_, this->field44);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct34::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct34");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeZCBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct20>::serializedSizeZC(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeZCBinary(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::serializedSizeZC(prot_, &this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I64, 9);
  xfer += prot_->serializedSizeI64(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>>, ::apache::thrift::type_class::structure>, std::map<std::vector<std::map<double,  ::cpp2::Struct15>>,  ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_FLOAT, 12);
  xfer += prot_->serializedSizeFloat(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_BOOL, 13);
  xfer += prot_->serializedSizeBool(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>, std::map<std::string, double>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BYTE, 16);
  xfer += prot_->serializedSizeByte(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I64, 17);
  xfer += prot_->serializedSizeI64(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_FLOAT, 18);
  xfer += prot_->serializedSizeFloat(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_STRING, 19);
  xfer += prot_->serializedSizeZCBinary(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, double>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I32, 21);
  xfer += prot_->serializedSizeI32(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_SET, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::set<std::map<bool, float>>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->serializedSizeZCBinary(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_FLOAT, 24);
  xfer += prot_->serializedSizeFloat(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I16, 25);
  xfer += prot_->serializedSizeI16(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRUCT, 26);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<std::string, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_DOUBLE, 28);
  xfer += prot_->serializedSizeDouble(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_I64, 29);
  xfer += prot_->serializedSizeI64(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_SET, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::apache::thrift::type_class::floating_point>>, std::set<std::map<std::set<std::string>, double>>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_FLOAT, 32);
  xfer += prot_->serializedSizeFloat(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_STRING, 33);
  xfer += prot_->serializedSizeString(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_FLOAT, 34);
  xfer += prot_->serializedSizeFloat(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_I16, 35);
  xfer += prot_->serializedSizeI16(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_MAP, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int8_t>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSizeZC(prot_, &this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_LIST, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_FLOAT, 39);
  xfer += prot_->serializedSizeFloat(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_BOOL, 40);
  xfer += prot_->serializedSizeBool(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_MAP, 41);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::serializedSize<false>(*prot_, this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_STRUCT, 42);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct31>::serializedSizeZC(prot_, &this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_SET, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_MAP, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, bool>>::serializedSize<false>(*prot_, this->field44);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct34::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct34");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeBinary(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct20>::write(prot_, &this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->writeBinary(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::write(prot_, &this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_I64, 9);
  xfer += prot_->writeI64(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>>, ::apache::thrift::type_class::structure>, std::map<std::vector<std::map<double,  ::cpp2::Struct15>>,  ::cpp2::Struct0>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_FLOAT, 12);
  xfer += prot_->writeFloat(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_BOOL, 13);
  xfer += prot_->writeBool(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>, std::map<std::string, double>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_BYTE, 16);
  xfer += prot_->writeByte(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_I64, 17);
  xfer += prot_->writeI64(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_FLOAT, 18);
  xfer += prot_->writeFloat(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_STRING, 19);
  xfer += prot_->writeBinary(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, double>>::write(*prot_, this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_I32, 21);
  xfer += prot_->writeI32(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_SET, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::set<std::map<bool, float>>>::write(*prot_, this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->writeBinary(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_FLOAT, 24);
  xfer += prot_->writeFloat(this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_I16, 25);
  xfer += prot_->writeI16(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_STRUCT, 26);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<std::string, std::vector<std::string>>>::write(*prot_, this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_DOUBLE, 28);
  xfer += prot_->writeDouble(this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_I64, 29);
  xfer += prot_->writeI64(this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::write(*prot_, this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_SET, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::apache::thrift::type_class::floating_point>>, std::set<std::map<std::set<std::string>, double>>>::write(*prot_, this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_FLOAT, 32);
  xfer += prot_->writeFloat(this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_STRING, 33);
  xfer += prot_->writeString(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_FLOAT, 34);
  xfer += prot_->writeFloat(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_I16, 35);
  xfer += prot_->writeI16(this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_MAP, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int8_t>>::write(*prot_, this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::write(prot_, &this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_LIST, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_FLOAT, 39);
  xfer += prot_->writeFloat(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_BOOL, 40);
  xfer += prot_->writeBool(this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_MAP, 41);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::write(*prot_, this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_STRUCT, 42);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct31>::write(prot_, &this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_SET, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_MAP, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, bool>>::write(*prot_, this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct35::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field1 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field5 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field7 = std::map<int16_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int16_t, std::string>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field8 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field9 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::read(iprot, &this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field14 = std::map<int32_t, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, double>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct35::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct35");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->serializedSizeBool(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += prot_->serializedSizeDouble(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int16_t, std::string>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->serializedSizeBinary(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_DOUBLE, 11);
  xfer += prot_->serializedSizeDouble(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSize(prot_, &this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_BOOL, 13);
  xfer += prot_->serializedSizeBool(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, double>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct35::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct35");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->serializedSizeBool(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += prot_->serializedSizeDouble(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int16_t, std::string>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->serializedSizeZCBinary(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_DOUBLE, 11);
  xfer += prot_->serializedSizeDouble(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSizeZC(prot_, &this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_BOOL, 13);
  xfer += prot_->serializedSizeBool(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, double>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct35::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct35");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->writeBool(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += prot_->writeDouble(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int16_t, std::string>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->writeBinary(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_DOUBLE, 11);
  xfer += prot_->writeDouble(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::write(prot_, &this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_BOOL, 13);
  xfer += prot_->writeBool(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, double>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct36::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field1 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field2 = std::map<int64_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field6 = std::map<double, std::vector<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<double, std::vector<int32_t>>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field7 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field8 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field9 = std::map<int8_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field10 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field11 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct36::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct36");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeString(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->serializedSizeFloat(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<double, std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_SET, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_FLOAT, 12);
  xfer += prot_->serializedSizeFloat(this->field12);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct36::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct36");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeString(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->serializedSizeFloat(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<double, std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_SET, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_FLOAT, 12);
  xfer += prot_->serializedSizeFloat(this->field12);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct36::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct36");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->writeI64(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeString(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->writeFloat(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<double, std::vector<int32_t>>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_SET, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_FLOAT, 12);
  xfer += prot_->writeFloat(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct37::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field5 = std::map<int16_t, std::map<bool, int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::map<int16_t, std::map<bool, int64_t>>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct37::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct37");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += prot_->serializedSizeDouble(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::map<int16_t, std::map<bool, int64_t>>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += prot_->serializedSizeDouble(this->field6);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct37::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct37");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += prot_->serializedSizeDouble(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::map<int16_t, std::map<bool, int64_t>>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += prot_->serializedSizeDouble(this->field6);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct37::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct37");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->writeI64(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += prot_->writeDouble(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::map<int16_t, std::map<bool, int64_t>>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += prot_->writeDouble(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct38::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<int32_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field2 = std::map<std::string, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field3 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct38::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct38");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->serializedSizeI16(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct38::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct38");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->serializedSizeI16(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct38::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct38");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->writeI16(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->writeI16(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct39::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field1 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field2 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::read(iprot, &this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field6 = std::map<int32_t, std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::map<int32_t, std::set<std::string>>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field7 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct39::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct39");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeBinary(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::serializedSize(prot_, &this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::map<int32_t, std::set<std::string>>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_BYTE, 8);
  xfer += prot_->serializedSizeByte(this->field8);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct39::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct39");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeZCBinary(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::serializedSizeZC(prot_, &this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::map<int32_t, std::set<std::string>>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_BYTE, 8);
  xfer += prot_->serializedSizeByte(this->field8);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct39::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct39");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeBinary(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::write(prot_, &this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->writeI32(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::map<int32_t, std::set<std::string>>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_BYTE, 8);
  xfer += prot_->writeByte(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct40::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct29>::read(iprot, &this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct23>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field9 = std::map<int8_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field13 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct40::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct40");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct29>::serializedSize(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct23>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->serializedSizeDouble(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->serializedSizeI64(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I64, 7);
  xfer += prot_->serializedSizeI64(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_BYTE, 8);
  xfer += prot_->serializedSizeByte(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRUCT, 10);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I64, 11);
  xfer += prot_->serializedSizeI64(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->serializedSizeByte(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I64, 14);
  xfer += prot_->serializedSizeI64(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_DOUBLE, 15);
  xfer += prot_->serializedSizeDouble(this->field15);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct40::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct40");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct29>::serializedSizeZC(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct23>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->serializedSizeDouble(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->serializedSizeI64(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I64, 7);
  xfer += prot_->serializedSizeI64(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_BYTE, 8);
  xfer += prot_->serializedSizeByte(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRUCT, 10);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I64, 11);
  xfer += prot_->serializedSizeI64(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->serializedSizeByte(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I64, 14);
  xfer += prot_->serializedSizeI64(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_DOUBLE, 15);
  xfer += prot_->serializedSizeDouble(this->field15);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct40::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct40");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct29>::write(prot_, &this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct23>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->writeDouble(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->writeByte(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->writeDouble(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->writeI64(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_I64, 7);
  xfer += prot_->writeI64(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_BYTE, 8);
  xfer += prot_->writeByte(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_STRUCT, 10);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_I64, 11);
  xfer += prot_->writeI64(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->writeByte(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_I64, 14);
  xfer += prot_->writeI64(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_DOUBLE, 15);
  xfer += prot_->writeDouble(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct41::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field2 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field3 = std::map<int64_t, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int32_t>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field4 = std::map<std::vector<bool>, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<bool>, bool>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field10 = std::map<double, std::vector<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<double, std::vector<float>>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct41::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct41");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->serializedSizeFloat(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int32_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<bool>, bool>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I64, 5);
  xfer += prot_->serializedSizeI64(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->serializedSizeDouble(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeBinary(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I64, 9);
  xfer += prot_->serializedSizeI64(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<double, std::vector<float>>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct41::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct41");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->serializedSizeFloat(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int32_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<bool>, bool>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I64, 5);
  xfer += prot_->serializedSizeI64(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->serializedSizeDouble(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeZCBinary(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I64, 9);
  xfer += prot_->serializedSizeI64(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<double, std::vector<float>>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct41::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct41");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->writeFloat(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int32_t>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<bool>, bool>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I64, 5);
  xfer += prot_->writeI64(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->writeI32(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->writeDouble(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->writeBinary(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_I64, 9);
  xfer += prot_->writeI64(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<double, std::vector<float>>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct42::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct23>::read(iprot, &this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct42::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct42");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->serializedSizeFloat(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->serializedSizeBool(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct23>::serializedSize(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field6);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct42::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct42");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->serializedSizeFloat(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->serializedSizeBool(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct23>::serializedSizeZC(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field6);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct42::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct42");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->writeFloat(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->writeBool(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->writeI64(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->writeBool(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct23>::write(prot_, &this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct43::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field2 = std::map<float, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field5 = std::set<std::map<double, int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::set<std::map<double, int16_t>>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field8 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field10 = std::map<std::string, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field11 = std::map<int8_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field13 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field16 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field17 = std::map<int16_t, std::vector<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int16_t, std::vector<bool>>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct17>::read(iprot, &this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field19 = std::map< ::cpp2::Struct26, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct26, bool>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct17>::read(iprot, &this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field23 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field24 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field27 = std::set<std::set<int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int8_t>>>::read(*iprot, this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field29 = std::vector<std::map<std::set<int64_t>, double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>>, std::vector<std::map<std::set<int64_t>, double>>>::read(*iprot, this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field38 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field43 = std::map<int16_t, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int64_t>>::read(*iprot, this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field45 = std::map<std::string, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::read(*iprot, this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct43::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct43");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BYTE, 1);
  xfer += prot_->serializedSizeByte(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::set<std::map<double, int16_t>>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->serializedSizeI16(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRING, 7);
  xfer += prot_->serializedSizeBinary(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BOOL, 12);
  xfer += prot_->serializedSizeBool(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRING, 14);
  xfer += prot_->serializedSizeBinary(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_I16, 15);
  xfer += prot_->serializedSizeI16(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int16_t, std::vector<bool>>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct17>::serializedSize(prot_, &this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct26, bool>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_I64, 20);
  xfer += prot_->serializedSizeI64(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_STRUCT, 21);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct17>::serializedSize(prot_, &this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->serializedSizeBinary(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_SET, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_SET, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_BOOL, 25);
  xfer += prot_->serializedSizeBool(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->serializedSizeString(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int8_t>>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_I32, 28);
  xfer += prot_->serializedSizeI32(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>>, std::vector<std::map<std::set<int64_t>, double>>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_STRING, 30);
  xfer += prot_->serializedSizeString(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_BYTE, 31);
  xfer += prot_->serializedSizeByte(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_STRUCT, 32);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_STRING, 33);
  xfer += prot_->serializedSizeBinary(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->serializedSizeI64(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_BOOL, 35);
  xfer += prot_->serializedSizeBool(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_BOOL, 36);
  xfer += prot_->serializedSizeBool(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_SET, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_I16, 39);
  xfer += prot_->serializedSizeI16(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_I64, 40);
  xfer += prot_->serializedSizeI64(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_STRING, 41);
  xfer += prot_->serializedSizeBinary(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_STRING, 42);
  xfer += prot_->serializedSizeBinary(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_MAP, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int64_t>>::serializedSize<false>(*prot_, this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRING, 44);
  xfer += prot_->serializedSizeString(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_MAP, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::serializedSize<false>(*prot_, this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I16, 46);
  xfer += prot_->serializedSizeI16(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_I32, 47);
  xfer += prot_->serializedSizeI32(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_I64, 48);
  xfer += prot_->serializedSizeI64(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_STRING, 49);
  xfer += prot_->serializedSizeBinary(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_I32, 50);
  xfer += prot_->serializedSizeI32(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_STRING, 51);
  xfer += prot_->serializedSizeBinary(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_I64, 52);
  xfer += prot_->serializedSizeI64(this->field52);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct43::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct43");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BYTE, 1);
  xfer += prot_->serializedSizeByte(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::set<std::map<double, int16_t>>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->serializedSizeI16(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRING, 7);
  xfer += prot_->serializedSizeZCBinary(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BOOL, 12);
  xfer += prot_->serializedSizeBool(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRING, 14);
  xfer += prot_->serializedSizeZCBinary(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_I16, 15);
  xfer += prot_->serializedSizeI16(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int16_t, std::vector<bool>>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct17>::serializedSizeZC(prot_, &this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct26, bool>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_I64, 20);
  xfer += prot_->serializedSizeI64(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_STRUCT, 21);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct17>::serializedSizeZC(prot_, &this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->serializedSizeZCBinary(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_SET, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_SET, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_BOOL, 25);
  xfer += prot_->serializedSizeBool(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->serializedSizeString(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int8_t>>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_I32, 28);
  xfer += prot_->serializedSizeI32(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>>, std::vector<std::map<std::set<int64_t>, double>>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_STRING, 30);
  xfer += prot_->serializedSizeString(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_BYTE, 31);
  xfer += prot_->serializedSizeByte(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_STRUCT, 32);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_STRING, 33);
  xfer += prot_->serializedSizeZCBinary(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->serializedSizeI64(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_BOOL, 35);
  xfer += prot_->serializedSizeBool(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_BOOL, 36);
  xfer += prot_->serializedSizeBool(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_SET, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_I16, 39);
  xfer += prot_->serializedSizeI16(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_I64, 40);
  xfer += prot_->serializedSizeI64(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_STRING, 41);
  xfer += prot_->serializedSizeZCBinary(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_STRING, 42);
  xfer += prot_->serializedSizeZCBinary(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_MAP, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int64_t>>::serializedSize<false>(*prot_, this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRING, 44);
  xfer += prot_->serializedSizeString(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_MAP, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::serializedSize<false>(*prot_, this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I16, 46);
  xfer += prot_->serializedSizeI16(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_I32, 47);
  xfer += prot_->serializedSizeI32(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_I64, 48);
  xfer += prot_->serializedSizeI64(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_STRING, 49);
  xfer += prot_->serializedSizeZCBinary(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_I32, 50);
  xfer += prot_->serializedSizeI32(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_STRING, 51);
  xfer += prot_->serializedSizeZCBinary(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_I64, 52);
  xfer += prot_->serializedSizeI64(this->field52);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct43::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct43");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_BYTE, 1);
  xfer += prot_->writeByte(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->writeDouble(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->writeByte(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::set<std::map<double, int16_t>>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->writeI16(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_STRING, 7);
  xfer += prot_->writeBinary(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_BOOL, 12);
  xfer += prot_->writeBool(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_STRING, 14);
  xfer += prot_->writeBinary(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_I16, 15);
  xfer += prot_->writeI16(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int16_t, std::vector<bool>>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct17>::write(prot_, &this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct26, bool>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_I64, 20);
  xfer += prot_->writeI64(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_STRUCT, 21);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct17>::write(prot_, &this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->writeBinary(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_SET, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_SET, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_BOOL, 25);
  xfer += prot_->writeBool(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->writeString(this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int8_t>>>::write(*prot_, this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_I32, 28);
  xfer += prot_->writeI32(this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>>, std::vector<std::map<std::set<int64_t>, double>>>::write(*prot_, this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_STRING, 30);
  xfer += prot_->writeString(this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_BYTE, 31);
  xfer += prot_->writeByte(this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_STRUCT, 32);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_STRING, 33);
  xfer += prot_->writeBinary(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->writeI64(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_BOOL, 35);
  xfer += prot_->writeBool(this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_BOOL, 36);
  xfer += prot_->writeBool(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_SET, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_I16, 39);
  xfer += prot_->writeI16(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_I64, 40);
  xfer += prot_->writeI64(this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_STRING, 41);
  xfer += prot_->writeBinary(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_STRING, 42);
  xfer += prot_->writeBinary(this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_MAP, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int64_t>>::write(*prot_, this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_STRING, 44);
  xfer += prot_->writeString(this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_MAP, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::write(*prot_, this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_I16, 46);
  xfer += prot_->writeI16(this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_I32, 47);
  xfer += prot_->writeI32(this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_I64, 48);
  xfer += prot_->writeI64(this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_STRING, 49);
  xfer += prot_->writeBinary(this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_I32, 50);
  xfer += prot_->writeI32(this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_STRING, 51);
  xfer += prot_->writeBinary(this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_I64, 52);
  xfer += prot_->writeI64(this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct44::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<int64_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct44::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct44");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct44::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct44");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct44::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct44");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct45::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field1 = std::set< ::cpp2::Struct15>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct15>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::read(iprot, &this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field6 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field7 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field9 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field10 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field12 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct45::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct45");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct15>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::serializedSize(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeBinary(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I64, 8);
  xfer += prot_->serializedSizeI64(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I16, 11);
  xfer += prot_->serializedSizeI16(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_I16, 13);
  xfer += prot_->serializedSizeI16(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I16, 14);
  xfer += prot_->serializedSizeI16(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRING, 15);
  xfer += prot_->serializedSizeString(this->field15);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct45::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct45");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct15>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::serializedSizeZC(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeZCBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeZCBinary(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I64, 8);
  xfer += prot_->serializedSizeI64(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I16, 11);
  xfer += prot_->serializedSizeI16(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_I16, 13);
  xfer += prot_->serializedSizeI16(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I16, 14);
  xfer += prot_->serializedSizeI16(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRING, 15);
  xfer += prot_->serializedSizeString(this->field15);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct45::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct45");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct15>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->writeBool(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::write(prot_, &this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeBinary(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->writeBinary(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_I64, 8);
  xfer += prot_->writeI64(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_I16, 11);
  xfer += prot_->writeI16(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_I16, 13);
  xfer += prot_->writeI16(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_I16, 14);
  xfer += prot_->writeI16(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_STRING, 15);
  xfer += prot_->writeString(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct46::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field4 = std::map<int32_t, std::set<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int32_t, std::set<double>>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field5 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field6 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field9 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field11 = std::set<std::map<int64_t, int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int64_t, int64_t>>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field12 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct46::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct46");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->serializedSizeFloat(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->serializedSizeI16(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int32_t, std::set<double>>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I64, 8);
  xfer += prot_->serializedSizeI64(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->serializedSizeI64(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int64_t, int64_t>>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_DOUBLE, 13);
  xfer += prot_->serializedSizeDouble(this->field13);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct46::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct46");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->serializedSizeFloat(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->serializedSizeI16(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int32_t, std::set<double>>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I64, 8);
  xfer += prot_->serializedSizeI64(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->serializedSizeI64(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int64_t, int64_t>>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_DOUBLE, 13);
  xfer += prot_->serializedSizeDouble(this->field13);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct46::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct46");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->writeFloat(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->writeBool(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->writeI16(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int32_t, std::set<double>>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->writeByte(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_I64, 8);
  xfer += prot_->writeI64(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->writeI64(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int64_t, int64_t>>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_DOUBLE, 13);
  xfer += prot_->writeDouble(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct47::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct47::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct47");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct47::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct47");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct47::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct47");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct48::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<bool, std::set<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<bool, std::set<int64_t>>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field2 = std::map<bool, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, bool>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct48::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct48");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<bool, std::set<int64_t>>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, bool>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeBinary(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct48::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct48");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<bool, std::set<int64_t>>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, bool>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeZCBinary(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct48::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct48");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<bool, std::set<int64_t>>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, bool>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeBinary(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct49::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field1 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct39>::read(iprot, &this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field4 = std::map<float, std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::map<float, std::set<std::string>>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct36>::read(iprot, &this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field13 = std::map<std::vector<bool>, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::vector<bool>, std::string>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field15 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::read(iprot, &this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field18 = std::map<int64_t, std::map<bool, std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::map<int64_t, std::map<bool, std::string>>>::read(*iprot, this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct49::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct49");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct39>::serializedSize(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::map<float, std::set<std::string>>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeString(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BOOL, 7);
  xfer += prot_->serializedSizeBool(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_BOOL, 8);
  xfer += prot_->serializedSizeBool(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_BOOL, 9);
  xfer += prot_->serializedSizeBool(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->serializedSizeI64(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct36>::serializedSize(prot_, &this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_DOUBLE, 12);
  xfer += prot_->serializedSizeDouble(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::vector<bool>, std::string>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_DOUBLE, 14);
  xfer += prot_->serializedSizeDouble(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_FLOAT, 16);
  xfer += prot_->serializedSizeFloat(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRUCT, 17);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSize(prot_, &this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::map<int64_t, std::map<bool, std::string>>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_BYTE, 19);
  xfer += prot_->serializedSizeByte(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_I64, 20);
  xfer += prot_->serializedSizeI64(this->field20);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct49::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct49");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct39>::serializedSizeZC(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::map<float, std::set<std::string>>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeString(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BOOL, 7);
  xfer += prot_->serializedSizeBool(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_BOOL, 8);
  xfer += prot_->serializedSizeBool(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_BOOL, 9);
  xfer += prot_->serializedSizeBool(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->serializedSizeI64(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct36>::serializedSizeZC(prot_, &this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_DOUBLE, 12);
  xfer += prot_->serializedSizeDouble(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::vector<bool>, std::string>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_DOUBLE, 14);
  xfer += prot_->serializedSizeDouble(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_FLOAT, 16);
  xfer += prot_->serializedSizeFloat(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRUCT, 17);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSizeZC(prot_, &this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::map<int64_t, std::map<bool, std::string>>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_BYTE, 19);
  xfer += prot_->serializedSizeByte(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_I64, 20);
  xfer += prot_->serializedSizeI64(this->field20);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct49::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct49");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->writeI16(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct39>::write(prot_, &this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::map<float, std::set<std::string>>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->writeString(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->writeI32(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_BOOL, 7);
  xfer += prot_->writeBool(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_BOOL, 8);
  xfer += prot_->writeBool(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_BOOL, 9);
  xfer += prot_->writeBool(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->writeI64(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct36>::write(prot_, &this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_DOUBLE, 12);
  xfer += prot_->writeDouble(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::vector<bool>, std::string>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_DOUBLE, 14);
  xfer += prot_->writeDouble(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_FLOAT, 16);
  xfer += prot_->writeFloat(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_STRUCT, 17);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::write(prot_, &this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::map<int64_t, std::map<bool, std::string>>>::write(*prot_, this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_BYTE, 19);
  xfer += prot_->writeByte(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_I64, 20);
  xfer += prot_->writeI64(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct50::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field2 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field3 = std::set<std::set<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct40>::read(iprot, &this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::read(iprot, &this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::read(iprot, &this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field9 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field11 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field12 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field13 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field15 = std::map<std::string, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field16 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::read(iprot, &this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field24 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field27 = std::map<std::string, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::read(*iprot, this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field30 = std::map< ::cpp2::Struct27, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct27, bool>>::read(*iprot, this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct50::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct50");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct40>::serializedSize(prot_, &this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::serializedSize(prot_, &this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::serializedSize(prot_, &this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->serializedSizeBinary(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRING, 14);
  xfer += prot_->serializedSizeString(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_BOOL, 17);
  xfer += prot_->serializedSizeBool(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::serializedSize(prot_, &this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_I16, 19);
  xfer += prot_->serializedSizeI16(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_FLOAT, 20);
  xfer += prot_->serializedSizeFloat(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_BYTE, 21);
  xfer += prot_->serializedSizeByte(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->serializedSizeBinary(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_BOOL, 23);
  xfer += prot_->serializedSizeBool(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_LIST, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_BYTE, 25);
  xfer += prot_->serializedSizeByte(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_DOUBLE, 26);
  xfer += prot_->serializedSizeDouble(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_DOUBLE, 28);
  xfer += prot_->serializedSizeDouble(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_STRING, 29);
  xfer += prot_->serializedSizeBinary(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_MAP, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct27, bool>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct50::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct50");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct40>::serializedSizeZC(prot_, &this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::serializedSizeZC(prot_, &this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::serializedSizeZC(prot_, &this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->serializedSizeZCBinary(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRING, 14);
  xfer += prot_->serializedSizeString(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_BOOL, 17);
  xfer += prot_->serializedSizeBool(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::serializedSizeZC(prot_, &this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_I16, 19);
  xfer += prot_->serializedSizeI16(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_FLOAT, 20);
  xfer += prot_->serializedSizeFloat(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_BYTE, 21);
  xfer += prot_->serializedSizeByte(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->serializedSizeZCBinary(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_BOOL, 23);
  xfer += prot_->serializedSizeBool(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_LIST, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_BYTE, 25);
  xfer += prot_->serializedSizeByte(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_DOUBLE, 26);
  xfer += prot_->serializedSizeDouble(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_DOUBLE, 28);
  xfer += prot_->serializedSizeDouble(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_STRING, 29);
  xfer += prot_->serializedSizeZCBinary(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_MAP, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct27, bool>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct50::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct50");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->writeI16(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct40>::write(prot_, &this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::write(prot_, &this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::write(prot_, &this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->writeBinary(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_STRING, 14);
  xfer += prot_->writeString(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_BOOL, 17);
  xfer += prot_->writeBool(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::write(prot_, &this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_I16, 19);
  xfer += prot_->writeI16(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_FLOAT, 20);
  xfer += prot_->writeFloat(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_BYTE, 21);
  xfer += prot_->writeByte(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->writeBinary(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_BOOL, 23);
  xfer += prot_->writeBool(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_LIST, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_BYTE, 25);
  xfer += prot_->writeByte(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_DOUBLE, 26);
  xfer += prot_->writeDouble(this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::write(*prot_, this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_DOUBLE, 28);
  xfer += prot_->writeDouble(this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_STRING, 29);
  xfer += prot_->writeBinary(this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_MAP, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct27, bool>>::write(*prot_, this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct51::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field1 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field2 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field3 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field6 = std::map<std::string, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct24>::read(iprot, &this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field9 = std::set<std::vector<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct51::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct51");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->serializedSizeBool(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct24>::serializedSize(prot_, &this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeBinary(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->serializedSizeBinary(this->field10);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct51::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct51");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeZCBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->serializedSizeBool(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct24>::serializedSizeZC(prot_, &this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeZCBinary(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->serializedSizeZCBinary(this->field10);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct51::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct51");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeBinary(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->writeBool(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct24>::write(prot_, &this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->writeBinary(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->writeBinary(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct52::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map< ::cpp2::Struct25, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct25, std::string>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field4 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field7 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct52::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct52");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct25, std::string>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->serializedSizeFloat(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->serializedSizeI16(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeString(this->field8);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct52::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct52");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct25, std::string>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->serializedSizeFloat(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->serializedSizeI16(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeString(this->field8);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct52::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct52");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct25, std::string>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->writeI64(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->writeFloat(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->writeI16(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->writeI16(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->writeString(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Struct53::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<std::string, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field4 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field12 = std::map<int64_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field13 = std::vector<std::set<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::vector<std::set<float>>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct31>::read(iprot, &this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct53::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct53");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeBinary(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->serializedSizeBool(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I64, 7);
  xfer += prot_->serializedSizeI64(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_FLOAT, 8);
  xfer += prot_->serializedSizeFloat(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_BYTE, 9);
  xfer += prot_->serializedSizeByte(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->serializedSizeString(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_BYTE, 11);
  xfer += prot_->serializedSizeByte(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::vector<std::set<float>>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct31>::serializedSize(prot_, &this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BOOL, 15);
  xfer += prot_->serializedSizeBool(this->field15);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct53::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct53");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeZCBinary(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->serializedSizeBool(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I64, 7);
  xfer += prot_->serializedSizeI64(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_FLOAT, 8);
  xfer += prot_->serializedSizeFloat(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_BYTE, 9);
  xfer += prot_->serializedSizeByte(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->serializedSizeString(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_BYTE, 11);
  xfer += prot_->serializedSizeByte(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::vector<std::set<float>>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct31>::serializedSizeZC(prot_, &this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BOOL, 15);
  xfer += prot_->serializedSizeBool(this->field15);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct53::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct53");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->writeDouble(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeBinary(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->writeI32(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->writeBool(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_I64, 7);
  xfer += prot_->writeI64(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_FLOAT, 8);
  xfer += prot_->writeFloat(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_BYTE, 9);
  xfer += prot_->writeByte(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->writeString(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_BYTE, 11);
  xfer += prot_->writeByte(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::vector<std::set<float>>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct31>::write(prot_, &this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_BOOL, 15);
  xfer += prot_->writeBool(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

} // cpp2
