/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <folly/io/Cursor.h>
#include <folly/io/IOBuf.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/GeneratedHeaderHelper.h>
#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>

#include "file32_types.h"
#include "file27_types.h"



namespace cpp2 {

class Struct0;
class Struct1;
class Struct2;
class Struct3;
class Struct4;
class Struct5;
class Struct6;
class Struct7;
class Struct8;

class Struct0 : private apache::thrift::detail::st::ComparisonOperators<Struct0> {
 public:

  Struct0() :
      field3(0) {}
  // FragileConstructor for use in initialization lists only

  Struct0(apache::thrift::FragileConstructor, std::map<int8_t, int8_t> field1__arg,  ::cpp2::Struct7 field2__arg, int16_t field3__arg, std::map<std::set<int32_t>, std::string> field4__arg, std::map<int8_t, std::string> field5__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }

  Struct0(Struct0&&) = default;

  Struct0(const Struct0&) = default;

  Struct0& operator=(Struct0&&) = default;

  Struct0& operator=(const Struct0&) = default;
  void __clear();

  virtual ~Struct0() {}

  std::map<int8_t, int8_t> field1;
   ::cpp2::Struct7 field2;
  int16_t field3;
  std::map<std::set<int32_t>, std::string> field4;
  std::map<int8_t, std::string> field5;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
  } __isset;
  bool operator==(const Struct0& rhs) const;

  bool operator < (const Struct0& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    (void)rhs;
    return false;
  }
  const std::map<int8_t, int8_t>& get_field1() const&;
  std::map<int8_t, int8_t> get_field1() &&;

  template <typename T_Struct0_field1_struct_setter>
  std::map<int8_t, int8_t>& set_field1(T_Struct0_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct0_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const  ::cpp2::Struct7& get_field2() const&;
   ::cpp2::Struct7 get_field2() &&;

  template <typename T_Struct0_field2_struct_setter>
   ::cpp2::Struct7& set_field2(T_Struct0_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct0_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  int16_t get_field3() const {
    return field3;
  }

  int16_t& set_field3(int16_t field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }
  const std::map<std::set<int32_t>, std::string>& get_field4() const&;
  std::map<std::set<int32_t>, std::string> get_field4() &&;

  template <typename T_Struct0_field4_struct_setter>
  std::map<std::set<int32_t>, std::string>& set_field4(T_Struct0_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct0_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }
  const std::map<int8_t, std::string>& get_field5() const&;
  std::map<int8_t, std::string> get_field5() &&;

  template <typename T_Struct0_field5_struct_setter>
  std::map<int8_t, std::string>& set_field5(T_Struct0_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct0_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct0& a, Struct0& b);
extern template uint32_t Struct0::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct0::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct0::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct0::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct0::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct0::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct0::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct0::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct0>::clear( ::cpp2::Struct0* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct0>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct0>::write(Protocol* proto,  ::cpp2::Struct0 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct0>::read(Protocol* proto,  ::cpp2::Struct0* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct0>::serializedSize(Protocol const* proto,  ::cpp2::Struct0 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct0>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct0 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {

class Struct1 : private apache::thrift::detail::st::ComparisonOperators<Struct1> {
 public:

  Struct1() {}
  // FragileConstructor for use in initialization lists only

  Struct1(apache::thrift::FragileConstructor, std::string field1__arg,  ::cpp2::Struct12 field2__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }

  Struct1(Struct1&&) = default;

  Struct1(const Struct1&) = default;

  Struct1& operator=(Struct1&&) = default;

  Struct1& operator=(const Struct1&) = default;
  void __clear();

  virtual ~Struct1() {}

  std::string field1;
   ::cpp2::Struct12 field2;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
    }

    bool field1 = false;
    bool field2 = false;
  } __isset;
  bool operator==(const Struct1& rhs) const;

  bool operator < (const Struct1& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    (void)rhs;
    return false;
  }

  const std::string& get_field1() const& {
    return field1;
  }

  std::string get_field1() && {
    return std::move(field1);
  }

  template <typename T_Struct1_field1_struct_setter>
  std::string& set_field1(T_Struct1_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct1_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const  ::cpp2::Struct12& get_field2() const&;
   ::cpp2::Struct12 get_field2() &&;

  template <typename T_Struct1_field2_struct_setter>
   ::cpp2::Struct12& set_field2(T_Struct1_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct1_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct1& a, Struct1& b);
extern template uint32_t Struct1::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct1::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct1::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct1::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct1::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct1::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct1::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct1::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct1>::clear( ::cpp2::Struct1* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct1>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct1>::write(Protocol* proto,  ::cpp2::Struct1 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct1>::read(Protocol* proto,  ::cpp2::Struct1* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct1>::serializedSize(Protocol const* proto,  ::cpp2::Struct1 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct1>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct1 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {

class Struct2 : private apache::thrift::detail::st::ComparisonOperators<Struct2> {
 public:

  Struct2() :
      field2(0),
      field4(0),
      field5(0),
      field6(0),
      field7(0),
      field9(0),
      field11(0),
      field13(0),
      field18(0),
      field19(0),
      field20(0),
      field23(0),
      field24(0) {}
  // FragileConstructor for use in initialization lists only

  Struct2(apache::thrift::FragileConstructor,  ::cpp2::Struct2 field1__arg, bool field2__arg, std::string field3__arg, int32_t field4__arg, int64_t field5__arg, bool field6__arg, int16_t field7__arg, std::map<int64_t, std::vector<std::set<bool>>> field8__arg, int32_t field9__arg, std::map<float, bool> field10__arg, double field11__arg, std::map<int32_t, int16_t> field12__arg, double field13__arg, std::string field14__arg, std::set<int16_t> field15__arg, std::vector<double> field16__arg, std::map<std::string, std::set<std::vector<int64_t>>> field17__arg, float field18__arg, float field19__arg, int8_t field20__arg, std::set< ::cpp2::Struct5> field21__arg, std::set<double> field22__arg, int64_t field23__arg, int16_t field24__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }

  Struct2(Struct2&&) = default;

  Struct2(const Struct2&) = default;

  Struct2& operator=(Struct2&&) = default;

  Struct2& operator=(const Struct2&) = default;
  void __clear();

  virtual ~Struct2() {}

   ::cpp2::Struct2 field1;
  bool field2;
  std::string field3;
  int32_t field4;
  int64_t field5;
  bool field6;
  int16_t field7;
  std::map<int64_t, std::vector<std::set<bool>>> field8;
  int32_t field9;
  std::map<float, bool> field10;
  double field11;
  std::map<int32_t, int16_t> field12;
  double field13;
  std::string field14;
  std::set<int16_t> field15;
  std::vector<double> field16;
  std::map<std::string, std::set<std::vector<int64_t>>> field17;
  float field18;
  float field19;
  int8_t field20;
  std::set< ::cpp2::Struct5> field21;
  std::set<double> field22;
  int64_t field23;
  int16_t field24;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
  } __isset;
  bool operator==(const Struct2& rhs) const;

  bool operator < (const Struct2& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    (void)rhs;
    return false;
  }
  const  ::cpp2::Struct2& get_field1() const&;
   ::cpp2::Struct2 get_field1() &&;

  template <typename T_Struct2_field1_struct_setter>
   ::cpp2::Struct2& set_field1(T_Struct2_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct2_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  bool get_field2() const {
    return field2;
  }

  bool& set_field2(bool field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }

  const std::string& get_field3() const& {
    return field3;
  }

  std::string get_field3() && {
    return std::move(field3);
  }

  template <typename T_Struct2_field3_struct_setter>
  std::string& set_field3(T_Struct2_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct2_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  int32_t get_field4() const {
    return field4;
  }

  int32_t& set_field4(int32_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }

  int64_t get_field5() const {
    return field5;
  }

  int64_t& set_field5(int64_t field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }

  bool get_field6() const {
    return field6;
  }

  bool& set_field6(bool field6_) {
    field6 = field6_;
    __isset.field6 = true;
    return field6;
  }

  int16_t get_field7() const {
    return field7;
  }

  int16_t& set_field7(int16_t field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }
  const std::map<int64_t, std::vector<std::set<bool>>>& get_field8() const&;
  std::map<int64_t, std::vector<std::set<bool>>> get_field8() &&;

  template <typename T_Struct2_field8_struct_setter>
  std::map<int64_t, std::vector<std::set<bool>>>& set_field8(T_Struct2_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct2_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }

  int32_t get_field9() const {
    return field9;
  }

  int32_t& set_field9(int32_t field9_) {
    field9 = field9_;
    __isset.field9 = true;
    return field9;
  }
  const std::map<float, bool>& get_field10() const&;
  std::map<float, bool> get_field10() &&;

  template <typename T_Struct2_field10_struct_setter>
  std::map<float, bool>& set_field10(T_Struct2_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct2_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }

  double get_field11() const {
    return field11;
  }

  double& set_field11(double field11_) {
    field11 = field11_;
    __isset.field11 = true;
    return field11;
  }
  const std::map<int32_t, int16_t>& get_field12() const&;
  std::map<int32_t, int16_t> get_field12() &&;

  template <typename T_Struct2_field12_struct_setter>
  std::map<int32_t, int16_t>& set_field12(T_Struct2_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct2_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }

  double get_field13() const {
    return field13;
  }

  double& set_field13(double field13_) {
    field13 = field13_;
    __isset.field13 = true;
    return field13;
  }

  const std::string& get_field14() const& {
    return field14;
  }

  std::string get_field14() && {
    return std::move(field14);
  }

  template <typename T_Struct2_field14_struct_setter>
  std::string& set_field14(T_Struct2_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct2_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }
  const std::set<int16_t>& get_field15() const&;
  std::set<int16_t> get_field15() &&;

  template <typename T_Struct2_field15_struct_setter>
  std::set<int16_t>& set_field15(T_Struct2_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct2_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }
  const std::vector<double>& get_field16() const&;
  std::vector<double> get_field16() &&;

  template <typename T_Struct2_field16_struct_setter>
  std::vector<double>& set_field16(T_Struct2_field16_struct_setter&& field16_) {
    field16 = std::forward<T_Struct2_field16_struct_setter>(field16_);
    __isset.field16 = true;
    return field16;
  }
  const std::map<std::string, std::set<std::vector<int64_t>>>& get_field17() const&;
  std::map<std::string, std::set<std::vector<int64_t>>> get_field17() &&;

  template <typename T_Struct2_field17_struct_setter>
  std::map<std::string, std::set<std::vector<int64_t>>>& set_field17(T_Struct2_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct2_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }

  float get_field18() const {
    return field18;
  }

  float& set_field18(float field18_) {
    field18 = field18_;
    __isset.field18 = true;
    return field18;
  }

  float get_field19() const {
    return field19;
  }

  float& set_field19(float field19_) {
    field19 = field19_;
    __isset.field19 = true;
    return field19;
  }

  int8_t get_field20() const {
    return field20;
  }

  int8_t& set_field20(int8_t field20_) {
    field20 = field20_;
    __isset.field20 = true;
    return field20;
  }
  const std::set< ::cpp2::Struct5>& get_field21() const&;
  std::set< ::cpp2::Struct5> get_field21() &&;

  template <typename T_Struct2_field21_struct_setter>
  std::set< ::cpp2::Struct5>& set_field21(T_Struct2_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct2_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }
  const std::set<double>& get_field22() const&;
  std::set<double> get_field22() &&;

  template <typename T_Struct2_field22_struct_setter>
  std::set<double>& set_field22(T_Struct2_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct2_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }

  int64_t get_field23() const {
    return field23;
  }

  int64_t& set_field23(int64_t field23_) {
    field23 = field23_;
    __isset.field23 = true;
    return field23;
  }

  int16_t get_field24() const {
    return field24;
  }

  int16_t& set_field24(int16_t field24_) {
    field24 = field24_;
    __isset.field24 = true;
    return field24;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct2& a, Struct2& b);
extern template uint32_t Struct2::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct2::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct2::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct2::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct2::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct2::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct2::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct2::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct2>::clear( ::cpp2::Struct2* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct2>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct2>::write(Protocol* proto,  ::cpp2::Struct2 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct2>::read(Protocol* proto,  ::cpp2::Struct2* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct2>::serializedSize(Protocol const* proto,  ::cpp2::Struct2 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct2>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct2 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {

class Struct3 : private apache::thrift::detail::st::ComparisonOperators<Struct3> {
 public:

  Struct3() :
      field1(0),
      field3(0) {}
  // FragileConstructor for use in initialization lists only

  Struct3(apache::thrift::FragileConstructor, int32_t field1__arg, std::string field2__arg, int8_t field3__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }

  Struct3(Struct3&&) = default;

  Struct3(const Struct3&) = default;

  Struct3& operator=(Struct3&&) = default;

  Struct3& operator=(const Struct3&) = default;
  void __clear();

  virtual ~Struct3() {}

  int32_t field1;
  std::string field2;
  int8_t field3;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
  } __isset;
  bool operator==(const Struct3& rhs) const;

  bool operator < (const Struct3& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    (void)rhs;
    return false;
  }

  int32_t get_field1() const {
    return field1;
  }

  int32_t& set_field1(int32_t field1_) {
    field1 = field1_;
    __isset.field1 = true;
    return field1;
  }

  const std::string& get_field2() const& {
    return field2;
  }

  std::string get_field2() && {
    return std::move(field2);
  }

  template <typename T_Struct3_field2_struct_setter>
  std::string& set_field2(T_Struct3_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct3_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  int8_t get_field3() const {
    return field3;
  }

  int8_t& set_field3(int8_t field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct3& a, Struct3& b);
extern template uint32_t Struct3::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct3::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct3::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct3::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct3::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct3::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct3::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct3::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct3>::clear( ::cpp2::Struct3* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct3>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct3>::write(Protocol* proto,  ::cpp2::Struct3 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct3>::read(Protocol* proto,  ::cpp2::Struct3* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct3>::serializedSize(Protocol const* proto,  ::cpp2::Struct3 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct3>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct3 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {

class Struct4 : private apache::thrift::detail::st::ComparisonOperators<Struct4> {
 public:

  Struct4() :
      field1(0),
      field2(0),
      field9(0),
      field10(0),
      field12(0),
      field13(0),
      field17(0),
      field23(0),
      field24(0),
      field26(0),
      field27(0) {}
  // FragileConstructor for use in initialization lists only

  Struct4(apache::thrift::FragileConstructor, float field1__arg, int32_t field2__arg, std::map<std::string, int16_t> field3__arg, std::map<std::string, std::map<std::string, double>> field4__arg, std::vector<bool> field5__arg, std::set<std::string> field6__arg,  ::cpp2::Struct3 field7__arg, std::vector<int8_t> field8__arg, int64_t field9__arg, bool field10__arg, std::map<int64_t, std::string> field11__arg, int32_t field12__arg, int8_t field13__arg, std::string field14__arg,  ::cpp2::Struct1 field15__arg, std::set<std::string> field16__arg, int32_t field17__arg, std::string field18__arg, std::vector< ::cpp2::Struct10> field19__arg, std::set<std::map< ::cpp2::Struct0, bool>> field20__arg, std::string field21__arg,  ::cpp2::Struct19 field22__arg, int16_t field23__arg, int64_t field24__arg, std::map<bool, double> field25__arg, int8_t field26__arg, int64_t field27__arg, std::vector<int64_t> field28__arg, std::vector<float> field29__arg, std::set<float> field30__arg, std::map<double, std::string> field31__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }

  Struct4(Struct4&&) = default;

  Struct4(const Struct4&) = default;

  Struct4& operator=(Struct4&&) = default;

  Struct4& operator=(const Struct4&) = default;
  void __clear();

  virtual ~Struct4() {}

  float field1;
  int32_t field2;
  std::map<std::string, int16_t> field3;
  std::map<std::string, std::map<std::string, double>> field4;
  std::vector<bool> field5;
  std::set<std::string> field6;
   ::cpp2::Struct3 field7;
  std::vector<int8_t> field8;
  int64_t field9;
  bool field10;
  std::map<int64_t, std::string> field11;
  int32_t field12;
  int8_t field13;
  std::string field14;
   ::cpp2::Struct1 field15;
  std::set<std::string> field16;
  int32_t field17;
  std::string field18;
  std::vector< ::cpp2::Struct10> field19;
  std::set<std::map< ::cpp2::Struct0, bool>> field20;
  std::string field21;
   ::cpp2::Struct19 field22;
  int16_t field23;
  int64_t field24;
  std::map<bool, double> field25;
  int8_t field26;
  int64_t field27;
  std::vector<int64_t> field28;
  std::vector<float> field29;
  std::set<float> field30;
  std::map<double, std::string> field31;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
  } __isset;
  bool operator==(const Struct4& rhs) const;

  bool operator < (const Struct4& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    (void)rhs;
    return false;
  }

  float get_field1() const {
    return field1;
  }

  float& set_field1(float field1_) {
    field1 = field1_;
    __isset.field1 = true;
    return field1;
  }

  int32_t get_field2() const {
    return field2;
  }

  int32_t& set_field2(int32_t field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }
  const std::map<std::string, int16_t>& get_field3() const&;
  std::map<std::string, int16_t> get_field3() &&;

  template <typename T_Struct4_field3_struct_setter>
  std::map<std::string, int16_t>& set_field3(T_Struct4_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct4_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }
  const std::map<std::string, std::map<std::string, double>>& get_field4() const&;
  std::map<std::string, std::map<std::string, double>> get_field4() &&;

  template <typename T_Struct4_field4_struct_setter>
  std::map<std::string, std::map<std::string, double>>& set_field4(T_Struct4_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct4_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }
  const std::vector<bool>& get_field5() const&;
  std::vector<bool> get_field5() &&;

  template <typename T_Struct4_field5_struct_setter>
  std::vector<bool>& set_field5(T_Struct4_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct4_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }
  const std::set<std::string>& get_field6() const&;
  std::set<std::string> get_field6() &&;

  template <typename T_Struct4_field6_struct_setter>
  std::set<std::string>& set_field6(T_Struct4_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct4_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }
  const  ::cpp2::Struct3& get_field7() const&;
   ::cpp2::Struct3 get_field7() &&;

  template <typename T_Struct4_field7_struct_setter>
   ::cpp2::Struct3& set_field7(T_Struct4_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct4_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }
  const std::vector<int8_t>& get_field8() const&;
  std::vector<int8_t> get_field8() &&;

  template <typename T_Struct4_field8_struct_setter>
  std::vector<int8_t>& set_field8(T_Struct4_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct4_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }

  int64_t get_field9() const {
    return field9;
  }

  int64_t& set_field9(int64_t field9_) {
    field9 = field9_;
    __isset.field9 = true;
    return field9;
  }

  bool get_field10() const {
    return field10;
  }

  bool& set_field10(bool field10_) {
    field10 = field10_;
    __isset.field10 = true;
    return field10;
  }
  const std::map<int64_t, std::string>& get_field11() const&;
  std::map<int64_t, std::string> get_field11() &&;

  template <typename T_Struct4_field11_struct_setter>
  std::map<int64_t, std::string>& set_field11(T_Struct4_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct4_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }

  int32_t get_field12() const {
    return field12;
  }

  int32_t& set_field12(int32_t field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }

  int8_t get_field13() const {
    return field13;
  }

  int8_t& set_field13(int8_t field13_) {
    field13 = field13_;
    __isset.field13 = true;
    return field13;
  }

  const std::string& get_field14() const& {
    return field14;
  }

  std::string get_field14() && {
    return std::move(field14);
  }

  template <typename T_Struct4_field14_struct_setter>
  std::string& set_field14(T_Struct4_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct4_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }
  const  ::cpp2::Struct1& get_field15() const&;
   ::cpp2::Struct1 get_field15() &&;

  template <typename T_Struct4_field15_struct_setter>
   ::cpp2::Struct1& set_field15(T_Struct4_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct4_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }
  const std::set<std::string>& get_field16() const&;
  std::set<std::string> get_field16() &&;

  template <typename T_Struct4_field16_struct_setter>
  std::set<std::string>& set_field16(T_Struct4_field16_struct_setter&& field16_) {
    field16 = std::forward<T_Struct4_field16_struct_setter>(field16_);
    __isset.field16 = true;
    return field16;
  }

  int32_t get_field17() const {
    return field17;
  }

  int32_t& set_field17(int32_t field17_) {
    field17 = field17_;
    __isset.field17 = true;
    return field17;
  }

  const std::string& get_field18() const& {
    return field18;
  }

  std::string get_field18() && {
    return std::move(field18);
  }

  template <typename T_Struct4_field18_struct_setter>
  std::string& set_field18(T_Struct4_field18_struct_setter&& field18_) {
    field18 = std::forward<T_Struct4_field18_struct_setter>(field18_);
    __isset.field18 = true;
    return field18;
  }
  const std::vector< ::cpp2::Struct10>& get_field19() const&;
  std::vector< ::cpp2::Struct10> get_field19() &&;

  template <typename T_Struct4_field19_struct_setter>
  std::vector< ::cpp2::Struct10>& set_field19(T_Struct4_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct4_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }
  const std::set<std::map< ::cpp2::Struct0, bool>>& get_field20() const&;
  std::set<std::map< ::cpp2::Struct0, bool>> get_field20() &&;

  template <typename T_Struct4_field20_struct_setter>
  std::set<std::map< ::cpp2::Struct0, bool>>& set_field20(T_Struct4_field20_struct_setter&& field20_) {
    field20 = std::forward<T_Struct4_field20_struct_setter>(field20_);
    __isset.field20 = true;
    return field20;
  }

  const std::string& get_field21() const& {
    return field21;
  }

  std::string get_field21() && {
    return std::move(field21);
  }

  template <typename T_Struct4_field21_struct_setter>
  std::string& set_field21(T_Struct4_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct4_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }
  const  ::cpp2::Struct19& get_field22() const&;
   ::cpp2::Struct19 get_field22() &&;

  template <typename T_Struct4_field22_struct_setter>
   ::cpp2::Struct19& set_field22(T_Struct4_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct4_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }

  int16_t get_field23() const {
    return field23;
  }

  int16_t& set_field23(int16_t field23_) {
    field23 = field23_;
    __isset.field23 = true;
    return field23;
  }

  int64_t get_field24() const {
    return field24;
  }

  int64_t& set_field24(int64_t field24_) {
    field24 = field24_;
    __isset.field24 = true;
    return field24;
  }
  const std::map<bool, double>& get_field25() const&;
  std::map<bool, double> get_field25() &&;

  template <typename T_Struct4_field25_struct_setter>
  std::map<bool, double>& set_field25(T_Struct4_field25_struct_setter&& field25_) {
    field25 = std::forward<T_Struct4_field25_struct_setter>(field25_);
    __isset.field25 = true;
    return field25;
  }

  int8_t get_field26() const {
    return field26;
  }

  int8_t& set_field26(int8_t field26_) {
    field26 = field26_;
    __isset.field26 = true;
    return field26;
  }

  int64_t get_field27() const {
    return field27;
  }

  int64_t& set_field27(int64_t field27_) {
    field27 = field27_;
    __isset.field27 = true;
    return field27;
  }
  const std::vector<int64_t>& get_field28() const&;
  std::vector<int64_t> get_field28() &&;

  template <typename T_Struct4_field28_struct_setter>
  std::vector<int64_t>& set_field28(T_Struct4_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct4_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }
  const std::vector<float>& get_field29() const&;
  std::vector<float> get_field29() &&;

  template <typename T_Struct4_field29_struct_setter>
  std::vector<float>& set_field29(T_Struct4_field29_struct_setter&& field29_) {
    field29 = std::forward<T_Struct4_field29_struct_setter>(field29_);
    __isset.field29 = true;
    return field29;
  }
  const std::set<float>& get_field30() const&;
  std::set<float> get_field30() &&;

  template <typename T_Struct4_field30_struct_setter>
  std::set<float>& set_field30(T_Struct4_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct4_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }
  const std::map<double, std::string>& get_field31() const&;
  std::map<double, std::string> get_field31() &&;

  template <typename T_Struct4_field31_struct_setter>
  std::map<double, std::string>& set_field31(T_Struct4_field31_struct_setter&& field31_) {
    field31 = std::forward<T_Struct4_field31_struct_setter>(field31_);
    __isset.field31 = true;
    return field31;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct4& a, Struct4& b);
extern template uint32_t Struct4::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct4::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct4::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct4::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct4::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct4::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct4::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct4::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct4>::clear( ::cpp2::Struct4* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct4>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct4>::write(Protocol* proto,  ::cpp2::Struct4 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct4>::read(Protocol* proto,  ::cpp2::Struct4* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct4>::serializedSize(Protocol const* proto,  ::cpp2::Struct4 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct4>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct4 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {

class Struct5 : private apache::thrift::detail::st::ComparisonOperators<Struct5> {
 public:

  Struct5() {}
  // FragileConstructor for use in initialization lists only

  Struct5(apache::thrift::FragileConstructor, std::map<double,  ::cpp2::Struct9> field1__arg) :
      field1(std::move(field1__arg)) {
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }

  Struct5(Struct5&&) = default;

  Struct5(const Struct5&) = default;

  Struct5& operator=(Struct5&&) = default;

  Struct5& operator=(const Struct5&) = default;
  void __clear();

  virtual ~Struct5() {}

  std::map<double,  ::cpp2::Struct9> field1;

  struct __isset {
    void __clear() {
      field1 = false;
    }

    bool field1 = false;
  } __isset;
  bool operator==(const Struct5& rhs) const;

  bool operator < (const Struct5& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    (void)rhs;
    return false;
  }
  const std::map<double,  ::cpp2::Struct9>& get_field1() const&;
  std::map<double,  ::cpp2::Struct9> get_field1() &&;

  template <typename T_Struct5_field1_struct_setter>
  std::map<double,  ::cpp2::Struct9>& set_field1(T_Struct5_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct5_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct5& a, Struct5& b);
extern template uint32_t Struct5::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct5::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct5::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct5::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct5::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct5::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct5::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct5::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct5>::clear( ::cpp2::Struct5* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct5>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct5>::write(Protocol* proto,  ::cpp2::Struct5 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct5>::read(Protocol* proto,  ::cpp2::Struct5* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct5>::serializedSize(Protocol const* proto,  ::cpp2::Struct5 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct5>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct5 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {

class Struct6 : private apache::thrift::detail::st::ComparisonOperators<Struct6> {
 public:

  Struct6() :
      field2(0) {}
  // FragileConstructor for use in initialization lists only

  Struct6(apache::thrift::FragileConstructor, std::map<std::map<std::string, int16_t>, std::map<std::vector<double>, bool>> field1__arg, int32_t field2__arg,  ::cpp2::Struct0 field3__arg,  ::cpp2::Struct3 field4__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }

  Struct6(Struct6&&) = default;

  Struct6(const Struct6&) = default;

  Struct6& operator=(Struct6&&) = default;

  Struct6& operator=(const Struct6&) = default;
  void __clear();

  virtual ~Struct6() {}

  std::map<std::map<std::string, int16_t>, std::map<std::vector<double>, bool>> field1;
  int32_t field2;
   ::cpp2::Struct0 field3;
   ::cpp2::Struct3 field4;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
  } __isset;
  bool operator==(const Struct6& rhs) const;

  bool operator < (const Struct6& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    (void)rhs;
    return false;
  }
  const std::map<std::map<std::string, int16_t>, std::map<std::vector<double>, bool>>& get_field1() const&;
  std::map<std::map<std::string, int16_t>, std::map<std::vector<double>, bool>> get_field1() &&;

  template <typename T_Struct6_field1_struct_setter>
  std::map<std::map<std::string, int16_t>, std::map<std::vector<double>, bool>>& set_field1(T_Struct6_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct6_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  int32_t get_field2() const {
    return field2;
  }

  int32_t& set_field2(int32_t field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }
  const  ::cpp2::Struct0& get_field3() const&;
   ::cpp2::Struct0 get_field3() &&;

  template <typename T_Struct6_field3_struct_setter>
   ::cpp2::Struct0& set_field3(T_Struct6_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct6_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }
  const  ::cpp2::Struct3& get_field4() const&;
   ::cpp2::Struct3 get_field4() &&;

  template <typename T_Struct6_field4_struct_setter>
   ::cpp2::Struct3& set_field4(T_Struct6_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct6_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct6& a, Struct6& b);
extern template uint32_t Struct6::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct6::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct6::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct6::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct6::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct6::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct6::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct6::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct6>::clear( ::cpp2::Struct6* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct6>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct6>::write(Protocol* proto,  ::cpp2::Struct6 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct6>::read(Protocol* proto,  ::cpp2::Struct6* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct6>::serializedSize(Protocol const* proto,  ::cpp2::Struct6 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct6>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct6 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {

class Struct7 : private apache::thrift::detail::st::ComparisonOperators<Struct7> {
 public:

  Struct7() :
      field7(0),
      field8(0),
      field17(0),
      field19(0),
      field20(0),
      field21(0),
      field23(0) {}
  // FragileConstructor for use in initialization lists only

  Struct7(apache::thrift::FragileConstructor,  ::cpp2::Struct28 field1__arg, std::set<double> field2__arg, std::map<float, std::map<std::set<int32_t>, float>> field3__arg, std::string field4__arg, std::set<int32_t> field5__arg, std::string field6__arg, int32_t field7__arg, int64_t field8__arg, std::map<int32_t, double> field9__arg, std::set<float> field10__arg, std::vector<float> field11__arg, std::map< ::cpp2::Struct2,  ::cpp2::Struct0> field12__arg, std::map<double, int16_t> field13__arg,  ::cpp2::Struct0 field14__arg, std::map<bool, std::map<float, int8_t>> field15__arg,  ::cpp2::Struct8 field16__arg, int8_t field17__arg, std::set<double> field18__arg, int8_t field19__arg, int8_t field20__arg, int8_t field21__arg, std::string field22__arg, int32_t field23__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }

  Struct7(Struct7&&) = default;

  Struct7(const Struct7&) = default;

  Struct7& operator=(Struct7&&) = default;

  Struct7& operator=(const Struct7&) = default;
  void __clear();

  virtual ~Struct7() {}

   ::cpp2::Struct28 field1;
  std::set<double> field2;
  std::map<float, std::map<std::set<int32_t>, float>> field3;
  std::string field4;
  std::set<int32_t> field5;
  std::string field6;
  int32_t field7;
  int64_t field8;
  std::map<int32_t, double> field9;
  std::set<float> field10;
  std::vector<float> field11;
  std::map< ::cpp2::Struct2,  ::cpp2::Struct0> field12;
  std::map<double, int16_t> field13;
   ::cpp2::Struct0 field14;
  std::map<bool, std::map<float, int8_t>> field15;
   ::cpp2::Struct8 field16;
  int8_t field17;
  std::set<double> field18;
  int8_t field19;
  int8_t field20;
  int8_t field21;
  std::string field22;
  int32_t field23;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
  } __isset;
  bool operator==(const Struct7& rhs) const;

  bool operator < (const Struct7& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    (void)rhs;
    return false;
  }
  const  ::cpp2::Struct28& get_field1() const&;
   ::cpp2::Struct28 get_field1() &&;

  template <typename T_Struct7_field1_struct_setter>
   ::cpp2::Struct28& set_field1(T_Struct7_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct7_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const std::set<double>& get_field2() const&;
  std::set<double> get_field2() &&;

  template <typename T_Struct7_field2_struct_setter>
  std::set<double>& set_field2(T_Struct7_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct7_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const std::map<float, std::map<std::set<int32_t>, float>>& get_field3() const&;
  std::map<float, std::map<std::set<int32_t>, float>> get_field3() &&;

  template <typename T_Struct7_field3_struct_setter>
  std::map<float, std::map<std::set<int32_t>, float>>& set_field3(T_Struct7_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct7_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  const std::string& get_field4() const& {
    return field4;
  }

  std::string get_field4() && {
    return std::move(field4);
  }

  template <typename T_Struct7_field4_struct_setter>
  std::string& set_field4(T_Struct7_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct7_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }
  const std::set<int32_t>& get_field5() const&;
  std::set<int32_t> get_field5() &&;

  template <typename T_Struct7_field5_struct_setter>
  std::set<int32_t>& set_field5(T_Struct7_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct7_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }

  const std::string& get_field6() const& {
    return field6;
  }

  std::string get_field6() && {
    return std::move(field6);
  }

  template <typename T_Struct7_field6_struct_setter>
  std::string& set_field6(T_Struct7_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct7_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }

  int32_t get_field7() const {
    return field7;
  }

  int32_t& set_field7(int32_t field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }

  int64_t get_field8() const {
    return field8;
  }

  int64_t& set_field8(int64_t field8_) {
    field8 = field8_;
    __isset.field8 = true;
    return field8;
  }
  const std::map<int32_t, double>& get_field9() const&;
  std::map<int32_t, double> get_field9() &&;

  template <typename T_Struct7_field9_struct_setter>
  std::map<int32_t, double>& set_field9(T_Struct7_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct7_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }
  const std::set<float>& get_field10() const&;
  std::set<float> get_field10() &&;

  template <typename T_Struct7_field10_struct_setter>
  std::set<float>& set_field10(T_Struct7_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct7_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }
  const std::vector<float>& get_field11() const&;
  std::vector<float> get_field11() &&;

  template <typename T_Struct7_field11_struct_setter>
  std::vector<float>& set_field11(T_Struct7_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct7_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }
  const std::map< ::cpp2::Struct2,  ::cpp2::Struct0>& get_field12() const&;
  std::map< ::cpp2::Struct2,  ::cpp2::Struct0> get_field12() &&;

  template <typename T_Struct7_field12_struct_setter>
  std::map< ::cpp2::Struct2,  ::cpp2::Struct0>& set_field12(T_Struct7_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct7_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }
  const std::map<double, int16_t>& get_field13() const&;
  std::map<double, int16_t> get_field13() &&;

  template <typename T_Struct7_field13_struct_setter>
  std::map<double, int16_t>& set_field13(T_Struct7_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct7_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }
  const  ::cpp2::Struct0& get_field14() const&;
   ::cpp2::Struct0 get_field14() &&;

  template <typename T_Struct7_field14_struct_setter>
   ::cpp2::Struct0& set_field14(T_Struct7_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct7_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }
  const std::map<bool, std::map<float, int8_t>>& get_field15() const&;
  std::map<bool, std::map<float, int8_t>> get_field15() &&;

  template <typename T_Struct7_field15_struct_setter>
  std::map<bool, std::map<float, int8_t>>& set_field15(T_Struct7_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct7_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }
  const  ::cpp2::Struct8& get_field16() const&;
   ::cpp2::Struct8 get_field16() &&;

  template <typename T_Struct7_field16_struct_setter>
   ::cpp2::Struct8& set_field16(T_Struct7_field16_struct_setter&& field16_) {
    field16 = std::forward<T_Struct7_field16_struct_setter>(field16_);
    __isset.field16 = true;
    return field16;
  }

  int8_t get_field17() const {
    return field17;
  }

  int8_t& set_field17(int8_t field17_) {
    field17 = field17_;
    __isset.field17 = true;
    return field17;
  }
  const std::set<double>& get_field18() const&;
  std::set<double> get_field18() &&;

  template <typename T_Struct7_field18_struct_setter>
  std::set<double>& set_field18(T_Struct7_field18_struct_setter&& field18_) {
    field18 = std::forward<T_Struct7_field18_struct_setter>(field18_);
    __isset.field18 = true;
    return field18;
  }

  int8_t get_field19() const {
    return field19;
  }

  int8_t& set_field19(int8_t field19_) {
    field19 = field19_;
    __isset.field19 = true;
    return field19;
  }

  int8_t get_field20() const {
    return field20;
  }

  int8_t& set_field20(int8_t field20_) {
    field20 = field20_;
    __isset.field20 = true;
    return field20;
  }

  int8_t get_field21() const {
    return field21;
  }

  int8_t& set_field21(int8_t field21_) {
    field21 = field21_;
    __isset.field21 = true;
    return field21;
  }

  const std::string& get_field22() const& {
    return field22;
  }

  std::string get_field22() && {
    return std::move(field22);
  }

  template <typename T_Struct7_field22_struct_setter>
  std::string& set_field22(T_Struct7_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct7_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }

  int32_t get_field23() const {
    return field23;
  }

  int32_t& set_field23(int32_t field23_) {
    field23 = field23_;
    __isset.field23 = true;
    return field23;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct7& a, Struct7& b);
extern template uint32_t Struct7::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct7::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct7::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct7::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct7::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct7::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct7::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct7::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct7>::clear( ::cpp2::Struct7* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct7>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct7>::write(Protocol* proto,  ::cpp2::Struct7 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct7>::read(Protocol* proto,  ::cpp2::Struct7* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct7>::serializedSize(Protocol const* proto,  ::cpp2::Struct7 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct7>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct7 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {

class Struct8 : private apache::thrift::detail::st::ComparisonOperators<Struct8> {
 public:

  Struct8() :
      field1(0),
      field3(0),
      field4(0),
      field7(0),
      field11(0) {}
  // FragileConstructor for use in initialization lists only

  Struct8(apache::thrift::FragileConstructor, bool field1__arg, std::set<std::string> field2__arg, int16_t field3__arg, int8_t field4__arg, std::set<int8_t> field5__arg, std::vector<int8_t> field6__arg, int64_t field7__arg, std::map<int8_t, std::set<bool>> field8__arg, std::vector<bool> field9__arg, std::set<std::vector<int16_t>> field10__arg, float field11__arg, std::vector<std::string> field12__arg, std::map<int64_t, int64_t> field13__arg, std::map<double, std::string> field14__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }

  Struct8(Struct8&&) = default;

  Struct8(const Struct8&) = default;

  Struct8& operator=(Struct8&&) = default;

  Struct8& operator=(const Struct8&) = default;
  void __clear();

  virtual ~Struct8() {}

  bool field1;
  std::set<std::string> field2;
  int16_t field3;
  int8_t field4;
  std::set<int8_t> field5;
  std::vector<int8_t> field6;
  int64_t field7;
  std::map<int8_t, std::set<bool>> field8;
  std::vector<bool> field9;
  std::set<std::vector<int16_t>> field10;
  float field11;
  std::vector<std::string> field12;
  std::map<int64_t, int64_t> field13;
  std::map<double, std::string> field14;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
  } __isset;
  bool operator==(const Struct8& rhs) const;

  bool operator < (const Struct8& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    (void)rhs;
    return false;
  }

  bool get_field1() const {
    return field1;
  }

  bool& set_field1(bool field1_) {
    field1 = field1_;
    __isset.field1 = true;
    return field1;
  }
  const std::set<std::string>& get_field2() const&;
  std::set<std::string> get_field2() &&;

  template <typename T_Struct8_field2_struct_setter>
  std::set<std::string>& set_field2(T_Struct8_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct8_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  int16_t get_field3() const {
    return field3;
  }

  int16_t& set_field3(int16_t field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }

  int8_t get_field4() const {
    return field4;
  }

  int8_t& set_field4(int8_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }
  const std::set<int8_t>& get_field5() const&;
  std::set<int8_t> get_field5() &&;

  template <typename T_Struct8_field5_struct_setter>
  std::set<int8_t>& set_field5(T_Struct8_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct8_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }
  const std::vector<int8_t>& get_field6() const&;
  std::vector<int8_t> get_field6() &&;

  template <typename T_Struct8_field6_struct_setter>
  std::vector<int8_t>& set_field6(T_Struct8_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct8_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }

  int64_t get_field7() const {
    return field7;
  }

  int64_t& set_field7(int64_t field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }
  const std::map<int8_t, std::set<bool>>& get_field8() const&;
  std::map<int8_t, std::set<bool>> get_field8() &&;

  template <typename T_Struct8_field8_struct_setter>
  std::map<int8_t, std::set<bool>>& set_field8(T_Struct8_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct8_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }
  const std::vector<bool>& get_field9() const&;
  std::vector<bool> get_field9() &&;

  template <typename T_Struct8_field9_struct_setter>
  std::vector<bool>& set_field9(T_Struct8_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct8_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }
  const std::set<std::vector<int16_t>>& get_field10() const&;
  std::set<std::vector<int16_t>> get_field10() &&;

  template <typename T_Struct8_field10_struct_setter>
  std::set<std::vector<int16_t>>& set_field10(T_Struct8_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct8_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }

  float get_field11() const {
    return field11;
  }

  float& set_field11(float field11_) {
    field11 = field11_;
    __isset.field11 = true;
    return field11;
  }
  const std::vector<std::string>& get_field12() const&;
  std::vector<std::string> get_field12() &&;

  template <typename T_Struct8_field12_struct_setter>
  std::vector<std::string>& set_field12(T_Struct8_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct8_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }
  const std::map<int64_t, int64_t>& get_field13() const&;
  std::map<int64_t, int64_t> get_field13() &&;

  template <typename T_Struct8_field13_struct_setter>
  std::map<int64_t, int64_t>& set_field13(T_Struct8_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct8_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }
  const std::map<double, std::string>& get_field14() const&;
  std::map<double, std::string> get_field14() &&;

  template <typename T_Struct8_field14_struct_setter>
  std::map<double, std::string>& set_field14(T_Struct8_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct8_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct8& a, Struct8& b);
extern template uint32_t Struct8::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct8::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct8::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct8::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct8::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct8::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct8::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct8::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct8>::clear( ::cpp2::Struct8* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct8>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct8>::write(Protocol* proto,  ::cpp2::Struct8 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct8>::read(Protocol* proto,  ::cpp2::Struct8* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct8>::serializedSize(Protocol const* proto,  ::cpp2::Struct8 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct8>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct8 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {

} // cpp2
