/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "file20_types.h"
#include "file20_types.tcc"

#include <algorithm>
#include <folly/Indestructible.h>

#include "file20_data.h"

namespace cpp2 {

void Struct0::__clear() {
  // clear all fields
  field1 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field2.clear();
  field3.clear();
  field4 = 0;
  __isset.__clear();
}

bool Struct0::operator==(const Struct0& rhs) const {
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field1, rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  return true;
}

const std::set<float>& Struct0::get_field2() const& {
  return field2;
}

std::set<float> Struct0::get_field2() && {
  return std::move(field2);
}

const std::vector<int8_t>& Struct0::get_field3() const& {
  return field3;
}

std::vector<int8_t> Struct0::get_field3() && {
  return std::move(field3);
}

void Struct0::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I64;
  }
}

void swap(Struct0& a, Struct0& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct0::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct0::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct0::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct0::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct0::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct0::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct0::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct0::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct1::__clear() {
  // clear all fields
  field1.clear();
  field2.clear();
  field3.clear();
  field4.clear();
  field5 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field6);
  field7.clear();
  __isset.__clear();
}

bool Struct1::operator==(const Struct1& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  return true;
}

const std::vector<int32_t>& Struct1::get_field1() const& {
  return field1;
}

std::vector<int32_t> Struct1::get_field1() && {
  return std::move(field1);
}

const std::set<bool>& Struct1::get_field2() const& {
  return field2;
}

std::set<bool> Struct1::get_field2() && {
  return std::move(field2);
}

const std::map< ::cpp2::Struct0, int8_t>& Struct1::get_field3() const& {
  return field3;
}

std::map< ::cpp2::Struct0, int8_t> Struct1::get_field3() && {
  return std::move(field3);
}

const std::vector<int32_t>& Struct1::get_field4() const& {
  return field4;
}

std::vector<int32_t> Struct1::get_field4() && {
  return std::move(field4);
}

const  ::cpp2::Struct0& Struct1::get_field6() const& {
  return field6;
}

 ::cpp2::Struct0 Struct1::get_field6() && {
  return std::move(field6);
}

const std::set<int64_t>& Struct1::get_field7() const& {
  return field7;
}

std::set<int64_t> Struct1::get_field7() && {
  return std::move(field7);
}

void Struct1::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_SET;
  }
}

void swap(Struct1& a, Struct1& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct1::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct1::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct1::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct1::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct1::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct1::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct1::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct1::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct2::__clear() {
  // clear all fields
}

bool Struct2::operator==(const Struct2& /* rhs */) const {
  return true;
}

void Struct2::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
}

void swap(Struct2& a, Struct2& b) {
  using ::std::swap;
  (void)a;
  (void)b;
}

template uint32_t Struct2::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct2::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct2::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct2::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct2::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct2::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct2::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct2::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct3::__clear() {
  // clear all fields
  field1 = 0;
  __isset.__clear();
}

bool Struct3::operator==(const Struct3& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  return true;
}

void Struct3::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
}

void swap(Struct3& a, Struct3& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct3::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct3::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct3::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct3::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct3::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct3::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct3::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct3::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct4::__clear() {
  // clear all fields
  field1.clear();
  field2.clear();
  field3 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field4.clear();
  field5 = 0;
  field6 = 0;
  field7.clear();
  field8.clear();
  field9 = 0;
  field10 = 0;
  field11 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field12 = 0;
  field13 = 0;
  __isset.__clear();
}

bool Struct4::operator==(const Struct4& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field11, rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  return true;
}

const std::vector<float>& Struct4::get_field1() const& {
  return field1;
}

std::vector<float> Struct4::get_field1() && {
  return std::move(field1);
}

const std::map<int8_t, double>& Struct4::get_field2() const& {
  return field2;
}

std::map<int8_t, double> Struct4::get_field2() && {
  return std::move(field2);
}

const std::vector<std::string>& Struct4::get_field4() const& {
  return field4;
}

std::vector<std::string> Struct4::get_field4() && {
  return std::move(field4);
}

const std::set<float>& Struct4::get_field7() const& {
  return field7;
}

std::set<float> Struct4::get_field7() && {
  return std::move(field7);
}

const std::map< ::cpp2::Struct0, int16_t>& Struct4::get_field8() const& {
  return field8;
}

std::map< ::cpp2::Struct0, int16_t> Struct4::get_field8() && {
  return std::move(field8);
}

void Struct4::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_I16;
  }
}

void swap(Struct4& a, Struct4& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct4::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct4::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct4::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct4::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct4::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct4::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct4::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct4::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct5::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field1);
  field2 = 0;
  field3.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field4);
  __isset.__clear();
}

bool Struct5::operator==(const Struct5& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  return true;
}

const  ::cpp2::Struct3& Struct5::get_field1() const& {
  return field1;
}

 ::cpp2::Struct3 Struct5::get_field1() && {
  return std::move(field1);
}

const std::vector<int64_t>& Struct5::get_field3() const& {
  return field3;
}

std::vector<int64_t> Struct5::get_field3() && {
  return std::move(field3);
}

const  ::cpp2::Struct4& Struct5::get_field4() const& {
  return field4;
}

 ::cpp2::Struct4 Struct5::get_field4() && {
  return std::move(field4);
}

void Struct5::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct5& a, Struct5& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct5::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct5::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct5::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct5::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct5::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct5::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct5::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct5::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct6::__clear() {
  // clear all fields
  field1.clear();
  field2 = 0;
  field3 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field4 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool Struct6::operator==(const Struct6& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field3, rhs.field3))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field4, rhs.field4))) {
    return false;
  }
  return true;
}

const std::map<std::map<int32_t, int32_t>, int64_t>& Struct6::get_field1() const& {
  return field1;
}

std::map<std::map<int32_t, int32_t>, int64_t> Struct6::get_field1() && {
  return std::move(field1);
}

void Struct6::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

void swap(Struct6& a, Struct6& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct6::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct6::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct6::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct6::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct6::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct6::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct6::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct6::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct7::__clear() {
  // clear all fields
  field1.clear();
  field2 = 0;
  field3.clear();
  field4 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field5);
  field6 = 0;
  field7.clear();
  field8.clear();
  field9.clear();
  field10.clear();
  field11 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool Struct7::operator==(const Struct7& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field11, rhs.field11))) {
    return false;
  }
  return true;
}

const std::set<std::string>& Struct7::get_field1() const& {
  return field1;
}

std::set<std::string> Struct7::get_field1() && {
  return std::move(field1);
}

const std::set< ::cpp2::Struct3>& Struct7::get_field3() const& {
  return field3;
}

std::set< ::cpp2::Struct3> Struct7::get_field3() && {
  return std::move(field3);
}

const  ::cpp2::Struct1& Struct7::get_field5() const& {
  return field5;
}

 ::cpp2::Struct1 Struct7::get_field5() && {
  return std::move(field5);
}

const std::vector< ::cpp2::Struct1>& Struct7::get_field7() const& {
  return field7;
}

std::vector< ::cpp2::Struct1> Struct7::get_field7() && {
  return std::move(field7);
}

const std::map<double, std::string>& Struct7::get_field8() const& {
  return field8;
}

std::map<double, std::string> Struct7::get_field8() && {
  return std::move(field8);
}

const std::vector<int32_t>& Struct7::get_field9() const& {
  return field9;
}

std::vector<int32_t> Struct7::get_field9() && {
  return std::move(field9);
}

const std::set<float>& Struct7::get_field10() const& {
  return field10;
}

std::set<float> Struct7::get_field10() && {
  return std::move(field10);
}

void Struct7::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

void swap(Struct7& a, Struct7& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct7::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct7::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct7::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct7::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct7::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct7::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct7::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct7::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct8::__clear() {
  // clear all fields
  field1.clear();
  field2 = 0;
  field3 = 0;
  field4.clear();
  field5 = 0;
  field6 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field7 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field8);
  field9 = 0;
  field10.clear();
  field11.clear();
  field12 = 0;
  __isset.__clear();
}

bool Struct8::operator==(const Struct8& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field6, rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  return true;
}

const std::set<float>& Struct8::get_field1() const& {
  return field1;
}

std::set<float> Struct8::get_field1() && {
  return std::move(field1);
}

const std::map<int16_t, bool>& Struct8::get_field4() const& {
  return field4;
}

std::map<int16_t, bool> Struct8::get_field4() && {
  return std::move(field4);
}

const  ::cpp2::Struct4& Struct8::get_field8() const& {
  return field8;
}

 ::cpp2::Struct4 Struct8::get_field8() && {
  return std::move(field8);
}

const std::vector<std::string>& Struct8::get_field10() const& {
  return field10;
}

std::vector<std::string> Struct8::get_field10() && {
  return std::move(field10);
}

const std::set<int64_t>& Struct8::get_field11() const& {
  return field11;
}

std::set<int64_t> Struct8::get_field11() && {
  return std::move(field11);
}

void Struct8::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
}

void swap(Struct8& a, Struct8& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct8::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct8::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct8::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct8::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct8::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct8::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct8::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct8::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct9::__clear() {
  // clear all fields
  field1.clear();
  field2 = 0;
  field3.clear();
  field4 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field5.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field6);
  __isset.__clear();
}

bool Struct9::operator==(const Struct9& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  return true;
}

const std::map< ::cpp2::Struct4, int64_t>& Struct9::get_field1() const& {
  return field1;
}

std::map< ::cpp2::Struct4, int64_t> Struct9::get_field1() && {
  return std::move(field1);
}

const std::set<float>& Struct9::get_field3() const& {
  return field3;
}

std::set<float> Struct9::get_field3() && {
  return std::move(field3);
}

const std::map<std::string, int16_t>& Struct9::get_field5() const& {
  return field5;
}

std::map<std::string, int16_t> Struct9::get_field5() && {
  return std::move(field5);
}

const  ::cpp2::Struct6& Struct9::get_field6() const& {
  return field6;
}

 ::cpp2::Struct6 Struct9::get_field6() && {
  return std::move(field6);
}

void Struct9::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct9& a, Struct9& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct9::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct9::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct9::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct9::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct9::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct9::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct9::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct9::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

} // cpp2
