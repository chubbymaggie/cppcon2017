/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "file27_types.h"
#include "file27_types.tcc"

#include <algorithm>
#include <folly/Indestructible.h>

#include "file27_data.h"

namespace example { namespace thrift27 {

void Struct0::__clear() {
  // clear all fields
  field1.clear();
  field2.clear();
  field3 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field4.clear();
  field5 = 0;
  field6.clear();
  field7.clear();
  field8 = 0;
  field9 = 0;
  field10.clear();
  field11.clear();
  field12 = 0;
  field13 = 0;
  field14 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field15 = 0;
  field16 = 0;
  field17 = 0;
  field18 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field19.clear();
  field20 = 0;
  field21 = 0;
  field22.clear();
  field23 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field24 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field25.clear();
  field26 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field27.clear();
  field28 = 0;
  field29 = 0;
  field30 = 0;
  field31 = 0;
  field32.clear();
  field33 = 0;
  field34 = 0;
  field35.clear();
  field36 = 0;
  field37 = 0;
  field38 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field39 = 0;
  __isset.__clear();
}

bool Struct0::operator==(const Struct0& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field14, rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field24, rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field38, rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  return true;
}

const std::map<bool, double>& Struct0::get_field1() const& {
  return field1;
}

std::map<bool, double> Struct0::get_field1() && {
  return std::move(field1);
}

const std::vector<int64_t>& Struct0::get_field2() const& {
  return field2;
}

std::vector<int64_t> Struct0::get_field2() && {
  return std::move(field2);
}

const std::map<std::string, int8_t>& Struct0::get_field4() const& {
  return field4;
}

std::map<std::string, int8_t> Struct0::get_field4() && {
  return std::move(field4);
}

const std::map<int16_t, std::map<double, std::string>>& Struct0::get_field6() const& {
  return field6;
}

std::map<int16_t, std::map<double, std::string>> Struct0::get_field6() && {
  return std::move(field6);
}

const std::map<int32_t, int8_t>& Struct0::get_field7() const& {
  return field7;
}

std::map<int32_t, int8_t> Struct0::get_field7() && {
  return std::move(field7);
}

const std::map<bool, bool>& Struct0::get_field10() const& {
  return field10;
}

std::map<bool, bool> Struct0::get_field10() && {
  return std::move(field10);
}

const std::set<std::vector<std::string>>& Struct0::get_field11() const& {
  return field11;
}

std::set<std::vector<std::string>> Struct0::get_field11() && {
  return std::move(field11);
}

const std::vector<double>& Struct0::get_field19() const& {
  return field19;
}

std::vector<double> Struct0::get_field19() && {
  return std::move(field19);
}

const std::set<int16_t>& Struct0::get_field22() const& {
  return field22;
}

std::set<int16_t> Struct0::get_field22() && {
  return std::move(field22);
}

const std::map<bool, int32_t>& Struct0::get_field25() const& {
  return field25;
}

std::map<bool, int32_t> Struct0::get_field25() && {
  return std::move(field25);
}

const std::set<std::string>& Struct0::get_field27() const& {
  return field27;
}

std::set<std::string> Struct0::get_field27() && {
  return std::move(field27);
}

const std::map<std::string, double>& Struct0::get_field32() const& {
  return field32;
}

std::map<std::string, double> Struct0::get_field32() && {
  return std::move(field32);
}

const std::vector<int8_t>& Struct0::get_field35() const& {
  return field35;
}

std::vector<int8_t> Struct0::get_field35() && {
  return std::move(field35);
}

void Struct0::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
}

void swap(Struct0& a, Struct0& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct0::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct0::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct0::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct0::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct0::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct0::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct0::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct0::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

void Struct1::__clear() {
  // clear all fields
  field1 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct0>::clear(&field2);
  field3.clear();
  field4 = 0;
  field5 = 0;
  field6 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field7 = 0;
  field8 = 0;
  __isset.__clear();
}

bool Struct1::operator==(const Struct1& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  return true;
}

const  ::example::thrift27::Struct0& Struct1::get_field2() const& {
  return field2;
}

 ::example::thrift27::Struct0 Struct1::get_field2() && {
  return std::move(field2);
}

const std::set<int32_t>& Struct1::get_field3() const& {
  return field3;
}

std::set<int32_t> Struct1::get_field3() && {
  return std::move(field3);
}

void Struct1::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_I16;
  }
}

void swap(Struct1& a, Struct1& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct1::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct1::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct1::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct1::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct1::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct1::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct1::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct1::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

void Struct2::__clear() {
  // clear all fields
  field1 = 0;
  field2 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct0>::clear(&field3);
  __isset.__clear();
}

bool Struct2::operator==(const Struct2& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  return true;
}

const  ::example::thrift27::Struct0& Struct2::get_field3() const& {
  return field3;
}

 ::example::thrift27::Struct0 Struct2::get_field3() && {
  return std::move(field3);
}

void Struct2::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct2& a, Struct2& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct2::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct2::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct2::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct2::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct2::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct2::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct2::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct2::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

void Struct3::__clear() {
  // clear all fields
  field1.clear();
  field2 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field3.clear();
  field4.clear();
  field5 = 0;
  field6.clear();
  field7 = 0;
  field8 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::clear(&field9);
  field10.clear();
  field11.clear();
  field12.clear();
  field13 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field14.clear();
  field15 = 0;
  field16 = 0;
  field17 = 0;
  field18.clear();
  field19.clear();
  field20.clear();
  field21.clear();
  __isset.__clear();
}

bool Struct3::operator==(const Struct3& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field2, rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  return true;
}

const std::vector<std::string>& Struct3::get_field1() const& {
  return field1;
}

std::vector<std::string> Struct3::get_field1() && {
  return std::move(field1);
}

const std::vector<std::vector<bool>>& Struct3::get_field3() const& {
  return field3;
}

std::vector<std::vector<bool>> Struct3::get_field3() && {
  return std::move(field3);
}

const std::vector<std::string>& Struct3::get_field4() const& {
  return field4;
}

std::vector<std::string> Struct3::get_field4() && {
  return std::move(field4);
}

const std::set<std::map<std::string, bool>>& Struct3::get_field6() const& {
  return field6;
}

std::set<std::map<std::string, bool>> Struct3::get_field6() && {
  return std::move(field6);
}

const  ::example::thrift27::Struct1& Struct3::get_field9() const& {
  return field9;
}

 ::example::thrift27::Struct1 Struct3::get_field9() && {
  return std::move(field9);
}

const std::vector<std::string>& Struct3::get_field10() const& {
  return field10;
}

std::vector<std::string> Struct3::get_field10() && {
  return std::move(field10);
}

const std::vector<std::string>& Struct3::get_field11() const& {
  return field11;
}

std::vector<std::string> Struct3::get_field11() && {
  return std::move(field11);
}

const std::vector<int16_t>& Struct3::get_field12() const& {
  return field12;
}

std::vector<int16_t> Struct3::get_field12() && {
  return std::move(field12);
}

const std::set<int64_t>& Struct3::get_field14() const& {
  return field14;
}

std::set<int64_t> Struct3::get_field14() && {
  return std::move(field14);
}

const std::vector<float>& Struct3::get_field18() const& {
  return field18;
}

std::vector<float> Struct3::get_field18() && {
  return std::move(field18);
}

const std::vector<std::string>& Struct3::get_field19() const& {
  return field19;
}

std::vector<std::string> Struct3::get_field19() && {
  return std::move(field19);
}

const std::set<int64_t>& Struct3::get_field20() const& {
  return field20;
}

std::set<int64_t> Struct3::get_field20() && {
  return std::move(field20);
}

const std::set<std::set<bool>>& Struct3::get_field21() const& {
  return field21;
}

std::set<std::set<bool>> Struct3::get_field21() && {
  return std::move(field21);
}

void Struct3::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_SET;
  }
}

void swap(Struct3& a, Struct3& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct3::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct3::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct3::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct3::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct3::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct3::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct3::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct3::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

void Struct4::__clear() {
  // clear all fields
  field1.clear();
  __isset.__clear();
}

bool Struct4::operator==(const Struct4& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  return true;
}

const std::map<int16_t, int16_t>& Struct4::get_field1() const& {
  return field1;
}

std::map<int16_t, int16_t> Struct4::get_field1() && {
  return std::move(field1);
}

void Struct4::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
}

void swap(Struct4& a, Struct4& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct4::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct4::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct4::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct4::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct4::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct4::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct4::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct4::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

void Struct5::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::clear(&field1);
  field2 = 0;
  __isset.__clear();
}

bool Struct5::operator==(const Struct5& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  return true;
}

const  ::example::thrift27::Struct1& Struct5::get_field1() const& {
  return field1;
}

 ::example::thrift27::Struct1 Struct5::get_field1() && {
  return std::move(field1);
}

void Struct5::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
}

void swap(Struct5& a, Struct5& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct5::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct5::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct5::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct5::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct5::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct5::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct5::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct5::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

void Struct6::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct4>::clear(&field1);
  field2 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field3 = 0;
  field4 = 0;
  field5.clear();
  field6 = 0;
  field7.clear();
  __isset.__clear();
}

bool Struct6::operator==(const Struct6& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  return true;
}

const  ::example::thrift27::Struct4& Struct6::get_field1() const& {
  return field1;
}

 ::example::thrift27::Struct4 Struct6::get_field1() && {
  return std::move(field1);
}

const std::set<std::vector<bool>>& Struct6::get_field5() const& {
  return field5;
}

std::set<std::vector<bool>> Struct6::get_field5() && {
  return std::move(field5);
}

const std::vector<int16_t>& Struct6::get_field7() const& {
  return field7;
}

std::vector<int16_t> Struct6::get_field7() && {
  return std::move(field7);
}

void Struct6::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_LIST;
  }
}

void swap(Struct6& a, Struct6& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct6::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct6::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct6::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct6::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct6::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct6::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct6::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct6::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

void Struct7::__clear() {
  // clear all fields
  field1 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::clear(&field2);
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct5>::clear(&field3);
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct6>::clear(&field4);
  __isset.__clear();
}

bool Struct7::operator==(const Struct7& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  return true;
}

const  ::example::thrift27::Struct1& Struct7::get_field2() const& {
  return field2;
}

 ::example::thrift27::Struct1 Struct7::get_field2() && {
  return std::move(field2);
}

const  ::example::thrift27::Struct5& Struct7::get_field3() const& {
  return field3;
}

 ::example::thrift27::Struct5 Struct7::get_field3() && {
  return std::move(field3);
}

const  ::example::thrift27::Struct6& Struct7::get_field4() const& {
  return field4;
}

 ::example::thrift27::Struct6 Struct7::get_field4() && {
  return std::move(field4);
}

void Struct7::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct7& a, Struct7& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct7::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct7::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct7::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct7::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct7::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct7::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct7::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct7::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

void Struct8::__clear() {
  // clear all fields
  field1.clear();
  field2.clear();
  field3 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct3>::clear(&field4);
  field5.clear();
  field6 = 0;
  field7 = 0;
  __isset.__clear();
}

bool Struct8::operator==(const Struct8& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  return true;
}

const std::map<int8_t, bool>& Struct8::get_field1() const& {
  return field1;
}

std::map<int8_t, bool> Struct8::get_field1() && {
  return std::move(field1);
}

const std::set<std::string>& Struct8::get_field2() const& {
  return field2;
}

std::set<std::string> Struct8::get_field2() && {
  return std::move(field2);
}

const  ::example::thrift27::Struct3& Struct8::get_field4() const& {
  return field4;
}

 ::example::thrift27::Struct3 Struct8::get_field4() && {
  return std::move(field4);
}

const std::vector< ::example::thrift27::Struct1>& Struct8::get_field5() const& {
  return field5;
}

std::vector< ::example::thrift27::Struct1> Struct8::get_field5() && {
  return std::move(field5);
}

void Struct8::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
}

void swap(Struct8& a, Struct8& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct8::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct8::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct8::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct8::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct8::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct8::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct8::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct8::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

void Struct9::__clear() {
  // clear all fields
  field1 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::clear(&field2);
  field3.clear();
  field4.clear();
  __isset.__clear();
}

bool Struct9::operator==(const Struct9& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  return true;
}

const  ::example::thrift27::Struct1& Struct9::get_field2() const& {
  return field2;
}

 ::example::thrift27::Struct1 Struct9::get_field2() && {
  return std::move(field2);
}

const std::vector<int16_t>& Struct9::get_field3() const& {
  return field3;
}

std::vector<int16_t> Struct9::get_field3() && {
  return std::move(field3);
}

const std::vector<int8_t>& Struct9::get_field4() const& {
  return field4;
}

std::vector<int8_t> Struct9::get_field4() && {
  return std::move(field4);
}

void Struct9::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_LIST;
  }
}

void swap(Struct9& a, Struct9& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct9::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct9::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct9::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct9::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct9::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct9::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct9::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct9::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

void Struct10::__clear() {
  // clear all fields
  field1.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct5>::clear(&field2);
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct8>::clear(&field3);
  field4 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field5 = 0;
  field6 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field7.clear();
  field8.clear();
  field9 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field10.clear();
  field11 = 0;
  field12.clear();
  field13.clear();
  field14.clear();
  field15.clear();
  field16 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field17.clear();
  field18 = 0;
  field19.clear();
  field20 = 0;
  field21 = 0;
  field22 = 0;
  field23.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::clear(&field24);
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct5>::clear(&field25);
  field26 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field27 = 0;
  field28.clear();
  field29.clear();
  field30.clear();
  field31.clear();
  field32 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field33 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field34 = 0;
  field35.clear();
  field36.clear();
  __isset.__clear();
}

bool Struct10::operator==(const Struct10& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field4, rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field33, rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  return true;
}

const std::set<float>& Struct10::get_field1() const& {
  return field1;
}

std::set<float> Struct10::get_field1() && {
  return std::move(field1);
}

const  ::example::thrift27::Struct5& Struct10::get_field2() const& {
  return field2;
}

 ::example::thrift27::Struct5 Struct10::get_field2() && {
  return std::move(field2);
}

const  ::example::thrift27::Struct8& Struct10::get_field3() const& {
  return field3;
}

 ::example::thrift27::Struct8 Struct10::get_field3() && {
  return std::move(field3);
}

const std::map<std::map<std::string, double>, int64_t>& Struct10::get_field7() const& {
  return field7;
}

std::map<std::map<std::string, double>, int64_t> Struct10::get_field7() && {
  return std::move(field7);
}

const std::vector<float>& Struct10::get_field8() const& {
  return field8;
}

std::vector<float> Struct10::get_field8() && {
  return std::move(field8);
}

const std::map<bool, int8_t>& Struct10::get_field10() const& {
  return field10;
}

std::map<bool, int8_t> Struct10::get_field10() && {
  return std::move(field10);
}

const std::set<bool>& Struct10::get_field12() const& {
  return field12;
}

std::set<bool> Struct10::get_field12() && {
  return std::move(field12);
}

const std::vector<std::map< ::example::thrift27::Struct2, int32_t>>& Struct10::get_field13() const& {
  return field13;
}

std::vector<std::map< ::example::thrift27::Struct2, int32_t>> Struct10::get_field13() && {
  return std::move(field13);
}

const std::vector<std::string>& Struct10::get_field14() const& {
  return field14;
}

std::vector<std::string> Struct10::get_field14() && {
  return std::move(field14);
}

const std::map<int64_t, std::string>& Struct10::get_field15() const& {
  return field15;
}

std::map<int64_t, std::string> Struct10::get_field15() && {
  return std::move(field15);
}

const std::set<double>& Struct10::get_field17() const& {
  return field17;
}

std::set<double> Struct10::get_field17() && {
  return std::move(field17);
}

const std::set< ::example::thrift27::Struct2>& Struct10::get_field19() const& {
  return field19;
}

std::set< ::example::thrift27::Struct2> Struct10::get_field19() && {
  return std::move(field19);
}

const std::map<std::map<float, float>, int32_t>& Struct10::get_field23() const& {
  return field23;
}

std::map<std::map<float, float>, int32_t> Struct10::get_field23() && {
  return std::move(field23);
}

const  ::example::thrift27::Struct1& Struct10::get_field24() const& {
  return field24;
}

 ::example::thrift27::Struct1 Struct10::get_field24() && {
  return std::move(field24);
}

const  ::example::thrift27::Struct5& Struct10::get_field25() const& {
  return field25;
}

 ::example::thrift27::Struct5 Struct10::get_field25() && {
  return std::move(field25);
}

const std::set<int8_t>& Struct10::get_field28() const& {
  return field28;
}

std::set<int8_t> Struct10::get_field28() && {
  return std::move(field28);
}

const std::vector<int16_t>& Struct10::get_field29() const& {
  return field29;
}

std::vector<int16_t> Struct10::get_field29() && {
  return std::move(field29);
}

const std::vector<std::set<std::string>>& Struct10::get_field30() const& {
  return field30;
}

std::vector<std::set<std::string>> Struct10::get_field30() && {
  return std::move(field30);
}

const std::set<float>& Struct10::get_field31() const& {
  return field31;
}

std::set<float> Struct10::get_field31() && {
  return std::move(field31);
}

const std::map<int8_t, float>& Struct10::get_field35() const& {
  return field35;
}

std::map<int8_t, float> Struct10::get_field35() && {
  return std::move(field35);
}

const std::set<std::string>& Struct10::get_field36() const& {
  return field36;
}

std::set<std::string> Struct10::get_field36() && {
  return std::move(field36);
}

void Struct10::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_SET;
  }
}

void swap(Struct10& a, Struct10& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct10::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct10::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct10::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct10::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct10::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct10::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct10::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct10::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

void Struct11::__clear() {
  // clear all fields
  field1 = 0;
  field2 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field3 = 0;
  field4 = 0;
  field5 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool Struct11::operator==(const Struct11& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  return true;
}

void Struct11::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

void swap(Struct11& a, Struct11& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct11::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct11::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct11::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct11::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct11::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct11::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct11::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct11::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

void Struct12::__clear() {
  // clear all fields
  field1.clear();
  field2 = 0;
  field3 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field4.clear();
  field5 = 0;
  field6 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field7 = 0;
  __isset.__clear();
}

bool Struct12::operator==(const Struct12& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field3, rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  return true;
}

const std::set<float>& Struct12::get_field1() const& {
  return field1;
}

std::set<float> Struct12::get_field1() && {
  return std::move(field1);
}

const std::map<int64_t, int64_t>& Struct12::get_field4() const& {
  return field4;
}

std::map<int64_t, int64_t> Struct12::get_field4() && {
  return std::move(field4);
}

void Struct12::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
}

void swap(Struct12& a, Struct12& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct12::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct12::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct12::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct12::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct12::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct12::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct12::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct12::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

void Struct13::__clear() {
  // clear all fields
  field1 = 0;
  field2 = 0;
  field3 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct2>::clear(&field4);
  field5 = 0;
  field6 = 0;
  field7 = 0;
  field8.clear();
  field9 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::clear(&field10);
  field11 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct6>::clear(&field12);
  __isset.__clear();
}

bool Struct13::operator==(const Struct13& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field3, rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  return true;
}

const  ::example::thrift27::Struct2& Struct13::get_field4() const& {
  return field4;
}

 ::example::thrift27::Struct2 Struct13::get_field4() && {
  return std::move(field4);
}

const std::map<bool, int64_t>& Struct13::get_field8() const& {
  return field8;
}

std::map<bool, int64_t> Struct13::get_field8() && {
  return std::move(field8);
}

const  ::example::thrift27::Struct1& Struct13::get_field10() const& {
  return field10;
}

 ::example::thrift27::Struct1 Struct13::get_field10() && {
  return std::move(field10);
}

const  ::example::thrift27::Struct6& Struct13::get_field12() const& {
  return field12;
}

 ::example::thrift27::Struct6 Struct13::get_field12() && {
  return std::move(field12);
}

void Struct13::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct13& a, Struct13& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct13::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct13::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct13::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct13::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct13::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct13::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct13::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct13::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

}} // example::thrift27
