/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "file1_types.h"

#include "file1_types.tcc"

#include <algorithm>

#include <folly/Indestructible.h>

#include "file1_data.h"



namespace cpp2 {

void Struct0::__clear() {
  // clear all fields
  field1 = 0;
  field2 = 0;
  field3 = 0;
  field4.clear();
  field5.clear();
  field6.clear();
  field7 = 0;
  field8 = 0;
  field9 = 0;
  __isset.__clear();
}

bool Struct0::operator==(const Struct0& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  return true;
}

const std::set<double>& Struct0::get_field4() const& {
  return field4;
}

std::set<double> Struct0::get_field4() && {
  return std::move(field4);
}

const std::map<std::string, std::map<std::map<int16_t, int16_t>, double>>& Struct0::get_field5() const& {
  return field5;
}

std::map<std::string, std::map<std::map<int16_t, int16_t>, double>> Struct0::get_field5() && {
  return std::move(field5);
}

const std::vector<double>& Struct0::get_field6() const& {
  return field6;
}

std::vector<double> Struct0::get_field6() && {
  return std::move(field6);
}

void Struct0::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
}

void swap(Struct0& a, Struct0& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct0::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct0::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct0::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct0::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct0::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct0::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct0::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct0::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct1::__clear() {
  // clear all fields
  field1 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool Struct1::operator==(const Struct1& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  return true;
}

void Struct1::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

void swap(Struct1& a, Struct1& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct1::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct1::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct1::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct1::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct1::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct1::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct1::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct1::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct2::__clear() {
  // clear all fields
  field1 = 0;
  field2 = 0;
  field3 = 0;
  field4.clear();
  field5 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field6 = 0;
  field7 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field8 = 0;
  field9 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field10 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field11.clear();
  field12.clear();
  field13 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field14);
  field15 = 0;
  field16.clear();
  field17.clear();
  field18.clear();
  field19 = 0;
  field20.clear();
  field21 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field22);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field23);
  __isset.__clear();
}

bool Struct2::operator==(const Struct2& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field7, rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field10, rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  return true;
}

const std::map<std::map<std::set<bool>, int8_t>, std::string>& Struct2::get_field4() const& {
  return field4;
}

std::map<std::map<std::set<bool>, int8_t>, std::string> Struct2::get_field4() && {
  return std::move(field4);
}

const std::map<int16_t, double>& Struct2::get_field11() const& {
  return field11;
}

std::map<int16_t, double> Struct2::get_field11() && {
  return std::move(field11);
}

const std::vector<int8_t>& Struct2::get_field12() const& {
  return field12;
}

std::vector<int8_t> Struct2::get_field12() && {
  return std::move(field12);
}

const  ::cpp2::Struct0& Struct2::get_field14() const& {
  return field14;
}

 ::cpp2::Struct0 Struct2::get_field14() && {
  return std::move(field14);
}

const std::map<std::string, int8_t>& Struct2::get_field16() const& {
  return field16;
}

std::map<std::string, int8_t> Struct2::get_field16() && {
  return std::move(field16);
}

const std::vector<double>& Struct2::get_field17() const& {
  return field17;
}

std::vector<double> Struct2::get_field17() && {
  return std::move(field17);
}

const std::set<std::string>& Struct2::get_field18() const& {
  return field18;
}

std::set<std::string> Struct2::get_field18() && {
  return std::move(field18);
}

const std::map<int8_t, std::string>& Struct2::get_field20() const& {
  return field20;
}

std::map<int8_t, std::string> Struct2::get_field20() && {
  return std::move(field20);
}

const  ::cpp2::Struct1& Struct2::get_field22() const& {
  return field22;
}

 ::cpp2::Struct1 Struct2::get_field22() && {
  return std::move(field22);
}

const  ::cpp2::Struct0& Struct2::get_field23() const& {
  return field23;
}

 ::cpp2::Struct0 Struct2::get_field23() && {
  return std::move(field23);
}

void Struct2::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct2& a, Struct2& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct2::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct2::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct2::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct2::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct2::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct2::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct2::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct2::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct3::__clear() {
  // clear all fields
  field1 = 0;
  field2 = 0;
  field3.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field4);
  field5.clear();
  field6.clear();
  field7 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool Struct3::operator==(const Struct3& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field7, rhs.field7))) {
    return false;
  }
  return true;
}

const std::map<float,  ::cpp2::Struct1>& Struct3::get_field3() const& {
  return field3;
}

std::map<float,  ::cpp2::Struct1> Struct3::get_field3() && {
  return std::move(field3);
}

const  ::cpp2::Struct1& Struct3::get_field4() const& {
  return field4;
}

 ::cpp2::Struct1 Struct3::get_field4() && {
  return std::move(field4);
}

const std::map< ::cpp2::Struct2, int64_t>& Struct3::get_field5() const& {
  return field5;
}

std::map< ::cpp2::Struct2, int64_t> Struct3::get_field5() && {
  return std::move(field5);
}

const std::map<int32_t, std::string>& Struct3::get_field6() const& {
  return field6;
}

std::map<int32_t, std::string> Struct3::get_field6() && {
  return std::move(field6);
}

void Struct3::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

void swap(Struct3& a, Struct3& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct3::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct3::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct3::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct3::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct3::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct3::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct3::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct3::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct4::__clear() {
  // clear all fields
  field1.clear();
  field2 = 0;
  field3 = 0;
  field4.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field5);
  field6.clear();
  field7 = 0;
  __isset.__clear();
}

bool Struct4::operator==(const Struct4& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  return true;
}

const std::set<std::string>& Struct4::get_field1() const& {
  return field1;
}

std::set<std::string> Struct4::get_field1() && {
  return std::move(field1);
}

const std::set< ::cpp2::Struct0>& Struct4::get_field4() const& {
  return field4;
}

std::set< ::cpp2::Struct0> Struct4::get_field4() && {
  return std::move(field4);
}

const  ::cpp2::Struct2& Struct4::get_field5() const& {
  return field5;
}

 ::cpp2::Struct2 Struct4::get_field5() && {
  return std::move(field5);
}

const std::map<int32_t, int32_t>& Struct4::get_field6() const& {
  return field6;
}

std::map<int32_t, int32_t> Struct4::get_field6() && {
  return std::move(field6);
}

void Struct4::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_I16;
  }
}

void swap(Struct4& a, Struct4& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct4::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct4::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct4::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct4::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct4::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct4::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct4::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct4::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct5::__clear() {
  // clear all fields
  field1 = 0;
  field2.clear();
  field3.clear();
  field4 = 0;
  field5 = 0;
  field6.clear();
  field7 = 0;
  __isset.__clear();
}

bool Struct5::operator==(const Struct5& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  return true;
}

const std::map<std::set<bool>, int32_t>& Struct5::get_field2() const& {
  return field2;
}

std::map<std::set<bool>, int32_t> Struct5::get_field2() && {
  return std::move(field2);
}

const std::map< ::cpp2::Struct1, bool>& Struct5::get_field3() const& {
  return field3;
}

std::map< ::cpp2::Struct1, bool> Struct5::get_field3() && {
  return std::move(field3);
}

const std::map<std::vector<double>, int16_t>& Struct5::get_field6() const& {
  return field6;
}

std::map<std::vector<double>, int16_t> Struct5::get_field6() && {
  return std::move(field6);
}

void Struct5::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
}

void swap(Struct5& a, Struct5& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct5::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct5::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct5::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct5::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct5::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct5::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct5::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct5::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct6::__clear() {
  // clear all fields
  field1 = 0;
  field2 = 0;
  field3 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field4);
  field5 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field6);
  field7 = 0;
  field8 = 0;
  field9 = 0;
  field10 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field11 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field12.clear();
  field13 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field14.clear();
  __isset.__clear();
}

bool Struct6::operator==(const Struct6& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field5, rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field10, rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  return true;
}

const  ::cpp2::Struct0& Struct6::get_field4() const& {
  return field4;
}

 ::cpp2::Struct0 Struct6::get_field4() && {
  return std::move(field4);
}

const  ::cpp2::Struct1& Struct6::get_field6() const& {
  return field6;
}

 ::cpp2::Struct1 Struct6::get_field6() && {
  return std::move(field6);
}

const std::map<std::set<std::vector<int32_t>>, double>& Struct6::get_field12() const& {
  return field12;
}

std::map<std::set<std::vector<int32_t>>, double> Struct6::get_field12() && {
  return std::move(field12);
}

const std::vector<int64_t>& Struct6::get_field14() const& {
  return field14;
}

std::vector<int64_t> Struct6::get_field14() && {
  return std::move(field14);
}

void Struct6::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_LIST;
  }
}

void swap(Struct6& a, Struct6& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct6::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct6::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct6::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct6::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct6::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct6::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct6::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct6::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct7::__clear() {
  // clear all fields
}

bool Struct7::operator==(const Struct7& /* rhs */) const {
  return true;
}

void Struct7::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
}

void swap(Struct7& a, Struct7& b) {
  using ::std::swap;
  (void)a;
  (void)b;
}

template uint32_t Struct7::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct7::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct7::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct7::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct7::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct7::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct7::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct7::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct8::__clear() {
  // clear all fields
}

bool Struct8::operator==(const Struct8& /* rhs */) const {
  return true;
}

void Struct8::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
}

void swap(Struct8& a, Struct8& b) {
  using ::std::swap;
  (void)a;
  (void)b;
}

template uint32_t Struct8::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct8::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct8::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct8::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct8::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct8::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct8::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct8::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct9::__clear() {
  // clear all fields
}

bool Struct9::operator==(const Struct9& /* rhs */) const {
  return true;
}

void Struct9::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
}

void swap(Struct9& a, Struct9& b) {
  using ::std::swap;
  (void)a;
  (void)b;
}

template uint32_t Struct9::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct9::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct9::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct9::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct9::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct9::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct9::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct9::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct10::__clear() {
  // clear all fields
  field1 = 0;
  field2.clear();
  __isset.__clear();
}

bool Struct10::operator==(const Struct10& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  return true;
}

const std::map<int8_t, int64_t>& Struct10::get_field2() const& {
  return field2;
}

std::map<int8_t, int64_t> Struct10::get_field2() && {
  return std::move(field2);
}

void Struct10::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_MAP;
  }
}

void swap(Struct10& a, Struct10& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct10::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct10::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct10::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct10::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct10::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct10::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct10::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct10::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct11::__clear() {
  // clear all fields
  field1 = 0;
  field2.clear();
  field3 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field4 = 0;
  field5 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool Struct11::operator==(const Struct11& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field3, rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field5, rhs.field5))) {
    return false;
  }
  return true;
}

const std::vector<double>& Struct11::get_field2() const& {
  return field2;
}

std::vector<double> Struct11::get_field2() && {
  return std::move(field2);
}

void Struct11::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

void swap(Struct11& a, Struct11& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct11::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct11::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct11::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct11::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct11::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct11::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct11::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct11::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct12::__clear() {
  // clear all fields
  field1 = 0;
  field2 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field3);
  field4.clear();
  field5 = 0;
  field6 = 0;
  field7 = 0;
  field8 = 0;
  field9 = 0;
  field10 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field11);
  __isset.__clear();
}

bool Struct12::operator==(const Struct12& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  return true;
}

const  ::cpp2::Struct1& Struct12::get_field3() const& {
  return field3;
}

 ::cpp2::Struct1 Struct12::get_field3() && {
  return std::move(field3);
}

const std::set<float>& Struct12::get_field4() const& {
  return field4;
}

std::set<float> Struct12::get_field4() && {
  return std::move(field4);
}

const  ::cpp2::Struct4& Struct12::get_field11() const& {
  return field11;
}

 ::cpp2::Struct4 Struct12::get_field11() && {
  return std::move(field11);
}

void Struct12::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct12& a, Struct12& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct12::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct12::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct12::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct12::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct12::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct12::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct12::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct12::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct13::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field1);
  __isset.__clear();
}

bool Struct13::operator==(const Struct13& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  return true;
}

const  ::cpp2::Struct0& Struct13::get_field1() const& {
  return field1;
}

 ::cpp2::Struct0 Struct13::get_field1() && {
  return std::move(field1);
}

void Struct13::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct13& a, Struct13& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct13::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct13::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct13::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct13::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct13::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct13::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct13::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct13::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct14::__clear() {
  // clear all fields
  field1 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field2.clear();
  field3.clear();
  field4.clear();
  field5 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool Struct14::operator==(const Struct14& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field5, rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  return true;
}

const std::set<int16_t>& Struct14::get_field2() const& {
  return field2;
}

std::set<int16_t> Struct14::get_field2() && {
  return std::move(field2);
}

const std::vector< ::cpp2::Struct8>& Struct14::get_field3() const& {
  return field3;
}

std::vector< ::cpp2::Struct8> Struct14::get_field3() && {
  return std::move(field3);
}

const std::set<int64_t>& Struct14::get_field4() const& {
  return field4;
}

std::set<int64_t> Struct14::get_field4() && {
  return std::move(field4);
}

const  ::cpp2::Struct7& Struct14::get_field6() const& {
  return field6;
}

 ::cpp2::Struct7 Struct14::get_field6() && {
  return std::move(field6);
}

void Struct14::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct14& a, Struct14& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct14::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct14::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct14::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct14::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct14::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct14::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct14::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct14::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct15::__clear() {
  // clear all fields
}

bool Struct15::operator==(const Struct15& /* rhs */) const {
  return true;
}

void Struct15::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
}

void swap(Struct15& a, Struct15& b) {
  using ::std::swap;
  (void)a;
  (void)b;
}

template uint32_t Struct15::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct15::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct15::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct15::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct15::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct15::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct15::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct15::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct16::__clear() {
  // clear all fields
  field1 = 0;
  __isset.__clear();
}

bool Struct16::operator==(const Struct16& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  return true;
}

void Struct16::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
}

void swap(Struct16& a, Struct16& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct16::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct16::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct16::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct16::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct16::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct16::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct16::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct16::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct17::__clear() {
  // clear all fields
  field1.clear();
  field2 = 0;
  field3 = 0;
  __isset.__clear();
}

bool Struct17::operator==(const Struct17& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  return true;
}

const std::map<int8_t, float>& Struct17::get_field1() const& {
  return field1;
}

std::map<int8_t, float> Struct17::get_field1() && {
  return std::move(field1);
}

void Struct17::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_I16;
  }
}

void swap(Struct17& a, Struct17& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct17::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct17::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct17::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct17::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct17::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct17::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct17::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct17::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct18::__clear() {
  // clear all fields
  __isset.__clear();
}

bool Struct18::operator==(const Struct18& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  return true;
}

const  ::cpp2::Struct9& Struct18::get_field1() const& {
  return field1;
}

 ::cpp2::Struct9 Struct18::get_field1() && {
  return std::move(field1);
}

void Struct18::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct18& a, Struct18& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct18::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct18::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct18::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct18::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct18::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct18::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct18::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct18::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct19::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field1);
  __isset.__clear();
}

bool Struct19::operator==(const Struct19& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  return true;
}

const  ::cpp2::Struct3& Struct19::get_field1() const& {
  return field1;
}

 ::cpp2::Struct3 Struct19::get_field1() && {
  return std::move(field1);
}

void Struct19::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct19& a, Struct19& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct19::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct19::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct19::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct19::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct19::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct19::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct19::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct19::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

} // cpp2
