/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "file12_types.h"

#include "file12_types.tcc"

#include <algorithm>

#include <folly/Indestructible.h>

#include "file12_data.h"



namespace example { namespace thrift12 {

void Struct0::__clear() {
  // clear all fields
  field1 = 0;
  field2.clear();
  field3 = 0;
  field4.clear();
  field5.clear();
  field6.clear();
  field7 = 0;
  field8 = 0;
  field9.clear();
  field10.clear();
  field11.clear();
  field12 = 0;
  field13 = 0;
  __isset.__clear();
}

bool Struct0::operator==(const Struct0& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  return true;
}

const std::set<int64_t>& Struct0::get_field2() const& {
  return field2;
}

std::set<int64_t> Struct0::get_field2() && {
  return std::move(field2);
}

const std::vector< ::example::thrift27::Struct3>& Struct0::get_field4() const& {
  return field4;
}

std::vector< ::example::thrift27::Struct3> Struct0::get_field4() && {
  return std::move(field4);
}

const std::map<std::vector<std::string>, int16_t>& Struct0::get_field5() const& {
  return field5;
}

std::map<std::vector<std::string>, int16_t> Struct0::get_field5() && {
  return std::move(field5);
}

const std::map<std::map<std::map<bool, int64_t>, std::string>, bool>& Struct0::get_field6() const& {
  return field6;
}

std::map<std::map<std::map<bool, int64_t>, std::string>, bool> Struct0::get_field6() && {
  return std::move(field6);
}

const std::set<bool>& Struct0::get_field9() const& {
  return field9;
}

std::set<bool> Struct0::get_field9() && {
  return std::move(field9);
}

const std::set< ::example::thrift27::Struct13>& Struct0::get_field10() const& {
  return field10;
}

std::set< ::example::thrift27::Struct13> Struct0::get_field10() && {
  return std::move(field10);
}

const std::vector<std::set<int16_t>>& Struct0::get_field11() const& {
  return field11;
}

std::vector<std::set<int16_t>> Struct0::get_field11() && {
  return std::move(field11);
}

void Struct0::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_I32;
  }
}

void swap(Struct0& a, Struct0& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct0::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct0::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct0::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct0::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct0::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct0::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct0::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct0::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct1::__clear() {
  // clear all fields
  field1 = 0;
  field2.clear();
  field3.clear();
  field4.clear();
  field5 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field6 = 0;
  field7 = 0;
  field8.clear();
  field9.clear();
  field10 = 0;
  field11 = 0;
  field12 = 0;
  field13.clear();
  field14.clear();
  field15.clear();
  field16.clear();
  field17 = 0;
  field18.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct0>::clear(&field19);
  field20.clear();
  field21 = 0;
  field22.clear();
  field23 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field24.clear();
  field25.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct0>::clear(&field26);
  field27.clear();
  field28.clear();
  field29.clear();
  __isset.__clear();
}

bool Struct1::operator==(const Struct1& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field5, rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field23, rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  return true;
}

const std::vector<std::vector<int32_t>>& Struct1::get_field2() const& {
  return field2;
}

std::vector<std::vector<int32_t>> Struct1::get_field2() && {
  return std::move(field2);
}

const std::vector<std::string>& Struct1::get_field3() const& {
  return field3;
}

std::vector<std::string> Struct1::get_field3() && {
  return std::move(field3);
}

const std::vector<double>& Struct1::get_field4() const& {
  return field4;
}

std::vector<double> Struct1::get_field4() && {
  return std::move(field4);
}

const std::set<int64_t>& Struct1::get_field8() const& {
  return field8;
}

std::set<int64_t> Struct1::get_field8() && {
  return std::move(field8);
}

const std::set<std::vector<std::string>>& Struct1::get_field9() const& {
  return field9;
}

std::set<std::vector<std::string>> Struct1::get_field9() && {
  return std::move(field9);
}

const std::vector< ::example::thrift27::Struct8>& Struct1::get_field13() const& {
  return field13;
}

std::vector< ::example::thrift27::Struct8> Struct1::get_field13() && {
  return std::move(field13);
}

const std::set< ::example::thrift27::Struct6>& Struct1::get_field14() const& {
  return field14;
}

std::set< ::example::thrift27::Struct6> Struct1::get_field14() && {
  return std::move(field14);
}

const std::vector<std::string>& Struct1::get_field15() const& {
  return field15;
}

std::vector<std::string> Struct1::get_field15() && {
  return std::move(field15);
}

const std::map<std::set<int16_t>, double>& Struct1::get_field16() const& {
  return field16;
}

std::map<std::set<int16_t>, double> Struct1::get_field16() && {
  return std::move(field16);
}

const std::map<int64_t, std::string>& Struct1::get_field18() const& {
  return field18;
}

std::map<int64_t, std::string> Struct1::get_field18() && {
  return std::move(field18);
}

const  ::example::thrift12::Struct0& Struct1::get_field19() const& {
  return field19;
}

 ::example::thrift12::Struct0 Struct1::get_field19() && {
  return std::move(field19);
}

const std::map< ::example::thrift12::Struct0, std::map<std::string, std::set< ::example::thrift29::Struct7>>>& Struct1::get_field20() const& {
  return field20;
}

std::map< ::example::thrift12::Struct0, std::map<std::string, std::set< ::example::thrift29::Struct7>>> Struct1::get_field20() && {
  return std::move(field20);
}

const std::set<double>& Struct1::get_field22() const& {
  return field22;
}

std::set<double> Struct1::get_field22() && {
  return std::move(field22);
}

const std::map<std::map<int16_t, std::string>, int16_t>& Struct1::get_field24() const& {
  return field24;
}

std::map<std::map<int16_t, std::string>, int16_t> Struct1::get_field24() && {
  return std::move(field24);
}

const std::vector<bool>& Struct1::get_field25() const& {
  return field25;
}

std::vector<bool> Struct1::get_field25() && {
  return std::move(field25);
}

const  ::example::thrift12::Struct0& Struct1::get_field26() const& {
  return field26;
}

 ::example::thrift12::Struct0 Struct1::get_field26() && {
  return std::move(field26);
}

const std::map<int8_t, int16_t>& Struct1::get_field27() const& {
  return field27;
}

std::map<int8_t, int16_t> Struct1::get_field27() && {
  return std::move(field27);
}

const std::map<bool, int64_t>& Struct1::get_field28() const& {
  return field28;
}

std::map<bool, int64_t> Struct1::get_field28() && {
  return std::move(field28);
}

const std::set<double>& Struct1::get_field29() const& {
  return field29;
}

std::set<double> Struct1::get_field29() && {
  return std::move(field29);
}

void Struct1::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_SET;
  }
}

void swap(Struct1& a, Struct1& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct1::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct1::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct1::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct1::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct1::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct1::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct1::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct1::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct2::__clear() {
  // clear all fields
  field1 = 0;
  field2.clear();
  field3.clear();
  field4.clear();
  field5.clear();
  field6.clear();
  field7 = 0;
  field8 = 0;
  field9.clear();
  field10 = 0;
  field11 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct2>::clear(&field12);
  field13.clear();
  field14.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct12>::clear(&field15);
  field16 = 0;
  field17.clear();
  field18.clear();
  field19 = 0;
  field20 = 0;
  field21 = 0;
  field22 = 0;
  field23 = 0;
  field24 = 0;
  field25 = 0;
  field26 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field27 = 0;
  field28 = 0;
  field29 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct7>::clear(&field30);
  field31.clear();
  field32 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift29::Struct6>::clear(&field33);
  field34 = 0;
  field35.clear();
  field36.clear();
  field37 = 0;
  field38.clear();
  field39.clear();
  field40 = 0;
  field41 = 0;
  __isset.__clear();
}

bool Struct2::operator==(const Struct2& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field11, rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field26, rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  return true;
}

const std::vector<std::set<bool>>& Struct2::get_field2() const& {
  return field2;
}

std::vector<std::set<bool>> Struct2::get_field2() && {
  return std::move(field2);
}

const std::set<double>& Struct2::get_field3() const& {
  return field3;
}

std::set<double> Struct2::get_field3() && {
  return std::move(field3);
}

const std::vector<int32_t>& Struct2::get_field4() const& {
  return field4;
}

std::vector<int32_t> Struct2::get_field4() && {
  return std::move(field4);
}

const std::vector< ::example::thrift29::Struct15>& Struct2::get_field5() const& {
  return field5;
}

std::vector< ::example::thrift29::Struct15> Struct2::get_field5() && {
  return std::move(field5);
}

const std::set<float>& Struct2::get_field6() const& {
  return field6;
}

std::set<float> Struct2::get_field6() && {
  return std::move(field6);
}

const std::map<int16_t,  ::example::thrift29::Struct7>& Struct2::get_field9() const& {
  return field9;
}

std::map<int16_t,  ::example::thrift29::Struct7> Struct2::get_field9() && {
  return std::move(field9);
}

const  ::example::thrift27::Struct2& Struct2::get_field12() const& {
  return field12;
}

 ::example::thrift27::Struct2 Struct2::get_field12() && {
  return std::move(field12);
}

const std::vector<std::string>& Struct2::get_field13() const& {
  return field13;
}

std::vector<std::string> Struct2::get_field13() && {
  return std::move(field13);
}

const std::set<double>& Struct2::get_field14() const& {
  return field14;
}

std::set<double> Struct2::get_field14() && {
  return std::move(field14);
}

const  ::example::thrift27::Struct12& Struct2::get_field15() const& {
  return field15;
}

 ::example::thrift27::Struct12 Struct2::get_field15() && {
  return std::move(field15);
}

const std::map<int8_t, int8_t>& Struct2::get_field17() const& {
  return field17;
}

std::map<int8_t, int8_t> Struct2::get_field17() && {
  return std::move(field17);
}

const std::vector<int64_t>& Struct2::get_field18() const& {
  return field18;
}

std::vector<int64_t> Struct2::get_field18() && {
  return std::move(field18);
}

const  ::example::thrift27::Struct7& Struct2::get_field30() const& {
  return field30;
}

 ::example::thrift27::Struct7 Struct2::get_field30() && {
  return std::move(field30);
}

const std::map<std::string, std::string>& Struct2::get_field31() const& {
  return field31;
}

std::map<std::string, std::string> Struct2::get_field31() && {
  return std::move(field31);
}

const  ::example::thrift29::Struct6& Struct2::get_field33() const& {
  return field33;
}

 ::example::thrift29::Struct6 Struct2::get_field33() && {
  return std::move(field33);
}

const std::vector<int16_t>& Struct2::get_field35() const& {
  return field35;
}

std::vector<int16_t> Struct2::get_field35() && {
  return std::move(field35);
}

const std::vector< ::example::thrift12::Struct0>& Struct2::get_field36() const& {
  return field36;
}

std::vector< ::example::thrift12::Struct0> Struct2::get_field36() && {
  return std::move(field36);
}

const std::vector<int32_t>& Struct2::get_field38() const& {
  return field38;
}

std::vector<int32_t> Struct2::get_field38() && {
  return std::move(field38);
}

const std::set<double>& Struct2::get_field39() const& {
  return field39;
}

std::set<double> Struct2::get_field39() && {
  return std::move(field39);
}

void Struct2::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
}

void swap(Struct2& a, Struct2& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct2::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct2::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct2::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct2::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct2::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct2::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct2::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct2::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct3::__clear() {
  // clear all fields
  field1 = 0;
  field2 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct0>::clear(&field3);
  field4.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct0>::clear(&field5);
  field6 = 0;
  __isset.__clear();
}

bool Struct3::operator==(const Struct3& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  return true;
}

const  ::example::thrift12::Struct0& Struct3::get_field3() const& {
  return field3;
}

 ::example::thrift12::Struct0 Struct3::get_field3() && {
  return std::move(field3);
}

const std::map<double, std::string>& Struct3::get_field4() const& {
  return field4;
}

std::map<double, std::string> Struct3::get_field4() && {
  return std::move(field4);
}

const  ::example::thrift12::Struct0& Struct3::get_field5() const& {
  return field5;
}

 ::example::thrift12::Struct0 Struct3::get_field5() && {
  return std::move(field5);
}

void Struct3::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I64;
  }
}

void swap(Struct3& a, Struct3& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct3::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct3::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct3::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct3::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct3::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct3::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct3::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct3::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct4::__clear() {
  // clear all fields
  field1.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct4>::clear(&field2);
  field3.clear();
  field4 = 0;
  field5 = 0;
  field6.clear();
  field7 = 0;
  field8.clear();
  field9.clear();
  field10 = 0;
  field11 = 0;
  field12 = 0;
  field13 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field14.clear();
  field15.clear();
  field16.clear();
  field17 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field18 = 0;
  field19 = 0;
  field20 = 0;
  field21.clear();
  field22 = 0;
  field23 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field24 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field25.clear();
  __isset.__clear();
}

bool Struct4::operator==(const Struct4& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field24, rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  return true;
}

const std::set<std::string>& Struct4::get_field1() const& {
  return field1;
}

std::set<std::string> Struct4::get_field1() && {
  return std::move(field1);
}

const  ::example::thrift27::Struct4& Struct4::get_field2() const& {
  return field2;
}

 ::example::thrift27::Struct4 Struct4::get_field2() && {
  return std::move(field2);
}

const std::map<bool, std::string>& Struct4::get_field3() const& {
  return field3;
}

std::map<bool, std::string> Struct4::get_field3() && {
  return std::move(field3);
}

const std::vector< ::example::thrift29::Struct5>& Struct4::get_field6() const& {
  return field6;
}

std::vector< ::example::thrift29::Struct5> Struct4::get_field6() && {
  return std::move(field6);
}

const std::set<int64_t>& Struct4::get_field8() const& {
  return field8;
}

std::set<int64_t> Struct4::get_field8() && {
  return std::move(field8);
}

const std::vector<std::string>& Struct4::get_field9() const& {
  return field9;
}

std::vector<std::string> Struct4::get_field9() && {
  return std::move(field9);
}

const std::vector<float>& Struct4::get_field14() const& {
  return field14;
}

std::vector<float> Struct4::get_field14() && {
  return std::move(field14);
}

const std::vector<double>& Struct4::get_field15() const& {
  return field15;
}

std::vector<double> Struct4::get_field15() && {
  return std::move(field15);
}

const std::vector<int16_t>& Struct4::get_field16() const& {
  return field16;
}

std::vector<int16_t> Struct4::get_field16() && {
  return std::move(field16);
}

const std::set<float>& Struct4::get_field21() const& {
  return field21;
}

std::set<float> Struct4::get_field21() && {
  return std::move(field21);
}

const std::map<int64_t, bool>& Struct4::get_field25() const& {
  return field25;
}

std::map<int64_t, bool> Struct4::get_field25() && {
  return std::move(field25);
}

void Struct4::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_MAP;
  }
}

void swap(Struct4& a, Struct4& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct4::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct4::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct4::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct4::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct4::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct4::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct4::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct4::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct5::__clear() {
  // clear all fields
  field1 = 0;
  field2.clear();
  __isset.__clear();
}

bool Struct5::operator==(const Struct5& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  return true;
}

const std::map< ::example::thrift27::Struct0, std::string>& Struct5::get_field2() const& {
  return field2;
}

std::map< ::example::thrift27::Struct0, std::string> Struct5::get_field2() && {
  return std::move(field2);
}

void Struct5::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_MAP;
  }
}

void swap(Struct5& a, Struct5& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct5::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct5::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct5::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct5::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct5::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct5::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct5::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct5::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct6::__clear() {
  // clear all fields
}

bool Struct6::operator==(const Struct6& /* rhs */) const {
  return true;
}

void Struct6::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
}

void swap(Struct6& a, Struct6& b) {
  using ::std::swap;
  (void)a;
  (void)b;
}

template uint32_t Struct6::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct6::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct6::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct6::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct6::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct6::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct6::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct6::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct7::__clear() {
  // clear all fields
  field1.clear();
  __isset.__clear();
}

bool Struct7::operator==(const Struct7& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  return true;
}

const std::set<int8_t>& Struct7::get_field1() const& {
  return field1;
}

std::set<int8_t> Struct7::get_field1() && {
  return std::move(field1);
}

void Struct7::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_SET;
  }
}

void swap(Struct7& a, Struct7& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct7::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct7::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct7::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct7::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct7::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct7::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct7::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct7::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct8::__clear() {
  // clear all fields
}

bool Struct8::operator==(const Struct8& /* rhs */) const {
  return true;
}

void Struct8::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
}

void swap(Struct8& a, Struct8& b) {
  using ::std::swap;
  (void)a;
  (void)b;
}

template uint32_t Struct8::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct8::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct8::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct8::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct8::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct8::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct8::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct8::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct9::__clear() {
  // clear all fields
  field1.clear();
  field2.clear();
  field3 = 0;
  field4.clear();
  field5 = 0;
  field6 = 0;
  field7 = 0;
  field8.clear();
  field9.clear();
  field10 = 0;
  field11 = 0;
  __isset.__clear();
}

bool Struct9::operator==(const Struct9& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  return true;
}

const std::set<std::vector<int32_t>>& Struct9::get_field1() const& {
  return field1;
}

std::set<std::vector<int32_t>> Struct9::get_field1() && {
  return std::move(field1);
}

const std::vector<int8_t>& Struct9::get_field2() const& {
  return field2;
}

std::vector<int8_t> Struct9::get_field2() && {
  return std::move(field2);
}

const std::set<int32_t>& Struct9::get_field4() const& {
  return field4;
}

std::set<int32_t> Struct9::get_field4() && {
  return std::move(field4);
}

const std::map<int32_t, std::vector<std::string>>& Struct9::get_field8() const& {
  return field8;
}

std::map<int32_t, std::vector<std::string>> Struct9::get_field8() && {
  return std::move(field8);
}

const std::set<int16_t>& Struct9::get_field9() const& {
  return field9;
}

std::set<int16_t> Struct9::get_field9() && {
  return std::move(field9);
}

void Struct9::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
}

void swap(Struct9& a, Struct9& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct9::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct9::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct9::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct9::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct9::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct9::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct9::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct9::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct10::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct0>::clear(&field1);
  field2.clear();
  __isset.__clear();
}

bool Struct10::operator==(const Struct10& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  return true;
}

const  ::example::thrift12::Struct0& Struct10::get_field1() const& {
  return field1;
}

 ::example::thrift12::Struct0 Struct10::get_field1() && {
  return std::move(field1);
}

const std::set<int32_t>& Struct10::get_field2() const& {
  return field2;
}

std::set<int32_t> Struct10::get_field2() && {
  return std::move(field2);
}

void Struct10::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_SET;
  }
}

void swap(Struct10& a, Struct10& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct10::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct10::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct10::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct10::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct10::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct10::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct10::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct10::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct11::__clear() {
  // clear all fields
  field1.clear();
  field2 = 0;
  field3.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct0>::clear(&field4);
  __isset.__clear();
}

bool Struct11::operator==(const Struct11& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  return true;
}

const std::map<int8_t, bool>& Struct11::get_field1() const& {
  return field1;
}

std::map<int8_t, bool> Struct11::get_field1() && {
  return std::move(field1);
}

const std::set<double>& Struct11::get_field3() const& {
  return field3;
}

std::set<double> Struct11::get_field3() && {
  return std::move(field3);
}

const  ::example::thrift12::Struct0& Struct11::get_field4() const& {
  return field4;
}

 ::example::thrift12::Struct0 Struct11::get_field4() && {
  return std::move(field4);
}

void Struct11::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct11& a, Struct11& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct11::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct11::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct11::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct11::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct11::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct11::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct11::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct11::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct12::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct4>::clear(&field1);
  field2 = 0;
  field3 = 0;
  field4 = 0;
  field5.clear();
  field6.clear();
  field7.clear();
  __isset.__clear();
}

bool Struct12::operator==(const Struct12& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  return true;
}

const  ::example::thrift12::Struct4& Struct12::get_field1() const& {
  return field1;
}

 ::example::thrift12::Struct4 Struct12::get_field1() && {
  return std::move(field1);
}

const std::vector<int32_t>& Struct12::get_field5() const& {
  return field5;
}

std::vector<int32_t> Struct12::get_field5() && {
  return std::move(field5);
}

const std::set<std::string>& Struct12::get_field6() const& {
  return field6;
}

std::set<std::string> Struct12::get_field6() && {
  return std::move(field6);
}

const std::vector<std::string>& Struct12::get_field7() const& {
  return field7;
}

std::vector<std::string> Struct12::get_field7() && {
  return std::move(field7);
}

void Struct12::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_LIST;
  }
}

void swap(Struct12& a, Struct12& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct12::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct12::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct12::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct12::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct12::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct12::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct12::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct12::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct13::__clear() {
  // clear all fields
  field1.clear();
  __isset.__clear();
}

bool Struct13::operator==(const Struct13& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  return true;
}

const std::vector<std::string>& Struct13::get_field1() const& {
  return field1;
}

std::vector<std::string> Struct13::get_field1() && {
  return std::move(field1);
}

void Struct13::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_LIST;
  }
}

void swap(Struct13& a, Struct13& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct13::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct13::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct13::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct13::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct13::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct13::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct13::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct13::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct14::__clear() {
  // clear all fields
  field1.clear();
  field2.clear();
  field3 = 0;
  field4 = 0;
  field5 = 0;
  field6.clear();
  field7 = 0;
  field8.clear();
  field9.clear();
  field10 = 0;
  field11 = 0;
  field12 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct5>::clear(&field13);
  field14.clear();
  field15 = 0;
  __isset.__clear();
}

bool Struct14::operator==(const Struct14& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  return true;
}

const std::vector<int64_t>& Struct14::get_field1() const& {
  return field1;
}

std::vector<int64_t> Struct14::get_field1() && {
  return std::move(field1);
}

const std::set<bool>& Struct14::get_field2() const& {
  return field2;
}

std::set<bool> Struct14::get_field2() && {
  return std::move(field2);
}

const std::set<int16_t>& Struct14::get_field6() const& {
  return field6;
}

std::set<int16_t> Struct14::get_field6() && {
  return std::move(field6);
}

const std::vector<int32_t>& Struct14::get_field8() const& {
  return field8;
}

std::vector<int32_t> Struct14::get_field8() && {
  return std::move(field8);
}

const std::vector<std::string>& Struct14::get_field9() const& {
  return field9;
}

std::vector<std::string> Struct14::get_field9() && {
  return std::move(field9);
}

const  ::example::thrift27::Struct5& Struct14::get_field13() const& {
  return field13;
}

 ::example::thrift27::Struct5 Struct14::get_field13() && {
  return std::move(field13);
}

const std::set<int16_t>& Struct14::get_field14() const& {
  return field14;
}

std::set<int16_t> Struct14::get_field14() && {
  return std::move(field14);
}

void Struct14::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
}

void swap(Struct14& a, Struct14& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct14::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct14::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct14::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct14::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct14::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct14::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct14::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct14::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct15::__clear() {
  // clear all fields
}

bool Struct15::operator==(const Struct15& /* rhs */) const {
  return true;
}

void Struct15::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
}

void swap(Struct15& a, Struct15& b) {
  using ::std::swap;
  (void)a;
  (void)b;
}

template uint32_t Struct15::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct15::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct15::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct15::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct15::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct15::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct15::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct15::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct16::__clear() {
  // clear all fields
  field1 = 0;
  field2 = 0;
  field3 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field4.clear();
  field5 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool Struct16::operator==(const Struct16& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  return true;
}

const std::map<double, int8_t>& Struct16::get_field4() const& {
  return field4;
}

std::map<double, int8_t> Struct16::get_field4() && {
  return std::move(field4);
}

void Struct16::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

void swap(Struct16& a, Struct16& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct16::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct16::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct16::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct16::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct16::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct16::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct16::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct16::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct17::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct0>::clear(&field1);
  field2.clear();
  field3 = 0;
  field4.clear();
  field5.clear();
  field6.clear();
  field7 = 0;
  __isset.__clear();
}

bool Struct17::operator==(const Struct17& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  return true;
}

const  ::example::thrift12::Struct0& Struct17::get_field1() const& {
  return field1;
}

 ::example::thrift12::Struct0 Struct17::get_field1() && {
  return std::move(field1);
}

const std::set<int8_t>& Struct17::get_field2() const& {
  return field2;
}

std::set<int8_t> Struct17::get_field2() && {
  return std::move(field2);
}

const std::set<int8_t>& Struct17::get_field4() const& {
  return field4;
}

std::set<int8_t> Struct17::get_field4() && {
  return std::move(field4);
}

const std::set<float>& Struct17::get_field5() const& {
  return field5;
}

std::set<float> Struct17::get_field5() && {
  return std::move(field5);
}

const std::set<int64_t>& Struct17::get_field6() const& {
  return field6;
}

std::set<int64_t> Struct17::get_field6() && {
  return std::move(field6);
}

void Struct17::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
}

void swap(Struct17& a, Struct17& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct17::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct17::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct17::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct17::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct17::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct17::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct17::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct17::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct18::__clear() {
  // clear all fields
  field1.clear();
  field2.clear();
  field3 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field4.clear();
  field5 = 0;
  field6.clear();
  field7 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct8>::clear(&field8);
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct2>::clear(&field9);
  field10 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field11.clear();
  field12.clear();
  __isset.__clear();
}

bool Struct18::operator==(const Struct18& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field10, rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  return true;
}

const std::set<std::vector<bool>>& Struct18::get_field1() const& {
  return field1;
}

std::set<std::vector<bool>> Struct18::get_field1() && {
  return std::move(field1);
}

const std::set<int64_t>& Struct18::get_field2() const& {
  return field2;
}

std::set<int64_t> Struct18::get_field2() && {
  return std::move(field2);
}

const std::map< ::example::thrift12::Struct0, std::string>& Struct18::get_field4() const& {
  return field4;
}

std::map< ::example::thrift12::Struct0, std::string> Struct18::get_field4() && {
  return std::move(field4);
}

const std::map<int8_t, int16_t>& Struct18::get_field6() const& {
  return field6;
}

std::map<int8_t, int16_t> Struct18::get_field6() && {
  return std::move(field6);
}

const  ::example::thrift27::Struct8& Struct18::get_field8() const& {
  return field8;
}

 ::example::thrift27::Struct8 Struct18::get_field8() && {
  return std::move(field8);
}

const  ::example::thrift12::Struct2& Struct18::get_field9() const& {
  return field9;
}

 ::example::thrift12::Struct2 Struct18::get_field9() && {
  return std::move(field9);
}

const std::vector<double>& Struct18::get_field11() const& {
  return field11;
}

std::vector<double> Struct18::get_field11() && {
  return std::move(field11);
}

const std::vector< ::example::thrift12::Struct1>& Struct18::get_field12() const& {
  return field12;
}

std::vector< ::example::thrift12::Struct1> Struct18::get_field12() && {
  return std::move(field12);
}

void Struct18::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_LIST;
  }
}

void swap(Struct18& a, Struct18& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct18::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct18::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct18::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct18::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct18::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct18::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct18::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct18::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct19::__clear() {
  // clear all fields
  field1.clear();
  field2 = 0;
  field3.clear();
  field4.clear();
  __isset.__clear();
}

bool Struct19::operator==(const Struct19& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  return true;
}

const std::map<std::string, std::string>& Struct19::get_field1() const& {
  return field1;
}

std::map<std::string, std::string> Struct19::get_field1() && {
  return std::move(field1);
}

const std::map<std::set<double>, double>& Struct19::get_field3() const& {
  return field3;
}

std::map<std::set<double>, double> Struct19::get_field3() && {
  return std::move(field3);
}

const std::map<std::string, int64_t>& Struct19::get_field4() const& {
  return field4;
}

std::map<std::string, int64_t> Struct19::get_field4() && {
  return std::move(field4);
}

void Struct19::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_MAP;
  }
}

void swap(Struct19& a, Struct19& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct19::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct19::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct19::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct19::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct19::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct19::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct19::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct19::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct20::__clear() {
  // clear all fields
  field1.clear();
  field2 = 0;
  __isset.__clear();
}

bool Struct20::operator==(const Struct20& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  return true;
}

const std::map<int64_t, std::map<double, int16_t>>& Struct20::get_field1() const& {
  return field1;
}

std::map<int64_t, std::map<double, int16_t>> Struct20::get_field1() && {
  return std::move(field1);
}

void Struct20::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I16;
  }
}

void swap(Struct20& a, Struct20& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct20::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct20::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct20::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct20::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct20::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct20::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct20::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct20::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct21::__clear() {
  // clear all fields
  field1 = 0;
  field2 = 0;
  field3.clear();
  field4 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct0>::clear(&field5);
  field6 = 0;
  __isset.__clear();
}

bool Struct21::operator==(const Struct21& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  return true;
}

const std::map<float, int32_t>& Struct21::get_field3() const& {
  return field3;
}

std::map<float, int32_t> Struct21::get_field3() && {
  return std::move(field3);
}

const  ::example::thrift12::Struct0& Struct21::get_field5() const& {
  return field5;
}

 ::example::thrift12::Struct0 Struct21::get_field5() && {
  return std::move(field5);
}

void Struct21::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I32;
  }
}

void swap(Struct21& a, Struct21& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct21::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct21::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct21::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct21::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct21::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct21::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct21::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct21::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct22::__clear() {
  // clear all fields
  field1.clear();
  field2 = 0;
  field3.clear();
  field4 = 0;
  field5 = 0;
  field6.clear();
  field7 = 0;
  field8.clear();
  field9 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field10 = 0;
  field11 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct0>::clear(&field12);
  __isset.__clear();
}

bool Struct22::operator==(const Struct22& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  return true;
}

const std::vector<int64_t>& Struct22::get_field1() const& {
  return field1;
}

std::vector<int64_t> Struct22::get_field1() && {
  return std::move(field1);
}

const std::map<float, float>& Struct22::get_field3() const& {
  return field3;
}

std::map<float, float> Struct22::get_field3() && {
  return std::move(field3);
}

const std::vector<std::map<double, int8_t>>& Struct22::get_field6() const& {
  return field6;
}

std::vector<std::map<double, int8_t>> Struct22::get_field6() && {
  return std::move(field6);
}

const std::vector<std::string>& Struct22::get_field8() const& {
  return field8;
}

std::vector<std::string> Struct22::get_field8() && {
  return std::move(field8);
}

const  ::example::thrift12::Struct0& Struct22::get_field12() const& {
  return field12;
}

 ::example::thrift12::Struct0 Struct22::get_field12() && {
  return std::move(field12);
}

void Struct22::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct22& a, Struct22& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct22::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct22::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct22::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct22::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct22::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct22::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct22::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct22::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct23::__clear() {
  // clear all fields
  field1 = 0;
  field2 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field3 = 0;
  field4 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct10>::clear(&field5);
  field6 = 0;
  field7 = 0;
  field8 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field9 = 0;
  field10 = 0;
  field11 = 0;
  field12 = 0;
  field14 = 0;
  __isset.__clear();
}

bool Struct23::operator==(const Struct23& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field8, rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  return true;
}

const  ::example::thrift12::Struct10& Struct23::get_field5() const& {
  return field5;
}

 ::example::thrift12::Struct10 Struct23::get_field5() && {
  return std::move(field5);
}

const  ::example::thrift12::Struct15& Struct23::get_field13() const& {
  return field13;
}

 ::example::thrift12::Struct15 Struct23::get_field13() && {
  return std::move(field13);
}

void Struct23::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_I32;
  }
}

void swap(Struct23& a, Struct23& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct23::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct23::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct23::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct23::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct23::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct23::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct23::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct23::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct24::__clear() {
  // clear all fields
  field1.clear();
  field2 = 0;
  field3.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct19>::clear(&field4);
  __isset.__clear();
}

bool Struct24::operator==(const Struct24& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  return true;
}

const std::map<double, std::string>& Struct24::get_field1() const& {
  return field1;
}

std::map<double, std::string> Struct24::get_field1() && {
  return std::move(field1);
}

const std::vector<std::vector<int16_t>>& Struct24::get_field3() const& {
  return field3;
}

std::vector<std::vector<int16_t>> Struct24::get_field3() && {
  return std::move(field3);
}

const  ::example::thrift12::Struct19& Struct24::get_field4() const& {
  return field4;
}

 ::example::thrift12::Struct19 Struct24::get_field4() && {
  return std::move(field4);
}

void Struct24::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct24& a, Struct24& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct24::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct24::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct24::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct24::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct24::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct24::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct24::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct24::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct25::__clear() {
  // clear all fields
  field1 = 0;
  field2 = 0;
  field3.clear();
  field4 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field5 = 0;
  field6.clear();
  field7.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct21>::clear(&field8);
  field9 = 0;
  field10 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field11.clear();
  field12 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field13.clear();
  field14.clear();
  field16 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct0>::clear(&field17);
  field18.clear();
  field19 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field20.clear();
  __isset.__clear();
}

bool Struct25::operator==(const Struct25& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field4, rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  return true;
}

const std::vector<std::string>& Struct25::get_field3() const& {
  return field3;
}

std::vector<std::string> Struct25::get_field3() && {
  return std::move(field3);
}

const std::set<std::vector<int8_t>>& Struct25::get_field6() const& {
  return field6;
}

std::set<std::vector<int8_t>> Struct25::get_field6() && {
  return std::move(field6);
}

const std::set<bool>& Struct25::get_field7() const& {
  return field7;
}

std::set<bool> Struct25::get_field7() && {
  return std::move(field7);
}

const  ::example::thrift12::Struct21& Struct25::get_field8() const& {
  return field8;
}

 ::example::thrift12::Struct21 Struct25::get_field8() && {
  return std::move(field8);
}

const std::set< ::example::thrift12::Struct5>& Struct25::get_field11() const& {
  return field11;
}

std::set< ::example::thrift12::Struct5> Struct25::get_field11() && {
  return std::move(field11);
}

const std::vector<int32_t>& Struct25::get_field13() const& {
  return field13;
}

std::vector<int32_t> Struct25::get_field13() && {
  return std::move(field13);
}

const std::vector<int8_t>& Struct25::get_field14() const& {
  return field14;
}

std::vector<int8_t> Struct25::get_field14() && {
  return std::move(field14);
}

const  ::example::thrift12::Struct8& Struct25::get_field15() const& {
  return field15;
}

 ::example::thrift12::Struct8 Struct25::get_field15() && {
  return std::move(field15);
}

const  ::example::thrift12::Struct0& Struct25::get_field17() const& {
  return field17;
}

 ::example::thrift12::Struct0 Struct25::get_field17() && {
  return std::move(field17);
}

const std::vector<bool>& Struct25::get_field18() const& {
  return field18;
}

std::vector<bool> Struct25::get_field18() && {
  return std::move(field18);
}

const std::vector<std::vector<std::string>>& Struct25::get_field20() const& {
  return field20;
}

std::vector<std::vector<std::string>> Struct25::get_field20() && {
  return std::move(field20);
}

void Struct25::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_LIST;
  }
}

void swap(Struct25& a, Struct25& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct25::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct25::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct25::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct25::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct25::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct25::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct25::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct25::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct26::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct9>::clear(&field1);
  field2 = 0;
  field3 = 0;
  field4 = 0;
  field5.clear();
  field6 = 0;
  field7 = 0;
  field8.clear();
  field9 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field10 = 0;
  field11 = 0;
  field12.clear();
  field13 = 0;
  field14 = 0;
  field15 = 0;
  field16 = 0;
  __isset.__clear();
}

bool Struct26::operator==(const Struct26& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field9, rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  return true;
}

const  ::example::thrift12::Struct9& Struct26::get_field1() const& {
  return field1;
}

 ::example::thrift12::Struct9 Struct26::get_field1() && {
  return std::move(field1);
}

const std::map<int16_t, std::vector<std::string>>& Struct26::get_field5() const& {
  return field5;
}

std::map<int16_t, std::vector<std::string>> Struct26::get_field5() && {
  return std::move(field5);
}

const std::set<float>& Struct26::get_field8() const& {
  return field8;
}

std::set<float> Struct26::get_field8() && {
  return std::move(field8);
}

const std::map<int16_t, std::vector< ::example::thrift12::Struct20>>& Struct26::get_field12() const& {
  return field12;
}

std::map<int16_t, std::vector< ::example::thrift12::Struct20>> Struct26::get_field12() && {
  return std::move(field12);
}

void Struct26::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
}

void swap(Struct26& a, Struct26& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct26::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct26::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct26::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct26::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct26::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct26::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct26::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct26::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct27::__clear() {
  // clear all fields
  field1 = 0;
  field2.clear();
  field3.clear();
  field4.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct12>::clear(&field5);
  field6.clear();
  field7.clear();
  field8 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field9.clear();
  field11.clear();
  field12 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct1>::clear(&field13);
  field14.clear();
  field15 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct26>::clear(&field16);
  field17.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct4>::clear(&field18);
  field19.clear();
  field20 = 0;
  __isset.__clear();
}

bool Struct27::operator==(const Struct27& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  return true;
}

const std::vector<std::string>& Struct27::get_field2() const& {
  return field2;
}

std::vector<std::string> Struct27::get_field2() && {
  return std::move(field2);
}

const std::set<int8_t>& Struct27::get_field3() const& {
  return field3;
}

std::set<int8_t> Struct27::get_field3() && {
  return std::move(field3);
}

const std::vector<std::string>& Struct27::get_field4() const& {
  return field4;
}

std::vector<std::string> Struct27::get_field4() && {
  return std::move(field4);
}

const  ::example::thrift12::Struct12& Struct27::get_field5() const& {
  return field5;
}

 ::example::thrift12::Struct12 Struct27::get_field5() && {
  return std::move(field5);
}

const std::map<double, int64_t>& Struct27::get_field6() const& {
  return field6;
}

std::map<double, int64_t> Struct27::get_field6() && {
  return std::move(field6);
}

const std::set<std::vector<int16_t>>& Struct27::get_field7() const& {
  return field7;
}

std::set<std::vector<int16_t>> Struct27::get_field7() && {
  return std::move(field7);
}

const std::set<int32_t>& Struct27::get_field9() const& {
  return field9;
}

std::set<int32_t> Struct27::get_field9() && {
  return std::move(field9);
}

const  ::example::thrift12::Struct6& Struct27::get_field10() const& {
  return field10;
}

 ::example::thrift12::Struct6 Struct27::get_field10() && {
  return std::move(field10);
}

const std::set<int8_t>& Struct27::get_field11() const& {
  return field11;
}

std::set<int8_t> Struct27::get_field11() && {
  return std::move(field11);
}

const  ::example::thrift12::Struct1& Struct27::get_field13() const& {
  return field13;
}

 ::example::thrift12::Struct1 Struct27::get_field13() && {
  return std::move(field13);
}

const std::vector<bool>& Struct27::get_field14() const& {
  return field14;
}

std::vector<bool> Struct27::get_field14() && {
  return std::move(field14);
}

const  ::example::thrift12::Struct26& Struct27::get_field16() const& {
  return field16;
}

 ::example::thrift12::Struct26 Struct27::get_field16() && {
  return std::move(field16);
}

const std::map<std::set<bool>, int32_t>& Struct27::get_field17() const& {
  return field17;
}

std::map<std::set<bool>, int32_t> Struct27::get_field17() && {
  return std::move(field17);
}

const  ::example::thrift12::Struct4& Struct27::get_field18() const& {
  return field18;
}

 ::example::thrift12::Struct4 Struct27::get_field18() && {
  return std::move(field18);
}

const std::set<int64_t>& Struct27::get_field19() const& {
  return field19;
}

std::set<int64_t> Struct27::get_field19() && {
  return std::move(field19);
}

void Struct27::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
}

void swap(Struct27& a, Struct27& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct27::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct27::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct27::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct27::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct27::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct27::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct27::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct27::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct28::__clear() {
  // clear all fields
  field1 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct24>::clear(&field2);
  __isset.__clear();
}

bool Struct28::operator==(const Struct28& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  return true;
}

const  ::example::thrift12::Struct24& Struct28::get_field2() const& {
  return field2;
}

 ::example::thrift12::Struct24 Struct28::get_field2() && {
  return std::move(field2);
}

void Struct28::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct28& a, Struct28& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct28::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct28::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct28::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct28::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct28::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct28::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct28::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct28::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct29::__clear() {
  // clear all fields
  field1.clear();
  field2.clear();
  field3.clear();
  field4 = 0;
  field5.clear();
  __isset.__clear();
}

bool Struct29::operator==(const Struct29& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  return true;
}

const std::vector<int32_t>& Struct29::get_field1() const& {
  return field1;
}

std::vector<int32_t> Struct29::get_field1() && {
  return std::move(field1);
}

const std::vector<float>& Struct29::get_field2() const& {
  return field2;
}

std::vector<float> Struct29::get_field2() && {
  return std::move(field2);
}

const std::set<int64_t>& Struct29::get_field3() const& {
  return field3;
}

std::set<int64_t> Struct29::get_field3() && {
  return std::move(field3);
}

const std::vector<bool>& Struct29::get_field5() const& {
  return field5;
}

std::vector<bool> Struct29::get_field5() && {
  return std::move(field5);
}

void Struct29::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_LIST;
  }
}

void swap(Struct29& a, Struct29& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct29::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct29::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct29::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct29::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct29::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct29::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct29::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct29::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct30::__clear() {
  // clear all fields
  field1 = 0;
  field2 = 0;
  __isset.__clear();
}

bool Struct30::operator==(const Struct30& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  return true;
}

void Struct30::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
}

void swap(Struct30& a, Struct30& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct30::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct30::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct30::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct30::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct30::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct30::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct30::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct30::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct31::__clear() {
  // clear all fields
  field1 = 0;
  field2 = 0;
  field3.clear();
  field4.clear();
  field5 = 0;
  field6 = 0;
  field7.clear();
  field8.clear();
  field9.clear();
  field10 = 0;
  field11 = 0;
  field12.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct1>::clear(&field13);
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct22>::clear(&field14);
  field15.clear();
  field16.clear();
  field17.clear();
  field18 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field19.clear();
  field20 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool Struct31::operator==(const Struct31& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  return true;
}

const std::map<int16_t, std::string>& Struct31::get_field3() const& {
  return field3;
}

std::map<int16_t, std::string> Struct31::get_field3() && {
  return std::move(field3);
}

const std::set<std::set<int32_t>>& Struct31::get_field4() const& {
  return field4;
}

std::set<std::set<int32_t>> Struct31::get_field4() && {
  return std::move(field4);
}

const std::map<float, std::string>& Struct31::get_field7() const& {
  return field7;
}

std::map<float, std::string> Struct31::get_field7() && {
  return std::move(field7);
}

const std::vector<double>& Struct31::get_field8() const& {
  return field8;
}

std::vector<double> Struct31::get_field8() && {
  return std::move(field8);
}

const std::map<int8_t, int32_t>& Struct31::get_field9() const& {
  return field9;
}

std::map<int8_t, int32_t> Struct31::get_field9() && {
  return std::move(field9);
}

const std::map<int16_t, std::set<float>>& Struct31::get_field12() const& {
  return field12;
}

std::map<int16_t, std::set<float>> Struct31::get_field12() && {
  return std::move(field12);
}

const  ::example::thrift12::Struct1& Struct31::get_field13() const& {
  return field13;
}

 ::example::thrift12::Struct1 Struct31::get_field13() && {
  return std::move(field13);
}

const  ::example::thrift12::Struct22& Struct31::get_field14() const& {
  return field14;
}

 ::example::thrift12::Struct22 Struct31::get_field14() && {
  return std::move(field14);
}

const std::map<int64_t, std::map<int64_t,  ::example::thrift12::Struct1>>& Struct31::get_field15() const& {
  return field15;
}

std::map<int64_t, std::map<int64_t,  ::example::thrift12::Struct1>> Struct31::get_field15() && {
  return std::move(field15);
}

const std::map<int8_t, int64_t>& Struct31::get_field16() const& {
  return field16;
}

std::map<int8_t, int64_t> Struct31::get_field16() && {
  return std::move(field16);
}

const std::set<std::string>& Struct31::get_field17() const& {
  return field17;
}

std::set<std::string> Struct31::get_field17() && {
  return std::move(field17);
}

const std::vector<double>& Struct31::get_field19() const& {
  return field19;
}

std::vector<double> Struct31::get_field19() && {
  return std::move(field19);
}

void Struct31::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

void swap(Struct31& a, Struct31& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct31::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct31::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct31::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct31::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct31::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct31::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct31::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct31::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct32::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct10>::clear(&field1);
  field2.clear();
  field3 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field4.clear();
  field5 = 0;
  field6 = 0;
  field7.clear();
  __isset.__clear();
}

bool Struct32::operator==(const Struct32& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  return true;
}

const  ::example::thrift12::Struct10& Struct32::get_field1() const& {
  return field1;
}

 ::example::thrift12::Struct10 Struct32::get_field1() && {
  return std::move(field1);
}

const std::map<int16_t, int8_t>& Struct32::get_field2() const& {
  return field2;
}

std::map<int16_t, int8_t> Struct32::get_field2() && {
  return std::move(field2);
}

const std::set<std::string>& Struct32::get_field4() const& {
  return field4;
}

std::set<std::string> Struct32::get_field4() && {
  return std::move(field4);
}

const std::map<float,  ::example::thrift12::Struct3>& Struct32::get_field7() const& {
  return field7;
}

std::map<float,  ::example::thrift12::Struct3> Struct32::get_field7() && {
  return std::move(field7);
}

void Struct32::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_MAP;
  }
}

void swap(Struct32& a, Struct32& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct32::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct32::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct32::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct32::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct32::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct32::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct32::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct32::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct33::__clear() {
  // clear all fields
  field1 = 0;
  field2 = 0;
  field3 = 0;
  field4 = 0;
  field5.clear();
  field6.clear();
  field7 = 0;
  field8 = 0;
  field9.clear();
  field10 = 0;
  field11.clear();
  field12 = 0;
  field13 = 0;
  field14 = 0;
  field15.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct19>::clear(&field16);
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct3>::clear(&field17);
  __isset.__clear();
}

bool Struct33::operator==(const Struct33& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  return true;
}

const std::map<int16_t, std::vector< ::example::thrift12::Struct4>>& Struct33::get_field5() const& {
  return field5;
}

std::map<int16_t, std::vector< ::example::thrift12::Struct4>> Struct33::get_field5() && {
  return std::move(field5);
}

const std::map<double, double>& Struct33::get_field6() const& {
  return field6;
}

std::map<double, double> Struct33::get_field6() && {
  return std::move(field6);
}

const std::map<std::vector<std::string>, int16_t>& Struct33::get_field9() const& {
  return field9;
}

std::map<std::vector<std::string>, int16_t> Struct33::get_field9() && {
  return std::move(field9);
}

const std::map<bool,  ::example::thrift12::Struct0>& Struct33::get_field11() const& {
  return field11;
}

std::map<bool,  ::example::thrift12::Struct0> Struct33::get_field11() && {
  return std::move(field11);
}

const std::vector<int32_t>& Struct33::get_field15() const& {
  return field15;
}

std::vector<int32_t> Struct33::get_field15() && {
  return std::move(field15);
}

const  ::example::thrift12::Struct19& Struct33::get_field16() const& {
  return field16;
}

 ::example::thrift12::Struct19 Struct33::get_field16() && {
  return std::move(field16);
}

const  ::example::thrift12::Struct3& Struct33::get_field17() const& {
  return field17;
}

 ::example::thrift12::Struct3 Struct33::get_field17() && {
  return std::move(field17);
}

void Struct33::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct33& a, Struct33& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct33::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct33::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct33::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct33::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct33::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct33::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct33::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct33::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct34::__clear() {
  // clear all fields
  field1 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field2 = 0;
  field3 = 0;
  field4 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct20>::clear(&field5);
  field6 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct21>::clear(&field7);
  field9 = 0;
  field10.clear();
  field11.clear();
  field12 = 0;
  field13 = 0;
  field14.clear();
  field15.clear();
  field16 = 0;
  field17 = 0;
  field18 = 0;
  field19 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field20.clear();
  field21 = 0;
  field22.clear();
  field23 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field24 = 0;
  field25 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift29::Struct5>::clear(&field26);
  field27.clear();
  field28 = 0;
  field29 = 0;
  field30.clear();
  field31.clear();
  field32 = 0;
  field33 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field34 = 0;
  field35 = 0;
  field36.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct10>::clear(&field37);
  field38.clear();
  field39 = 0;
  field40 = 0;
  field41.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct31>::clear(&field42);
  field43.clear();
  field44.clear();
  __isset.__clear();
}

bool Struct34::operator==(const Struct34& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field4, rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field6, rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field19, rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field23, rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  return true;
}

const  ::example::thrift12::Struct20& Struct34::get_field5() const& {
  return field5;
}

 ::example::thrift12::Struct20 Struct34::get_field5() && {
  return std::move(field5);
}

const  ::example::thrift12::Struct21& Struct34::get_field7() const& {
  return field7;
}

 ::example::thrift12::Struct21 Struct34::get_field7() && {
  return std::move(field7);
}

const  ::example::thrift12::Struct6& Struct34::get_field8() const& {
  return field8;
}

 ::example::thrift12::Struct6 Struct34::get_field8() && {
  return std::move(field8);
}

const std::map<std::vector<std::map<double,  ::example::thrift12::Struct15>>,  ::example::thrift12::Struct0>& Struct34::get_field10() const& {
  return field10;
}

std::map<std::vector<std::map<double,  ::example::thrift12::Struct15>>,  ::example::thrift12::Struct0> Struct34::get_field10() && {
  return std::move(field10);
}

const std::vector<std::vector<double>>& Struct34::get_field11() const& {
  return field11;
}

std::vector<std::vector<double>> Struct34::get_field11() && {
  return std::move(field11);
}

const std::map<std::string, double>& Struct34::get_field14() const& {
  return field14;
}

std::map<std::string, double> Struct34::get_field14() && {
  return std::move(field14);
}

const std::vector<int64_t>& Struct34::get_field15() const& {
  return field15;
}

std::vector<int64_t> Struct34::get_field15() && {
  return std::move(field15);
}

const std::map<int16_t, double>& Struct34::get_field20() const& {
  return field20;
}

std::map<int16_t, double> Struct34::get_field20() && {
  return std::move(field20);
}

const std::set<std::map<bool, float>>& Struct34::get_field22() const& {
  return field22;
}

std::set<std::map<bool, float>> Struct34::get_field22() && {
  return std::move(field22);
}

const  ::example::thrift29::Struct5& Struct34::get_field26() const& {
  return field26;
}

 ::example::thrift29::Struct5 Struct34::get_field26() && {
  return std::move(field26);
}

const std::map<std::string, std::vector<std::string>>& Struct34::get_field27() const& {
  return field27;
}

std::map<std::string, std::vector<std::string>> Struct34::get_field27() && {
  return std::move(field27);
}

const std::set<std::vector<int16_t>>& Struct34::get_field30() const& {
  return field30;
}

std::set<std::vector<int16_t>> Struct34::get_field30() && {
  return std::move(field30);
}

const std::set<std::map<std::set<std::string>, double>>& Struct34::get_field31() const& {
  return field31;
}

std::set<std::map<std::set<std::string>, double>> Struct34::get_field31() && {
  return std::move(field31);
}

const std::map<bool, int8_t>& Struct34::get_field36() const& {
  return field36;
}

std::map<bool, int8_t> Struct34::get_field36() && {
  return std::move(field36);
}

const  ::example::thrift12::Struct10& Struct34::get_field37() const& {
  return field37;
}

 ::example::thrift12::Struct10 Struct34::get_field37() && {
  return std::move(field37);
}

const std::vector<int32_t>& Struct34::get_field38() const& {
  return field38;
}

std::vector<int32_t> Struct34::get_field38() && {
  return std::move(field38);
}

const std::map<std::string, int64_t>& Struct34::get_field41() const& {
  return field41;
}

std::map<std::string, int64_t> Struct34::get_field41() && {
  return std::move(field41);
}

const  ::example::thrift12::Struct31& Struct34::get_field42() const& {
  return field42;
}

 ::example::thrift12::Struct31 Struct34::get_field42() && {
  return std::move(field42);
}

const std::set<int32_t>& Struct34::get_field43() const& {
  return field43;
}

std::set<int32_t> Struct34::get_field43() && {
  return std::move(field43);
}

const std::map<int16_t, bool>& Struct34::get_field44() const& {
  return field44;
}

std::map<int16_t, bool> Struct34::get_field44() && {
  return std::move(field44);
}

void Struct34::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_MAP;
  }
}

void swap(Struct34& a, Struct34& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct34::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct34::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct34::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct34::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct34::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct34::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct34::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct34::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct35::__clear() {
  // clear all fields
  field1.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::clear(&field2);
  field3 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift29::Struct3>::clear(&field4);
  field5.clear();
  field6 = 0;
  field7.clear();
  field8.clear();
  field9.clear();
  field10 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field11 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct11>::clear(&field12);
  field13 = 0;
  field14.clear();
  __isset.__clear();
}

bool Struct35::operator==(const Struct35& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field10, rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  return true;
}

const std::vector<int32_t>& Struct35::get_field1() const& {
  return field1;
}

std::vector<int32_t> Struct35::get_field1() && {
  return std::move(field1);
}

const  ::example::thrift27::Struct1& Struct35::get_field2() const& {
  return field2;
}

 ::example::thrift27::Struct1 Struct35::get_field2() && {
  return std::move(field2);
}

const  ::example::thrift29::Struct3& Struct35::get_field4() const& {
  return field4;
}

 ::example::thrift29::Struct3 Struct35::get_field4() && {
  return std::move(field4);
}

const std::set<int64_t>& Struct35::get_field5() const& {
  return field5;
}

std::set<int64_t> Struct35::get_field5() && {
  return std::move(field5);
}

const std::map<int16_t, std::string>& Struct35::get_field7() const& {
  return field7;
}

std::map<int16_t, std::string> Struct35::get_field7() && {
  return std::move(field7);
}

const std::set<int16_t>& Struct35::get_field8() const& {
  return field8;
}

std::set<int16_t> Struct35::get_field8() && {
  return std::move(field8);
}

const std::vector<float>& Struct35::get_field9() const& {
  return field9;
}

std::vector<float> Struct35::get_field9() && {
  return std::move(field9);
}

const  ::example::thrift12::Struct11& Struct35::get_field12() const& {
  return field12;
}

 ::example::thrift12::Struct11 Struct35::get_field12() && {
  return std::move(field12);
}

const std::map<int32_t, double>& Struct35::get_field14() const& {
  return field14;
}

std::map<int32_t, double> Struct35::get_field14() && {
  return std::move(field14);
}

void Struct35::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_MAP;
  }
}

void swap(Struct35& a, Struct35& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct35::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct35::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct35::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct35::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct35::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct35::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct35::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct35::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct36::__clear() {
  // clear all fields
  field1.clear();
  field2.clear();
  field3 = 0;
  field4 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field5 = 0;
  field6.clear();
  field7.clear();
  field8.clear();
  field9.clear();
  field10.clear();
  field11.clear();
  field12 = 0;
  __isset.__clear();
}

bool Struct36::operator==(const Struct36& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  return true;
}

const std::vector<std::string>& Struct36::get_field1() const& {
  return field1;
}

std::vector<std::string> Struct36::get_field1() && {
  return std::move(field1);
}

const std::map<int64_t, int16_t>& Struct36::get_field2() const& {
  return field2;
}

std::map<int64_t, int16_t> Struct36::get_field2() && {
  return std::move(field2);
}

const std::map<double, std::vector<int32_t>>& Struct36::get_field6() const& {
  return field6;
}

std::map<double, std::vector<int32_t>> Struct36::get_field6() && {
  return std::move(field6);
}

const std::vector<int64_t>& Struct36::get_field7() const& {
  return field7;
}

std::vector<int64_t> Struct36::get_field7() && {
  return std::move(field7);
}

const std::vector<int8_t>& Struct36::get_field8() const& {
  return field8;
}

std::vector<int8_t> Struct36::get_field8() && {
  return std::move(field8);
}

const std::map<int8_t, std::string>& Struct36::get_field9() const& {
  return field9;
}

std::map<int8_t, std::string> Struct36::get_field9() && {
  return std::move(field9);
}

const std::set<float>& Struct36::get_field10() const& {
  return field10;
}

std::set<float> Struct36::get_field10() && {
  return std::move(field10);
}

const std::vector<bool>& Struct36::get_field11() const& {
  return field11;
}

std::vector<bool> Struct36::get_field11() && {
  return std::move(field11);
}

void Struct36::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
}

void swap(Struct36& a, Struct36& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct36::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct36::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct36::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct36::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct36::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct36::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct36::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct36::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct37::__clear() {
  // clear all fields
  field1 = 0;
  field3 = 0;
  field4 = 0;
  field5.clear();
  field6 = 0;
  __isset.__clear();
}

bool Struct37::operator==(const Struct37& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  return true;
}

const  ::example::thrift12::Struct8& Struct37::get_field2() const& {
  return field2;
}

 ::example::thrift12::Struct8 Struct37::get_field2() && {
  return std::move(field2);
}

const std::map<int16_t, std::map<bool, int64_t>>& Struct37::get_field5() const& {
  return field5;
}

std::map<int16_t, std::map<bool, int64_t>> Struct37::get_field5() && {
  return std::move(field5);
}

void Struct37::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
}

void swap(Struct37& a, Struct37& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct37::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct37::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct37::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct37::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct37::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct37::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct37::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct37::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct38::__clear() {
  // clear all fields
  field1.clear();
  field2.clear();
  field3.clear();
  field4 = 0;
  field5 = 0;
  __isset.__clear();
}

bool Struct38::operator==(const Struct38& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  return true;
}

const std::map<int32_t, int16_t>& Struct38::get_field1() const& {
  return field1;
}

std::map<int32_t, int16_t> Struct38::get_field1() && {
  return std::move(field1);
}

const std::map<std::string, int16_t>& Struct38::get_field2() const& {
  return field2;
}

std::map<std::string, int16_t> Struct38::get_field2() && {
  return std::move(field2);
}

const std::set<int8_t>& Struct38::get_field3() const& {
  return field3;
}

std::set<int8_t> Struct38::get_field3() && {
  return std::move(field3);
}

void Struct38::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I16;
  }
}

void swap(Struct38& a, Struct38& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct38::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct38::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct38::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct38::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct38::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct38::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct38::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct38::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct39::__clear() {
  // clear all fields
  field1.clear();
  field2.clear();
  field3 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct21>::clear(&field4);
  field5 = 0;
  field6.clear();
  field7.clear();
  field8 = 0;
  __isset.__clear();
}

bool Struct39::operator==(const Struct39& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field3, rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  return true;
}

const std::vector<float>& Struct39::get_field1() const& {
  return field1;
}

std::vector<float> Struct39::get_field1() && {
  return std::move(field1);
}

const std::set<double>& Struct39::get_field2() const& {
  return field2;
}

std::set<double> Struct39::get_field2() && {
  return std::move(field2);
}

const  ::example::thrift12::Struct21& Struct39::get_field4() const& {
  return field4;
}

 ::example::thrift12::Struct21 Struct39::get_field4() && {
  return std::move(field4);
}

const std::map<int32_t, std::set<std::string>>& Struct39::get_field6() const& {
  return field6;
}

std::map<int32_t, std::set<std::string>> Struct39::get_field6() && {
  return std::move(field6);
}

const std::set<std::string>& Struct39::get_field7() const& {
  return field7;
}

std::set<std::string> Struct39::get_field7() && {
  return std::move(field7);
}

void Struct39::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
}

void swap(Struct39& a, Struct39& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct39::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct39::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct39::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct39::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct39::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct39::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct39::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct39::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct40::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct29>::clear(&field1);
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct23>::clear(&field2);
  field3 = 0;
  field4 = 0;
  field5 = 0;
  field6 = 0;
  field7 = 0;
  field8 = 0;
  field9.clear();
  field11 = 0;
  field12 = 0;
  field13.clear();
  field14 = 0;
  field15 = 0;
  __isset.__clear();
}

bool Struct40::operator==(const Struct40& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  return true;
}

const  ::example::thrift12::Struct29& Struct40::get_field1() const& {
  return field1;
}

 ::example::thrift12::Struct29 Struct40::get_field1() && {
  return std::move(field1);
}

const  ::example::thrift12::Struct23& Struct40::get_field2() const& {
  return field2;
}

 ::example::thrift12::Struct23 Struct40::get_field2() && {
  return std::move(field2);
}

const std::map<int8_t, int8_t>& Struct40::get_field9() const& {
  return field9;
}

std::map<int8_t, int8_t> Struct40::get_field9() && {
  return std::move(field9);
}

const  ::example::thrift12::Struct8& Struct40::get_field10() const& {
  return field10;
}

 ::example::thrift12::Struct8 Struct40::get_field10() && {
  return std::move(field10);
}

const std::set<int8_t>& Struct40::get_field13() const& {
  return field13;
}

std::set<int8_t> Struct40::get_field13() && {
  return std::move(field13);
}

void Struct40::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
}

void swap(Struct40& a, Struct40& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct40::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct40::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct40::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct40::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct40::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct40::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct40::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct40::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct41::__clear() {
  // clear all fields
  field1 = 0;
  field2.clear();
  field3.clear();
  field4.clear();
  field5 = 0;
  field6 = 0;
  field7 = 0;
  field8 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field9 = 0;
  field10.clear();
  __isset.__clear();
}

bool Struct41::operator==(const Struct41& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field8, rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  return true;
}

const std::set<std::string>& Struct41::get_field2() const& {
  return field2;
}

std::set<std::string> Struct41::get_field2() && {
  return std::move(field2);
}

const std::map<int64_t, int32_t>& Struct41::get_field3() const& {
  return field3;
}

std::map<int64_t, int32_t> Struct41::get_field3() && {
  return std::move(field3);
}

const std::map<std::vector<bool>, bool>& Struct41::get_field4() const& {
  return field4;
}

std::map<std::vector<bool>, bool> Struct41::get_field4() && {
  return std::move(field4);
}

const std::map<double, std::vector<float>>& Struct41::get_field10() const& {
  return field10;
}

std::map<double, std::vector<float>> Struct41::get_field10() && {
  return std::move(field10);
}

void Struct41::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_MAP;
  }
}

void swap(Struct41& a, Struct41& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct41::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct41::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct41::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct41::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct41::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct41::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct41::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct41::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct42::__clear() {
  // clear all fields
  field1 = 0;
  field2 = 0;
  field3 = 0;
  field4 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct23>::clear(&field5);
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct2>::clear(&field6);
  __isset.__clear();
}

bool Struct42::operator==(const Struct42& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  return true;
}

const  ::example::thrift12::Struct23& Struct42::get_field5() const& {
  return field5;
}

 ::example::thrift12::Struct23 Struct42::get_field5() && {
  return std::move(field5);
}

const  ::example::thrift12::Struct2& Struct42::get_field6() const& {
  return field6;
}

 ::example::thrift12::Struct2 Struct42::get_field6() && {
  return std::move(field6);
}

void Struct42::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct42& a, Struct42& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct42::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct42::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct42::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct42::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct42::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct42::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct42::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct42::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct43::__clear() {
  // clear all fields
  field1 = 0;
  field2.clear();
  field3 = 0;
  field4 = 0;
  field5.clear();
  field6 = 0;
  field7 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field8.clear();
  field10.clear();
  field11.clear();
  field12 = 0;
  field13.clear();
  field14 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field15 = 0;
  field16.clear();
  field17.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct17>::clear(&field18);
  field19.clear();
  field20 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct17>::clear(&field21);
  field22 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field23.clear();
  field24.clear();
  field25 = 0;
  field26 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field27.clear();
  field28 = 0;
  field29.clear();
  field30 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field31 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct0>::clear(&field32);
  field33 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field34 = 0;
  field35 = 0;
  field36 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct1>::clear(&field37);
  field38.clear();
  field39 = 0;
  field40 = 0;
  field41 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field42 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field43.clear();
  field44 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field45.clear();
  field46 = 0;
  field47 = 0;
  field48 = 0;
  field49 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field50 = 0;
  field51 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field52 = 0;
  __isset.__clear();
}

bool Struct43::operator==(const Struct43& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field7, rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field14, rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field22, rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field33, rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field41, rhs.field41))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field42, rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field49, rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field51, rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  return true;
}

const std::map<float, float>& Struct43::get_field2() const& {
  return field2;
}

std::map<float, float> Struct43::get_field2() && {
  return std::move(field2);
}

const std::set<std::map<double, int16_t>>& Struct43::get_field5() const& {
  return field5;
}

std::set<std::map<double, int16_t>> Struct43::get_field5() && {
  return std::move(field5);
}

const std::vector<bool>& Struct43::get_field8() const& {
  return field8;
}

std::vector<bool> Struct43::get_field8() && {
  return std::move(field8);
}

const  ::example::thrift12::Struct8& Struct43::get_field9() const& {
  return field9;
}

 ::example::thrift12::Struct8 Struct43::get_field9() && {
  return std::move(field9);
}

const std::map<std::string, bool>& Struct43::get_field10() const& {
  return field10;
}

std::map<std::string, bool> Struct43::get_field10() && {
  return std::move(field10);
}

const std::map<int8_t, std::string>& Struct43::get_field11() const& {
  return field11;
}

std::map<int8_t, std::string> Struct43::get_field11() && {
  return std::move(field11);
}

const std::set<int8_t>& Struct43::get_field13() const& {
  return field13;
}

std::set<int8_t> Struct43::get_field13() && {
  return std::move(field13);
}

const std::vector<std::string>& Struct43::get_field16() const& {
  return field16;
}

std::vector<std::string> Struct43::get_field16() && {
  return std::move(field16);
}

const std::map<int16_t, std::vector<bool>>& Struct43::get_field17() const& {
  return field17;
}

std::map<int16_t, std::vector<bool>> Struct43::get_field17() && {
  return std::move(field17);
}

const  ::example::thrift12::Struct17& Struct43::get_field18() const& {
  return field18;
}

 ::example::thrift12::Struct17 Struct43::get_field18() && {
  return std::move(field18);
}

const std::map< ::example::thrift12::Struct26, bool>& Struct43::get_field19() const& {
  return field19;
}

std::map< ::example::thrift12::Struct26, bool> Struct43::get_field19() && {
  return std::move(field19);
}

const  ::example::thrift12::Struct17& Struct43::get_field21() const& {
  return field21;
}

 ::example::thrift12::Struct17 Struct43::get_field21() && {
  return std::move(field21);
}

const std::set<double>& Struct43::get_field23() const& {
  return field23;
}

std::set<double> Struct43::get_field23() && {
  return std::move(field23);
}

const std::set<double>& Struct43::get_field24() const& {
  return field24;
}

std::set<double> Struct43::get_field24() && {
  return std::move(field24);
}

const std::set<std::set<int8_t>>& Struct43::get_field27() const& {
  return field27;
}

std::set<std::set<int8_t>> Struct43::get_field27() && {
  return std::move(field27);
}

const std::vector<std::map<std::set<int64_t>, double>>& Struct43::get_field29() const& {
  return field29;
}

std::vector<std::map<std::set<int64_t>, double>> Struct43::get_field29() && {
  return std::move(field29);
}

const  ::example::thrift12::Struct0& Struct43::get_field32() const& {
  return field32;
}

 ::example::thrift12::Struct0 Struct43::get_field32() && {
  return std::move(field32);
}

const  ::example::thrift12::Struct1& Struct43::get_field37() const& {
  return field37;
}

 ::example::thrift12::Struct1 Struct43::get_field37() && {
  return std::move(field37);
}

const std::set<std::string>& Struct43::get_field38() const& {
  return field38;
}

std::set<std::string> Struct43::get_field38() && {
  return std::move(field38);
}

const std::map<int16_t, int64_t>& Struct43::get_field43() const& {
  return field43;
}

std::map<int16_t, int64_t> Struct43::get_field43() && {
  return std::move(field43);
}

const std::map<std::string, int16_t>& Struct43::get_field45() const& {
  return field45;
}

std::map<std::string, int16_t> Struct43::get_field45() && {
  return std::move(field45);
}

void Struct43::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_I64;
  }
}

void swap(Struct43& a, Struct43& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct43::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct43::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct43::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct43::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct43::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct43::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct43::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct43::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct44::__clear() {
  // clear all fields
  field1.clear();
  __isset.__clear();
}

bool Struct44::operator==(const Struct44& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  return true;
}

const std::map<int64_t, int16_t>& Struct44::get_field1() const& {
  return field1;
}

std::map<int64_t, int16_t> Struct44::get_field1() && {
  return std::move(field1);
}

void Struct44::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
}

void swap(Struct44& a, Struct44& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct44::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct44::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct44::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct44::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct44::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct44::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct44::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct44::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct45::__clear() {
  // clear all fields
  field1.clear();
  field2 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct18>::clear(&field3);
  field4 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field5 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field6.clear();
  field7.clear();
  field8 = 0;
  field9.clear();
  field10.clear();
  field11 = 0;
  field12.clear();
  field13 = 0;
  field14 = 0;
  field15 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool Struct45::operator==(const Struct45& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field4, rhs.field4))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field5, rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  return true;
}

const std::set< ::example::thrift12::Struct15>& Struct45::get_field1() const& {
  return field1;
}

std::set< ::example::thrift12::Struct15> Struct45::get_field1() && {
  return std::move(field1);
}

const  ::example::thrift12::Struct18& Struct45::get_field3() const& {
  return field3;
}

 ::example::thrift12::Struct18 Struct45::get_field3() && {
  return std::move(field3);
}

const std::set<int64_t>& Struct45::get_field6() const& {
  return field6;
}

std::set<int64_t> Struct45::get_field6() && {
  return std::move(field6);
}

const std::vector<int8_t>& Struct45::get_field7() const& {
  return field7;
}

std::vector<int8_t> Struct45::get_field7() && {
  return std::move(field7);
}

const std::vector<float>& Struct45::get_field9() const& {
  return field9;
}

std::vector<float> Struct45::get_field9() && {
  return std::move(field9);
}

const std::vector<int16_t>& Struct45::get_field10() const& {
  return field10;
}

std::vector<int16_t> Struct45::get_field10() && {
  return std::move(field10);
}

const std::vector<int32_t>& Struct45::get_field12() const& {
  return field12;
}

std::vector<int32_t> Struct45::get_field12() && {
  return std::move(field12);
}

void Struct45::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

void swap(Struct45& a, Struct45& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct45::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct45::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct45::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct45::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct45::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct45::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct45::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct45::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct46::__clear() {
  // clear all fields
  field1 = 0;
  field2 = 0;
  field3 = 0;
  field4.clear();
  field5.clear();
  field6.clear();
  field7 = 0;
  field8 = 0;
  field9.clear();
  field10 = 0;
  field11.clear();
  field12.clear();
  field13 = 0;
  __isset.__clear();
}

bool Struct46::operator==(const Struct46& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  return true;
}

const std::map<int32_t, std::set<double>>& Struct46::get_field4() const& {
  return field4;
}

std::map<int32_t, std::set<double>> Struct46::get_field4() && {
  return std::move(field4);
}

const std::vector<int8_t>& Struct46::get_field5() const& {
  return field5;
}

std::vector<int8_t> Struct46::get_field5() && {
  return std::move(field5);
}

const std::set<std::string>& Struct46::get_field6() const& {
  return field6;
}

std::set<std::string> Struct46::get_field6() && {
  return std::move(field6);
}

const std::vector<double>& Struct46::get_field9() const& {
  return field9;
}

std::vector<double> Struct46::get_field9() && {
  return std::move(field9);
}

const std::set<std::map<int64_t, int64_t>>& Struct46::get_field11() const& {
  return field11;
}

std::set<std::map<int64_t, int64_t>> Struct46::get_field11() && {
  return std::move(field11);
}

const std::vector<int64_t>& Struct46::get_field12() const& {
  return field12;
}

std::vector<int64_t> Struct46::get_field12() && {
  return std::move(field12);
}

void Struct46::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
}

void swap(Struct46& a, Struct46& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct46::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct46::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct46::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct46::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct46::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct46::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct46::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct46::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct47::__clear() {
  // clear all fields
}

bool Struct47::operator==(const Struct47& /* rhs */) const {
  return true;
}

void Struct47::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
}

void swap(Struct47& a, Struct47& b) {
  using ::std::swap;
  (void)a;
  (void)b;
}

template uint32_t Struct47::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct47::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct47::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct47::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct47::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct47::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct47::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct47::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct48::__clear() {
  // clear all fields
  field1.clear();
  field2.clear();
  field3 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field4 = 0;
  __isset.__clear();
}

bool Struct48::operator==(const Struct48& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field3, rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  return true;
}

const std::map<bool, std::set<int64_t>>& Struct48::get_field1() const& {
  return field1;
}

std::map<bool, std::set<int64_t>> Struct48::get_field1() && {
  return std::move(field1);
}

const std::map<bool, bool>& Struct48::get_field2() const& {
  return field2;
}

std::map<bool, bool> Struct48::get_field2() && {
  return std::move(field2);
}

void Struct48::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I32;
  }
}

void swap(Struct48& a, Struct48& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct48::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct48::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct48::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct48::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct48::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct48::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct48::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct48::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct49::__clear() {
  // clear all fields
  field1.clear();
  field2 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct39>::clear(&field3);
  field4.clear();
  field5 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field6 = 0;
  field7 = 0;
  field8 = 0;
  field9 = 0;
  field10 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct36>::clear(&field11);
  field12 = 0;
  field13.clear();
  field14 = 0;
  field15.clear();
  field16 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct11>::clear(&field17);
  field18.clear();
  field19 = 0;
  field20 = 0;
  __isset.__clear();
}

bool Struct49::operator==(const Struct49& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  return true;
}

const std::set<int32_t>& Struct49::get_field1() const& {
  return field1;
}

std::set<int32_t> Struct49::get_field1() && {
  return std::move(field1);
}

const  ::example::thrift12::Struct39& Struct49::get_field3() const& {
  return field3;
}

 ::example::thrift12::Struct39 Struct49::get_field3() && {
  return std::move(field3);
}

const std::map<float, std::set<std::string>>& Struct49::get_field4() const& {
  return field4;
}

std::map<float, std::set<std::string>> Struct49::get_field4() && {
  return std::move(field4);
}

const  ::example::thrift12::Struct36& Struct49::get_field11() const& {
  return field11;
}

 ::example::thrift12::Struct36 Struct49::get_field11() && {
  return std::move(field11);
}

const std::map<std::vector<bool>, std::string>& Struct49::get_field13() const& {
  return field13;
}

std::map<std::vector<bool>, std::string> Struct49::get_field13() && {
  return std::move(field13);
}

const std::set<std::string>& Struct49::get_field15() const& {
  return field15;
}

std::set<std::string> Struct49::get_field15() && {
  return std::move(field15);
}

const  ::example::thrift12::Struct11& Struct49::get_field17() const& {
  return field17;
}

 ::example::thrift12::Struct11 Struct49::get_field17() && {
  return std::move(field17);
}

const std::map<int64_t, std::map<bool, std::string>>& Struct49::get_field18() const& {
  return field18;
}

std::map<int64_t, std::map<bool, std::string>> Struct49::get_field18() && {
  return std::move(field18);
}

void Struct49::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_I64;
  }
}

void swap(Struct49& a, Struct49& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct49::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct49::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct49::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct49::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct49::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct49::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct49::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct49::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct50::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct4>::clear(&field1);
  field2.clear();
  field3.clear();
  field4 = 0;
  field5 = 0;
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct40>::clear(&field6);
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct18>::clear(&field7);
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct16>::clear(&field8);
  field9.clear();
  field10 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field11.clear();
  field12.clear();
  field13.clear();
  field14 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field15.clear();
  field16.clear();
  field17 = 0;
  field19 = 0;
  field20 = 0;
  field21 = 0;
  field22 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field23 = 0;
  field24.clear();
  field25 = 0;
  field26 = 0;
  field27.clear();
  field28 = 0;
  field29 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field30.clear();
  __isset.__clear();
}

bool Struct50::operator==(const Struct50& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field10, rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field22, rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field29, rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  return true;
}

const  ::example::thrift12::Struct4& Struct50::get_field1() const& {
  return field1;
}

 ::example::thrift12::Struct4 Struct50::get_field1() && {
  return std::move(field1);
}

const std::vector<bool>& Struct50::get_field2() const& {
  return field2;
}

std::vector<bool> Struct50::get_field2() && {
  return std::move(field2);
}

const std::set<std::set<int32_t>>& Struct50::get_field3() const& {
  return field3;
}

std::set<std::set<int32_t>> Struct50::get_field3() && {
  return std::move(field3);
}

const  ::example::thrift12::Struct40& Struct50::get_field6() const& {
  return field6;
}

 ::example::thrift12::Struct40 Struct50::get_field6() && {
  return std::move(field6);
}

const  ::example::thrift12::Struct18& Struct50::get_field7() const& {
  return field7;
}

 ::example::thrift12::Struct18 Struct50::get_field7() && {
  return std::move(field7);
}

const  ::example::thrift12::Struct16& Struct50::get_field8() const& {
  return field8;
}

 ::example::thrift12::Struct16 Struct50::get_field8() && {
  return std::move(field8);
}

const std::set<std::string>& Struct50::get_field9() const& {
  return field9;
}

std::set<std::string> Struct50::get_field9() && {
  return std::move(field9);
}

const std::set<int16_t>& Struct50::get_field11() const& {
  return field11;
}

std::set<int16_t> Struct50::get_field11() && {
  return std::move(field11);
}

const std::vector<std::string>& Struct50::get_field12() const& {
  return field12;
}

std::vector<std::string> Struct50::get_field12() && {
  return std::move(field12);
}

const std::set<int16_t>& Struct50::get_field13() const& {
  return field13;
}

std::set<int16_t> Struct50::get_field13() && {
  return std::move(field13);
}

const std::map<std::string, int64_t>& Struct50::get_field15() const& {
  return field15;
}

std::map<std::string, int64_t> Struct50::get_field15() && {
  return std::move(field15);
}

const std::set<double>& Struct50::get_field16() const& {
  return field16;
}

std::set<double> Struct50::get_field16() && {
  return std::move(field16);
}

const  ::example::thrift12::Struct15& Struct50::get_field18() const& {
  return field18;
}

 ::example::thrift12::Struct15 Struct50::get_field18() && {
  return std::move(field18);
}

const std::vector<int32_t>& Struct50::get_field24() const& {
  return field24;
}

std::vector<int32_t> Struct50::get_field24() && {
  return std::move(field24);
}

const std::map<std::string, int64_t>& Struct50::get_field27() const& {
  return field27;
}

std::map<std::string, int64_t> Struct50::get_field27() && {
  return std::move(field27);
}

const std::map< ::example::thrift12::Struct27, bool>& Struct50::get_field30() const& {
  return field30;
}

std::map< ::example::thrift12::Struct27, bool> Struct50::get_field30() && {
  return std::move(field30);
}

void Struct50::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_MAP;
  }
}

void swap(Struct50& a, Struct50& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct50::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct50::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct50::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct50::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct50::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct50::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct50::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct50::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct51::__clear() {
  // clear all fields
  field1.clear();
  field2.clear();
  field3.clear();
  field4 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field5 = 0;
  field6.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct24>::clear(&field7);
  field8 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field9.clear();
  field10 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool Struct51::operator==(const Struct51& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field4, rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field8, rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field10, rhs.field10))) {
    return false;
  }
  return true;
}

const std::vector<float>& Struct51::get_field1() const& {
  return field1;
}

std::vector<float> Struct51::get_field1() && {
  return std::move(field1);
}

const std::vector<int64_t>& Struct51::get_field2() const& {
  return field2;
}

std::vector<int64_t> Struct51::get_field2() && {
  return std::move(field2);
}

const std::vector<int32_t>& Struct51::get_field3() const& {
  return field3;
}

std::vector<int32_t> Struct51::get_field3() && {
  return std::move(field3);
}

const std::map<std::string, std::string>& Struct51::get_field6() const& {
  return field6;
}

std::map<std::string, std::string> Struct51::get_field6() && {
  return std::move(field6);
}

const  ::example::thrift12::Struct24& Struct51::get_field7() const& {
  return field7;
}

 ::example::thrift12::Struct24 Struct51::get_field7() && {
  return std::move(field7);
}

const std::set<std::vector<bool>>& Struct51::get_field9() const& {
  return field9;
}

std::set<std::vector<bool>> Struct51::get_field9() && {
  return std::move(field9);
}

void Struct51::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

void swap(Struct51& a, Struct51& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct51::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct51::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct51::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct51::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct51::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct51::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct51::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct51::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct52::__clear() {
  // clear all fields
  field1.clear();
  field2 = 0;
  field3 = 0;
  field4.clear();
  field5 = 0;
  field6 = 0;
  field7.clear();
  field8 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool Struct52::operator==(const Struct52& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  return true;
}

const std::map< ::example::thrift12::Struct25, std::string>& Struct52::get_field1() const& {
  return field1;
}

std::map< ::example::thrift12::Struct25, std::string> Struct52::get_field1() && {
  return std::move(field1);
}

const std::set<bool>& Struct52::get_field4() const& {
  return field4;
}

std::set<bool> Struct52::get_field4() && {
  return std::move(field4);
}

const std::set<int8_t>& Struct52::get_field7() const& {
  return field7;
}

std::set<int8_t> Struct52::get_field7() && {
  return std::move(field7);
}

void Struct52::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

void swap(Struct52& a, Struct52& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct52::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct52::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct52::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct52::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct52::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct52::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct52::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct52::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

void Struct53::__clear() {
  // clear all fields
  field1.clear();
  field2 = 0;
  field3 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field4.clear();
  field5 = 0;
  field6 = 0;
  field7 = 0;
  field8 = 0;
  field9 = 0;
  field10 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field11 = 0;
  field12.clear();
  field13.clear();
  ::apache::thrift::Cpp2Ops<  ::example::thrift12::Struct31>::clear(&field14);
  field15 = 0;
  __isset.__clear();
}

bool Struct53::operator==(const Struct53& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field3, rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  return true;
}

const std::map<std::string, int16_t>& Struct53::get_field1() const& {
  return field1;
}

std::map<std::string, int16_t> Struct53::get_field1() && {
  return std::move(field1);
}

const std::vector<float>& Struct53::get_field4() const& {
  return field4;
}

std::vector<float> Struct53::get_field4() && {
  return std::move(field4);
}

const std::map<int64_t, int8_t>& Struct53::get_field12() const& {
  return field12;
}

std::map<int64_t, int8_t> Struct53::get_field12() && {
  return std::move(field12);
}

const std::vector<std::set<float>>& Struct53::get_field13() const& {
  return field13;
}

std::vector<std::set<float>> Struct53::get_field13() && {
  return std::move(field13);
}

const  ::example::thrift12::Struct31& Struct53::get_field14() const& {
  return field14;
}

 ::example::thrift12::Struct31 Struct53::get_field14() && {
  return std::move(field14);
}

void Struct53::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
}

void swap(Struct53& a, Struct53& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct53::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct53::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct53::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct53::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct53::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct53::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct53::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct53::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift12
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift12 {

}} // example::thrift12
