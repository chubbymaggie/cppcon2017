/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "file27_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>
#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace example { namespace thrift27 {

template <class Protocol_>
uint32_t Struct0::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<bool, double>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                bool _key;
                xfer += iprot->readBool(_key);
                return _key;
              }
              ();
              double& _val = this->field1[std::move(_key_index_rk_rv)];
              xfer += iprot->readDouble(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readBool(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readDouble(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field1, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field2 = std::vector<int64_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field2.resize(_i_r + 1);
              xfer += iprot->readI64(this->field2[_i_r]);
            }
          }
          else {
            this->field2.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readI64(this->field2[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field4 = std::map<std::string, int8_t>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                std::string _key;
                xfer += iprot->readString(_key);
                return _key;
              }
              ();
              int8_t& _val = this->field4[std::move(_key_index_rk_rv)];
              xfer += iprot->readByte(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readString(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readByte(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field4, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field6 = std::map<int16_t, std::map<double, std::string>>();
          uint32_t _size_rk_rv_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv_rk_rv, _vtype_rk_rv_rk_rv, _size_rk_rv_rk_rv);
          uint32_t _i_rk_rv_rk_rv;
          if (_size_rk_rv_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv_rk_rv) {
              auto const _key_index_rk_rv_rk_rv = [&] {
                int16_t _key;
                xfer += iprot->readI16(_key);
                return _key;
              }
              ();
              std::map<double, std::string>& _val_rk_rv = this->field6[std::move(_key_index_rk_rv_rk_rv)];
              _val_rk_rv = std::map<double, std::string>();
              uint32_t _size_rk_rv;
              apache::thrift::protocol::TType _ktype_rk_rv;
              apache::thrift::protocol::TType _vtype_rk_rv;
              xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
              uint32_t _i_rk_rv;
              if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
                for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
                  auto const _key_index_rk_rv = [&] {
                    double _key;
                    xfer += iprot->readDouble(_key);
                    return _key;
                  }
                  ();
                  std::string& _val = _val_rk_rv[std::move(_key_index_rk_rv)];
                  xfer += iprot->readString(_val);
                }
              }
              else {
                auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
                  xfer += iprot->readDouble(_key);
                }
                ;
                auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
                  xfer += iprot->readString(_val);
                }
                ;
                ::apache::thrift::deserialize_known_length_map(_val_rk_rv, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
              }
              xfer += iprot->readMapEnd();
            }
          }
          else {
            auto const _kreader_rk_rv_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readI16(_key);
            }
            ;
            auto const _vreader_rk_rv_rk_rv = [&xfer, &iprot](auto& _val_rk_rv) {
              _val_rk_rv = std::map<double, std::string>();
              uint32_t _size_rk_rv;
              apache::thrift::protocol::TType _ktype_rk_rv;
              apache::thrift::protocol::TType _vtype_rk_rv;
              xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
              uint32_t _i_rk_rv;
              if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
                for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
                  auto const _key_index_rk_rv = [&] {
                    double _key;
                    xfer += iprot->readDouble(_key);
                    return _key;
                  }
                  ();
                  std::string& _val = _val_rk_rv[std::move(_key_index_rk_rv)];
                  xfer += iprot->readString(_val);
                }
              }
              else {
                auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
                  xfer += iprot->readDouble(_key);
                }
                ;
                auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
                  xfer += iprot->readString(_val);
                }
                ;
                ::apache::thrift::deserialize_known_length_map(_val_rk_rv, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
              }
              xfer += iprot->readMapEnd();
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field6, _size_rk_rv_rk_rv, _kreader_rk_rv_rk_rv, _vreader_rk_rv_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field7 = std::map<int32_t, int8_t>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                int32_t _key;
                xfer += iprot->readI32(_key);
                return _key;
              }
              ();
              int8_t& _val = this->field7[std::move(_key_index_rk_rv)];
              xfer += iprot->readByte(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readI32(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readByte(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field7, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field10 = std::map<bool, bool>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                bool _key;
                xfer += iprot->readBool(_key);
                return _key;
              }
              ();
              bool& _val = this->field10[std::move(_key_index_rk_rv)];
              xfer += iprot->readBool(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readBool(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readBool(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field10, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field11 = std::set<std::vector<std::string>>();
          uint32_t _size_r_r;
          apache::thrift::protocol::TType _etype_r_r;
          xfer += iprot->readSetBegin(_etype_r_r, _size_r_r);
          uint32_t _i_r_r;
          if (_size_r_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r_r = 0; iprot->peekSet(); ++_i_r_r) {
              std::vector<std::string> _elem_r;
              _elem_r = std::vector<std::string>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readListBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekList(); ++_i_r) {
                  _elem_r.resize(_i_r + 1);
                  xfer += iprot->readString(_elem_r[_i_r]);
                }
              }
              else {
                _elem_r.resize(_size_r);
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  xfer += iprot->readString(_elem_r[_i_r]);
                }
              }
              xfer += iprot->readListEnd();
              this->field11.insert(std::move(_elem_r));
            }
          }
          else {
            for (_i_r_r = 0; _i_r_r < _size_r_r; ++_i_r_r) {
              std::vector<std::string> _elem_r;
              _elem_r = std::vector<std::string>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readListBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekList(); ++_i_r) {
                  _elem_r.resize(_i_r + 1);
                  xfer += iprot->readString(_elem_r[_i_r]);
                }
              }
              else {
                _elem_r.resize(_size_r);
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  xfer += iprot->readString(_elem_r[_i_r]);
                }
              }
              xfer += iprot->readListEnd();
              this->field11.insert(std::move(_elem_r));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field19 = std::vector<double>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field19.resize(_i_r + 1);
              xfer += iprot->readDouble(this->field19[_i_r]);
            }
          }
          else {
            this->field19.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readDouble(this->field19[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field22 = std::set<int16_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int16_t _elem;
              xfer += iprot->readI16(_elem);
              this->field22.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int16_t _elem;
              xfer += iprot->readI16(_elem);
              this->field22.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field25 = std::map<bool, int32_t>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                bool _key;
                xfer += iprot->readBool(_key);
                return _key;
              }
              ();
              int32_t& _val = this->field25[std::move(_key_index_rk_rv)];
              xfer += iprot->readI32(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readBool(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readI32(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field25, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field27 = std::set<std::string>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              std::string _elem;
              xfer += iprot->readBinary(_elem);
              this->field27.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              std::string _elem;
              xfer += iprot->readBinary(_elem);
              this->field27.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field32 = std::map<std::string, double>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                std::string _key;
                xfer += iprot->readBinary(_key);
                return _key;
              }
              ();
              double& _val = this->field32[std::move(_key_index_rk_rv)];
              xfer += iprot->readDouble(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readBinary(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readDouble(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field32, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field35 = std::vector<int8_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field35.resize(_i_r + 1);
              xfer += iprot->readByte(this->field35[_i_r]);
            }
          }
          else {
            this->field35.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readByte(this->field35[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct0::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct0");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_DOUBLE, this->field1.size());
  for (auto _iter_rk_rv = this->field1.begin(); _iter_rk_rv != this->field1.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeBool(_iter_rk_rv->first);
    xfer += prot_->serializedSizeDouble(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I64, this->field2.size());
  for (auto _iter_r = this->field2.begin(); _iter_r != this->field2.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BYTE, this->field4.size());
  for (auto _iter_rk_rv = this->field4.begin(); _iter_rk_rv != this->field4.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeString(_iter_rk_rv->first);
    xfer += prot_->serializedSizeByte(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_MAP, this->field6.size());
  for (auto _iter_rk_rv_rk_rv = this->field6.begin(); _iter_rk_rv_rk_rv != this->field6.end(); ++_iter_rk_rv_rk_rv) {
    xfer += prot_->serializedSizeI16(_iter_rk_rv_rk_rv->first);
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_DOUBLE, apache::thrift::protocol::T_STRING, _iter_rk_rv_rk_rv->second.size());
    for (auto _iter_rk_rv = _iter_rk_rv_rk_rv->second.begin(); _iter_rk_rv != _iter_rk_rv_rk_rv->second.end(); ++_iter_rk_rv) {
      xfer += prot_->serializedSizeDouble(_iter_rk_rv->first);
      xfer += prot_->serializedSizeString(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_BYTE, this->field7.size());
  for (auto _iter_rk_rv = this->field7.begin(); _iter_rk_rv != this->field7.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI32(_iter_rk_rv->first);
    xfer += prot_->serializedSizeByte(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_FLOAT, 8);
  xfer += prot_->serializedSizeFloat(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I64, 9);
  xfer += prot_->serializedSizeI64(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_BOOL, this->field10.size());
  for (auto _iter_rk_rv = this->field10.begin(); _iter_rk_rv != this->field10.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeBool(_iter_rk_rv->first);
    xfer += prot_->serializedSizeBool(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_SET, 11);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_LIST, this->field11.size());
  for (auto _iter_r_r = this->field11.begin(); _iter_r_r != this->field11.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeString((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_DOUBLE, 12);
  xfer += prot_->serializedSizeDouble(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_DOUBLE, 13);
  xfer += prot_->serializedSizeDouble(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRING, 14);
  xfer += prot_->serializedSizeBinary(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_I16, 15);
  xfer += prot_->serializedSizeI16(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BOOL, 16);
  xfer += prot_->serializedSizeBool(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_BYTE, 17);
  xfer += prot_->serializedSizeByte(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRING, 18);
  xfer += prot_->serializedSizeString(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_DOUBLE, this->field19.size());
  for (auto _iter_r = this->field19.begin(); _iter_r != this->field19.end(); ++_iter_r) {
    xfer += prot_->serializedSizeDouble((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_BOOL, 20);
  xfer += prot_->serializedSizeBool(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I64, 21);
  xfer += prot_->serializedSizeI64(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_SET, 22);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I16, this->field22.size());
  for (auto _iter_r = this->field22.begin(); _iter_r != this->field22.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->serializedSizeString(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRING, 24);
  xfer += prot_->serializedSizeBinary(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_MAP, 25);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_I32, this->field25.size());
  for (auto _iter_rk_rv = this->field25.begin(); _iter_rk_rv != this->field25.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeBool(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->serializedSizeString(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_SET, 27);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, this->field27.size());
  for (auto _iter_r = this->field27.begin(); _iter_r != this->field27.end(); ++_iter_r) {
    xfer += prot_->serializedSizeBinary((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_BOOL, 28);
  xfer += prot_->serializedSizeBool(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_I32, 29);
  xfer += prot_->serializedSizeI32(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_BOOL, 30);
  xfer += prot_->serializedSizeBool(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_I32, 31);
  xfer += prot_->serializedSizeI32(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_MAP, 32);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_DOUBLE, this->field32.size());
  for (auto _iter_rk_rv = this->field32.begin(); _iter_rk_rv != this->field32.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeBinary(_iter_rk_rv->first);
    xfer += prot_->serializedSizeDouble(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_BOOL, 33);
  xfer += prot_->serializedSizeBool(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_BOOL, 34);
  xfer += prot_->serializedSizeBool(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_LIST, 35);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_BYTE, this->field35.size());
  for (auto _iter_r = this->field35.begin(); _iter_r != this->field35.end(); ++_iter_r) {
    xfer += prot_->serializedSizeByte((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_I16, 36);
  xfer += prot_->serializedSizeI16(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_BOOL, 37);
  xfer += prot_->serializedSizeBool(this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_STRING, 38);
  xfer += prot_->serializedSizeBinary(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_BOOL, 39);
  xfer += prot_->serializedSizeBool(this->field39);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct0::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct0");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_DOUBLE, this->field1.size());
  for (auto _iter_rk_rv = this->field1.begin(); _iter_rk_rv != this->field1.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeBool(_iter_rk_rv->first);
    xfer += prot_->serializedSizeDouble(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I64, this->field2.size());
  for (auto _iter_r = this->field2.begin(); _iter_r != this->field2.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BYTE, this->field4.size());
  for (auto _iter_rk_rv = this->field4.begin(); _iter_rk_rv != this->field4.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeString(_iter_rk_rv->first);
    xfer += prot_->serializedSizeByte(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_MAP, this->field6.size());
  for (auto _iter_rk_rv_rk_rv = this->field6.begin(); _iter_rk_rv_rk_rv != this->field6.end(); ++_iter_rk_rv_rk_rv) {
    xfer += prot_->serializedSizeI16(_iter_rk_rv_rk_rv->first);
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_DOUBLE, apache::thrift::protocol::T_STRING, _iter_rk_rv_rk_rv->second.size());
    for (auto _iter_rk_rv = _iter_rk_rv_rk_rv->second.begin(); _iter_rk_rv != _iter_rk_rv_rk_rv->second.end(); ++_iter_rk_rv) {
      xfer += prot_->serializedSizeDouble(_iter_rk_rv->first);
      xfer += prot_->serializedSizeString(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_BYTE, this->field7.size());
  for (auto _iter_rk_rv = this->field7.begin(); _iter_rk_rv != this->field7.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI32(_iter_rk_rv->first);
    xfer += prot_->serializedSizeByte(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_FLOAT, 8);
  xfer += prot_->serializedSizeFloat(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I64, 9);
  xfer += prot_->serializedSizeI64(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_BOOL, this->field10.size());
  for (auto _iter_rk_rv = this->field10.begin(); _iter_rk_rv != this->field10.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeBool(_iter_rk_rv->first);
    xfer += prot_->serializedSizeBool(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_SET, 11);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_LIST, this->field11.size());
  for (auto _iter_r_r = this->field11.begin(); _iter_r_r != this->field11.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeString((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_DOUBLE, 12);
  xfer += prot_->serializedSizeDouble(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_DOUBLE, 13);
  xfer += prot_->serializedSizeDouble(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRING, 14);
  xfer += prot_->serializedSizeZCBinary(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_I16, 15);
  xfer += prot_->serializedSizeI16(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BOOL, 16);
  xfer += prot_->serializedSizeBool(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_BYTE, 17);
  xfer += prot_->serializedSizeByte(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRING, 18);
  xfer += prot_->serializedSizeString(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_DOUBLE, this->field19.size());
  for (auto _iter_r = this->field19.begin(); _iter_r != this->field19.end(); ++_iter_r) {
    xfer += prot_->serializedSizeDouble((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_BOOL, 20);
  xfer += prot_->serializedSizeBool(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I64, 21);
  xfer += prot_->serializedSizeI64(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_SET, 22);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I16, this->field22.size());
  for (auto _iter_r = this->field22.begin(); _iter_r != this->field22.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->serializedSizeString(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRING, 24);
  xfer += prot_->serializedSizeZCBinary(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_MAP, 25);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_I32, this->field25.size());
  for (auto _iter_rk_rv = this->field25.begin(); _iter_rk_rv != this->field25.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeBool(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->serializedSizeString(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_SET, 27);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, this->field27.size());
  for (auto _iter_r = this->field27.begin(); _iter_r != this->field27.end(); ++_iter_r) {
    xfer += prot_->serializedSizeZCBinary((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_BOOL, 28);
  xfer += prot_->serializedSizeBool(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_I32, 29);
  xfer += prot_->serializedSizeI32(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_BOOL, 30);
  xfer += prot_->serializedSizeBool(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_I32, 31);
  xfer += prot_->serializedSizeI32(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_MAP, 32);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_DOUBLE, this->field32.size());
  for (auto _iter_rk_rv = this->field32.begin(); _iter_rk_rv != this->field32.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeZCBinary(_iter_rk_rv->first);
    xfer += prot_->serializedSizeDouble(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_BOOL, 33);
  xfer += prot_->serializedSizeBool(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_BOOL, 34);
  xfer += prot_->serializedSizeBool(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_LIST, 35);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_BYTE, this->field35.size());
  for (auto _iter_r = this->field35.begin(); _iter_r != this->field35.end(); ++_iter_r) {
    xfer += prot_->serializedSizeByte((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_I16, 36);
  xfer += prot_->serializedSizeI16(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_BOOL, 37);
  xfer += prot_->serializedSizeBool(this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_STRING, 38);
  xfer += prot_->serializedSizeZCBinary(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_BOOL, 39);
  xfer += prot_->serializedSizeBool(this->field39);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct0::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct0");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_DOUBLE, this->field1.size());
  for (auto _iter_rk_rv = this->field1.begin(); _iter_rk_rv != this->field1.end(); ++_iter_rk_rv) {
    xfer += prot_->writeBool(_iter_rk_rv->first);
    xfer += prot_->writeDouble(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I64, this->field2.size());
  for (auto _iter_r = this->field2.begin(); _iter_r != this->field2.end(); ++_iter_r) {
    xfer += prot_->writeI64((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeString(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BYTE, this->field4.size());
  for (auto _iter_rk_rv = this->field4.begin(); _iter_rk_rv != this->field4.end(); ++_iter_rk_rv) {
    xfer += prot_->writeString(_iter_rk_rv->first);
    xfer += prot_->writeByte(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->writeI16(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_MAP, this->field6.size());
  for (auto _iter_rk_rv_rk_rv = this->field6.begin(); _iter_rk_rv_rk_rv != this->field6.end(); ++_iter_rk_rv_rk_rv) {
    xfer += prot_->writeI16(_iter_rk_rv_rk_rv->first);
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_DOUBLE, apache::thrift::protocol::T_STRING, _iter_rk_rv_rk_rv->second.size());
    for (auto _iter_rk_rv = _iter_rk_rv_rk_rv->second.begin(); _iter_rk_rv != _iter_rk_rv_rk_rv->second.end(); ++_iter_rk_rv) {
      xfer += prot_->writeDouble(_iter_rk_rv->first);
      xfer += prot_->writeString(_iter_rk_rv->second);
    }
    xfer += prot_->writeMapEnd();
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_BYTE, this->field7.size());
  for (auto _iter_rk_rv = this->field7.begin(); _iter_rk_rv != this->field7.end(); ++_iter_rk_rv) {
    xfer += prot_->writeI32(_iter_rk_rv->first);
    xfer += prot_->writeByte(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_FLOAT, 8);
  xfer += prot_->writeFloat(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_I64, 9);
  xfer += prot_->writeI64(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_BOOL, this->field10.size());
  for (auto _iter_rk_rv = this->field10.begin(); _iter_rk_rv != this->field10.end(); ++_iter_rk_rv) {
    xfer += prot_->writeBool(_iter_rk_rv->first);
    xfer += prot_->writeBool(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_SET, 11);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_LIST, this->field11.size());
  for (auto _iter_r_r = this->field11.begin(); _iter_r_r != this->field11.end(); ++_iter_r_r) {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->writeString((*_iter_r));
    }
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_DOUBLE, 12);
  xfer += prot_->writeDouble(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_DOUBLE, 13);
  xfer += prot_->writeDouble(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_STRING, 14);
  xfer += prot_->writeBinary(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_I16, 15);
  xfer += prot_->writeI16(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_BOOL, 16);
  xfer += prot_->writeBool(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_BYTE, 17);
  xfer += prot_->writeByte(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_STRING, 18);
  xfer += prot_->writeString(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_DOUBLE, this->field19.size());
  for (auto _iter_r = this->field19.begin(); _iter_r != this->field19.end(); ++_iter_r) {
    xfer += prot_->writeDouble((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_BOOL, 20);
  xfer += prot_->writeBool(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_I64, 21);
  xfer += prot_->writeI64(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_SET, 22);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I16, this->field22.size());
  for (auto _iter_r = this->field22.begin(); _iter_r != this->field22.end(); ++_iter_r) {
    xfer += prot_->writeI16((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->writeString(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_STRING, 24);
  xfer += prot_->writeBinary(this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_MAP, 25);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_I32, this->field25.size());
  for (auto _iter_rk_rv = this->field25.begin(); _iter_rk_rv != this->field25.end(); ++_iter_rk_rv) {
    xfer += prot_->writeBool(_iter_rk_rv->first);
    xfer += prot_->writeI32(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->writeString(this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_SET, 27);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRING, this->field27.size());
  for (auto _iter_r = this->field27.begin(); _iter_r != this->field27.end(); ++_iter_r) {
    xfer += prot_->writeBinary((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_BOOL, 28);
  xfer += prot_->writeBool(this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_I32, 29);
  xfer += prot_->writeI32(this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_BOOL, 30);
  xfer += prot_->writeBool(this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_I32, 31);
  xfer += prot_->writeI32(this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_MAP, 32);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_DOUBLE, this->field32.size());
  for (auto _iter_rk_rv = this->field32.begin(); _iter_rk_rv != this->field32.end(); ++_iter_rk_rv) {
    xfer += prot_->writeBinary(_iter_rk_rv->first);
    xfer += prot_->writeDouble(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_BOOL, 33);
  xfer += prot_->writeBool(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_BOOL, 34);
  xfer += prot_->writeBool(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_LIST, 35);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_BYTE, this->field35.size());
  for (auto _iter_r = this->field35.begin(); _iter_r != this->field35.end(); ++_iter_r) {
    xfer += prot_->writeByte((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_I16, 36);
  xfer += prot_->writeI16(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_BOOL, 37);
  xfer += prot_->writeBool(this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_STRING, 38);
  xfer += prot_->writeBinary(this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_BOOL, 39);
  xfer += prot_->writeBool(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

template <class Protocol_>
uint32_t Struct1::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct0>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field3 = std::set<int32_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int32_t _elem;
              xfer += iprot->readI32(_elem);
              this->field3.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int32_t _elem;
              xfer += iprot->readI32(_elem);
              this->field3.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct1::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct1");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->serializedSizeFloat(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct0>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, this->field3.size());
  for (auto _iter_r = this->field3.begin(); _iter_r != this->field3.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_FLOAT, 4);
  xfer += prot_->serializedSizeFloat(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->serializedSizeFloat(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeString(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->serializedSizeFloat(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I16, 8);
  xfer += prot_->serializedSizeI16(this->field8);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct1::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct1");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->serializedSizeFloat(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct0>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, this->field3.size());
  for (auto _iter_r = this->field3.begin(); _iter_r != this->field3.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_FLOAT, 4);
  xfer += prot_->serializedSizeFloat(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->serializedSizeFloat(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeString(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->serializedSizeFloat(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I16, 8);
  xfer += prot_->serializedSizeI16(this->field8);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct1::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct1");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->writeFloat(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct0>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_SET, 3);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, this->field3.size());
  for (auto _iter_r = this->field3.begin(); _iter_r != this->field3.end(); ++_iter_r) {
    xfer += prot_->writeI32((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_FLOAT, 4);
  xfer += prot_->writeFloat(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->writeFloat(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->writeString(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->writeFloat(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_I16, 8);
  xfer += prot_->writeI16(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

template <class Protocol_>
uint32_t Struct2::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct0>::read(iprot, &this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct2::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct2");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct0>::serializedSize(prot_, &this->field3);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct2::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct2");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct0>::serializedSizeZC(prot_, &this->field3);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct2::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct2");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->writeI16(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct0>::write(prot_, &this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

template <class Protocol_>
uint32_t Struct3::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field1 = std::vector<std::string>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field1.resize(_i_r + 1);
              xfer += iprot->readString(this->field1[_i_r]);
            }
          }
          else {
            this->field1.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readString(this->field1[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field3 = std::vector<std::vector<bool>>();
          uint32_t _size_r_r;
          apache::thrift::protocol::TType _etype_r_r;
          xfer += iprot->readListBegin(_etype_r_r, _size_r_r);
          uint32_t _i_r_r;
          if (_size_r_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r_r = 0; iprot->peekList(); ++_i_r_r) {
              this->field3.resize(_i_r_r + 1);
              this->field3[_i_r_r] = std::vector<bool>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readListBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekList(); ++_i_r) {
                  this->field3[_i_r_r].resize(_i_r + 1);
                  xfer += iprot->readBool(this->field3[_i_r_r][_i_r]);
                }
              }
              else {
                this->field3[_i_r_r].resize(_size_r);
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  xfer += iprot->readBool(this->field3[_i_r_r][_i_r]);
                }
              }
              xfer += iprot->readListEnd();
            }
          }
          else {
            this->field3.resize(_size_r_r);
            for (_i_r_r = 0; _i_r_r < _size_r_r; ++_i_r_r) {
              this->field3[_i_r_r] = std::vector<bool>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readListBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekList(); ++_i_r) {
                  this->field3[_i_r_r].resize(_i_r + 1);
                  xfer += iprot->readBool(this->field3[_i_r_r][_i_r]);
                }
              }
              else {
                this->field3[_i_r_r].resize(_size_r);
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  xfer += iprot->readBool(this->field3[_i_r_r][_i_r]);
                }
              }
              xfer += iprot->readListEnd();
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field4 = std::vector<std::string>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field4.resize(_i_r + 1);
              xfer += iprot->readString(this->field4[_i_r]);
            }
          }
          else {
            this->field4.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readString(this->field4[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field6 = std::set<std::map<std::string, bool>>();
          uint32_t _size_r_rk_rv;
          apache::thrift::protocol::TType _etype_r_rk_rv;
          xfer += iprot->readSetBegin(_etype_r_rk_rv, _size_r_rk_rv);
          uint32_t _i_r_rk_rv;
          if (_size_r_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_r_rk_rv = 0; iprot->peekSet(); ++_i_r_rk_rv) {
              std::map<std::string, bool> _elem_rk_rv;
              _elem_rk_rv = std::map<std::string, bool>();
              uint32_t _size_rk_rv;
              apache::thrift::protocol::TType _ktype_rk_rv;
              apache::thrift::protocol::TType _vtype_rk_rv;
              xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
              uint32_t _i_rk_rv;
              if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
                for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
                  auto const _key_index_rk_rv = [&] {
                    std::string _key;
                    xfer += iprot->readString(_key);
                    return _key;
                  }
                  ();
                  bool& _val = _elem_rk_rv[std::move(_key_index_rk_rv)];
                  xfer += iprot->readBool(_val);
                }
              }
              else {
                auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
                  xfer += iprot->readString(_key);
                }
                ;
                auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
                  xfer += iprot->readBool(_val);
                }
                ;
                ::apache::thrift::deserialize_known_length_map(_elem_rk_rv, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
              }
              xfer += iprot->readMapEnd();
              this->field6.insert(std::move(_elem_rk_rv));
            }
          }
          else {
            for (_i_r_rk_rv = 0; _i_r_rk_rv < _size_r_rk_rv; ++_i_r_rk_rv) {
              std::map<std::string, bool> _elem_rk_rv;
              _elem_rk_rv = std::map<std::string, bool>();
              uint32_t _size_rk_rv;
              apache::thrift::protocol::TType _ktype_rk_rv;
              apache::thrift::protocol::TType _vtype_rk_rv;
              xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
              uint32_t _i_rk_rv;
              if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
                for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
                  auto const _key_index_rk_rv = [&] {
                    std::string _key;
                    xfer += iprot->readString(_key);
                    return _key;
                  }
                  ();
                  bool& _val = _elem_rk_rv[std::move(_key_index_rk_rv)];
                  xfer += iprot->readBool(_val);
                }
              }
              else {
                auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
                  xfer += iprot->readString(_key);
                }
                ;
                auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
                  xfer += iprot->readBool(_val);
                }
                ;
                ::apache::thrift::deserialize_known_length_map(_elem_rk_rv, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
              }
              xfer += iprot->readMapEnd();
              this->field6.insert(std::move(_elem_rk_rv));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::read(iprot, &this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field10 = std::vector<std::string>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field10.resize(_i_r + 1);
              xfer += iprot->readString(this->field10[_i_r]);
            }
          }
          else {
            this->field10.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readString(this->field10[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field11 = std::vector<std::string>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field11.resize(_i_r + 1);
              xfer += iprot->readBinary(this->field11[_i_r]);
            }
          }
          else {
            this->field11.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readBinary(this->field11[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field12 = std::vector<int16_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field12.resize(_i_r + 1);
              xfer += iprot->readI16(this->field12[_i_r]);
            }
          }
          else {
            this->field12.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readI16(this->field12[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field14 = std::set<int64_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int64_t _elem;
              xfer += iprot->readI64(_elem);
              this->field14.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int64_t _elem;
              xfer += iprot->readI64(_elem);
              this->field14.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field18 = std::vector<float>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field18.resize(_i_r + 1);
              xfer += iprot->readFloat(this->field18[_i_r]);
            }
          }
          else {
            this->field18.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readFloat(this->field18[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field19 = std::vector<std::string>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field19.resize(_i_r + 1);
              xfer += iprot->readBinary(this->field19[_i_r]);
            }
          }
          else {
            this->field19.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readBinary(this->field19[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field20 = std::set<int64_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int64_t _elem;
              xfer += iprot->readI64(_elem);
              this->field20.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int64_t _elem;
              xfer += iprot->readI64(_elem);
              this->field20.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field21 = std::set<std::set<bool>>();
          uint32_t _size_r_r;
          apache::thrift::protocol::TType _etype_r_r;
          xfer += iprot->readSetBegin(_etype_r_r, _size_r_r);
          uint32_t _i_r_r;
          if (_size_r_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r_r = 0; iprot->peekSet(); ++_i_r_r) {
              std::set<bool> _elem_r;
              _elem_r = std::set<bool>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readSetBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekSet(); ++_i_r) {
                  bool _elem;
                  xfer += iprot->readBool(_elem);
                  _elem_r.insert(std::move(_elem));
                }
              }
              else {
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  bool _elem;
                  xfer += iprot->readBool(_elem);
                  _elem_r.insert(std::move(_elem));
                }
              }
              xfer += iprot->readSetEnd();
              this->field21.insert(std::move(_elem_r));
            }
          }
          else {
            for (_i_r_r = 0; _i_r_r < _size_r_r; ++_i_r_r) {
              std::set<bool> _elem_r;
              _elem_r = std::set<bool>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readSetBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekSet(); ++_i_r) {
                  bool _elem;
                  xfer += iprot->readBool(_elem);
                  _elem_r.insert(std::move(_elem));
                }
              }
              else {
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  bool _elem;
                  xfer += iprot->readBool(_elem);
                  _elem_r.insert(std::move(_elem));
                }
              }
              xfer += iprot->readSetEnd();
              this->field21.insert(std::move(_elem_r));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct3::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct3");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->field1.size());
  for (auto _iter_r = this->field1.begin(); _iter_r != this->field1.end(); ++_iter_r) {
    xfer += prot_->serializedSizeString((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeBinary(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_LIST, this->field3.size());
  for (auto _iter_r_r = this->field3.begin(); _iter_r_r != this->field3.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_BOOL, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeBool((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->field4.size());
  for (auto _iter_r = this->field4.begin(); _iter_r != this->field4.end(); ++_iter_r) {
    xfer += prot_->serializedSizeString((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->serializedSizeDouble(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_MAP, this->field6.size());
  for (auto _iter_r_rk_rv = this->field6.begin(); _iter_r_rk_rv != this->field6.end(); ++_iter_r_rk_rv) {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BOOL, (*_iter_r_rk_rv).size());
    for (auto _iter_rk_rv = (*_iter_r_rk_rv).begin(); _iter_rk_rv != (*_iter_r_rk_rv).end(); ++_iter_rk_rv) {
      xfer += prot_->serializedSizeString(_iter_rk_rv->first);
      xfer += prot_->serializedSizeBool(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I64, 7);
  xfer += prot_->serializedSizeI64(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I64, 8);
  xfer += prot_->serializedSizeI64(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::serializedSize(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_LIST, 10);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->field10.size());
  for (auto _iter_r = this->field10.begin(); _iter_r != this->field10.end(); ++_iter_r) {
    xfer += prot_->serializedSizeString((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->field11.size());
  for (auto _iter_r = this->field11.begin(); _iter_r != this->field11.end(); ++_iter_r) {
    xfer += prot_->serializedSizeBinary((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I16, this->field12.size());
  for (auto _iter_r = this->field12.begin(); _iter_r != this->field12.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->serializedSizeString(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_SET, 14);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I64, this->field14.size());
  for (auto _iter_r = this->field14.begin(); _iter_r != this->field14.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_FLOAT, 15);
  xfer += prot_->serializedSizeFloat(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->serializedSizeI32(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->serializedSizeI32(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_LIST, 18);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_FLOAT, this->field18.size());
  for (auto _iter_r = this->field18.begin(); _iter_r != this->field18.end(); ++_iter_r) {
    xfer += prot_->serializedSizeFloat((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->field19.size());
  for (auto _iter_r = this->field19.begin(); _iter_r != this->field19.end(); ++_iter_r) {
    xfer += prot_->serializedSizeBinary((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_SET, 20);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I64, this->field20.size());
  for (auto _iter_r = this->field20.begin(); _iter_r != this->field20.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_SET, 21);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_SET, this->field21.size());
  for (auto _iter_r_r = this->field21.begin(); _iter_r_r != this->field21.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_BOOL, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeBool((*_iter_r));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct3::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct3");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->field1.size());
  for (auto _iter_r = this->field1.begin(); _iter_r != this->field1.end(); ++_iter_r) {
    xfer += prot_->serializedSizeString((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeZCBinary(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_LIST, this->field3.size());
  for (auto _iter_r_r = this->field3.begin(); _iter_r_r != this->field3.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_BOOL, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeBool((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->field4.size());
  for (auto _iter_r = this->field4.begin(); _iter_r != this->field4.end(); ++_iter_r) {
    xfer += prot_->serializedSizeString((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->serializedSizeDouble(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_MAP, this->field6.size());
  for (auto _iter_r_rk_rv = this->field6.begin(); _iter_r_rk_rv != this->field6.end(); ++_iter_r_rk_rv) {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BOOL, (*_iter_r_rk_rv).size());
    for (auto _iter_rk_rv = (*_iter_r_rk_rv).begin(); _iter_rk_rv != (*_iter_r_rk_rv).end(); ++_iter_rk_rv) {
      xfer += prot_->serializedSizeString(_iter_rk_rv->first);
      xfer += prot_->serializedSizeBool(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I64, 7);
  xfer += prot_->serializedSizeI64(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I64, 8);
  xfer += prot_->serializedSizeI64(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::serializedSizeZC(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_LIST, 10);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->field10.size());
  for (auto _iter_r = this->field10.begin(); _iter_r != this->field10.end(); ++_iter_r) {
    xfer += prot_->serializedSizeString((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->field11.size());
  for (auto _iter_r = this->field11.begin(); _iter_r != this->field11.end(); ++_iter_r) {
    xfer += prot_->serializedSizeZCBinary((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I16, this->field12.size());
  for (auto _iter_r = this->field12.begin(); _iter_r != this->field12.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->serializedSizeString(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_SET, 14);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I64, this->field14.size());
  for (auto _iter_r = this->field14.begin(); _iter_r != this->field14.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_FLOAT, 15);
  xfer += prot_->serializedSizeFloat(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->serializedSizeI32(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->serializedSizeI32(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_LIST, 18);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_FLOAT, this->field18.size());
  for (auto _iter_r = this->field18.begin(); _iter_r != this->field18.end(); ++_iter_r) {
    xfer += prot_->serializedSizeFloat((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->field19.size());
  for (auto _iter_r = this->field19.begin(); _iter_r != this->field19.end(); ++_iter_r) {
    xfer += prot_->serializedSizeZCBinary((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_SET, 20);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I64, this->field20.size());
  for (auto _iter_r = this->field20.begin(); _iter_r != this->field20.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_SET, 21);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_SET, this->field21.size());
  for (auto _iter_r_r = this->field21.begin(); _iter_r_r != this->field21.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_BOOL, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeBool((*_iter_r));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct3::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct3");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, this->field1.size());
  for (auto _iter_r = this->field1.begin(); _iter_r != this->field1.end(); ++_iter_r) {
    xfer += prot_->writeString((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeBinary(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_LIST, this->field3.size());
  for (auto _iter_r_r = this->field3.begin(); _iter_r_r != this->field3.end(); ++_iter_r_r) {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_BOOL, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->writeBool((*_iter_r));
    }
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, this->field4.size());
  for (auto _iter_r = this->field4.begin(); _iter_r != this->field4.end(); ++_iter_r) {
    xfer += prot_->writeString((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->writeDouble(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_SET, 6);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_MAP, this->field6.size());
  for (auto _iter_r_rk_rv = this->field6.begin(); _iter_r_rk_rv != this->field6.end(); ++_iter_r_rk_rv) {
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BOOL, (*_iter_r_rk_rv).size());
    for (auto _iter_rk_rv = (*_iter_r_rk_rv).begin(); _iter_rk_rv != (*_iter_r_rk_rv).end(); ++_iter_rk_rv) {
      xfer += prot_->writeString(_iter_rk_rv->first);
      xfer += prot_->writeBool(_iter_rk_rv->second);
    }
    xfer += prot_->writeMapEnd();
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_I64, 7);
  xfer += prot_->writeI64(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_I64, 8);
  xfer += prot_->writeI64(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::write(prot_, &this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_LIST, 10);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, this->field10.size());
  for (auto _iter_r = this->field10.begin(); _iter_r != this->field10.end(); ++_iter_r) {
    xfer += prot_->writeString((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, this->field11.size());
  for (auto _iter_r = this->field11.begin(); _iter_r != this->field11.end(); ++_iter_r) {
    xfer += prot_->writeBinary((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I16, this->field12.size());
  for (auto _iter_r = this->field12.begin(); _iter_r != this->field12.end(); ++_iter_r) {
    xfer += prot_->writeI16((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->writeString(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_SET, 14);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I64, this->field14.size());
  for (auto _iter_r = this->field14.begin(); _iter_r != this->field14.end(); ++_iter_r) {
    xfer += prot_->writeI64((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_FLOAT, 15);
  xfer += prot_->writeFloat(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->writeI32(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->writeI32(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_LIST, 18);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_FLOAT, this->field18.size());
  for (auto _iter_r = this->field18.begin(); _iter_r != this->field18.end(); ++_iter_r) {
    xfer += prot_->writeFloat((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, this->field19.size());
  for (auto _iter_r = this->field19.begin(); _iter_r != this->field19.end(); ++_iter_r) {
    xfer += prot_->writeBinary((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_SET, 20);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I64, this->field20.size());
  for (auto _iter_r = this->field20.begin(); _iter_r != this->field20.end(); ++_iter_r) {
    xfer += prot_->writeI64((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_SET, 21);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_SET, this->field21.size());
  for (auto _iter_r_r = this->field21.begin(); _iter_r_r != this->field21.end(); ++_iter_r_r) {
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_BOOL, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->writeBool((*_iter_r));
    }
    xfer += prot_->writeSetEnd();
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

template <class Protocol_>
uint32_t Struct4::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<int16_t, int16_t>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                int16_t _key;
                xfer += iprot->readI16(_key);
                return _key;
              }
              ();
              int16_t& _val = this->field1[std::move(_key_index_rk_rv)];
              xfer += iprot->readI16(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readI16(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readI16(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field1, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct4::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct4");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_I16, this->field1.size());
  for (auto _iter_rk_rv = this->field1.begin(); _iter_rk_rv != this->field1.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI16(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI16(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct4::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct4");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_I16, this->field1.size());
  for (auto _iter_rk_rv = this->field1.begin(); _iter_rk_rv != this->field1.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI16(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI16(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct4::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct4");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_I16, this->field1.size());
  for (auto _iter_rk_rv = this->field1.begin(); _iter_rk_rv != this->field1.end(); ++_iter_rk_rv) {
    xfer += prot_->writeI16(_iter_rk_rv->first);
    xfer += prot_->writeI16(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

template <class Protocol_>
uint32_t Struct5::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::read(iprot, &this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct5::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct5");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::serializedSize(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BYTE, 2);
  xfer += prot_->serializedSizeByte(this->field2);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct5::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct5");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::serializedSizeZC(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BYTE, 2);
  xfer += prot_->serializedSizeByte(this->field2);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct5::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct5");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::write(prot_, &this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_BYTE, 2);
  xfer += prot_->writeByte(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

template <class Protocol_>
uint32_t Struct6::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct4>::read(iprot, &this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field5 = std::set<std::vector<bool>>();
          uint32_t _size_r_r;
          apache::thrift::protocol::TType _etype_r_r;
          xfer += iprot->readSetBegin(_etype_r_r, _size_r_r);
          uint32_t _i_r_r;
          if (_size_r_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r_r = 0; iprot->peekSet(); ++_i_r_r) {
              std::vector<bool> _elem_r;
              _elem_r = std::vector<bool>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readListBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekList(); ++_i_r) {
                  _elem_r.resize(_i_r + 1);
                  xfer += iprot->readBool(_elem_r[_i_r]);
                }
              }
              else {
                _elem_r.resize(_size_r);
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  xfer += iprot->readBool(_elem_r[_i_r]);
                }
              }
              xfer += iprot->readListEnd();
              this->field5.insert(std::move(_elem_r));
            }
          }
          else {
            for (_i_r_r = 0; _i_r_r < _size_r_r; ++_i_r_r) {
              std::vector<bool> _elem_r;
              _elem_r = std::vector<bool>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readListBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekList(); ++_i_r) {
                  _elem_r.resize(_i_r + 1);
                  xfer += iprot->readBool(_elem_r[_i_r]);
                }
              }
              else {
                _elem_r.resize(_size_r);
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  xfer += iprot->readBool(_elem_r[_i_r]);
                }
              }
              xfer += iprot->readListEnd();
              this->field5.insert(std::move(_elem_r));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field7 = std::vector<int16_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field7.resize(_i_r + 1);
              xfer += iprot->readI16(this->field7[_i_r]);
            }
          }
          else {
            this->field7.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readI16(this->field7[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct6::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct6");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct4>::serializedSize(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->serializedSizeByte(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->serializedSizeI16(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_LIST, this->field5.size());
  for (auto _iter_r_r = this->field5.begin(); _iter_r_r != this->field5.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_BOOL, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeBool((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->serializedSizeI16(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I16, this->field7.size());
  for (auto _iter_r = this->field7.begin(); _iter_r != this->field7.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct6::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct6");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct4>::serializedSizeZC(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->serializedSizeByte(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->serializedSizeI16(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_LIST, this->field5.size());
  for (auto _iter_r_r = this->field5.begin(); _iter_r_r != this->field5.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_BOOL, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeBool((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->serializedSizeI16(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I16, this->field7.size());
  for (auto _iter_r = this->field7.begin(); _iter_r != this->field7.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct6::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct6");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct4>::write(prot_, &this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->writeByte(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->writeI16(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_SET, 5);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_LIST, this->field5.size());
  for (auto _iter_r_r = this->field5.begin(); _iter_r_r != this->field5.end(); ++_iter_r_r) {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_BOOL, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->writeBool((*_iter_r));
    }
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->writeI16(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I16, this->field7.size());
  for (auto _iter_r = this->field7.begin(); _iter_r != this->field7.end(); ++_iter_r) {
    xfer += prot_->writeI16((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

template <class Protocol_>
uint32_t Struct7::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct5>::read(iprot, &this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct6>::read(iprot, &this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct7::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct7");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct5>::serializedSize(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct6>::serializedSize(prot_, &this->field4);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct7::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct7");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct5>::serializedSizeZC(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct6>::serializedSizeZC(prot_, &this->field4);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct7::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct7");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct5>::write(prot_, &this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct6>::write(prot_, &this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

template <class Protocol_>
uint32_t Struct8::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<int8_t, bool>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                int8_t _key;
                xfer += iprot->readByte(_key);
                return _key;
              }
              ();
              bool& _val = this->field1[std::move(_key_index_rk_rv)];
              xfer += iprot->readBool(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readByte(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readBool(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field1, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field2 = std::set<std::string>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              std::string _elem;
              xfer += iprot->readBinary(_elem);
              this->field2.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              std::string _elem;
              xfer += iprot->readBinary(_elem);
              this->field2.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct3>::read(iprot, &this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field5 = std::vector< ::example::thrift27::Struct1>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field5.resize(_i_r + 1);
              xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::read(iprot, &this->field5[_i_r]);
            }
          }
          else {
            this->field5.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::read(iprot, &this->field5[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct8::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct8");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_BOOL, this->field1.size());
  for (auto _iter_rk_rv = this->field1.begin(); _iter_rk_rv != this->field1.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeByte(_iter_rk_rv->first);
    xfer += prot_->serializedSizeBool(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, this->field2.size());
  for (auto _iter_r = this->field2.begin(); _iter_r != this->field2.end(); ++_iter_r) {
    xfer += prot_->serializedSizeBinary((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->serializedSizeByte(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct3>::serializedSize(prot_, &this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->field5.size());
  for (auto _iter_r = this->field5.begin(); _iter_r != this->field5.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::serializedSize(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct8::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct8");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_BOOL, this->field1.size());
  for (auto _iter_rk_rv = this->field1.begin(); _iter_rk_rv != this->field1.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeByte(_iter_rk_rv->first);
    xfer += prot_->serializedSizeBool(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, this->field2.size());
  for (auto _iter_r = this->field2.begin(); _iter_r != this->field2.end(); ++_iter_r) {
    xfer += prot_->serializedSizeZCBinary((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->serializedSizeByte(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct3>::serializedSizeZC(prot_, &this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->field5.size());
  for (auto _iter_r = this->field5.begin(); _iter_r != this->field5.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::serializedSizeZC(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct8::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct8");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_BOOL, this->field1.size());
  for (auto _iter_rk_rv = this->field1.begin(); _iter_rk_rv != this->field1.end(); ++_iter_rk_rv) {
    xfer += prot_->writeByte(_iter_rk_rv->first);
    xfer += prot_->writeBool(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_SET, 2);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRING, this->field2.size());
  for (auto _iter_r = this->field2.begin(); _iter_r != this->field2.end(); ++_iter_r) {
    xfer += prot_->writeBinary((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->writeByte(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct3>::write(prot_, &this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRUCT, this->field5.size());
  for (auto _iter_r = this->field5.begin(); _iter_r != this->field5.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::write(prot_, &(*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->writeI32(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->writeByte(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

template <class Protocol_>
uint32_t Struct9::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field3 = std::vector<int16_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field3.resize(_i_r + 1);
              xfer += iprot->readI16(this->field3[_i_r]);
            }
          }
          else {
            this->field3.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readI16(this->field3[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field4 = std::vector<int8_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field4.resize(_i_r + 1);
              xfer += iprot->readByte(this->field4[_i_r]);
            }
          }
          else {
            this->field4.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readByte(this->field4[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct9::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct9");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I16, this->field3.size());
  for (auto _iter_r = this->field3.begin(); _iter_r != this->field3.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_BYTE, this->field4.size());
  for (auto _iter_r = this->field4.begin(); _iter_r != this->field4.end(); ++_iter_r) {
    xfer += prot_->serializedSizeByte((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct9::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct9");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I16, this->field3.size());
  for (auto _iter_r = this->field3.begin(); _iter_r != this->field3.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_BYTE, this->field4.size());
  for (auto _iter_r = this->field4.begin(); _iter_r != this->field4.end(); ++_iter_r) {
    xfer += prot_->serializedSizeByte((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct9::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct9");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->writeDouble(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I16, this->field3.size());
  for (auto _iter_r = this->field3.begin(); _iter_r != this->field3.end(); ++_iter_r) {
    xfer += prot_->writeI16((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_BYTE, this->field4.size());
  for (auto _iter_r = this->field4.begin(); _iter_r != this->field4.end(); ++_iter_r) {
    xfer += prot_->writeByte((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

template <class Protocol_>
uint32_t Struct10::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field1 = std::set<float>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              float _elem;
              xfer += iprot->readFloat(_elem);
              this->field1.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              float _elem;
              xfer += iprot->readFloat(_elem);
              this->field1.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct5>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct8>::read(iprot, &this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field7 = std::map<std::map<std::string, double>, int64_t>();
          uint32_t _size_rk_rk_rv_rv;
          apache::thrift::protocol::TType _ktype_rk_rk_rv_rv;
          apache::thrift::protocol::TType _vtype_rk_rk_rv_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rk_rv_rv, _vtype_rk_rk_rv_rv, _size_rk_rk_rv_rv);
          uint32_t _i_rk_rk_rv_rv;
          if (_size_rk_rk_rv_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rk_rv_rv = 0; iprot->peekMap(); ++_i_rk_rk_rv_rv) {
              auto const _key_index_rk_rk_rv_rv = [&] {
                std::map<std::string, double> _key_rk_rv;
                _key_rk_rv = std::map<std::string, double>();
                uint32_t _size_rk_rv;
                apache::thrift::protocol::TType _ktype_rk_rv;
                apache::thrift::protocol::TType _vtype_rk_rv;
                xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
                uint32_t _i_rk_rv;
                if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
                  for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
                    auto const _key_index_rk_rv = [&] {
                      std::string _key;
                      xfer += iprot->readString(_key);
                      return _key;
                    }
                    ();
                    double& _val = _key_rk_rv[std::move(_key_index_rk_rv)];
                    xfer += iprot->readDouble(_val);
                  }
                }
                else {
                  auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
                    xfer += iprot->readString(_key);
                  }
                  ;
                  auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
                    xfer += iprot->readDouble(_val);
                  }
                  ;
                  ::apache::thrift::deserialize_known_length_map(_key_rk_rv, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
                }
                xfer += iprot->readMapEnd();
                return _key_rk_rv;
              }
              ();
              int64_t& _val = this->field7[std::move(_key_index_rk_rk_rv_rv)];
              xfer += iprot->readI64(_val);
            }
          }
          else {
            auto const _kreader_rk_rk_rv_rv = [&xfer, &iprot](auto& _key_rk_rv) {
              _key_rk_rv = std::map<std::string, double>();
              uint32_t _size_rk_rv;
              apache::thrift::protocol::TType _ktype_rk_rv;
              apache::thrift::protocol::TType _vtype_rk_rv;
              xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
              uint32_t _i_rk_rv;
              if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
                for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
                  auto const _key_index_rk_rv = [&] {
                    std::string _key;
                    xfer += iprot->readString(_key);
                    return _key;
                  }
                  ();
                  double& _val = _key_rk_rv[std::move(_key_index_rk_rv)];
                  xfer += iprot->readDouble(_val);
                }
              }
              else {
                auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
                  xfer += iprot->readString(_key);
                }
                ;
                auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
                  xfer += iprot->readDouble(_val);
                }
                ;
                ::apache::thrift::deserialize_known_length_map(_key_rk_rv, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
              }
              xfer += iprot->readMapEnd();
            }
            ;
            auto const _vreader_rk_rk_rv_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readI64(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field7, _size_rk_rk_rv_rv, _kreader_rk_rk_rv_rv, _vreader_rk_rk_rv_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field8 = std::vector<float>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field8.resize(_i_r + 1);
              xfer += iprot->readFloat(this->field8[_i_r]);
            }
          }
          else {
            this->field8.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readFloat(this->field8[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field10 = std::map<bool, int8_t>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                bool _key;
                xfer += iprot->readBool(_key);
                return _key;
              }
              ();
              int8_t& _val = this->field10[std::move(_key_index_rk_rv)];
              xfer += iprot->readByte(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readBool(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readByte(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field10, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field12 = std::set<bool>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              bool _elem;
              xfer += iprot->readBool(_elem);
              this->field12.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              bool _elem;
              xfer += iprot->readBool(_elem);
              this->field12.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field13 = std::vector<std::map< ::example::thrift27::Struct2, int32_t>>();
          uint32_t _size_r_rk_rv;
          apache::thrift::protocol::TType _etype_r_rk_rv;
          xfer += iprot->readListBegin(_etype_r_rk_rv, _size_r_rk_rv);
          uint32_t _i_r_rk_rv;
          if (_size_r_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_r_rk_rv = 0; iprot->peekList(); ++_i_r_rk_rv) {
              this->field13.resize(_i_r_rk_rv + 1);
              this->field13[_i_r_rk_rv] = std::map< ::example::thrift27::Struct2, int32_t>();
              uint32_t _size_rk_rv;
              apache::thrift::protocol::TType _ktype_rk_rv;
              apache::thrift::protocol::TType _vtype_rk_rv;
              xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
              uint32_t _i_rk_rv;
              if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
                for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
                  auto const _key_index_rk_rv = [&] {
                     ::example::thrift27::Struct2 _key;
                    xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct2>::read(iprot, &_key);
                    return _key;
                  }
                  ();
                  int32_t& _val = this->field13[_i_r_rk_rv][std::move(_key_index_rk_rv)];
                  xfer += iprot->readI32(_val);
                }
              }
              else {
                auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
                  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct2>::read(iprot, &_key);
                }
                ;
                auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
                  xfer += iprot->readI32(_val);
                }
                ;
                ::apache::thrift::deserialize_known_length_map(this->field13[_i_r_rk_rv], _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
              }
              xfer += iprot->readMapEnd();
            }
          }
          else {
            this->field13.resize(_size_r_rk_rv);
            for (_i_r_rk_rv = 0; _i_r_rk_rv < _size_r_rk_rv; ++_i_r_rk_rv) {
              this->field13[_i_r_rk_rv] = std::map< ::example::thrift27::Struct2, int32_t>();
              uint32_t _size_rk_rv;
              apache::thrift::protocol::TType _ktype_rk_rv;
              apache::thrift::protocol::TType _vtype_rk_rv;
              xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
              uint32_t _i_rk_rv;
              if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
                for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
                  auto const _key_index_rk_rv = [&] {
                     ::example::thrift27::Struct2 _key;
                    xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct2>::read(iprot, &_key);
                    return _key;
                  }
                  ();
                  int32_t& _val = this->field13[_i_r_rk_rv][std::move(_key_index_rk_rv)];
                  xfer += iprot->readI32(_val);
                }
              }
              else {
                auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
                  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct2>::read(iprot, &_key);
                }
                ;
                auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
                  xfer += iprot->readI32(_val);
                }
                ;
                ::apache::thrift::deserialize_known_length_map(this->field13[_i_r_rk_rv], _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
              }
              xfer += iprot->readMapEnd();
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field14 = std::vector<std::string>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field14.resize(_i_r + 1);
              xfer += iprot->readBinary(this->field14[_i_r]);
            }
          }
          else {
            this->field14.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readBinary(this->field14[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field15 = std::map<int64_t, std::string>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                int64_t _key;
                xfer += iprot->readI64(_key);
                return _key;
              }
              ();
              std::string& _val = this->field15[std::move(_key_index_rk_rv)];
              xfer += iprot->readString(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readI64(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readString(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field15, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field17 = std::set<double>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              double _elem;
              xfer += iprot->readDouble(_elem);
              this->field17.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              double _elem;
              xfer += iprot->readDouble(_elem);
              this->field17.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field19 = std::set< ::example::thrift27::Struct2>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
               ::example::thrift27::Struct2 _elem;
              xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct2>::read(iprot, &_elem);
              this->field19.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
               ::example::thrift27::Struct2 _elem;
              xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct2>::read(iprot, &_elem);
              this->field19.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field23 = std::map<std::map<float, float>, int32_t>();
          uint32_t _size_rk_rk_rv_rv;
          apache::thrift::protocol::TType _ktype_rk_rk_rv_rv;
          apache::thrift::protocol::TType _vtype_rk_rk_rv_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rk_rv_rv, _vtype_rk_rk_rv_rv, _size_rk_rk_rv_rv);
          uint32_t _i_rk_rk_rv_rv;
          if (_size_rk_rk_rv_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rk_rv_rv = 0; iprot->peekMap(); ++_i_rk_rk_rv_rv) {
              auto const _key_index_rk_rk_rv_rv = [&] {
                std::map<float, float> _key_rk_rv;
                _key_rk_rv = std::map<float, float>();
                uint32_t _size_rk_rv;
                apache::thrift::protocol::TType _ktype_rk_rv;
                apache::thrift::protocol::TType _vtype_rk_rv;
                xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
                uint32_t _i_rk_rv;
                if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
                  for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
                    auto const _key_index_rk_rv = [&] {
                      float _key;
                      xfer += iprot->readFloat(_key);
                      return _key;
                    }
                    ();
                    float& _val = _key_rk_rv[std::move(_key_index_rk_rv)];
                    xfer += iprot->readFloat(_val);
                  }
                }
                else {
                  auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
                    xfer += iprot->readFloat(_key);
                  }
                  ;
                  auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
                    xfer += iprot->readFloat(_val);
                  }
                  ;
                  ::apache::thrift::deserialize_known_length_map(_key_rk_rv, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
                }
                xfer += iprot->readMapEnd();
                return _key_rk_rv;
              }
              ();
              int32_t& _val = this->field23[std::move(_key_index_rk_rk_rv_rv)];
              xfer += iprot->readI32(_val);
            }
          }
          else {
            auto const _kreader_rk_rk_rv_rv = [&xfer, &iprot](auto& _key_rk_rv) {
              _key_rk_rv = std::map<float, float>();
              uint32_t _size_rk_rv;
              apache::thrift::protocol::TType _ktype_rk_rv;
              apache::thrift::protocol::TType _vtype_rk_rv;
              xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
              uint32_t _i_rk_rv;
              if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
                for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
                  auto const _key_index_rk_rv = [&] {
                    float _key;
                    xfer += iprot->readFloat(_key);
                    return _key;
                  }
                  ();
                  float& _val = _key_rk_rv[std::move(_key_index_rk_rv)];
                  xfer += iprot->readFloat(_val);
                }
              }
              else {
                auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
                  xfer += iprot->readFloat(_key);
                }
                ;
                auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
                  xfer += iprot->readFloat(_val);
                }
                ;
                ::apache::thrift::deserialize_known_length_map(_key_rk_rv, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
              }
              xfer += iprot->readMapEnd();
            }
            ;
            auto const _vreader_rk_rk_rv_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readI32(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field23, _size_rk_rk_rv_rv, _kreader_rk_rk_rv_rv, _vreader_rk_rk_rv_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::read(iprot, &this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct5>::read(iprot, &this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field28 = std::set<int8_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int8_t _elem;
              xfer += iprot->readByte(_elem);
              this->field28.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int8_t _elem;
              xfer += iprot->readByte(_elem);
              this->field28.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field29 = std::vector<int16_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->field29.resize(_i_r + 1);
              xfer += iprot->readI16(this->field29[_i_r]);
            }
          }
          else {
            this->field29.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readI16(this->field29[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field30 = std::vector<std::set<std::string>>();
          uint32_t _size_r_r;
          apache::thrift::protocol::TType _etype_r_r;
          xfer += iprot->readListBegin(_etype_r_r, _size_r_r);
          uint32_t _i_r_r;
          if (_size_r_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r_r = 0; iprot->peekList(); ++_i_r_r) {
              this->field30.resize(_i_r_r + 1);
              this->field30[_i_r_r] = std::set<std::string>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readSetBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekSet(); ++_i_r) {
                  std::string _elem;
                  xfer += iprot->readString(_elem);
                  this->field30[_i_r_r].insert(std::move(_elem));
                }
              }
              else {
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  std::string _elem;
                  xfer += iprot->readString(_elem);
                  this->field30[_i_r_r].insert(std::move(_elem));
                }
              }
              xfer += iprot->readSetEnd();
            }
          }
          else {
            this->field30.resize(_size_r_r);
            for (_i_r_r = 0; _i_r_r < _size_r_r; ++_i_r_r) {
              this->field30[_i_r_r] = std::set<std::string>();
              uint32_t _size_r;
              apache::thrift::protocol::TType _etype_r;
              xfer += iprot->readSetBegin(_etype_r, _size_r);
              uint32_t _i_r;
              if (_size_r == std::numeric_limits<uint32_t>::max()) {
                for (_i_r = 0; iprot->peekSet(); ++_i_r) {
                  std::string _elem;
                  xfer += iprot->readString(_elem);
                  this->field30[_i_r_r].insert(std::move(_elem));
                }
              }
              else {
                for (_i_r = 0; _i_r < _size_r; ++_i_r) {
                  std::string _elem;
                  xfer += iprot->readString(_elem);
                  this->field30[_i_r_r].insert(std::move(_elem));
                }
              }
              xfer += iprot->readSetEnd();
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field31 = std::set<float>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              float _elem;
              xfer += iprot->readFloat(_elem);
              this->field31.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              float _elem;
              xfer += iprot->readFloat(_elem);
              this->field31.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field35 = std::map<int8_t, float>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                int8_t _key;
                xfer += iprot->readByte(_key);
                return _key;
              }
              ();
              float& _val = this->field35[std::move(_key_index_rk_rv)];
              xfer += iprot->readFloat(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readByte(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readFloat(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field35, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field36 = std::set<std::string>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              std::string _elem;
              xfer += iprot->readBinary(_elem);
              this->field36.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              std::string _elem;
              xfer += iprot->readBinary(_elem);
              this->field36.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct10::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct10");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_FLOAT, this->field1.size());
  for (auto _iter_r = this->field1.begin(); _iter_r != this->field1.end(); ++_iter_r) {
    xfer += prot_->serializedSizeFloat((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct5>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct8>::serializedSize(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeString(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_MAP, apache::thrift::protocol::T_I64, this->field7.size());
  for (auto _iter_rk_rk_rv_rv = this->field7.begin(); _iter_rk_rk_rv_rv != this->field7.end(); ++_iter_rk_rk_rv_rv) {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_DOUBLE, _iter_rk_rk_rv_rv->first.size());
    for (auto _iter_rk_rv = _iter_rk_rk_rv_rv->first.begin(); _iter_rk_rv != _iter_rk_rk_rv_rv->first.end(); ++_iter_rk_rv) {
      xfer += prot_->serializedSizeString(_iter_rk_rv->first);
      xfer += prot_->serializedSizeDouble(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
    xfer += prot_->serializedSizeI64(_iter_rk_rk_rv_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_FLOAT, this->field8.size());
  for (auto _iter_r = this->field8.begin(); _iter_r != this->field8.end(); ++_iter_r) {
    xfer += prot_->serializedSizeFloat((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->serializedSizeString(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_BYTE, this->field10.size());
  for (auto _iter_rk_rv = this->field10.begin(); _iter_rk_rv != this->field10.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeBool(_iter_rk_rv->first);
    xfer += prot_->serializedSizeByte(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_BOOL, 11);
  xfer += prot_->serializedSizeBool(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_SET, 12);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_BOOL, this->field12.size());
  for (auto _iter_r = this->field12.begin(); _iter_r != this->field12.end(); ++_iter_r) {
    xfer += prot_->serializedSizeBool((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_MAP, this->field13.size());
  for (auto _iter_r_rk_rv = this->field13.begin(); _iter_r_rk_rv != this->field13.end(); ++_iter_r_rk_rv) {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_I32, (*_iter_r_rk_rv).size());
    for (auto _iter_rk_rv = (*_iter_r_rk_rv).begin(); _iter_rk_rv != (*_iter_r_rk_rv).end(); ++_iter_rk_rv) {
      xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct2>::serializedSize(prot_, &_iter_rk_rv->first);
      xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->field14.size());
  for (auto _iter_r = this->field14.begin(); _iter_r != this->field14.end(); ++_iter_r) {
    xfer += prot_->serializedSizeBinary((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I64, apache::thrift::protocol::T_STRING, this->field15.size());
  for (auto _iter_rk_rv = this->field15.begin(); _iter_rk_rv != this->field15.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI64(_iter_rk_rv->first);
    xfer += prot_->serializedSizeString(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->serializedSizeString(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_SET, 17);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_DOUBLE, this->field17.size());
  for (auto _iter_r = this->field17.begin(); _iter_r != this->field17.end(); ++_iter_r) {
    xfer += prot_->serializedSizeDouble((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I64, 18);
  xfer += prot_->serializedSizeI64(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_SET, 19);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, this->field19.size());
  for (auto _iter_r = this->field19.begin(); _iter_r != this->field19.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct2>::serializedSize(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_I32, 20);
  xfer += prot_->serializedSizeI32(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I64, 21);
  xfer += prot_->serializedSizeI64(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_FLOAT, 22);
  xfer += prot_->serializedSizeFloat(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_MAP, 23);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_MAP, apache::thrift::protocol::T_I32, this->field23.size());
  for (auto _iter_rk_rk_rv_rv = this->field23.begin(); _iter_rk_rk_rv_rv != this->field23.end(); ++_iter_rk_rk_rv_rv) {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_FLOAT, apache::thrift::protocol::T_FLOAT, _iter_rk_rk_rv_rv->first.size());
    for (auto _iter_rk_rv = _iter_rk_rk_rv_rv->first.begin(); _iter_rk_rv != _iter_rk_rk_rv_rv->first.end(); ++_iter_rk_rv) {
      xfer += prot_->serializedSizeFloat(_iter_rk_rv->first);
      xfer += prot_->serializedSizeFloat(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
    xfer += prot_->serializedSizeI32(_iter_rk_rk_rv_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::serializedSize(prot_, &this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct5>::serializedSize(prot_, &this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->serializedSizeString(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_I64, 27);
  xfer += prot_->serializedSizeI64(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_SET, 28);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_BYTE, this->field28.size());
  for (auto _iter_r = this->field28.begin(); _iter_r != this->field28.end(); ++_iter_r) {
    xfer += prot_->serializedSizeByte((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I16, this->field29.size());
  for (auto _iter_r = this->field29.begin(); _iter_r != this->field29.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_LIST, 30);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_SET, this->field30.size());
  for (auto _iter_r_r = this->field30.begin(); _iter_r_r != this->field30.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeString((*_iter_r));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_SET, 31);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_FLOAT, this->field31.size());
  for (auto _iter_r = this->field31.begin(); _iter_r != this->field31.end(); ++_iter_r) {
    xfer += prot_->serializedSizeFloat((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_STRING, 32);
  xfer += prot_->serializedSizeString(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_STRING, 33);
  xfer += prot_->serializedSizeBinary(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_BOOL, 34);
  xfer += prot_->serializedSizeBool(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_MAP, 35);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_FLOAT, this->field35.size());
  for (auto _iter_rk_rv = this->field35.begin(); _iter_rk_rv != this->field35.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeByte(_iter_rk_rv->first);
    xfer += prot_->serializedSizeFloat(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_SET, 36);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, this->field36.size());
  for (auto _iter_r = this->field36.begin(); _iter_r != this->field36.end(); ++_iter_r) {
    xfer += prot_->serializedSizeBinary((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct10::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct10");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_FLOAT, this->field1.size());
  for (auto _iter_r = this->field1.begin(); _iter_r != this->field1.end(); ++_iter_r) {
    xfer += prot_->serializedSizeFloat((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct5>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct8>::serializedSizeZC(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeZCBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeString(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_MAP, apache::thrift::protocol::T_I64, this->field7.size());
  for (auto _iter_rk_rk_rv_rv = this->field7.begin(); _iter_rk_rk_rv_rv != this->field7.end(); ++_iter_rk_rk_rv_rv) {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_DOUBLE, _iter_rk_rk_rv_rv->first.size());
    for (auto _iter_rk_rv = _iter_rk_rk_rv_rv->first.begin(); _iter_rk_rv != _iter_rk_rk_rv_rv->first.end(); ++_iter_rk_rv) {
      xfer += prot_->serializedSizeString(_iter_rk_rv->first);
      xfer += prot_->serializedSizeDouble(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
    xfer += prot_->serializedSizeI64(_iter_rk_rk_rv_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_FLOAT, this->field8.size());
  for (auto _iter_r = this->field8.begin(); _iter_r != this->field8.end(); ++_iter_r) {
    xfer += prot_->serializedSizeFloat((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->serializedSizeString(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_BYTE, this->field10.size());
  for (auto _iter_rk_rv = this->field10.begin(); _iter_rk_rv != this->field10.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeBool(_iter_rk_rv->first);
    xfer += prot_->serializedSizeByte(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_BOOL, 11);
  xfer += prot_->serializedSizeBool(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_SET, 12);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_BOOL, this->field12.size());
  for (auto _iter_r = this->field12.begin(); _iter_r != this->field12.end(); ++_iter_r) {
    xfer += prot_->serializedSizeBool((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_MAP, this->field13.size());
  for (auto _iter_r_rk_rv = this->field13.begin(); _iter_r_rk_rv != this->field13.end(); ++_iter_r_rk_rv) {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_I32, (*_iter_r_rk_rv).size());
    for (auto _iter_rk_rv = (*_iter_r_rk_rv).begin(); _iter_rk_rv != (*_iter_r_rk_rv).end(); ++_iter_rk_rv) {
      xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct2>::serializedSizeZC(prot_, &_iter_rk_rv->first);
      xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->field14.size());
  for (auto _iter_r = this->field14.begin(); _iter_r != this->field14.end(); ++_iter_r) {
    xfer += prot_->serializedSizeZCBinary((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I64, apache::thrift::protocol::T_STRING, this->field15.size());
  for (auto _iter_rk_rv = this->field15.begin(); _iter_rk_rv != this->field15.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI64(_iter_rk_rv->first);
    xfer += prot_->serializedSizeString(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->serializedSizeString(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_SET, 17);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_DOUBLE, this->field17.size());
  for (auto _iter_r = this->field17.begin(); _iter_r != this->field17.end(); ++_iter_r) {
    xfer += prot_->serializedSizeDouble((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I64, 18);
  xfer += prot_->serializedSizeI64(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_SET, 19);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, this->field19.size());
  for (auto _iter_r = this->field19.begin(); _iter_r != this->field19.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct2>::serializedSizeZC(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_I32, 20);
  xfer += prot_->serializedSizeI32(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I64, 21);
  xfer += prot_->serializedSizeI64(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_FLOAT, 22);
  xfer += prot_->serializedSizeFloat(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_MAP, 23);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_MAP, apache::thrift::protocol::T_I32, this->field23.size());
  for (auto _iter_rk_rk_rv_rv = this->field23.begin(); _iter_rk_rk_rv_rv != this->field23.end(); ++_iter_rk_rk_rv_rv) {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_FLOAT, apache::thrift::protocol::T_FLOAT, _iter_rk_rk_rv_rv->first.size());
    for (auto _iter_rk_rv = _iter_rk_rk_rv_rv->first.begin(); _iter_rk_rv != _iter_rk_rk_rv_rv->first.end(); ++_iter_rk_rv) {
      xfer += prot_->serializedSizeFloat(_iter_rk_rv->first);
      xfer += prot_->serializedSizeFloat(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
    xfer += prot_->serializedSizeI32(_iter_rk_rk_rv_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::serializedSizeZC(prot_, &this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct5>::serializedSizeZC(prot_, &this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->serializedSizeString(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_I64, 27);
  xfer += prot_->serializedSizeI64(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_SET, 28);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_BYTE, this->field28.size());
  for (auto _iter_r = this->field28.begin(); _iter_r != this->field28.end(); ++_iter_r) {
    xfer += prot_->serializedSizeByte((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I16, this->field29.size());
  for (auto _iter_r = this->field29.begin(); _iter_r != this->field29.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI16((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_LIST, 30);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_SET, this->field30.size());
  for (auto _iter_r_r = this->field30.begin(); _iter_r_r != this->field30.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeString((*_iter_r));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_SET, 31);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_FLOAT, this->field31.size());
  for (auto _iter_r = this->field31.begin(); _iter_r != this->field31.end(); ++_iter_r) {
    xfer += prot_->serializedSizeFloat((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_STRING, 32);
  xfer += prot_->serializedSizeString(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_STRING, 33);
  xfer += prot_->serializedSizeZCBinary(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_BOOL, 34);
  xfer += prot_->serializedSizeBool(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_MAP, 35);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_FLOAT, this->field35.size());
  for (auto _iter_rk_rv = this->field35.begin(); _iter_rk_rv != this->field35.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeByte(_iter_rk_rv->first);
    xfer += prot_->serializedSizeFloat(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_SET, 36);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, this->field36.size());
  for (auto _iter_r = this->field36.begin(); _iter_r != this->field36.end(); ++_iter_r) {
    xfer += prot_->serializedSizeZCBinary((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct10::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct10");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_SET, 1);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_FLOAT, this->field1.size());
  for (auto _iter_r = this->field1.begin(); _iter_r != this->field1.end(); ++_iter_r) {
    xfer += prot_->writeFloat((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct5>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct8>::write(prot_, &this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeBinary(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->writeI16(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->writeString(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_MAP, apache::thrift::protocol::T_I64, this->field7.size());
  for (auto _iter_rk_rk_rv_rv = this->field7.begin(); _iter_rk_rk_rv_rv != this->field7.end(); ++_iter_rk_rk_rv_rv) {
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_DOUBLE, _iter_rk_rk_rv_rv->first.size());
    for (auto _iter_rk_rv = _iter_rk_rk_rv_rv->first.begin(); _iter_rk_rv != _iter_rk_rk_rv_rv->first.end(); ++_iter_rk_rv) {
      xfer += prot_->writeString(_iter_rk_rv->first);
      xfer += prot_->writeDouble(_iter_rk_rv->second);
    }
    xfer += prot_->writeMapEnd();
    xfer += prot_->writeI64(_iter_rk_rk_rv_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_FLOAT, this->field8.size());
  for (auto _iter_r = this->field8.begin(); _iter_r != this->field8.end(); ++_iter_r) {
    xfer += prot_->writeFloat((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->writeString(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_BYTE, this->field10.size());
  for (auto _iter_rk_rv = this->field10.begin(); _iter_rk_rv != this->field10.end(); ++_iter_rk_rv) {
    xfer += prot_->writeBool(_iter_rk_rv->first);
    xfer += prot_->writeByte(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_BOOL, 11);
  xfer += prot_->writeBool(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_SET, 12);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_BOOL, this->field12.size());
  for (auto _iter_r = this->field12.begin(); _iter_r != this->field12.end(); ++_iter_r) {
    xfer += prot_->writeBool((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_MAP, this->field13.size());
  for (auto _iter_r_rk_rv = this->field13.begin(); _iter_r_rk_rv != this->field13.end(); ++_iter_r_rk_rv) {
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_I32, (*_iter_r_rk_rv).size());
    for (auto _iter_rk_rv = (*_iter_r_rk_rv).begin(); _iter_rk_rv != (*_iter_r_rk_rv).end(); ++_iter_rk_rv) {
      xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct2>::write(prot_, &_iter_rk_rv->first);
      xfer += prot_->writeI32(_iter_rk_rv->second);
    }
    xfer += prot_->writeMapEnd();
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, this->field14.size());
  for (auto _iter_r = this->field14.begin(); _iter_r != this->field14.end(); ++_iter_r) {
    xfer += prot_->writeBinary((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I64, apache::thrift::protocol::T_STRING, this->field15.size());
  for (auto _iter_rk_rv = this->field15.begin(); _iter_rk_rv != this->field15.end(); ++_iter_rk_rv) {
    xfer += prot_->writeI64(_iter_rk_rv->first);
    xfer += prot_->writeString(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->writeString(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_SET, 17);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_DOUBLE, this->field17.size());
  for (auto _iter_r = this->field17.begin(); _iter_r != this->field17.end(); ++_iter_r) {
    xfer += prot_->writeDouble((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_I64, 18);
  xfer += prot_->writeI64(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_SET, 19);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRUCT, this->field19.size());
  for (auto _iter_r = this->field19.begin(); _iter_r != this->field19.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct2>::write(prot_, &(*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_I32, 20);
  xfer += prot_->writeI32(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_I64, 21);
  xfer += prot_->writeI64(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_FLOAT, 22);
  xfer += prot_->writeFloat(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_MAP, 23);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_MAP, apache::thrift::protocol::T_I32, this->field23.size());
  for (auto _iter_rk_rk_rv_rv = this->field23.begin(); _iter_rk_rk_rv_rv != this->field23.end(); ++_iter_rk_rk_rv_rv) {
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_FLOAT, apache::thrift::protocol::T_FLOAT, _iter_rk_rk_rv_rv->first.size());
    for (auto _iter_rk_rv = _iter_rk_rk_rv_rv->first.begin(); _iter_rk_rv != _iter_rk_rk_rv_rv->first.end(); ++_iter_rk_rv) {
      xfer += prot_->writeFloat(_iter_rk_rv->first);
      xfer += prot_->writeFloat(_iter_rk_rv->second);
    }
    xfer += prot_->writeMapEnd();
    xfer += prot_->writeI32(_iter_rk_rk_rv_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::write(prot_, &this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct5>::write(prot_, &this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->writeString(this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_I64, 27);
  xfer += prot_->writeI64(this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_SET, 28);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_BYTE, this->field28.size());
  for (auto _iter_r = this->field28.begin(); _iter_r != this->field28.end(); ++_iter_r) {
    xfer += prot_->writeByte((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I16, this->field29.size());
  for (auto _iter_r = this->field29.begin(); _iter_r != this->field29.end(); ++_iter_r) {
    xfer += prot_->writeI16((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_LIST, 30);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_SET, this->field30.size());
  for (auto _iter_r_r = this->field30.begin(); _iter_r_r != this->field30.end(); ++_iter_r_r) {
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRING, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->writeString((*_iter_r));
    }
    xfer += prot_->writeSetEnd();
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_SET, 31);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_FLOAT, this->field31.size());
  for (auto _iter_r = this->field31.begin(); _iter_r != this->field31.end(); ++_iter_r) {
    xfer += prot_->writeFloat((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_STRING, 32);
  xfer += prot_->writeString(this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_STRING, 33);
  xfer += prot_->writeBinary(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_BOOL, 34);
  xfer += prot_->writeBool(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_MAP, 35);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_BYTE, apache::thrift::protocol::T_FLOAT, this->field35.size());
  for (auto _iter_rk_rv = this->field35.begin(); _iter_rk_rv != this->field35.end(); ++_iter_rk_rv) {
    xfer += prot_->writeByte(_iter_rk_rv->first);
    xfer += prot_->writeFloat(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_SET, 36);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRING, this->field36.size());
  for (auto _iter_r = this->field36.begin(); _iter_r != this->field36.end(); ++_iter_r) {
    xfer += prot_->writeBinary((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

template <class Protocol_>
uint32_t Struct11::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct11::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct11");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->serializedSizeBool(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeString(this->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct11::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct11");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->serializedSizeBool(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeString(this->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct11::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct11");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->writeDouble(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->writeBool(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->writeString(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

template <class Protocol_>
uint32_t Struct12::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field1 = std::set<float>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              float _elem;
              xfer += iprot->readFloat(_elem);
              this->field1.insert(std::move(_elem));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              float _elem;
              xfer += iprot->readFloat(_elem);
              this->field1.insert(std::move(_elem));
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field4 = std::map<int64_t, int64_t>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                int64_t _key;
                xfer += iprot->readI64(_key);
                return _key;
              }
              ();
              int64_t& _val = this->field4[std::move(_key_index_rk_rv)];
              xfer += iprot->readI64(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readI64(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readI64(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field4, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct12::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct12");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_FLOAT, this->field1.size());
  for (auto _iter_r = this->field1.begin(); _iter_r != this->field1.end(); ++_iter_r) {
    xfer += prot_->serializedSizeFloat((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BYTE, 2);
  xfer += prot_->serializedSizeByte(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeBinary(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I64, apache::thrift::protocol::T_I64, this->field4.size());
  for (auto _iter_rk_rv = this->field4.begin(); _iter_rk_rv != this->field4.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI64(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI64(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeString(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->serializedSizeFloat(this->field7);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct12::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct12");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_FLOAT, this->field1.size());
  for (auto _iter_r = this->field1.begin(); _iter_r != this->field1.end(); ++_iter_r) {
    xfer += prot_->serializedSizeFloat((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BYTE, 2);
  xfer += prot_->serializedSizeByte(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeZCBinary(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I64, apache::thrift::protocol::T_I64, this->field4.size());
  for (auto _iter_rk_rv = this->field4.begin(); _iter_rk_rv != this->field4.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI64(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI64(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeString(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->serializedSizeFloat(this->field7);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct12::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct12");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_SET, 1);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_FLOAT, this->field1.size());
  for (auto _iter_r = this->field1.begin(); _iter_r != this->field1.end(); ++_iter_r) {
    xfer += prot_->writeFloat((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_BYTE, 2);
  xfer += prot_->writeByte(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeBinary(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I64, apache::thrift::protocol::T_I64, this->field4.size());
  for (auto _iter_rk_rv = this->field4.begin(); _iter_rk_rv != this->field4.end(); ++_iter_rk_rv) {
    xfer += prot_->writeI64(_iter_rk_rv->first);
    xfer += prot_->writeI64(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->writeI16(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->writeString(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->writeFloat(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

template <class Protocol_>
uint32_t Struct13::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct2>::read(iprot, &this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field8 = std::map<bool, int64_t>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                bool _key;
                xfer += iprot->readBool(_key);
                return _key;
              }
              ();
              int64_t& _val = this->field8[std::move(_key_index_rk_rv)];
              xfer += iprot->readI64(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readBool(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readI64(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->field8, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::read(iprot, &this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct6>::read(iprot, &this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct13::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct13");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->serializedSizeFloat(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeBinary(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct2>::serializedSize(prot_, &this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I64, 5);
  xfer += prot_->serializedSizeI64(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += prot_->serializedSizeDouble(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I16, 7);
  xfer += prot_->serializedSizeI16(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_MAP, 8);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_I64, this->field8.size());
  for (auto _iter_rk_rv = this->field8.begin(); _iter_rk_rv != this->field8.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeBool(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI64(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->serializedSizeString(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRUCT, 10);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::serializedSize(prot_, &this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->serializedSizeI32(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct6>::serializedSize(prot_, &this->field12);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct13::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct13");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->serializedSizeFloat(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeZCBinary(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct2>::serializedSizeZC(prot_, &this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I64, 5);
  xfer += prot_->serializedSizeI64(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += prot_->serializedSizeDouble(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I16, 7);
  xfer += prot_->serializedSizeI16(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_MAP, 8);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_I64, this->field8.size());
  for (auto _iter_rk_rv = this->field8.begin(); _iter_rk_rv != this->field8.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeBool(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI64(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->serializedSizeString(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRUCT, 10);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::serializedSizeZC(prot_, &this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->serializedSizeI32(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct6>::serializedSizeZC(prot_, &this->field12);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct13::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct13");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_FLOAT, 1);
  xfer += prot_->writeFloat(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->writeDouble(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeBinary(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct2>::write(prot_, &this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I64, 5);
  xfer += prot_->writeI64(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += prot_->writeDouble(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_I16, 7);
  xfer += prot_->writeI16(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_MAP, 8);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_BOOL, apache::thrift::protocol::T_I64, this->field8.size());
  for (auto _iter_rk_rv = this->field8.begin(); _iter_rk_rv != this->field8.end(); ++_iter_rk_rv) {
    xfer += prot_->writeBool(_iter_rk_rv->first);
    xfer += prot_->writeI64(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->writeString(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_STRUCT, 10);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct1>::write(prot_, &this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->writeI32(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift27::Struct6>::write(prot_, &this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift27
namespace apache { namespace thrift {

}} // apache::thrift
namespace example { namespace thrift27 {

}} // example::thrift27
