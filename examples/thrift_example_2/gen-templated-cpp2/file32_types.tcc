/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "file32_types.h"

#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>
#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>

namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct0::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field3 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field6 = std::set<std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field7 = std::map<int16_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct0::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct0");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->serializedSizeBool(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->serializedSizeBool(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct0::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct0");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->serializedSizeBool(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->serializedSizeBool(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct0::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct0");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->writeBool(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->writeBool(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct1::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<int16_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field4 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::read(iprot, &this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field6 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field7 = std::set<std::map<int8_t, int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int8_t, int32_t>>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct1::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct1");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSize(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int8_t, int32_t>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct1::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct1");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSizeZC(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int8_t, int32_t>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct1::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct1");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->writeDouble(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::write(prot_, &this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int8_t, int32_t>>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct2::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<double, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field2 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field5 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field7 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field9 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field11 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field13 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::read(iprot, &this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field19 = std::map<float, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::read(iprot, &this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::read(iprot, &this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct2::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct2");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_FLOAT, 8);
  xfer += prot_->serializedSizeFloat(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->serializedSizeI32(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_DOUBLE, 12);
  xfer += prot_->serializedSizeDouble(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I16, 14);
  xfer += prot_->serializedSizeI16(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSize(prot_, &this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->serializedSizeI32(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_DOUBLE, 17);
  xfer += prot_->serializedSizeDouble(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRING, 18);
  xfer += prot_->serializedSizeBinary(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_BOOL, 20);
  xfer += prot_->serializedSizeBool(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_STRUCT, 21);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSize(prot_, &this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_I64, 22);
  xfer += prot_->serializedSizeI64(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRUCT, 23);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSize(prot_, &this->field23);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct2::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct2");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_FLOAT, 8);
  xfer += prot_->serializedSizeFloat(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->serializedSizeI32(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_DOUBLE, 12);
  xfer += prot_->serializedSizeDouble(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I16, 14);
  xfer += prot_->serializedSizeI16(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSizeZC(prot_, &this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->serializedSizeI32(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_DOUBLE, 17);
  xfer += prot_->serializedSizeDouble(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRING, 18);
  xfer += prot_->serializedSizeZCBinary(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_BOOL, 20);
  xfer += prot_->serializedSizeBool(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_STRUCT, 21);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSizeZC(prot_, &this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_I64, 22);
  xfer += prot_->serializedSizeI64(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRUCT, 23);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSizeZC(prot_, &this->field23);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct2::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct2");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->writeI32(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_FLOAT, 8);
  xfer += prot_->writeFloat(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->writeI32(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_DOUBLE, 12);
  xfer += prot_->writeDouble(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_I16, 14);
  xfer += prot_->writeI16(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::write(prot_, &this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->writeI32(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_DOUBLE, 17);
  xfer += prot_->writeDouble(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_STRING, 18);
  xfer += prot_->writeBinary(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_BOOL, 20);
  xfer += prot_->writeBool(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_STRUCT, 21);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::write(prot_, &this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_I64, 22);
  xfer += prot_->writeI64(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_STRUCT, 23);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::write(prot_, &this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct3::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field5 = std::set< ::example::thrift32::Struct2>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::example::thrift32::Struct2>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::read(iprot, &this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::read(iprot, &this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field10 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct3::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct3");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->serializedSizeByte(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::example::thrift32::Struct2>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BYTE, 6);
  xfer += prot_->serializedSizeByte(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::serializedSize(prot_, &this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSize(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct3::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct3");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->serializedSizeByte(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::example::thrift32::Struct2>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BYTE, 6);
  xfer += prot_->serializedSizeByte(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::serializedSizeZC(prot_, &this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSizeZC(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct3::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct3");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->writeByte(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::example::thrift32::Struct2>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_BYTE, 6);
  xfer += prot_->writeByte(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->writeByte(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::write(prot_, &this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::write(prot_, &this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct4::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::read(iprot, &this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct4::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct4");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::serializedSize(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->serializedSizeFloat(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_FLOAT, 4);
  xfer += prot_->serializedSizeFloat(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct4::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct4");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::serializedSizeZC(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->serializedSizeFloat(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_FLOAT, 4);
  xfer += prot_->serializedSizeFloat(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct4::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct4");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::write(prot_, &this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->writeBool(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->writeFloat(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_FLOAT, 4);
  xfer += prot_->writeFloat(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->writeI32(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct5::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field1 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field2 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field3 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field4 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field6 = std::map<int16_t, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, float>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field11 = std::map<std::string, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct5::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct5");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, float>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRING, 7);
  xfer += prot_->serializedSizeBinary(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeString(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_BYTE, 9);
  xfer += prot_->serializedSizeByte(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->serializedSizeDouble(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_FLOAT, 12);
  xfer += prot_->serializedSizeFloat(this->field12);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct5::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct5");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, float>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRING, 7);
  xfer += prot_->serializedSizeZCBinary(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeString(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_BYTE, 9);
  xfer += prot_->serializedSizeByte(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->serializedSizeDouble(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_FLOAT, 12);
  xfer += prot_->serializedSizeFloat(this->field12);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct5::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct5");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->writeI32(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, float>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_STRING, 7);
  xfer += prot_->writeBinary(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->writeString(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_BYTE, 9);
  xfer += prot_->writeByte(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->writeDouble(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_FLOAT, 12);
  xfer += prot_->writeFloat(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct6::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field1 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field7 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field8 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field9 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct6::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct6");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->serializedSizeI16(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct6::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct6");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->serializedSizeI16(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct6::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct6");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->writeBool(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->writeDouble(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->writeByte(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->writeI16(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->writeI16(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct7::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<int32_t, std::set<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int32_t, std::set<double>>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field2 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field5 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field6 = std::set< ::example::thrift32::Struct1>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::example::thrift32::Struct1>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field7 = std::map<int64_t, std::set<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int64_t, std::set<int64_t>>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::read(iprot, &this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field14 = std::map<int64_t, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int32_t>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field15 = std::map<std::map<double, bool>, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::map<double, bool>, std::string>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field17 = std::map<std::map<int64_t, std::string>, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::integral>, std::map<std::map<int64_t, std::string>, bool>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field18 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field19 = std::map<int32_t,  ::example::thrift32::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::example::thrift32::Struct0>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field20 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct7::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct7");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int32_t, std::set<double>>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeBinary(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::example::thrift32::Struct1>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int64_t, std::set<int64_t>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::serializedSize(prot_, &this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->serializedSizeDouble(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->serializedSizeDouble(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->serializedSizeI32(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRING, 12);
  xfer += prot_->serializedSizeBinary(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_BYTE, 13);
  xfer += prot_->serializedSizeByte(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int32_t>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::map<double, bool>, std::string>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->serializedSizeString(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::integral>, std::map<std::map<int64_t, std::string>, bool>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_SET, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::example::thrift32::Struct0>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I32, 21);
  xfer += prot_->serializedSizeI32(this->field21);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct7::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct7");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int32_t, std::set<double>>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeZCBinary(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::example::thrift32::Struct1>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int64_t, std::set<int64_t>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::serializedSizeZC(prot_, &this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->serializedSizeDouble(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->serializedSizeDouble(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->serializedSizeI32(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRING, 12);
  xfer += prot_->serializedSizeZCBinary(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_BYTE, 13);
  xfer += prot_->serializedSizeByte(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int32_t>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::map<double, bool>, std::string>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->serializedSizeString(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::integral>, std::map<std::map<int64_t, std::string>, bool>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_SET, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::example::thrift32::Struct0>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I32, 21);
  xfer += prot_->serializedSizeI32(this->field21);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct7::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct7");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int32_t, std::set<double>>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeBinary(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::example::thrift32::Struct1>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int64_t, std::set<int64_t>>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::write(prot_, &this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->writeDouble(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->writeDouble(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->writeI32(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_STRING, 12);
  xfer += prot_->writeBinary(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_BYTE, 13);
  xfer += prot_->writeByte(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int32_t>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::map<double, bool>, std::string>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->writeString(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::integral>, std::map<std::map<int64_t, std::string>, bool>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_SET, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::example::thrift32::Struct0>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_I32, 21);
  xfer += prot_->writeI32(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct8::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field4 = std::set<std::set<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::read(iprot, &this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct3>::read(iprot, &this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field11 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct7>::read(iprot, &this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field15 = std::map<bool, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int16_t>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field16 = std::vector<std::set<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int64_t>>>::read(*iprot, this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field19 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::read(iprot, &this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field23 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field24 = std::map< ::example::thrift32::Struct4, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::example::thrift32::Struct4, int8_t>>::read(*iprot, this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field26 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct7>::read(iprot, &this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct8::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct8");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->serializedSizeFloat(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSize(prot_, &this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I64, 8);
  xfer += prot_->serializedSizeI64(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct3>::serializedSize(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->serializedSizeI32(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRING, 12);
  xfer += prot_->serializedSizeString(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->serializedSizeString(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct7>::serializedSize(prot_, &this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int16_t>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int64_t>>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRING, 17);
  xfer += prot_->serializedSizeString(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRING, 18);
  xfer += prot_->serializedSizeBinary(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_STRING, 20);
  xfer += prot_->serializedSizeString(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_DOUBLE, 21);
  xfer += prot_->serializedSizeDouble(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRUCT, 22);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSize(prot_, &this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_LIST, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::example::thrift32::Struct4, int8_t>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I64, 25);
  xfer += prot_->serializedSizeI64(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_LIST, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_STRUCT, 27);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct7>::serializedSize(prot_, &this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_I16, 28);
  xfer += prot_->serializedSizeI16(this->field28);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct8::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct8");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->serializedSizeFloat(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSizeZC(prot_, &this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I64, 8);
  xfer += prot_->serializedSizeI64(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct3>::serializedSizeZC(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->serializedSizeI32(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRING, 12);
  xfer += prot_->serializedSizeString(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->serializedSizeString(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct7>::serializedSizeZC(prot_, &this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int16_t>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int64_t>>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRING, 17);
  xfer += prot_->serializedSizeString(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRING, 18);
  xfer += prot_->serializedSizeZCBinary(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_STRING, 20);
  xfer += prot_->serializedSizeString(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_DOUBLE, 21);
  xfer += prot_->serializedSizeDouble(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRUCT, 22);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSizeZC(prot_, &this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_LIST, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::example::thrift32::Struct4, int8_t>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I64, 25);
  xfer += prot_->serializedSizeI64(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_LIST, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_STRUCT, 27);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct7>::serializedSizeZC(prot_, &this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_I16, 28);
  xfer += prot_->serializedSizeI16(this->field28);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct8::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct8");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->writeBool(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->writeFloat(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->writeI16(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::write(prot_, &this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->writeByte(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_I64, 8);
  xfer += prot_->writeI64(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct3>::write(prot_, &this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->writeI32(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_STRING, 12);
  xfer += prot_->writeString(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->writeString(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct7>::write(prot_, &this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int16_t>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int64_t>>>::write(*prot_, this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_STRING, 17);
  xfer += prot_->writeString(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_STRING, 18);
  xfer += prot_->writeBinary(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_STRING, 20);
  xfer += prot_->writeString(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_DOUBLE, 21);
  xfer += prot_->writeDouble(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_STRUCT, 22);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::write(prot_, &this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_LIST, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::example::thrift32::Struct4, int8_t>>::write(*prot_, this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_I64, 25);
  xfer += prot_->writeI64(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_LIST, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_STRUCT, 27);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct7>::write(prot_, &this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_I16, 28);
  xfer += prot_->writeI16(this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct9::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field3 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct4>::read(iprot, &this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field8 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field11 = std::map<std::map<int16_t, double>, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::map<int16_t, double>, int8_t>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field12 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field13 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::read(iprot, &this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct9::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct9");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct4>::serializedSize(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeString(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRING, 7);
  xfer += prot_->serializedSizeString(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_FLOAT, 9);
  xfer += prot_->serializedSizeFloat(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->serializedSizeDouble(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::map<int16_t, double>, int8_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I16, 14);
  xfer += prot_->serializedSizeI16(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::serializedSize(prot_, &this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I16, 16);
  xfer += prot_->serializedSizeI16(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRING, 17);
  xfer += prot_->serializedSizeString(this->field17);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct9::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct9");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeZCBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct4>::serializedSizeZC(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeString(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRING, 7);
  xfer += prot_->serializedSizeString(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_FLOAT, 9);
  xfer += prot_->serializedSizeFloat(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->serializedSizeDouble(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::map<int16_t, double>, int8_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I16, 14);
  xfer += prot_->serializedSizeI16(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::serializedSizeZC(prot_, &this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I16, 16);
  xfer += prot_->serializedSizeI16(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRING, 17);
  xfer += prot_->serializedSizeString(this->field17);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct9::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct9");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeBinary(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct4>::write(prot_, &this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->writeString(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_STRING, 7);
  xfer += prot_->writeString(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_FLOAT, 9);
  xfer += prot_->writeFloat(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->writeDouble(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::map<int16_t, double>, int8_t>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_I16, 14);
  xfer += prot_->writeI16(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::write(prot_, &this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_I16, 16);
  xfer += prot_->writeI16(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_STRING, 17);
  xfer += prot_->writeString(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct10::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct10::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct10");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->field1);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct10::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct10");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->field1);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct10::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct10");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct11::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field2 = std::map<bool, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, bool>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct11::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct11");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, bool>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->serializedSizeI64(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->serializedSizeI64(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I64, 7);
  xfer += prot_->serializedSizeI64(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += prot_->serializedSizeDouble(this->field8);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct11::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct11");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, bool>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->serializedSizeI64(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->serializedSizeI64(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I64, 7);
  xfer += prot_->serializedSizeI64(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += prot_->serializedSizeDouble(this->field8);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct11::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct11");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, bool>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->writeI64(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->writeI32(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->writeI64(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_I64, 7);
  xfer += prot_->writeI64(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += prot_->writeDouble(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct12::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field1 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field2 = std::map<int64_t, std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<int64_t, std::vector<std::string>>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field5 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field6 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field7 = std::map<float, std::map<std::string, int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::map<float, std::map<std::string, int8_t>>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field9 = std::set<std::map<bool, std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::set<std::map<bool, std::string>>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct12::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct12");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<int64_t, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->serializedSizeByte(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::map<float, std::map<std::string, int8_t>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_BYTE, 8);
  xfer += prot_->serializedSizeByte(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::set<std::map<bool, std::string>>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct12::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct12");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<int64_t, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->serializedSizeByte(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::map<float, std::map<std::string, int8_t>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_BYTE, 8);
  xfer += prot_->serializedSizeByte(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::set<std::map<bool, std::string>>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct12::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct12");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<int64_t, std::vector<std::string>>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->writeByte(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::map<float, std::map<std::string, int8_t>>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_BYTE, 8);
  xfer += prot_->writeByte(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::set<std::map<bool, std::string>>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct13::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<int64_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field2 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field7 = std::map<int8_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::read(iprot, &this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field11 = std::map<bool, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field16 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field17 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field19 = std::map<float, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field21 = std::vector<std::set<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int16_t>>>::read(*iprot, this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field22 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::read(iprot, &this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field26 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct3>::read(iprot, &this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field30 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field32 = std::map<std::set< ::example::thrift32::Struct0>, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, ::apache::thrift::type_class::integral>, std::map<std::set< ::example::thrift32::Struct0>, int16_t>>::read(*iprot, this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field35 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct13::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct13");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_FLOAT, 4);
  xfer += prot_->serializedSizeFloat(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->serializedSizeFloat(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->serializedSizeI16(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSize(prot_, &this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I16, 9);
  xfer += prot_->serializedSizeI16(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->serializedSizeBinary(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I16, 12);
  xfer += prot_->serializedSizeI16(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->serializedSizeBinary(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_DOUBLE, 14);
  xfer += prot_->serializedSizeDouble(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BYTE, 15);
  xfer += prot_->serializedSizeByte(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_LIST, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRING, 18);
  xfer += prot_->serializedSizeString(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_FLOAT, 20);
  xfer += prot_->serializedSizeFloat(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_LIST, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int16_t>>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_LIST, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->serializedSizeString(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_I64, 24);
  xfer += prot_->serializedSizeI64(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::serializedSize(prot_, &this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_FLOAT, 27);
  xfer += prot_->serializedSizeFloat(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_I32, 28);
  xfer += prot_->serializedSizeI32(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_STRUCT, 29);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct3>::serializedSize(prot_, &this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_LIST, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_I16, 31);
  xfer += prot_->serializedSizeI16(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_MAP, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, ::apache::thrift::type_class::integral>, std::map<std::set< ::example::thrift32::Struct0>, int16_t>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_DOUBLE, 33);
  xfer += prot_->serializedSizeDouble(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->serializedSizeI64(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_SET, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct13::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct13");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_FLOAT, 4);
  xfer += prot_->serializedSizeFloat(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->serializedSizeFloat(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->serializedSizeI16(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSizeZC(prot_, &this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I16, 9);
  xfer += prot_->serializedSizeI16(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->serializedSizeZCBinary(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I16, 12);
  xfer += prot_->serializedSizeI16(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->serializedSizeZCBinary(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_DOUBLE, 14);
  xfer += prot_->serializedSizeDouble(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BYTE, 15);
  xfer += prot_->serializedSizeByte(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_LIST, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRING, 18);
  xfer += prot_->serializedSizeString(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_FLOAT, 20);
  xfer += prot_->serializedSizeFloat(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_LIST, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int16_t>>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_LIST, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->serializedSizeString(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_I64, 24);
  xfer += prot_->serializedSizeI64(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::serializedSizeZC(prot_, &this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_FLOAT, 27);
  xfer += prot_->serializedSizeFloat(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_I32, 28);
  xfer += prot_->serializedSizeI32(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_STRUCT, 29);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct3>::serializedSizeZC(prot_, &this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_LIST, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_I16, 31);
  xfer += prot_->serializedSizeI16(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_MAP, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, ::apache::thrift::type_class::integral>, std::map<std::set< ::example::thrift32::Struct0>, int16_t>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_DOUBLE, 33);
  xfer += prot_->serializedSizeDouble(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->serializedSizeI64(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_SET, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct13::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct13");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->writeDouble(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_FLOAT, 4);
  xfer += prot_->writeFloat(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->writeFloat(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->writeI16(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::write(prot_, &this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_I16, 9);
  xfer += prot_->writeI16(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->writeBinary(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_I16, 12);
  xfer += prot_->writeI16(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->writeBinary(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_DOUBLE, 14);
  xfer += prot_->writeDouble(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_BYTE, 15);
  xfer += prot_->writeByte(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_LIST, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_STRING, 18);
  xfer += prot_->writeString(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_FLOAT, 20);
  xfer += prot_->writeFloat(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_LIST, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int16_t>>>::write(*prot_, this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_LIST, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->writeString(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_I64, 24);
  xfer += prot_->writeI64(this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::write(prot_, &this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_FLOAT, 27);
  xfer += prot_->writeFloat(this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_I32, 28);
  xfer += prot_->writeI32(this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_STRUCT, 29);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct3>::write(prot_, &this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_LIST, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_I16, 31);
  xfer += prot_->writeI16(this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_MAP, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, ::apache::thrift::type_class::integral>, std::map<std::set< ::example::thrift32::Struct0>, int16_t>>::write(*prot_, this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_DOUBLE, 33);
  xfer += prot_->writeDouble(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->writeI64(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_SET, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct14::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field1 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct8>::read(iprot, &this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::read(iprot, &this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field9 = std::map<float, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field10 = std::map<int64_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int64_t, std::string>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct4>::read(iprot, &this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct7>::read(iprot, &this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field13 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field14 = std::set<std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::set<std::set<std::string>>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field15 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field16 = std::vector<std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::vector<std::set<std::string>>>::read(*iprot, this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field17 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field18 = std::map<std::vector<float>, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::vector<float>, int16_t>>::read(*iprot, this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct14::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct14");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeBinary(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct8>::serializedSize(prot_, &this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::serializedSize(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += prot_->serializedSizeDouble(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeBinary(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int64_t, std::string>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct4>::serializedSize(prot_, &this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct7>::serializedSize(prot_, &this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::vector<std::set<std::string>>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_LIST, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::vector<float>, int16_t>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct14::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct14");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeZCBinary(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct8>::serializedSizeZC(prot_, &this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::serializedSizeZC(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += prot_->serializedSizeDouble(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeZCBinary(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int64_t, std::string>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct4>::serializedSizeZC(prot_, &this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct7>::serializedSizeZC(prot_, &this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::vector<std::set<std::string>>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_LIST, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::vector<float>, int16_t>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct14::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct14");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->writeBool(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeBinary(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct8>::write(prot_, &this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::write(prot_, &this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += prot_->writeDouble(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->writeByte(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->writeBinary(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int64_t, std::string>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct4>::write(prot_, &this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct7>::write(prot_, &this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::set<std::set<std::string>>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::vector<std::set<std::string>>>::write(*prot_, this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_LIST, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::vector<float>, int16_t>>::write(*prot_, this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct15::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::read(iprot, &this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct15::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct15");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_FLOAT, 2);
  xfer += prot_->serializedSizeFloat(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::serializedSize(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += prot_->serializedSizeDouble(this->field4);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct15::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct15");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_FLOAT, 2);
  xfer += prot_->serializedSizeFloat(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::serializedSizeZC(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += prot_->serializedSizeDouble(this->field4);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct15::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct15");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_FLOAT, 2);
  xfer += prot_->writeFloat(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::write(prot_, &this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += prot_->writeDouble(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct16::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field2 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field3 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field5 = std::map<std::string, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct16::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct16");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += prot_->serializedSizeDouble(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct16::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct16");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += prot_->serializedSizeDouble(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct16::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct16");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += prot_->writeDouble(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct17::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field5 = std::vector< ::example::thrift32::Struct5>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::example::thrift32::Struct5>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field7 = std::set<std::set<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field10 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field11 = std::map<std::string, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>, std::map<std::string, float>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::read(iprot, &this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field13 = std::map<int16_t, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct17::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct17");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->serializedSizeBool(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->serializedSizeI16(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::example::thrift32::Struct5>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeBinary(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I64, 8);
  xfer += prot_->serializedSizeI64(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->serializedSizeDouble(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_SET, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>, std::map<std::string, float>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::serializedSize(prot_, &this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct17::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct17");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->serializedSizeBool(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->serializedSizeI16(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::example::thrift32::Struct5>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeZCBinary(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I64, 8);
  xfer += prot_->serializedSizeI64(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->serializedSizeDouble(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_SET, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>, std::map<std::string, float>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::serializedSizeZC(prot_, &this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct17::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct17");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->writeI64(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->writeI16(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->writeBool(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->writeI16(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::example::thrift32::Struct5>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->writeBinary(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_I64, 8);
  xfer += prot_->writeI64(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->writeDouble(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_SET, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>, std::map<std::string, float>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::write(prot_, &this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct18::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field2 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct18::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct18");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct18::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct18");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct18::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct18");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->writeI64(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct19::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field3 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::read(iprot, &this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct19::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct19");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::serializedSize(prot_, &this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->serializedSizeDouble(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->serializedSizeI64(this->field6);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct19::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct19");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::serializedSizeZC(prot_, &this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->serializedSizeDouble(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->serializedSizeI64(this->field6);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct19::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct19");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->writeI64(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->writeDouble(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::write(prot_, &this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->writeDouble(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->writeI64(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct20::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct6>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field4 = std::map<float, std::vector<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<float, std::vector<int16_t>>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field5 = std::map<std::map<bool, std::string>,  ::example::thrift32::Struct7>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::structure>, std::map<std::map<bool, std::string>,  ::example::thrift32::Struct7>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field7 = std::set<std::map<int16_t, std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::set<std::map<int16_t, std::string>>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field8 = std::map<float, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field12 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::read(iprot, &this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field14 = std::map<std::string, std::vector<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::string, std::vector<int64_t>>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field16 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::read(iprot, &this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field19 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field21 = std::map<int8_t, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::read(*iprot, this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct4>::read(iprot, &this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field24 = std::map<std::map<double, std::string>,  ::example::thrift32::Struct13>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::structure>, std::map<std::map<double, std::string>,  ::example::thrift32::Struct13>>::read(*iprot, this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct20::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct20");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct6>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->serializedSizeByte(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<float, std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::structure>, std::map<std::map<bool, std::string>,  ::example::thrift32::Struct7>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BYTE, 6);
  xfer += prot_->serializedSizeByte(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::set<std::map<int16_t, std::string>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_MAP, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->serializedSizeDouble(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->serializedSizeDouble(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->serializedSizeString(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::serializedSize(prot_, &this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::string, std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_FLOAT, 15);
  xfer += prot_->serializedSizeFloat(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I64, 17);
  xfer += prot_->serializedSizeI64(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::serializedSize(prot_, &this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_SET, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_BYTE, 20);
  xfer += prot_->serializedSizeByte(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_I32, 22);
  xfer += prot_->serializedSizeI32(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRUCT, 23);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct4>::serializedSize(prot_, &this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::structure>, std::map<std::map<double, std::string>,  ::example::thrift32::Struct13>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct20::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct20");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct6>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->serializedSizeByte(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<float, std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::structure>, std::map<std::map<bool, std::string>,  ::example::thrift32::Struct7>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BYTE, 6);
  xfer += prot_->serializedSizeByte(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::set<std::map<int16_t, std::string>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_MAP, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->serializedSizeDouble(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->serializedSizeDouble(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->serializedSizeString(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::serializedSizeZC(prot_, &this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::string, std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_FLOAT, 15);
  xfer += prot_->serializedSizeFloat(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I64, 17);
  xfer += prot_->serializedSizeI64(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::serializedSizeZC(prot_, &this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_SET, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_BYTE, 20);
  xfer += prot_->serializedSizeByte(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_I32, 22);
  xfer += prot_->serializedSizeI32(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRUCT, 23);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct4>::serializedSizeZC(prot_, &this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::structure>, std::map<std::map<double, std::string>,  ::example::thrift32::Struct13>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct20::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct20");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct6>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->writeByte(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<float, std::vector<int16_t>>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::structure>, std::map<std::map<bool, std::string>,  ::example::thrift32::Struct7>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_BYTE, 6);
  xfer += prot_->writeByte(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::set<std::map<int16_t, std::string>>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_MAP, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->writeDouble(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->writeDouble(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->writeString(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::write(prot_, &this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::string, std::vector<int64_t>>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_FLOAT, 15);
  xfer += prot_->writeFloat(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_I64, 17);
  xfer += prot_->writeI64(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::write(prot_, &this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_SET, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_BYTE, 20);
  xfer += prot_->writeByte(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::write(*prot_, this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_I32, 22);
  xfer += prot_->writeI32(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_STRUCT, 23);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct4>::write(prot_, &this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::structure>, std::map<std::map<double, std::string>,  ::example::thrift32::Struct13>>::write(*prot_, this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct21::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct10>::read(iprot, &this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field3 = std::set<std::vector<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int64_t>>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field4 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct14>::read(iprot, &this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field8 = std::map<double, std::set<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<double, std::set<double>>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field10 = std::map<int64_t, std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::map<int64_t, std::set<std::string>>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct21::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct21");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct10>::serializedSize(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeBinary(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BYTE, 6);
  xfer += prot_->serializedSizeByte(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct14>::serializedSize(prot_, &this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_MAP, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<double, std::set<double>>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_BYTE, 9);
  xfer += prot_->serializedSizeByte(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::map<int64_t, std::set<std::string>>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct21::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct21");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct10>::serializedSizeZC(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeZCBinary(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BYTE, 6);
  xfer += prot_->serializedSizeByte(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct14>::serializedSizeZC(prot_, &this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_MAP, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<double, std::set<double>>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_BYTE, 9);
  xfer += prot_->serializedSizeByte(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::map<int64_t, std::set<std::string>>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct21::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct21");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct10>::write(prot_, &this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeBinary(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int64_t>>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->writeI32(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_BYTE, 6);
  xfer += prot_->writeByte(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct14>::write(prot_, &this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_MAP, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<double, std::set<double>>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_BYTE, 9);
  xfer += prot_->writeByte(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::map<int64_t, std::set<std::string>>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct22::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field1 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field2 = std::map<std::string, std::map<int32_t, std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::map<std::string, std::map<int32_t, std::string>>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field12 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field14 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field15 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field17 = std::map<std::string, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct6>::read(iprot, &this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct22::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct22");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::map<std::string, std::map<int32_t, std::string>>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->serializedSizeI16(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->serializedSizeDouble(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->serializedSizeBool(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeString(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->serializedSizeBinary(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->serializedSizeI64(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_BYTE, 11);
  xfer += prot_->serializedSizeByte(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_DOUBLE, 13);
  xfer += prot_->serializedSizeDouble(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->serializedSizeString(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct6>::serializedSize(prot_, &this->field18);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct22::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct22");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::map<std::string, std::map<int32_t, std::string>>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->serializedSizeI16(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->serializedSizeDouble(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->serializedSizeBool(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeString(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->serializedSizeZCBinary(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->serializedSizeI64(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_BYTE, 11);
  xfer += prot_->serializedSizeByte(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_DOUBLE, 13);
  xfer += prot_->serializedSizeDouble(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->serializedSizeString(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct6>::serializedSizeZC(prot_, &this->field18);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct22::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct22");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::map<std::string, std::map<int32_t, std::string>>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->writeI16(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->writeDouble(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->writeBool(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->writeByte(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->writeString(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->writeBinary(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->writeI64(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_BYTE, 11);
  xfer += prot_->writeByte(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_DOUBLE, 13);
  xfer += prot_->writeDouble(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->writeString(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct6>::write(prot_, &this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct23::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<std::string, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field2 = std::vector<std::set<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::vector<std::set<float>>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field4 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field5 = std::vector<std::map<double, int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::vector<std::map<double, int16_t>>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct18>::read(iprot, &this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct12>::read(iprot, &this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field9 = std::map<std::vector<float>, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::vector<float>, int8_t>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct23::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct23");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::vector<std::set<float>>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::vector<std::map<double, int16_t>>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct18>::serializedSize(prot_, &this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->serializedSizeDouble(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct12>::serializedSize(prot_, &this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::vector<float>, int8_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_BYTE, 10);
  xfer += prot_->serializedSizeByte(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_FLOAT, 11);
  xfer += prot_->serializedSizeFloat(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BOOL, 12);
  xfer += prot_->serializedSizeBool(this->field12);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct23::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct23");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::vector<std::set<float>>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::vector<std::map<double, int16_t>>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct18>::serializedSizeZC(prot_, &this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->serializedSizeDouble(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct12>::serializedSizeZC(prot_, &this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::vector<float>, int8_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_BYTE, 10);
  xfer += prot_->serializedSizeByte(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_FLOAT, 11);
  xfer += prot_->serializedSizeFloat(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BOOL, 12);
  xfer += prot_->serializedSizeBool(this->field12);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct23::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct23");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::vector<std::set<float>>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->writeI64(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::vector<std::map<double, int16_t>>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct18>::write(prot_, &this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->writeDouble(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct12>::write(prot_, &this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::vector<float>, int8_t>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_BYTE, 10);
  xfer += prot_->writeByte(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_FLOAT, 11);
  xfer += prot_->writeFloat(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_BOOL, 12);
  xfer += prot_->writeBool(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct24::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field2 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field4 = std::map<std::string, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field5 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field7 = std::map<std::string, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field8 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field9 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field10 = std::map<int16_t, std::map<bool, float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::map<bool, float>>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field12 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field13 = std::map<std::set<int64_t>, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<int64_t>, bool>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field14 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field16 = std::set<std::set<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::read(*iprot, this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct24::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct24");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->serializedSizeBool(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::map<bool, float>>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->serializedSizeString(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<int64_t>, bool>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRING, 15);
  xfer += prot_->serializedSizeBinary(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->serializedSizeI32(this->field17);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct24::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct24");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->serializedSizeBool(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::map<bool, float>>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->serializedSizeString(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<int64_t>, bool>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRING, 15);
  xfer += prot_->serializedSizeZCBinary(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->serializedSizeI32(this->field17);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct24::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct24");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->writeI64(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->writeBool(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->writeI32(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::map<bool, float>>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->writeString(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<int64_t>, bool>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_STRING, 15);
  xfer += prot_->writeBinary(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::write(*prot_, this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->writeI32(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct25::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct25::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct25");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct25::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct25");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct25::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct25");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct26::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field6 = std::vector<std::set<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int16_t>>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field8 = std::vector<std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::vector<std::set<std::string>>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field9 = std::map<double, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int32_t>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field10 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::read(iprot, &this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field13 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field14 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field17 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct26::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct26");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BYTE, 1);
  xfer += prot_->serializedSizeByte(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->serializedSizeI64(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->serializedSizeFloat(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int16_t>>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BOOL, 7);
  xfer += prot_->serializedSizeBool(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::vector<std::set<std::string>>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int32_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_SET, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->serializedSizeI32(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSize(prot_, &this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_DOUBLE, 15);
  xfer += prot_->serializedSizeDouble(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->serializedSizeI32(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_SET, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_DOUBLE, 18);
  xfer += prot_->serializedSizeDouble(this->field18);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct26::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct26");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BYTE, 1);
  xfer += prot_->serializedSizeByte(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->serializedSizeI64(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->serializedSizeFloat(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int16_t>>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BOOL, 7);
  xfer += prot_->serializedSizeBool(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::vector<std::set<std::string>>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int32_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_SET, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->serializedSizeI32(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSizeZC(prot_, &this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_DOUBLE, 15);
  xfer += prot_->serializedSizeDouble(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->serializedSizeI32(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_SET, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_DOUBLE, 18);
  xfer += prot_->serializedSizeDouble(this->field18);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct26::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct26");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_BYTE, 1);
  xfer += prot_->writeByte(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->writeBool(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->writeDouble(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->writeI64(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->writeFloat(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int16_t>>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_BOOL, 7);
  xfer += prot_->writeBool(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::vector<std::set<std::string>>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int32_t>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_SET, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->writeI32(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::write(prot_, &this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_DOUBLE, 15);
  xfer += prot_->writeDouble(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->writeI32(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_SET, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_DOUBLE, 18);
  xfer += prot_->writeDouble(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct27::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field5 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct27::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct27");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->serializedSizeI16(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct27::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct27");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->serializedSizeI16(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeZCBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct27::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct27");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->writeBool(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->writeI16(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeBinary(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct28::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field2 = std::map<int16_t, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, bool>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field4 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field5 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field7 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::read(iprot, &this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field13 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct28::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct28");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, bool>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->serializedSizeI64(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_FLOAT, 8);
  xfer += prot_->serializedSizeFloat(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->serializedSizeDouble(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_BOOL, 10);
  xfer += prot_->serializedSizeBool(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSize(prot_, &this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRING, 12);
  xfer += prot_->serializedSizeBinary(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct28::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct28");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, bool>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->serializedSizeI64(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_FLOAT, 8);
  xfer += prot_->serializedSizeFloat(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->serializedSizeDouble(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_BOOL, 10);
  xfer += prot_->serializedSizeBool(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSizeZC(prot_, &this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRING, 12);
  xfer += prot_->serializedSizeZCBinary(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct28::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct28");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->writeI64(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, bool>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->writeDouble(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_LIST, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->writeI64(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_FLOAT, 8);
  xfer += prot_->writeFloat(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->writeDouble(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_BOOL, 10);
  xfer += prot_->writeBool(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::write(prot_, &this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_STRING, 12);
  xfer += prot_->writeBinary(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
namespace example { namespace thrift32 {

template <class Protocol_>
uint32_t Struct29::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field1 = std::set<std::map<int16_t,  ::example::thrift32::Struct1>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>, std::set<std::map<int16_t,  ::example::thrift32::Struct1>>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field3 = std::map<int16_t, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::read(iprot, &this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field5 = std::set<std::set< ::example::thrift32::Struct17>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::set<std::set< ::example::thrift32::Struct17>>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field6 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field8 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field9 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field11 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field16 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field19 = std::map<bool, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, float>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field20 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field22 = std::map<std::string,  ::example::thrift32::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::example::thrift32::Struct0>>::read(*iprot, this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::read(iprot, &this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::read(iprot, &this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field28 = std::set<std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::set<std::set<std::string>>>::read(*iprot, this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct3>::read(iprot, &this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field31 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field32 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct29::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct29");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>, std::set<std::map<int16_t,  ::example::thrift32::Struct1>>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BYTE, 2);
  xfer += prot_->serializedSizeByte(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::serializedSize(prot_, &this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::set<std::set< ::example::thrift32::Struct17>>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->serializedSizeFloat(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->serializedSizeI64(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_DOUBLE, 12);
  xfer += prot_->serializedSizeDouble(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_BOOL, 13);
  xfer += prot_->serializedSizeBool(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_FLOAT, 14);
  xfer += prot_->serializedSizeFloat(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BYTE, 15);
  xfer += prot_->serializedSizeByte(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I16, 17);
  xfer += prot_->serializedSizeI16(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_BYTE, 18);
  xfer += prot_->serializedSizeByte(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, float>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I16, 21);
  xfer += prot_->serializedSizeI16(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_MAP, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::example::thrift32::Struct0>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_DOUBLE, 23);
  xfer += prot_->serializedSizeDouble(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::serializedSize(prot_, &this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I32, 25);
  xfer += prot_->serializedSizeI32(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRUCT, 26);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSize(prot_, &this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_BOOL, 27);
  xfer += prot_->serializedSizeBool(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_SET, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_STRUCT, 29);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct3>::serializedSize(prot_, &this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_BYTE, 30);
  xfer += prot_->serializedSizeByte(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_LIST, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_BOOL, 33);
  xfer += prot_->serializedSizeBool(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->serializedSizeI64(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_STRING, 35);
  xfer += prot_->serializedSizeBinary(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_FLOAT, 36);
  xfer += prot_->serializedSizeFloat(this->field36);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct29::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct29");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>, std::set<std::map<int16_t,  ::example::thrift32::Struct1>>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_BYTE, 2);
  xfer += prot_->serializedSizeByte(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::serializedSizeZC(prot_, &this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::set<std::set< ::example::thrift32::Struct17>>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->serializedSizeFloat(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->serializedSizeI64(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_DOUBLE, 12);
  xfer += prot_->serializedSizeDouble(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_BOOL, 13);
  xfer += prot_->serializedSizeBool(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_FLOAT, 14);
  xfer += prot_->serializedSizeFloat(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BYTE, 15);
  xfer += prot_->serializedSizeByte(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I16, 17);
  xfer += prot_->serializedSizeI16(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_BYTE, 18);
  xfer += prot_->serializedSizeByte(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, float>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I16, 21);
  xfer += prot_->serializedSizeI16(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_MAP, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::example::thrift32::Struct0>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_DOUBLE, 23);
  xfer += prot_->serializedSizeDouble(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::serializedSizeZC(prot_, &this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I32, 25);
  xfer += prot_->serializedSizeI32(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRUCT, 26);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::serializedSizeZC(prot_, &this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_BOOL, 27);
  xfer += prot_->serializedSizeBool(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_SET, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_STRUCT, 29);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct3>::serializedSizeZC(prot_, &this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_BYTE, 30);
  xfer += prot_->serializedSizeByte(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_LIST, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_BOOL, 33);
  xfer += prot_->serializedSizeBool(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->serializedSizeI64(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_STRING, 35);
  xfer += prot_->serializedSizeZCBinary(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_FLOAT, 36);
  xfer += prot_->serializedSizeFloat(this->field36);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct29::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct29");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>, std::set<std::map<int16_t,  ::example::thrift32::Struct1>>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_BYTE, 2);
  xfer += prot_->writeByte(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct2>::write(prot_, &this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::set<std::set< ::example::thrift32::Struct17>>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->writeFloat(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->writeI64(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_DOUBLE, 12);
  xfer += prot_->writeDouble(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_BOOL, 13);
  xfer += prot_->writeBool(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_FLOAT, 14);
  xfer += prot_->writeFloat(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_BYTE, 15);
  xfer += prot_->writeByte(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_I16, 17);
  xfer += prot_->writeI16(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_BYTE, 18);
  xfer += prot_->writeByte(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, float>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_I16, 21);
  xfer += prot_->writeI16(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_MAP, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::example::thrift32::Struct0>>::write(*prot_, this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_DOUBLE, 23);
  xfer += prot_->writeDouble(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct1>::write(prot_, &this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_I32, 25);
  xfer += prot_->writeI32(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_STRUCT, 26);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct0>::write(prot_, &this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_BOOL, 27);
  xfer += prot_->writeBool(this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_SET, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::set<std::set<std::string>>>::write(*prot_, this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_STRUCT, 29);
  xfer += ::apache::thrift::Cpp2Ops<  ::example::thrift32::Struct3>::write(prot_, &this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_BYTE, 30);
  xfer += prot_->writeByte(this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_LIST, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_BOOL, 33);
  xfer += prot_->writeBool(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->writeI64(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_STRING, 35);
  xfer += prot_->writeBinary(this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_FLOAT, 36);
  xfer += prot_->writeFloat(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // example::thrift32
