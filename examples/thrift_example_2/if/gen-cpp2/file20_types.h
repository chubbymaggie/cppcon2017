/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/Cursor.h>

#include <thrift/lib/cpp2/GeneratedHeaderHelper.h>



namespace example { namespace thrift20 {

class Struct0;
class Struct1;
class Struct2;
class Struct3;
class Struct4;
class Struct5;
class Struct6;
class Struct7;
class Struct8;
class Struct9;

class Struct0 : private apache::thrift::detail::st::ComparisonOperators<Struct0> {
 public:

  Struct0() :
      field4(0) {}
  // FragileConstructor for use in initialization lists only

  Struct0(apache::thrift::FragileConstructor, std::string field1__arg, std::set<float> field2__arg, std::vector<int8_t> field3__arg, int64_t field4__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }

  Struct0(Struct0&&) = default;

  Struct0(const Struct0&) = default;

  Struct0& operator=(Struct0&&) = default;

  Struct0& operator=(const Struct0&) = default;
  void __clear();

  virtual ~Struct0() {}

  std::string field1;
  std::set<float> field2;
  std::vector<int8_t> field3;
  int64_t field4;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
  } __isset;
  bool operator==(const Struct0& rhs) const;

  bool operator < (const Struct0& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    (void)rhs;
    return false;
  }

  const std::string& get_field1() const& {
    return field1;
  }

  std::string get_field1() && {
    return std::move(field1);
  }

  template <typename T_Struct0_field1_struct_setter>
  std::string& set_field1(T_Struct0_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct0_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const std::set<float>& get_field2() const&;
  std::set<float> get_field2() &&;

  template <typename T_Struct0_field2_struct_setter>
  std::set<float>& set_field2(T_Struct0_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct0_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const std::vector<int8_t>& get_field3() const&;
  std::vector<int8_t> get_field3() &&;

  template <typename T_Struct0_field3_struct_setter>
  std::vector<int8_t>& set_field3(T_Struct0_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct0_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  int64_t get_field4() const {
    return field4;
  }

  int64_t& set_field4(int64_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct0& a, Struct0& b);
extern template uint32_t Struct0::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct0::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct0::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct0::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct0::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct0::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct0::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct0::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift20
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift20::Struct0>::clear( ::example::thrift20::Struct0* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift20::Struct0>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct0>::write(Protocol* proto,  ::example::thrift20::Struct0 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct0>::read(Protocol* proto,  ::example::thrift20::Struct0* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct0>::serializedSize(Protocol const* proto,  ::example::thrift20::Struct0 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct0>::serializedSizeZC(Protocol const* proto,  ::example::thrift20::Struct0 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift20 {

class Struct1 : private apache::thrift::detail::st::ComparisonOperators<Struct1> {
 public:

  Struct1() :
      field5(0) {}
  // FragileConstructor for use in initialization lists only

  Struct1(apache::thrift::FragileConstructor, std::vector<int32_t> field1__arg, std::set<bool> field2__arg, std::map< ::example::thrift20::Struct0, int8_t> field3__arg, std::vector<int32_t> field4__arg, int32_t field5__arg,  ::example::thrift20::Struct0 field6__arg, std::set<int64_t> field7__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }

  Struct1(Struct1&&) = default;

  Struct1(const Struct1&) = default;

  Struct1& operator=(Struct1&&) = default;

  Struct1& operator=(const Struct1&) = default;
  void __clear();

  virtual ~Struct1() {}

  std::vector<int32_t> field1;
  std::set<bool> field2;
  std::map< ::example::thrift20::Struct0, int8_t> field3;
  std::vector<int32_t> field4;
  int32_t field5;
   ::example::thrift20::Struct0 field6;
  std::set<int64_t> field7;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
  } __isset;
  bool operator==(const Struct1& rhs) const;

  bool operator < (const Struct1& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    (void)rhs;
    return false;
  }
  const std::vector<int32_t>& get_field1() const&;
  std::vector<int32_t> get_field1() &&;

  template <typename T_Struct1_field1_struct_setter>
  std::vector<int32_t>& set_field1(T_Struct1_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct1_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const std::set<bool>& get_field2() const&;
  std::set<bool> get_field2() &&;

  template <typename T_Struct1_field2_struct_setter>
  std::set<bool>& set_field2(T_Struct1_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct1_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const std::map< ::example::thrift20::Struct0, int8_t>& get_field3() const&;
  std::map< ::example::thrift20::Struct0, int8_t> get_field3() &&;

  template <typename T_Struct1_field3_struct_setter>
  std::map< ::example::thrift20::Struct0, int8_t>& set_field3(T_Struct1_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct1_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }
  const std::vector<int32_t>& get_field4() const&;
  std::vector<int32_t> get_field4() &&;

  template <typename T_Struct1_field4_struct_setter>
  std::vector<int32_t>& set_field4(T_Struct1_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct1_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }

  int32_t get_field5() const {
    return field5;
  }

  int32_t& set_field5(int32_t field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }
  const  ::example::thrift20::Struct0& get_field6() const&;
   ::example::thrift20::Struct0 get_field6() &&;

  template <typename T_Struct1_field6_struct_setter>
   ::example::thrift20::Struct0& set_field6(T_Struct1_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct1_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }
  const std::set<int64_t>& get_field7() const&;
  std::set<int64_t> get_field7() &&;

  template <typename T_Struct1_field7_struct_setter>
  std::set<int64_t>& set_field7(T_Struct1_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct1_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct1& a, Struct1& b);
extern template uint32_t Struct1::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct1::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct1::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct1::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct1::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct1::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct1::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct1::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift20
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift20::Struct1>::clear( ::example::thrift20::Struct1* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift20::Struct1>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct1>::write(Protocol* proto,  ::example::thrift20::Struct1 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct1>::read(Protocol* proto,  ::example::thrift20::Struct1* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct1>::serializedSize(Protocol const* proto,  ::example::thrift20::Struct1 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct1>::serializedSizeZC(Protocol const* proto,  ::example::thrift20::Struct1 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift20 {

class Struct2 : private apache::thrift::detail::st::ComparisonOperators<Struct2> {
 public:

  Struct2() {}
  // FragileConstructor for use in initialization lists only

  Struct2(apache::thrift::FragileConstructor) {}

  Struct2(Struct2&&) = default;

  Struct2(const Struct2&) = default;

  Struct2& operator=(Struct2&&) = default;

  Struct2& operator=(const Struct2&) = default;
  void __clear();

  virtual ~Struct2() {}

  bool operator==(const Struct2& /* rhs */) const;

  bool operator < (const Struct2& rhs) const {
    (void)rhs;
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct2& a, Struct2& b);
extern template uint32_t Struct2::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct2::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct2::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct2::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct2::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct2::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct2::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct2::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift20
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift20::Struct2>::clear( ::example::thrift20::Struct2* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift20::Struct2>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct2>::write(Protocol* proto,  ::example::thrift20::Struct2 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct2>::read(Protocol* proto,  ::example::thrift20::Struct2* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct2>::serializedSize(Protocol const* proto,  ::example::thrift20::Struct2 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct2>::serializedSizeZC(Protocol const* proto,  ::example::thrift20::Struct2 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift20 {

class Struct3 : private apache::thrift::detail::st::ComparisonOperators<Struct3> {
 public:

  Struct3() :
      field1(0) {}
  // FragileConstructor for use in initialization lists only

  Struct3(apache::thrift::FragileConstructor, float field1__arg) :
      field1(std::move(field1__arg)) {
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }

  Struct3(Struct3&&) = default;

  Struct3(const Struct3&) = default;

  Struct3& operator=(Struct3&&) = default;

  Struct3& operator=(const Struct3&) = default;
  void __clear();

  virtual ~Struct3() {}

  float field1;

  struct __isset {
    void __clear() {
      field1 = false;
    }

    bool field1 = false;
  } __isset;
  bool operator==(const Struct3& rhs) const;

  bool operator < (const Struct3& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    (void)rhs;
    return false;
  }

  float get_field1() const {
    return field1;
  }

  float& set_field1(float field1_) {
    field1 = field1_;
    __isset.field1 = true;
    return field1;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct3& a, Struct3& b);
extern template uint32_t Struct3::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct3::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct3::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct3::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct3::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct3::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct3::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct3::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift20
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift20::Struct3>::clear( ::example::thrift20::Struct3* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift20::Struct3>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct3>::write(Protocol* proto,  ::example::thrift20::Struct3 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct3>::read(Protocol* proto,  ::example::thrift20::Struct3* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct3>::serializedSize(Protocol const* proto,  ::example::thrift20::Struct3 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct3>::serializedSizeZC(Protocol const* proto,  ::example::thrift20::Struct3 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift20 {

class Struct4 : private apache::thrift::detail::st::ComparisonOperators<Struct4> {
 public:

  Struct4() :
      field5(0),
      field6(0),
      field9(0),
      field10(0),
      field12(0),
      field13(0) {}
  // FragileConstructor for use in initialization lists only

  Struct4(apache::thrift::FragileConstructor, std::vector<float> field1__arg, std::map<int8_t, double> field2__arg, std::string field3__arg, std::vector<std::string> field4__arg, int32_t field5__arg, double field6__arg, std::set<float> field7__arg, std::map< ::example::thrift20::Struct0, int16_t> field8__arg, int32_t field9__arg, int32_t field10__arg, std::string field11__arg, int8_t field12__arg, int16_t field13__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }

  Struct4(Struct4&&) = default;

  Struct4(const Struct4&) = default;

  Struct4& operator=(Struct4&&) = default;

  Struct4& operator=(const Struct4&) = default;
  void __clear();

  virtual ~Struct4() {}

  std::vector<float> field1;
  std::map<int8_t, double> field2;
  std::string field3;
  std::vector<std::string> field4;
  int32_t field5;
  double field6;
  std::set<float> field7;
  std::map< ::example::thrift20::Struct0, int16_t> field8;
  int32_t field9;
  int32_t field10;
  std::string field11;
  int8_t field12;
  int16_t field13;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
  } __isset;
  bool operator==(const Struct4& rhs) const;

  bool operator < (const Struct4& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    (void)rhs;
    return false;
  }
  const std::vector<float>& get_field1() const&;
  std::vector<float> get_field1() &&;

  template <typename T_Struct4_field1_struct_setter>
  std::vector<float>& set_field1(T_Struct4_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct4_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const std::map<int8_t, double>& get_field2() const&;
  std::map<int8_t, double> get_field2() &&;

  template <typename T_Struct4_field2_struct_setter>
  std::map<int8_t, double>& set_field2(T_Struct4_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct4_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  const std::string& get_field3() const& {
    return field3;
  }

  std::string get_field3() && {
    return std::move(field3);
  }

  template <typename T_Struct4_field3_struct_setter>
  std::string& set_field3(T_Struct4_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct4_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }
  const std::vector<std::string>& get_field4() const&;
  std::vector<std::string> get_field4() &&;

  template <typename T_Struct4_field4_struct_setter>
  std::vector<std::string>& set_field4(T_Struct4_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct4_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }

  int32_t get_field5() const {
    return field5;
  }

  int32_t& set_field5(int32_t field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }

  double get_field6() const {
    return field6;
  }

  double& set_field6(double field6_) {
    field6 = field6_;
    __isset.field6 = true;
    return field6;
  }
  const std::set<float>& get_field7() const&;
  std::set<float> get_field7() &&;

  template <typename T_Struct4_field7_struct_setter>
  std::set<float>& set_field7(T_Struct4_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct4_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }
  const std::map< ::example::thrift20::Struct0, int16_t>& get_field8() const&;
  std::map< ::example::thrift20::Struct0, int16_t> get_field8() &&;

  template <typename T_Struct4_field8_struct_setter>
  std::map< ::example::thrift20::Struct0, int16_t>& set_field8(T_Struct4_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct4_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }

  int32_t get_field9() const {
    return field9;
  }

  int32_t& set_field9(int32_t field9_) {
    field9 = field9_;
    __isset.field9 = true;
    return field9;
  }

  int32_t get_field10() const {
    return field10;
  }

  int32_t& set_field10(int32_t field10_) {
    field10 = field10_;
    __isset.field10 = true;
    return field10;
  }

  const std::string& get_field11() const& {
    return field11;
  }

  std::string get_field11() && {
    return std::move(field11);
  }

  template <typename T_Struct4_field11_struct_setter>
  std::string& set_field11(T_Struct4_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct4_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }

  int8_t get_field12() const {
    return field12;
  }

  int8_t& set_field12(int8_t field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }

  int16_t get_field13() const {
    return field13;
  }

  int16_t& set_field13(int16_t field13_) {
    field13 = field13_;
    __isset.field13 = true;
    return field13;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct4& a, Struct4& b);
extern template uint32_t Struct4::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct4::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct4::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct4::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct4::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct4::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct4::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct4::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift20
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift20::Struct4>::clear( ::example::thrift20::Struct4* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift20::Struct4>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct4>::write(Protocol* proto,  ::example::thrift20::Struct4 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct4>::read(Protocol* proto,  ::example::thrift20::Struct4* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct4>::serializedSize(Protocol const* proto,  ::example::thrift20::Struct4 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct4>::serializedSizeZC(Protocol const* proto,  ::example::thrift20::Struct4 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift20 {

class Struct5 : private apache::thrift::detail::st::ComparisonOperators<Struct5> {
 public:

  Struct5() :
      field2(0) {}
  // FragileConstructor for use in initialization lists only

  Struct5(apache::thrift::FragileConstructor,  ::example::thrift20::Struct3 field1__arg, int8_t field2__arg, std::vector<int64_t> field3__arg,  ::example::thrift20::Struct4 field4__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }

  Struct5(Struct5&&) = default;

  Struct5(const Struct5&) = default;

  Struct5& operator=(Struct5&&) = default;

  Struct5& operator=(const Struct5&) = default;
  void __clear();

  virtual ~Struct5() {}

   ::example::thrift20::Struct3 field1;
  int8_t field2;
  std::vector<int64_t> field3;
   ::example::thrift20::Struct4 field4;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
  } __isset;
  bool operator==(const Struct5& rhs) const;

  bool operator < (const Struct5& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    (void)rhs;
    return false;
  }
  const  ::example::thrift20::Struct3& get_field1() const&;
   ::example::thrift20::Struct3 get_field1() &&;

  template <typename T_Struct5_field1_struct_setter>
   ::example::thrift20::Struct3& set_field1(T_Struct5_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct5_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  int8_t get_field2() const {
    return field2;
  }

  int8_t& set_field2(int8_t field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }
  const std::vector<int64_t>& get_field3() const&;
  std::vector<int64_t> get_field3() &&;

  template <typename T_Struct5_field3_struct_setter>
  std::vector<int64_t>& set_field3(T_Struct5_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct5_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }
  const  ::example::thrift20::Struct4& get_field4() const&;
   ::example::thrift20::Struct4 get_field4() &&;

  template <typename T_Struct5_field4_struct_setter>
   ::example::thrift20::Struct4& set_field4(T_Struct5_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct5_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct5& a, Struct5& b);
extern template uint32_t Struct5::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct5::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct5::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct5::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct5::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct5::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct5::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct5::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift20
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift20::Struct5>::clear( ::example::thrift20::Struct5* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift20::Struct5>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct5>::write(Protocol* proto,  ::example::thrift20::Struct5 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct5>::read(Protocol* proto,  ::example::thrift20::Struct5* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct5>::serializedSize(Protocol const* proto,  ::example::thrift20::Struct5 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct5>::serializedSizeZC(Protocol const* proto,  ::example::thrift20::Struct5 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift20 {

class Struct6 : private apache::thrift::detail::st::ComparisonOperators<Struct6> {
 public:

  Struct6() :
      field2(0) {}
  // FragileConstructor for use in initialization lists only

  Struct6(apache::thrift::FragileConstructor, std::map<std::map<int32_t, int32_t>, int64_t> field1__arg, int8_t field2__arg, std::string field3__arg, std::string field4__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }

  Struct6(Struct6&&) = default;

  Struct6(const Struct6&) = default;

  Struct6& operator=(Struct6&&) = default;

  Struct6& operator=(const Struct6&) = default;
  void __clear();

  virtual ~Struct6() {}

  std::map<std::map<int32_t, int32_t>, int64_t> field1;
  int8_t field2;
  std::string field3;
  std::string field4;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
  } __isset;
  bool operator==(const Struct6& rhs) const;

  bool operator < (const Struct6& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    (void)rhs;
    return false;
  }
  const std::map<std::map<int32_t, int32_t>, int64_t>& get_field1() const&;
  std::map<std::map<int32_t, int32_t>, int64_t> get_field1() &&;

  template <typename T_Struct6_field1_struct_setter>
  std::map<std::map<int32_t, int32_t>, int64_t>& set_field1(T_Struct6_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct6_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  int8_t get_field2() const {
    return field2;
  }

  int8_t& set_field2(int8_t field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }

  const std::string& get_field3() const& {
    return field3;
  }

  std::string get_field3() && {
    return std::move(field3);
  }

  template <typename T_Struct6_field3_struct_setter>
  std::string& set_field3(T_Struct6_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct6_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  const std::string& get_field4() const& {
    return field4;
  }

  std::string get_field4() && {
    return std::move(field4);
  }

  template <typename T_Struct6_field4_struct_setter>
  std::string& set_field4(T_Struct6_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct6_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct6& a, Struct6& b);
extern template uint32_t Struct6::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct6::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct6::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct6::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct6::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct6::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct6::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct6::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift20
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift20::Struct6>::clear( ::example::thrift20::Struct6* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift20::Struct6>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct6>::write(Protocol* proto,  ::example::thrift20::Struct6 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct6>::read(Protocol* proto,  ::example::thrift20::Struct6* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct6>::serializedSize(Protocol const* proto,  ::example::thrift20::Struct6 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct6>::serializedSizeZC(Protocol const* proto,  ::example::thrift20::Struct6 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift20 {

class Struct7 : private apache::thrift::detail::st::ComparisonOperators<Struct7> {
 public:

  Struct7() :
      field2(0),
      field4(0),
      field6(0) {}
  // FragileConstructor for use in initialization lists only

  Struct7(apache::thrift::FragileConstructor, std::set<std::string> field1__arg, int16_t field2__arg, std::set< ::example::thrift20::Struct3> field3__arg, double field4__arg,  ::example::thrift20::Struct1 field5__arg, int16_t field6__arg, std::vector< ::example::thrift20::Struct1> field7__arg, std::map<double, std::string> field8__arg, std::vector<int32_t> field9__arg, std::set<float> field10__arg, std::string field11__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }

  Struct7(Struct7&&) = default;

  Struct7(const Struct7&) = default;

  Struct7& operator=(Struct7&&) = default;

  Struct7& operator=(const Struct7&) = default;
  void __clear();

  virtual ~Struct7() {}

  std::set<std::string> field1;
  int16_t field2;
  std::set< ::example::thrift20::Struct3> field3;
  double field4;
   ::example::thrift20::Struct1 field5;
  int16_t field6;
  std::vector< ::example::thrift20::Struct1> field7;
  std::map<double, std::string> field8;
  std::vector<int32_t> field9;
  std::set<float> field10;
  std::string field11;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
  } __isset;
  bool operator==(const Struct7& rhs) const;

  bool operator < (const Struct7& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    (void)rhs;
    return false;
  }
  const std::set<std::string>& get_field1() const&;
  std::set<std::string> get_field1() &&;

  template <typename T_Struct7_field1_struct_setter>
  std::set<std::string>& set_field1(T_Struct7_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct7_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  int16_t get_field2() const {
    return field2;
  }

  int16_t& set_field2(int16_t field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }
  const std::set< ::example::thrift20::Struct3>& get_field3() const&;
  std::set< ::example::thrift20::Struct3> get_field3() &&;

  template <typename T_Struct7_field3_struct_setter>
  std::set< ::example::thrift20::Struct3>& set_field3(T_Struct7_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct7_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  double get_field4() const {
    return field4;
  }

  double& set_field4(double field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }
  const  ::example::thrift20::Struct1& get_field5() const&;
   ::example::thrift20::Struct1 get_field5() &&;

  template <typename T_Struct7_field5_struct_setter>
   ::example::thrift20::Struct1& set_field5(T_Struct7_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct7_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }

  int16_t get_field6() const {
    return field6;
  }

  int16_t& set_field6(int16_t field6_) {
    field6 = field6_;
    __isset.field6 = true;
    return field6;
  }
  const std::vector< ::example::thrift20::Struct1>& get_field7() const&;
  std::vector< ::example::thrift20::Struct1> get_field7() &&;

  template <typename T_Struct7_field7_struct_setter>
  std::vector< ::example::thrift20::Struct1>& set_field7(T_Struct7_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct7_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }
  const std::map<double, std::string>& get_field8() const&;
  std::map<double, std::string> get_field8() &&;

  template <typename T_Struct7_field8_struct_setter>
  std::map<double, std::string>& set_field8(T_Struct7_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct7_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }
  const std::vector<int32_t>& get_field9() const&;
  std::vector<int32_t> get_field9() &&;

  template <typename T_Struct7_field9_struct_setter>
  std::vector<int32_t>& set_field9(T_Struct7_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct7_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }
  const std::set<float>& get_field10() const&;
  std::set<float> get_field10() &&;

  template <typename T_Struct7_field10_struct_setter>
  std::set<float>& set_field10(T_Struct7_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct7_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }

  const std::string& get_field11() const& {
    return field11;
  }

  std::string get_field11() && {
    return std::move(field11);
  }

  template <typename T_Struct7_field11_struct_setter>
  std::string& set_field11(T_Struct7_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct7_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct7& a, Struct7& b);
extern template uint32_t Struct7::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct7::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct7::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct7::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct7::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct7::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct7::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct7::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift20
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift20::Struct7>::clear( ::example::thrift20::Struct7* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift20::Struct7>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct7>::write(Protocol* proto,  ::example::thrift20::Struct7 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct7>::read(Protocol* proto,  ::example::thrift20::Struct7* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct7>::serializedSize(Protocol const* proto,  ::example::thrift20::Struct7 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct7>::serializedSizeZC(Protocol const* proto,  ::example::thrift20::Struct7 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift20 {

class Struct8 : private apache::thrift::detail::st::ComparisonOperators<Struct8> {
 public:

  Struct8() :
      field2(0),
      field3(0),
      field5(0),
      field7(0),
      field9(0),
      field12(0) {}
  // FragileConstructor for use in initialization lists only

  Struct8(apache::thrift::FragileConstructor, std::set<float> field1__arg, float field2__arg, int16_t field3__arg, std::map<int16_t, bool> field4__arg, double field5__arg, std::string field6__arg, int32_t field7__arg,  ::example::thrift20::Struct4 field8__arg, int64_t field9__arg, std::vector<std::string> field10__arg, std::set<int64_t> field11__arg, float field12__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }

  Struct8(Struct8&&) = default;

  Struct8(const Struct8&) = default;

  Struct8& operator=(Struct8&&) = default;

  Struct8& operator=(const Struct8&) = default;
  void __clear();

  virtual ~Struct8() {}

  std::set<float> field1;
  float field2;
  int16_t field3;
  std::map<int16_t, bool> field4;
  double field5;
  std::string field6;
  int32_t field7;
   ::example::thrift20::Struct4 field8;
  int64_t field9;
  std::vector<std::string> field10;
  std::set<int64_t> field11;
  float field12;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
  } __isset;
  bool operator==(const Struct8& rhs) const;

  bool operator < (const Struct8& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    (void)rhs;
    return false;
  }
  const std::set<float>& get_field1() const&;
  std::set<float> get_field1() &&;

  template <typename T_Struct8_field1_struct_setter>
  std::set<float>& set_field1(T_Struct8_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct8_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  float get_field2() const {
    return field2;
  }

  float& set_field2(float field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }

  int16_t get_field3() const {
    return field3;
  }

  int16_t& set_field3(int16_t field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }
  const std::map<int16_t, bool>& get_field4() const&;
  std::map<int16_t, bool> get_field4() &&;

  template <typename T_Struct8_field4_struct_setter>
  std::map<int16_t, bool>& set_field4(T_Struct8_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct8_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }

  double get_field5() const {
    return field5;
  }

  double& set_field5(double field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }

  const std::string& get_field6() const& {
    return field6;
  }

  std::string get_field6() && {
    return std::move(field6);
  }

  template <typename T_Struct8_field6_struct_setter>
  std::string& set_field6(T_Struct8_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct8_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }

  int32_t get_field7() const {
    return field7;
  }

  int32_t& set_field7(int32_t field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }
  const  ::example::thrift20::Struct4& get_field8() const&;
   ::example::thrift20::Struct4 get_field8() &&;

  template <typename T_Struct8_field8_struct_setter>
   ::example::thrift20::Struct4& set_field8(T_Struct8_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct8_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }

  int64_t get_field9() const {
    return field9;
  }

  int64_t& set_field9(int64_t field9_) {
    field9 = field9_;
    __isset.field9 = true;
    return field9;
  }
  const std::vector<std::string>& get_field10() const&;
  std::vector<std::string> get_field10() &&;

  template <typename T_Struct8_field10_struct_setter>
  std::vector<std::string>& set_field10(T_Struct8_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct8_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }
  const std::set<int64_t>& get_field11() const&;
  std::set<int64_t> get_field11() &&;

  template <typename T_Struct8_field11_struct_setter>
  std::set<int64_t>& set_field11(T_Struct8_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct8_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }

  float get_field12() const {
    return field12;
  }

  float& set_field12(float field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct8& a, Struct8& b);
extern template uint32_t Struct8::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct8::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct8::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct8::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct8::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct8::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct8::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct8::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift20
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift20::Struct8>::clear( ::example::thrift20::Struct8* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift20::Struct8>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct8>::write(Protocol* proto,  ::example::thrift20::Struct8 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct8>::read(Protocol* proto,  ::example::thrift20::Struct8* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct8>::serializedSize(Protocol const* proto,  ::example::thrift20::Struct8 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct8>::serializedSizeZC(Protocol const* proto,  ::example::thrift20::Struct8 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift20 {

class Struct9 : private apache::thrift::detail::st::ComparisonOperators<Struct9> {
 public:

  Struct9() :
      field2(0) {}
  // FragileConstructor for use in initialization lists only

  Struct9(apache::thrift::FragileConstructor, std::map< ::example::thrift20::Struct4, int64_t> field1__arg, bool field2__arg, std::set<float> field3__arg, std::string field4__arg, std::map<std::string, int16_t> field5__arg,  ::example::thrift20::Struct6 field6__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }

  Struct9(Struct9&&) = default;

  Struct9(const Struct9&) = default;

  Struct9& operator=(Struct9&&) = default;

  Struct9& operator=(const Struct9&) = default;
  void __clear();

  virtual ~Struct9() {}

  std::map< ::example::thrift20::Struct4, int64_t> field1;
  bool field2;
  std::set<float> field3;
  std::string field4;
  std::map<std::string, int16_t> field5;
   ::example::thrift20::Struct6 field6;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
  } __isset;
  bool operator==(const Struct9& rhs) const;

  bool operator < (const Struct9& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    (void)rhs;
    return false;
  }
  const std::map< ::example::thrift20::Struct4, int64_t>& get_field1() const&;
  std::map< ::example::thrift20::Struct4, int64_t> get_field1() &&;

  template <typename T_Struct9_field1_struct_setter>
  std::map< ::example::thrift20::Struct4, int64_t>& set_field1(T_Struct9_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct9_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  bool get_field2() const {
    return field2;
  }

  bool& set_field2(bool field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }
  const std::set<float>& get_field3() const&;
  std::set<float> get_field3() &&;

  template <typename T_Struct9_field3_struct_setter>
  std::set<float>& set_field3(T_Struct9_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct9_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  const std::string& get_field4() const& {
    return field4;
  }

  std::string get_field4() && {
    return std::move(field4);
  }

  template <typename T_Struct9_field4_struct_setter>
  std::string& set_field4(T_Struct9_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct9_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }
  const std::map<std::string, int16_t>& get_field5() const&;
  std::map<std::string, int16_t> get_field5() &&;

  template <typename T_Struct9_field5_struct_setter>
  std::map<std::string, int16_t>& set_field5(T_Struct9_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct9_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }
  const  ::example::thrift20::Struct6& get_field6() const&;
   ::example::thrift20::Struct6 get_field6() &&;

  template <typename T_Struct9_field6_struct_setter>
   ::example::thrift20::Struct6& set_field6(T_Struct9_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct9_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct9& a, Struct9& b);
extern template uint32_t Struct9::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct9::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct9::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct9::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct9::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct9::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct9::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct9::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // example::thrift20
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::example::thrift20::Struct9>::clear( ::example::thrift20::Struct9* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::example::thrift20::Struct9>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct9>::write(Protocol* proto,  ::example::thrift20::Struct9 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct9>::read(Protocol* proto,  ::example::thrift20::Struct9* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct9>::serializedSize(Protocol const* proto,  ::example::thrift20::Struct9 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::example::thrift20::Struct9>::serializedSizeZC(Protocol const* proto,  ::example::thrift20::Struct9 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace example { namespace thrift20 {

}} // example::thrift20
