/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <folly/io/Cursor.h>
#include <folly/io/IOBuf.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/GeneratedHeaderHelper.h>
#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>


// BEGIN declare_enums

// END declare_enums
// BEGIN struct_indirection

// END struct_indirection
// BEGIN forward_declare
namespace cpp2 {
class Struct0;
class Struct1;
class Struct2;
class Struct3;
class Struct4;
class Struct5;
class Struct6;
class Struct7;
class Struct8;
class Struct9;
class Struct10;
class Struct11;
class Struct12;
class Struct13;
class Struct14;
class Struct15;
class Struct16;
class Struct17;
class Struct18;
class Struct19;
class Struct20;
class Struct21;
class Struct22;
class Struct23;
class Struct24;
class Struct25;
class Struct26;
class Struct27;
class Struct28;
} // cpp2
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
class Struct0 : private apache::thrift::detail::st::ComparisonOperators<Struct0> {
 public:

  Struct0() :
      field3(0),
      field4(0),
      field6(0),
      field8(0),
      field9(0),
      field14(0),
      field15(0),
      field16(0),
      field18(0),
      field20(0),
      field21(0),
      field22(0),
      field27(0),
      field28(0),
      field29(0),
      field31(0),
      field32(0),
      field38(0),
      field39(0),
      field40(0),
      field41(0),
      field43(0),
      field45(0),
      field46(0),
      field47(0),
      field48(0),
      field49(0),
      field50(0),
      field51(0),
      field52(0),
      field53(0),
      field54(0),
      field55(0),
      field57(0),
      field59(0),
      field60(0),
      field62(0),
      field63(0),
      field65(0),
      field66(0),
      field67(0),
      field69(0),
      field70(0),
      field74(0),
      field75(0),
      field76(0),
      field77(0),
      field80(0),
      field84(0),
      field86(0),
      field87(0),
      field91(0),
      field93(0),
      field94(0),
      field95(0),
      field100(0),
      field103(0),
      field104(0),
      field106(0),
      field109(0),
      field110(0),
      field112(0),
      field114(0),
      field115(0),
      field116(0),
      field117(0),
      field121(0),
      field122(0) {}
  // FragileConstructor for use in initialization lists only

  Struct0(apache::thrift::FragileConstructor, std::map<double, float> field1__arg, std::string field2__arg, int64_t field3__arg, float field4__arg, std::string field5__arg, int64_t field6__arg, std::set<std::string> field7__arg, int16_t field8__arg, int16_t field9__arg, std::vector<double> field10__arg, std::map<float, std::vector<std::string>> field11__arg, std::map<int32_t, float> field12__arg, std::vector<std::vector<std::string>> field13__arg, int32_t field14__arg, int8_t field15__arg, bool field16__arg, std::string field17__arg, int16_t field18__arg, std::vector<int8_t> field19__arg, double field20__arg, int64_t field21__arg, bool field22__arg, std::set<int64_t> field23__arg, std::map<double, std::string> field24__arg, std::map<int8_t, int8_t> field25__arg, std::map<float, std::string> field26__arg, int8_t field27__arg, bool field28__arg, int64_t field29__arg, std::map<std::set<int16_t>, std::string> field30__arg, int32_t field31__arg, int64_t field32__arg, std::map<int8_t, std::string> field33__arg, std::string field34__arg, std::vector<int64_t> field35__arg, std::set<std::map<bool, int32_t>> field36__arg, std::map<std::vector<float>, int8_t> field37__arg, bool field38__arg, int32_t field39__arg, int8_t field40__arg, bool field41__arg, std::vector<std::string> field42__arg, int8_t field43__arg, std::string field44__arg, float field45__arg, bool field46__arg, bool field47__arg, int8_t field48__arg, bool field49__arg, int64_t field50__arg, int32_t field51__arg, int32_t field52__arg, float field53__arg, double field54__arg, int64_t field55__arg, std::set<float> field56__arg, double field57__arg, std::string field58__arg, int32_t field59__arg, bool field60__arg, std::set<int8_t> field61__arg, int16_t field62__arg, bool field63__arg, std::map<int8_t, int16_t> field64__arg, int16_t field65__arg, float field66__arg, float field67__arg, std::map<int64_t, std::vector<std::string>> field68__arg, int64_t field69__arg, bool field70__arg, std::string field71__arg, std::string field72__arg, std::string field73__arg, int16_t field74__arg, bool field75__arg, double field76__arg, bool field77__arg, std::string field78__arg, std::set<std::string> field79__arg, bool field80__arg, std::map<std::string, double> field81__arg, std::map<std::vector<bool>, bool> field82__arg, std::map<int64_t, double> field83__arg, int16_t field84__arg, std::set<std::string> field85__arg, int32_t field86__arg, int32_t field87__arg, std::vector<int32_t> field88__arg, std::vector<std::string> field89__arg, std::string field90__arg, int8_t field91__arg, std::vector<bool> field92__arg, bool field93__arg, bool field94__arg, bool field95__arg, std::set<int32_t> field96__arg, std::string field97__arg, std::string field98__arg, std::vector<double> field99__arg, int64_t field100__arg, std::set<std::string> field101__arg, std::vector<float> field102__arg, int16_t field103__arg, double field104__arg, std::vector<std::string> field105__arg, int16_t field106__arg, std::set<bool> field107__arg, std::vector<int32_t> field108__arg, float field109__arg, float field110__arg, std::vector<float> field111__arg, bool field112__arg, std::string field113__arg, int32_t field114__arg, int32_t field115__arg, int32_t field116__arg, double field117__arg, std::string field118__arg, std::vector<std::string> field119__arg, std::map<std::map<double, float>, float> field120__arg, int64_t field121__arg, bool field122__arg, std::vector<std::string> field123__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)),
      field97(std::move(field97__arg)),
      field98(std::move(field98__arg)),
      field99(std::move(field99__arg)),
      field100(std::move(field100__arg)),
      field101(std::move(field101__arg)),
      field102(std::move(field102__arg)),
      field103(std::move(field103__arg)),
      field104(std::move(field104__arg)),
      field105(std::move(field105__arg)),
      field106(std::move(field106__arg)),
      field107(std::move(field107__arg)),
      field108(std::move(field108__arg)),
      field109(std::move(field109__arg)),
      field110(std::move(field110__arg)),
      field111(std::move(field111__arg)),
      field112(std::move(field112__arg)),
      field113(std::move(field113__arg)),
      field114(std::move(field114__arg)),
      field115(std::move(field115__arg)),
      field116(std::move(field116__arg)),
      field117(std::move(field117__arg)),
      field118(std::move(field118__arg)),
      field119(std::move(field119__arg)),
      field120(std::move(field120__arg)),
      field121(std::move(field121__arg)),
      field122(std::move(field122__arg)),
      field123(std::move(field123__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
    __isset.field97 = true;
    __isset.field98 = true;
    __isset.field99 = true;
    __isset.field100 = true;
    __isset.field101 = true;
    __isset.field102 = true;
    __isset.field103 = true;
    __isset.field104 = true;
    __isset.field105 = true;
    __isset.field106 = true;
    __isset.field107 = true;
    __isset.field108 = true;
    __isset.field109 = true;
    __isset.field110 = true;
    __isset.field111 = true;
    __isset.field112 = true;
    __isset.field113 = true;
    __isset.field114 = true;
    __isset.field115 = true;
    __isset.field116 = true;
    __isset.field117 = true;
    __isset.field118 = true;
    __isset.field119 = true;
    __isset.field120 = true;
    __isset.field121 = true;
    __isset.field122 = true;
    __isset.field123 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<97, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field97 = arg.move();
    __isset.field97 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<98, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field98 = arg.move();
    __isset.field98 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<99, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field99 = arg.move();
    __isset.field99 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field100 = arg.move();
    __isset.field100 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field101 = arg.move();
    __isset.field101 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<102, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field102 = arg.move();
    __isset.field102 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<103, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field103 = arg.move();
    __isset.field103 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<104, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field104 = arg.move();
    __isset.field104 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<105, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field105 = arg.move();
    __isset.field105 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<106, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field106 = arg.move();
    __isset.field106 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<107, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field107 = arg.move();
    __isset.field107 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<108, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field108 = arg.move();
    __isset.field108 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<109, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field109 = arg.move();
    __isset.field109 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<110, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field110 = arg.move();
    __isset.field110 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<111, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field111 = arg.move();
    __isset.field111 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<112, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field112 = arg.move();
    __isset.field112 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<113, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field113 = arg.move();
    __isset.field113 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<114, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field114 = arg.move();
    __isset.field114 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<115, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field115 = arg.move();
    __isset.field115 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<116, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field116 = arg.move();
    __isset.field116 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<117, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field117 = arg.move();
    __isset.field117 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<118, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field118 = arg.move();
    __isset.field118 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<119, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field119 = arg.move();
    __isset.field119 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<120, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field120 = arg.move();
    __isset.field120 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<121, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field121 = arg.move();
    __isset.field121 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<122, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field122 = arg.move();
    __isset.field122 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct0(::apache::thrift::detail::argument_wrapper<123, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct0(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field123 = arg.move();
    __isset.field123 = true;
  }

  Struct0(Struct0&&) = default;

  Struct0(const Struct0&) = default;

  Struct0& operator=(Struct0&&) = default;

  Struct0& operator=(const Struct0&) = default;
  void __clear();

  virtual ~Struct0() {}

  std::map<double, float> field1;
  std::string field2;
  int64_t field3;
  float field4;
  std::string field5;
  int64_t field6;
  std::set<std::string> field7;
  int16_t field8;
  int16_t field9;
  std::vector<double> field10;
  std::map<float, std::vector<std::string>> field11;
  std::map<int32_t, float> field12;
  std::vector<std::vector<std::string>> field13;
  int32_t field14;
  int8_t field15;
  bool field16;
  std::string field17;
  int16_t field18;
  std::vector<int8_t> field19;
  double field20;
  int64_t field21;
  bool field22;
  std::set<int64_t> field23;
  std::map<double, std::string> field24;
  std::map<int8_t, int8_t> field25;
  std::map<float, std::string> field26;
  int8_t field27;
  bool field28;
  int64_t field29;
  std::map<std::set<int16_t>, std::string> field30;
  int32_t field31;
  int64_t field32;
  std::map<int8_t, std::string> field33;
  std::string field34;
  std::vector<int64_t> field35;
  std::set<std::map<bool, int32_t>> field36;
  std::map<std::vector<float>, int8_t> field37;
  bool field38;
  int32_t field39;
  int8_t field40;
  bool field41;
  std::vector<std::string> field42;
  int8_t field43;
  std::string field44;
  float field45;
  bool field46;
  bool field47;
  int8_t field48;
  bool field49;
  int64_t field50;
  int32_t field51;
  int32_t field52;
  float field53;
  double field54;
  int64_t field55;
  std::set<float> field56;
  double field57;
  std::string field58;
  int32_t field59;
  bool field60;
  std::set<int8_t> field61;
  int16_t field62;
  bool field63;
  std::map<int8_t, int16_t> field64;
  int16_t field65;
  float field66;
  float field67;
  std::map<int64_t, std::vector<std::string>> field68;
  int64_t field69;
  bool field70;
  std::string field71;
  std::string field72;
  std::string field73;
  int16_t field74;
  bool field75;
  double field76;
  bool field77;
  std::string field78;
  std::set<std::string> field79;
  bool field80;
  std::map<std::string, double> field81;
  std::map<std::vector<bool>, bool> field82;
  std::map<int64_t, double> field83;
  int16_t field84;
  std::set<std::string> field85;
  int32_t field86;
  int32_t field87;
  std::vector<int32_t> field88;
  std::vector<std::string> field89;
  std::string field90;
  int8_t field91;
  std::vector<bool> field92;
  bool field93;
  bool field94;
  bool field95;
  std::set<int32_t> field96;
  std::string field97;
  std::string field98;
  std::vector<double> field99;
  int64_t field100;
  std::set<std::string> field101;
  std::vector<float> field102;
  int16_t field103;
  double field104;
  std::vector<std::string> field105;
  int16_t field106;
  std::set<bool> field107;
  std::vector<int32_t> field108;
  float field109;
  float field110;
  std::vector<float> field111;
  bool field112;
  std::string field113;
  int32_t field114;
  int32_t field115;
  int32_t field116;
  double field117;
  std::string field118;
  std::vector<std::string> field119;
  std::map<std::map<double, float>, float> field120;
  int64_t field121;
  bool field122;
  std::vector<std::string> field123;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
      field97 = false;
      field98 = false;
      field99 = false;
      field100 = false;
      field101 = false;
      field102 = false;
      field103 = false;
      field104 = false;
      field105 = false;
      field106 = false;
      field107 = false;
      field108 = false;
      field109 = false;
      field110 = false;
      field111 = false;
      field112 = false;
      field113 = false;
      field114 = false;
      field115 = false;
      field116 = false;
      field117 = false;
      field118 = false;
      field119 = false;
      field120 = false;
      field121 = false;
      field122 = false;
      field123 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
    bool field97 = false;
    bool field98 = false;
    bool field99 = false;
    bool field100 = false;
    bool field101 = false;
    bool field102 = false;
    bool field103 = false;
    bool field104 = false;
    bool field105 = false;
    bool field106 = false;
    bool field107 = false;
    bool field108 = false;
    bool field109 = false;
    bool field110 = false;
    bool field111 = false;
    bool field112 = false;
    bool field113 = false;
    bool field114 = false;
    bool field115 = false;
    bool field116 = false;
    bool field117 = false;
    bool field118 = false;
    bool field119 = false;
    bool field120 = false;
    bool field121 = false;
    bool field122 = false;
    bool field123 = false;
  } __isset;
  bool operator==(const Struct0& rhs) const;

  bool operator < (const Struct0& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    if (!(field97 == rhs.field97)) {
      return field97 < rhs.field97;
    }
    if (!(field98 == rhs.field98)) {
      return field98 < rhs.field98;
    }
    if (!(field99 == rhs.field99)) {
      return field99 < rhs.field99;
    }
    if (!(field100 == rhs.field100)) {
      return field100 < rhs.field100;
    }
    if (!(field101 == rhs.field101)) {
      return field101 < rhs.field101;
    }
    if (!(field102 == rhs.field102)) {
      return field102 < rhs.field102;
    }
    if (!(field103 == rhs.field103)) {
      return field103 < rhs.field103;
    }
    if (!(field104 == rhs.field104)) {
      return field104 < rhs.field104;
    }
    if (!(field105 == rhs.field105)) {
      return field105 < rhs.field105;
    }
    if (!(field106 == rhs.field106)) {
      return field106 < rhs.field106;
    }
    if (!(field107 == rhs.field107)) {
      return field107 < rhs.field107;
    }
    if (!(field108 == rhs.field108)) {
      return field108 < rhs.field108;
    }
    if (!(field109 == rhs.field109)) {
      return field109 < rhs.field109;
    }
    if (!(field110 == rhs.field110)) {
      return field110 < rhs.field110;
    }
    if (!(field111 == rhs.field111)) {
      return field111 < rhs.field111;
    }
    if (!(field112 == rhs.field112)) {
      return field112 < rhs.field112;
    }
    if (!(field113 == rhs.field113)) {
      return field113 < rhs.field113;
    }
    if (!(field114 == rhs.field114)) {
      return field114 < rhs.field114;
    }
    if (!(field115 == rhs.field115)) {
      return field115 < rhs.field115;
    }
    if (!(field116 == rhs.field116)) {
      return field116 < rhs.field116;
    }
    if (!(field117 == rhs.field117)) {
      return field117 < rhs.field117;
    }
    if (!(field118 == rhs.field118)) {
      return field118 < rhs.field118;
    }
    if (!(field119 == rhs.field119)) {
      return field119 < rhs.field119;
    }
    if (!(field120 == rhs.field120)) {
      return field120 < rhs.field120;
    }
    if (!(field121 == rhs.field121)) {
      return field121 < rhs.field121;
    }
    if (!(field122 == rhs.field122)) {
      return field122 < rhs.field122;
    }
    if (!(field123 == rhs.field123)) {
      return field123 < rhs.field123;
    }
    (void)rhs;
    return false;
  }
  const std::map<double, float>& get_field1() const&;
  std::map<double, float> get_field1() &&;

  template <typename T_Struct0_field1_struct_setter>
  std::map<double, float>& set_field1(T_Struct0_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct0_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  const std::string& get_field2() const& {
    return field2;
  }

  std::string get_field2() && {
    return std::move(field2);
  }

  template <typename T_Struct0_field2_struct_setter>
  std::string& set_field2(T_Struct0_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct0_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  int64_t get_field3() const {
    return field3;
  }

  int64_t& set_field3(int64_t field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }

  float get_field4() const {
    return field4;
  }

  float& set_field4(float field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }

  const std::string& get_field5() const& {
    return field5;
  }

  std::string get_field5() && {
    return std::move(field5);
  }

  template <typename T_Struct0_field5_struct_setter>
  std::string& set_field5(T_Struct0_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct0_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }

  int64_t get_field6() const {
    return field6;
  }

  int64_t& set_field6(int64_t field6_) {
    field6 = field6_;
    __isset.field6 = true;
    return field6;
  }
  const std::set<std::string>& get_field7() const&;
  std::set<std::string> get_field7() &&;

  template <typename T_Struct0_field7_struct_setter>
  std::set<std::string>& set_field7(T_Struct0_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct0_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }

  int16_t get_field8() const {
    return field8;
  }

  int16_t& set_field8(int16_t field8_) {
    field8 = field8_;
    __isset.field8 = true;
    return field8;
  }

  int16_t get_field9() const {
    return field9;
  }

  int16_t& set_field9(int16_t field9_) {
    field9 = field9_;
    __isset.field9 = true;
    return field9;
  }
  const std::vector<double>& get_field10() const&;
  std::vector<double> get_field10() &&;

  template <typename T_Struct0_field10_struct_setter>
  std::vector<double>& set_field10(T_Struct0_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct0_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }
  const std::map<float, std::vector<std::string>>& get_field11() const&;
  std::map<float, std::vector<std::string>> get_field11() &&;

  template <typename T_Struct0_field11_struct_setter>
  std::map<float, std::vector<std::string>>& set_field11(T_Struct0_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct0_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }
  const std::map<int32_t, float>& get_field12() const&;
  std::map<int32_t, float> get_field12() &&;

  template <typename T_Struct0_field12_struct_setter>
  std::map<int32_t, float>& set_field12(T_Struct0_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct0_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }
  const std::vector<std::vector<std::string>>& get_field13() const&;
  std::vector<std::vector<std::string>> get_field13() &&;

  template <typename T_Struct0_field13_struct_setter>
  std::vector<std::vector<std::string>>& set_field13(T_Struct0_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct0_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }

  int32_t get_field14() const {
    return field14;
  }

  int32_t& set_field14(int32_t field14_) {
    field14 = field14_;
    __isset.field14 = true;
    return field14;
  }

  int8_t get_field15() const {
    return field15;
  }

  int8_t& set_field15(int8_t field15_) {
    field15 = field15_;
    __isset.field15 = true;
    return field15;
  }

  bool get_field16() const {
    return field16;
  }

  bool& set_field16(bool field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }

  const std::string& get_field17() const& {
    return field17;
  }

  std::string get_field17() && {
    return std::move(field17);
  }

  template <typename T_Struct0_field17_struct_setter>
  std::string& set_field17(T_Struct0_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct0_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }

  int16_t get_field18() const {
    return field18;
  }

  int16_t& set_field18(int16_t field18_) {
    field18 = field18_;
    __isset.field18 = true;
    return field18;
  }
  const std::vector<int8_t>& get_field19() const&;
  std::vector<int8_t> get_field19() &&;

  template <typename T_Struct0_field19_struct_setter>
  std::vector<int8_t>& set_field19(T_Struct0_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct0_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }

  double get_field20() const {
    return field20;
  }

  double& set_field20(double field20_) {
    field20 = field20_;
    __isset.field20 = true;
    return field20;
  }

  int64_t get_field21() const {
    return field21;
  }

  int64_t& set_field21(int64_t field21_) {
    field21 = field21_;
    __isset.field21 = true;
    return field21;
  }

  bool get_field22() const {
    return field22;
  }

  bool& set_field22(bool field22_) {
    field22 = field22_;
    __isset.field22 = true;
    return field22;
  }
  const std::set<int64_t>& get_field23() const&;
  std::set<int64_t> get_field23() &&;

  template <typename T_Struct0_field23_struct_setter>
  std::set<int64_t>& set_field23(T_Struct0_field23_struct_setter&& field23_) {
    field23 = std::forward<T_Struct0_field23_struct_setter>(field23_);
    __isset.field23 = true;
    return field23;
  }
  const std::map<double, std::string>& get_field24() const&;
  std::map<double, std::string> get_field24() &&;

  template <typename T_Struct0_field24_struct_setter>
  std::map<double, std::string>& set_field24(T_Struct0_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct0_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }
  const std::map<int8_t, int8_t>& get_field25() const&;
  std::map<int8_t, int8_t> get_field25() &&;

  template <typename T_Struct0_field25_struct_setter>
  std::map<int8_t, int8_t>& set_field25(T_Struct0_field25_struct_setter&& field25_) {
    field25 = std::forward<T_Struct0_field25_struct_setter>(field25_);
    __isset.field25 = true;
    return field25;
  }
  const std::map<float, std::string>& get_field26() const&;
  std::map<float, std::string> get_field26() &&;

  template <typename T_Struct0_field26_struct_setter>
  std::map<float, std::string>& set_field26(T_Struct0_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct0_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }

  int8_t get_field27() const {
    return field27;
  }

  int8_t& set_field27(int8_t field27_) {
    field27 = field27_;
    __isset.field27 = true;
    return field27;
  }

  bool get_field28() const {
    return field28;
  }

  bool& set_field28(bool field28_) {
    field28 = field28_;
    __isset.field28 = true;
    return field28;
  }

  int64_t get_field29() const {
    return field29;
  }

  int64_t& set_field29(int64_t field29_) {
    field29 = field29_;
    __isset.field29 = true;
    return field29;
  }
  const std::map<std::set<int16_t>, std::string>& get_field30() const&;
  std::map<std::set<int16_t>, std::string> get_field30() &&;

  template <typename T_Struct0_field30_struct_setter>
  std::map<std::set<int16_t>, std::string>& set_field30(T_Struct0_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct0_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }

  int32_t get_field31() const {
    return field31;
  }

  int32_t& set_field31(int32_t field31_) {
    field31 = field31_;
    __isset.field31 = true;
    return field31;
  }

  int64_t get_field32() const {
    return field32;
  }

  int64_t& set_field32(int64_t field32_) {
    field32 = field32_;
    __isset.field32 = true;
    return field32;
  }
  const std::map<int8_t, std::string>& get_field33() const&;
  std::map<int8_t, std::string> get_field33() &&;

  template <typename T_Struct0_field33_struct_setter>
  std::map<int8_t, std::string>& set_field33(T_Struct0_field33_struct_setter&& field33_) {
    field33 = std::forward<T_Struct0_field33_struct_setter>(field33_);
    __isset.field33 = true;
    return field33;
  }

  const std::string& get_field34() const& {
    return field34;
  }

  std::string get_field34() && {
    return std::move(field34);
  }

  template <typename T_Struct0_field34_struct_setter>
  std::string& set_field34(T_Struct0_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct0_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }
  const std::vector<int64_t>& get_field35() const&;
  std::vector<int64_t> get_field35() &&;

  template <typename T_Struct0_field35_struct_setter>
  std::vector<int64_t>& set_field35(T_Struct0_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct0_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }
  const std::set<std::map<bool, int32_t>>& get_field36() const&;
  std::set<std::map<bool, int32_t>> get_field36() &&;

  template <typename T_Struct0_field36_struct_setter>
  std::set<std::map<bool, int32_t>>& set_field36(T_Struct0_field36_struct_setter&& field36_) {
    field36 = std::forward<T_Struct0_field36_struct_setter>(field36_);
    __isset.field36 = true;
    return field36;
  }
  const std::map<std::vector<float>, int8_t>& get_field37() const&;
  std::map<std::vector<float>, int8_t> get_field37() &&;

  template <typename T_Struct0_field37_struct_setter>
  std::map<std::vector<float>, int8_t>& set_field37(T_Struct0_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct0_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }

  bool get_field38() const {
    return field38;
  }

  bool& set_field38(bool field38_) {
    field38 = field38_;
    __isset.field38 = true;
    return field38;
  }

  int32_t get_field39() const {
    return field39;
  }

  int32_t& set_field39(int32_t field39_) {
    field39 = field39_;
    __isset.field39 = true;
    return field39;
  }

  int8_t get_field40() const {
    return field40;
  }

  int8_t& set_field40(int8_t field40_) {
    field40 = field40_;
    __isset.field40 = true;
    return field40;
  }

  bool get_field41() const {
    return field41;
  }

  bool& set_field41(bool field41_) {
    field41 = field41_;
    __isset.field41 = true;
    return field41;
  }
  const std::vector<std::string>& get_field42() const&;
  std::vector<std::string> get_field42() &&;

  template <typename T_Struct0_field42_struct_setter>
  std::vector<std::string>& set_field42(T_Struct0_field42_struct_setter&& field42_) {
    field42 = std::forward<T_Struct0_field42_struct_setter>(field42_);
    __isset.field42 = true;
    return field42;
  }

  int8_t get_field43() const {
    return field43;
  }

  int8_t& set_field43(int8_t field43_) {
    field43 = field43_;
    __isset.field43 = true;
    return field43;
  }

  const std::string& get_field44() const& {
    return field44;
  }

  std::string get_field44() && {
    return std::move(field44);
  }

  template <typename T_Struct0_field44_struct_setter>
  std::string& set_field44(T_Struct0_field44_struct_setter&& field44_) {
    field44 = std::forward<T_Struct0_field44_struct_setter>(field44_);
    __isset.field44 = true;
    return field44;
  }

  float get_field45() const {
    return field45;
  }

  float& set_field45(float field45_) {
    field45 = field45_;
    __isset.field45 = true;
    return field45;
  }

  bool get_field46() const {
    return field46;
  }

  bool& set_field46(bool field46_) {
    field46 = field46_;
    __isset.field46 = true;
    return field46;
  }

  bool get_field47() const {
    return field47;
  }

  bool& set_field47(bool field47_) {
    field47 = field47_;
    __isset.field47 = true;
    return field47;
  }

  int8_t get_field48() const {
    return field48;
  }

  int8_t& set_field48(int8_t field48_) {
    field48 = field48_;
    __isset.field48 = true;
    return field48;
  }

  bool get_field49() const {
    return field49;
  }

  bool& set_field49(bool field49_) {
    field49 = field49_;
    __isset.field49 = true;
    return field49;
  }

  int64_t get_field50() const {
    return field50;
  }

  int64_t& set_field50(int64_t field50_) {
    field50 = field50_;
    __isset.field50 = true;
    return field50;
  }

  int32_t get_field51() const {
    return field51;
  }

  int32_t& set_field51(int32_t field51_) {
    field51 = field51_;
    __isset.field51 = true;
    return field51;
  }

  int32_t get_field52() const {
    return field52;
  }

  int32_t& set_field52(int32_t field52_) {
    field52 = field52_;
    __isset.field52 = true;
    return field52;
  }

  float get_field53() const {
    return field53;
  }

  float& set_field53(float field53_) {
    field53 = field53_;
    __isset.field53 = true;
    return field53;
  }

  double get_field54() const {
    return field54;
  }

  double& set_field54(double field54_) {
    field54 = field54_;
    __isset.field54 = true;
    return field54;
  }

  int64_t get_field55() const {
    return field55;
  }

  int64_t& set_field55(int64_t field55_) {
    field55 = field55_;
    __isset.field55 = true;
    return field55;
  }
  const std::set<float>& get_field56() const&;
  std::set<float> get_field56() &&;

  template <typename T_Struct0_field56_struct_setter>
  std::set<float>& set_field56(T_Struct0_field56_struct_setter&& field56_) {
    field56 = std::forward<T_Struct0_field56_struct_setter>(field56_);
    __isset.field56 = true;
    return field56;
  }

  double get_field57() const {
    return field57;
  }

  double& set_field57(double field57_) {
    field57 = field57_;
    __isset.field57 = true;
    return field57;
  }

  const std::string& get_field58() const& {
    return field58;
  }

  std::string get_field58() && {
    return std::move(field58);
  }

  template <typename T_Struct0_field58_struct_setter>
  std::string& set_field58(T_Struct0_field58_struct_setter&& field58_) {
    field58 = std::forward<T_Struct0_field58_struct_setter>(field58_);
    __isset.field58 = true;
    return field58;
  }

  int32_t get_field59() const {
    return field59;
  }

  int32_t& set_field59(int32_t field59_) {
    field59 = field59_;
    __isset.field59 = true;
    return field59;
  }

  bool get_field60() const {
    return field60;
  }

  bool& set_field60(bool field60_) {
    field60 = field60_;
    __isset.field60 = true;
    return field60;
  }
  const std::set<int8_t>& get_field61() const&;
  std::set<int8_t> get_field61() &&;

  template <typename T_Struct0_field61_struct_setter>
  std::set<int8_t>& set_field61(T_Struct0_field61_struct_setter&& field61_) {
    field61 = std::forward<T_Struct0_field61_struct_setter>(field61_);
    __isset.field61 = true;
    return field61;
  }

  int16_t get_field62() const {
    return field62;
  }

  int16_t& set_field62(int16_t field62_) {
    field62 = field62_;
    __isset.field62 = true;
    return field62;
  }

  bool get_field63() const {
    return field63;
  }

  bool& set_field63(bool field63_) {
    field63 = field63_;
    __isset.field63 = true;
    return field63;
  }
  const std::map<int8_t, int16_t>& get_field64() const&;
  std::map<int8_t, int16_t> get_field64() &&;

  template <typename T_Struct0_field64_struct_setter>
  std::map<int8_t, int16_t>& set_field64(T_Struct0_field64_struct_setter&& field64_) {
    field64 = std::forward<T_Struct0_field64_struct_setter>(field64_);
    __isset.field64 = true;
    return field64;
  }

  int16_t get_field65() const {
    return field65;
  }

  int16_t& set_field65(int16_t field65_) {
    field65 = field65_;
    __isset.field65 = true;
    return field65;
  }

  float get_field66() const {
    return field66;
  }

  float& set_field66(float field66_) {
    field66 = field66_;
    __isset.field66 = true;
    return field66;
  }

  float get_field67() const {
    return field67;
  }

  float& set_field67(float field67_) {
    field67 = field67_;
    __isset.field67 = true;
    return field67;
  }
  const std::map<int64_t, std::vector<std::string>>& get_field68() const&;
  std::map<int64_t, std::vector<std::string>> get_field68() &&;

  template <typename T_Struct0_field68_struct_setter>
  std::map<int64_t, std::vector<std::string>>& set_field68(T_Struct0_field68_struct_setter&& field68_) {
    field68 = std::forward<T_Struct0_field68_struct_setter>(field68_);
    __isset.field68 = true;
    return field68;
  }

  int64_t get_field69() const {
    return field69;
  }

  int64_t& set_field69(int64_t field69_) {
    field69 = field69_;
    __isset.field69 = true;
    return field69;
  }

  bool get_field70() const {
    return field70;
  }

  bool& set_field70(bool field70_) {
    field70 = field70_;
    __isset.field70 = true;
    return field70;
  }

  const std::string& get_field71() const& {
    return field71;
  }

  std::string get_field71() && {
    return std::move(field71);
  }

  template <typename T_Struct0_field71_struct_setter>
  std::string& set_field71(T_Struct0_field71_struct_setter&& field71_) {
    field71 = std::forward<T_Struct0_field71_struct_setter>(field71_);
    __isset.field71 = true;
    return field71;
  }

  const std::string& get_field72() const& {
    return field72;
  }

  std::string get_field72() && {
    return std::move(field72);
  }

  template <typename T_Struct0_field72_struct_setter>
  std::string& set_field72(T_Struct0_field72_struct_setter&& field72_) {
    field72 = std::forward<T_Struct0_field72_struct_setter>(field72_);
    __isset.field72 = true;
    return field72;
  }

  const std::string& get_field73() const& {
    return field73;
  }

  std::string get_field73() && {
    return std::move(field73);
  }

  template <typename T_Struct0_field73_struct_setter>
  std::string& set_field73(T_Struct0_field73_struct_setter&& field73_) {
    field73 = std::forward<T_Struct0_field73_struct_setter>(field73_);
    __isset.field73 = true;
    return field73;
  }

  int16_t get_field74() const {
    return field74;
  }

  int16_t& set_field74(int16_t field74_) {
    field74 = field74_;
    __isset.field74 = true;
    return field74;
  }

  bool get_field75() const {
    return field75;
  }

  bool& set_field75(bool field75_) {
    field75 = field75_;
    __isset.field75 = true;
    return field75;
  }

  double get_field76() const {
    return field76;
  }

  double& set_field76(double field76_) {
    field76 = field76_;
    __isset.field76 = true;
    return field76;
  }

  bool get_field77() const {
    return field77;
  }

  bool& set_field77(bool field77_) {
    field77 = field77_;
    __isset.field77 = true;
    return field77;
  }

  const std::string& get_field78() const& {
    return field78;
  }

  std::string get_field78() && {
    return std::move(field78);
  }

  template <typename T_Struct0_field78_struct_setter>
  std::string& set_field78(T_Struct0_field78_struct_setter&& field78_) {
    field78 = std::forward<T_Struct0_field78_struct_setter>(field78_);
    __isset.field78 = true;
    return field78;
  }
  const std::set<std::string>& get_field79() const&;
  std::set<std::string> get_field79() &&;

  template <typename T_Struct0_field79_struct_setter>
  std::set<std::string>& set_field79(T_Struct0_field79_struct_setter&& field79_) {
    field79 = std::forward<T_Struct0_field79_struct_setter>(field79_);
    __isset.field79 = true;
    return field79;
  }

  bool get_field80() const {
    return field80;
  }

  bool& set_field80(bool field80_) {
    field80 = field80_;
    __isset.field80 = true;
    return field80;
  }
  const std::map<std::string, double>& get_field81() const&;
  std::map<std::string, double> get_field81() &&;

  template <typename T_Struct0_field81_struct_setter>
  std::map<std::string, double>& set_field81(T_Struct0_field81_struct_setter&& field81_) {
    field81 = std::forward<T_Struct0_field81_struct_setter>(field81_);
    __isset.field81 = true;
    return field81;
  }
  const std::map<std::vector<bool>, bool>& get_field82() const&;
  std::map<std::vector<bool>, bool> get_field82() &&;

  template <typename T_Struct0_field82_struct_setter>
  std::map<std::vector<bool>, bool>& set_field82(T_Struct0_field82_struct_setter&& field82_) {
    field82 = std::forward<T_Struct0_field82_struct_setter>(field82_);
    __isset.field82 = true;
    return field82;
  }
  const std::map<int64_t, double>& get_field83() const&;
  std::map<int64_t, double> get_field83() &&;

  template <typename T_Struct0_field83_struct_setter>
  std::map<int64_t, double>& set_field83(T_Struct0_field83_struct_setter&& field83_) {
    field83 = std::forward<T_Struct0_field83_struct_setter>(field83_);
    __isset.field83 = true;
    return field83;
  }

  int16_t get_field84() const {
    return field84;
  }

  int16_t& set_field84(int16_t field84_) {
    field84 = field84_;
    __isset.field84 = true;
    return field84;
  }
  const std::set<std::string>& get_field85() const&;
  std::set<std::string> get_field85() &&;

  template <typename T_Struct0_field85_struct_setter>
  std::set<std::string>& set_field85(T_Struct0_field85_struct_setter&& field85_) {
    field85 = std::forward<T_Struct0_field85_struct_setter>(field85_);
    __isset.field85 = true;
    return field85;
  }

  int32_t get_field86() const {
    return field86;
  }

  int32_t& set_field86(int32_t field86_) {
    field86 = field86_;
    __isset.field86 = true;
    return field86;
  }

  int32_t get_field87() const {
    return field87;
  }

  int32_t& set_field87(int32_t field87_) {
    field87 = field87_;
    __isset.field87 = true;
    return field87;
  }
  const std::vector<int32_t>& get_field88() const&;
  std::vector<int32_t> get_field88() &&;

  template <typename T_Struct0_field88_struct_setter>
  std::vector<int32_t>& set_field88(T_Struct0_field88_struct_setter&& field88_) {
    field88 = std::forward<T_Struct0_field88_struct_setter>(field88_);
    __isset.field88 = true;
    return field88;
  }
  const std::vector<std::string>& get_field89() const&;
  std::vector<std::string> get_field89() &&;

  template <typename T_Struct0_field89_struct_setter>
  std::vector<std::string>& set_field89(T_Struct0_field89_struct_setter&& field89_) {
    field89 = std::forward<T_Struct0_field89_struct_setter>(field89_);
    __isset.field89 = true;
    return field89;
  }

  const std::string& get_field90() const& {
    return field90;
  }

  std::string get_field90() && {
    return std::move(field90);
  }

  template <typename T_Struct0_field90_struct_setter>
  std::string& set_field90(T_Struct0_field90_struct_setter&& field90_) {
    field90 = std::forward<T_Struct0_field90_struct_setter>(field90_);
    __isset.field90 = true;
    return field90;
  }

  int8_t get_field91() const {
    return field91;
  }

  int8_t& set_field91(int8_t field91_) {
    field91 = field91_;
    __isset.field91 = true;
    return field91;
  }
  const std::vector<bool>& get_field92() const&;
  std::vector<bool> get_field92() &&;

  template <typename T_Struct0_field92_struct_setter>
  std::vector<bool>& set_field92(T_Struct0_field92_struct_setter&& field92_) {
    field92 = std::forward<T_Struct0_field92_struct_setter>(field92_);
    __isset.field92 = true;
    return field92;
  }

  bool get_field93() const {
    return field93;
  }

  bool& set_field93(bool field93_) {
    field93 = field93_;
    __isset.field93 = true;
    return field93;
  }

  bool get_field94() const {
    return field94;
  }

  bool& set_field94(bool field94_) {
    field94 = field94_;
    __isset.field94 = true;
    return field94;
  }

  bool get_field95() const {
    return field95;
  }

  bool& set_field95(bool field95_) {
    field95 = field95_;
    __isset.field95 = true;
    return field95;
  }
  const std::set<int32_t>& get_field96() const&;
  std::set<int32_t> get_field96() &&;

  template <typename T_Struct0_field96_struct_setter>
  std::set<int32_t>& set_field96(T_Struct0_field96_struct_setter&& field96_) {
    field96 = std::forward<T_Struct0_field96_struct_setter>(field96_);
    __isset.field96 = true;
    return field96;
  }

  const std::string& get_field97() const& {
    return field97;
  }

  std::string get_field97() && {
    return std::move(field97);
  }

  template <typename T_Struct0_field97_struct_setter>
  std::string& set_field97(T_Struct0_field97_struct_setter&& field97_) {
    field97 = std::forward<T_Struct0_field97_struct_setter>(field97_);
    __isset.field97 = true;
    return field97;
  }

  const std::string& get_field98() const& {
    return field98;
  }

  std::string get_field98() && {
    return std::move(field98);
  }

  template <typename T_Struct0_field98_struct_setter>
  std::string& set_field98(T_Struct0_field98_struct_setter&& field98_) {
    field98 = std::forward<T_Struct0_field98_struct_setter>(field98_);
    __isset.field98 = true;
    return field98;
  }
  const std::vector<double>& get_field99() const&;
  std::vector<double> get_field99() &&;

  template <typename T_Struct0_field99_struct_setter>
  std::vector<double>& set_field99(T_Struct0_field99_struct_setter&& field99_) {
    field99 = std::forward<T_Struct0_field99_struct_setter>(field99_);
    __isset.field99 = true;
    return field99;
  }

  int64_t get_field100() const {
    return field100;
  }

  int64_t& set_field100(int64_t field100_) {
    field100 = field100_;
    __isset.field100 = true;
    return field100;
  }
  const std::set<std::string>& get_field101() const&;
  std::set<std::string> get_field101() &&;

  template <typename T_Struct0_field101_struct_setter>
  std::set<std::string>& set_field101(T_Struct0_field101_struct_setter&& field101_) {
    field101 = std::forward<T_Struct0_field101_struct_setter>(field101_);
    __isset.field101 = true;
    return field101;
  }
  const std::vector<float>& get_field102() const&;
  std::vector<float> get_field102() &&;

  template <typename T_Struct0_field102_struct_setter>
  std::vector<float>& set_field102(T_Struct0_field102_struct_setter&& field102_) {
    field102 = std::forward<T_Struct0_field102_struct_setter>(field102_);
    __isset.field102 = true;
    return field102;
  }

  int16_t get_field103() const {
    return field103;
  }

  int16_t& set_field103(int16_t field103_) {
    field103 = field103_;
    __isset.field103 = true;
    return field103;
  }

  double get_field104() const {
    return field104;
  }

  double& set_field104(double field104_) {
    field104 = field104_;
    __isset.field104 = true;
    return field104;
  }
  const std::vector<std::string>& get_field105() const&;
  std::vector<std::string> get_field105() &&;

  template <typename T_Struct0_field105_struct_setter>
  std::vector<std::string>& set_field105(T_Struct0_field105_struct_setter&& field105_) {
    field105 = std::forward<T_Struct0_field105_struct_setter>(field105_);
    __isset.field105 = true;
    return field105;
  }

  int16_t get_field106() const {
    return field106;
  }

  int16_t& set_field106(int16_t field106_) {
    field106 = field106_;
    __isset.field106 = true;
    return field106;
  }
  const std::set<bool>& get_field107() const&;
  std::set<bool> get_field107() &&;

  template <typename T_Struct0_field107_struct_setter>
  std::set<bool>& set_field107(T_Struct0_field107_struct_setter&& field107_) {
    field107 = std::forward<T_Struct0_field107_struct_setter>(field107_);
    __isset.field107 = true;
    return field107;
  }
  const std::vector<int32_t>& get_field108() const&;
  std::vector<int32_t> get_field108() &&;

  template <typename T_Struct0_field108_struct_setter>
  std::vector<int32_t>& set_field108(T_Struct0_field108_struct_setter&& field108_) {
    field108 = std::forward<T_Struct0_field108_struct_setter>(field108_);
    __isset.field108 = true;
    return field108;
  }

  float get_field109() const {
    return field109;
  }

  float& set_field109(float field109_) {
    field109 = field109_;
    __isset.field109 = true;
    return field109;
  }

  float get_field110() const {
    return field110;
  }

  float& set_field110(float field110_) {
    field110 = field110_;
    __isset.field110 = true;
    return field110;
  }
  const std::vector<float>& get_field111() const&;
  std::vector<float> get_field111() &&;

  template <typename T_Struct0_field111_struct_setter>
  std::vector<float>& set_field111(T_Struct0_field111_struct_setter&& field111_) {
    field111 = std::forward<T_Struct0_field111_struct_setter>(field111_);
    __isset.field111 = true;
    return field111;
  }

  bool get_field112() const {
    return field112;
  }

  bool& set_field112(bool field112_) {
    field112 = field112_;
    __isset.field112 = true;
    return field112;
  }

  const std::string& get_field113() const& {
    return field113;
  }

  std::string get_field113() && {
    return std::move(field113);
  }

  template <typename T_Struct0_field113_struct_setter>
  std::string& set_field113(T_Struct0_field113_struct_setter&& field113_) {
    field113 = std::forward<T_Struct0_field113_struct_setter>(field113_);
    __isset.field113 = true;
    return field113;
  }

  int32_t get_field114() const {
    return field114;
  }

  int32_t& set_field114(int32_t field114_) {
    field114 = field114_;
    __isset.field114 = true;
    return field114;
  }

  int32_t get_field115() const {
    return field115;
  }

  int32_t& set_field115(int32_t field115_) {
    field115 = field115_;
    __isset.field115 = true;
    return field115;
  }

  int32_t get_field116() const {
    return field116;
  }

  int32_t& set_field116(int32_t field116_) {
    field116 = field116_;
    __isset.field116 = true;
    return field116;
  }

  double get_field117() const {
    return field117;
  }

  double& set_field117(double field117_) {
    field117 = field117_;
    __isset.field117 = true;
    return field117;
  }

  const std::string& get_field118() const& {
    return field118;
  }

  std::string get_field118() && {
    return std::move(field118);
  }

  template <typename T_Struct0_field118_struct_setter>
  std::string& set_field118(T_Struct0_field118_struct_setter&& field118_) {
    field118 = std::forward<T_Struct0_field118_struct_setter>(field118_);
    __isset.field118 = true;
    return field118;
  }
  const std::vector<std::string>& get_field119() const&;
  std::vector<std::string> get_field119() &&;

  template <typename T_Struct0_field119_struct_setter>
  std::vector<std::string>& set_field119(T_Struct0_field119_struct_setter&& field119_) {
    field119 = std::forward<T_Struct0_field119_struct_setter>(field119_);
    __isset.field119 = true;
    return field119;
  }
  const std::map<std::map<double, float>, float>& get_field120() const&;
  std::map<std::map<double, float>, float> get_field120() &&;

  template <typename T_Struct0_field120_struct_setter>
  std::map<std::map<double, float>, float>& set_field120(T_Struct0_field120_struct_setter&& field120_) {
    field120 = std::forward<T_Struct0_field120_struct_setter>(field120_);
    __isset.field120 = true;
    return field120;
  }

  int64_t get_field121() const {
    return field121;
  }

  int64_t& set_field121(int64_t field121_) {
    field121 = field121_;
    __isset.field121 = true;
    return field121;
  }

  bool get_field122() const {
    return field122;
  }

  bool& set_field122(bool field122_) {
    field122 = field122_;
    __isset.field122 = true;
    return field122;
  }
  const std::vector<std::string>& get_field123() const&;
  std::vector<std::string> get_field123() &&;

  template <typename T_Struct0_field123_struct_setter>
  std::vector<std::string>& set_field123(T_Struct0_field123_struct_setter&& field123_) {
    field123 = std::forward<T_Struct0_field123_struct_setter>(field123_);
    __isset.field123 = true;
    return field123;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct0& a, Struct0& b);
extern template uint32_t Struct0::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct0::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct0::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct0::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct0::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct0::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct0::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct0::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct0>::clear( ::cpp2::Struct0* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct0>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct0>::write(Protocol* proto,  ::cpp2::Struct0 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct0>::read(Protocol* proto,  ::cpp2::Struct0* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct0>::serializedSize(Protocol const* proto,  ::cpp2::Struct0 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct0>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct0 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct1 : private apache::thrift::detail::st::ComparisonOperators<Struct1> {
 public:

  Struct1() :
      field3(0),
      field6(0),
      field10(0),
      field12(0),
      field16(0) {}
  // FragileConstructor for use in initialization lists only

  Struct1(apache::thrift::FragileConstructor, std::set<double> field1__arg,  ::cpp2::Struct0 field2__arg, int32_t field3__arg, std::string field4__arg, std::set<bool> field5__arg, int32_t field6__arg, std::map<int16_t, int8_t> field7__arg, std::string field8__arg, std::map<int32_t, std::string> field9__arg, int32_t field10__arg,  ::cpp2::Struct0 field11__arg, int64_t field12__arg, std::set<int8_t> field13__arg, std::vector<std::vector<bool>> field14__arg, std::map<int16_t, int64_t> field15__arg, int64_t field16__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct1(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct1(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }

  Struct1(Struct1&&) = default;

  Struct1(const Struct1&) = default;

  Struct1& operator=(Struct1&&) = default;

  Struct1& operator=(const Struct1&) = default;
  void __clear();

  virtual ~Struct1() {}

  std::set<double> field1;
   ::cpp2::Struct0 field2;
  int32_t field3;
  std::string field4;
  std::set<bool> field5;
  int32_t field6;
  std::map<int16_t, int8_t> field7;
  std::string field8;
  std::map<int32_t, std::string> field9;
  int32_t field10;
   ::cpp2::Struct0 field11;
  int64_t field12;
  std::set<int8_t> field13;
  std::vector<std::vector<bool>> field14;
  std::map<int16_t, int64_t> field15;
  int64_t field16;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
  } __isset;
  bool operator==(const Struct1& rhs) const;

  bool operator < (const Struct1& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    (void)rhs;
    return false;
  }
  const std::set<double>& get_field1() const&;
  std::set<double> get_field1() &&;

  template <typename T_Struct1_field1_struct_setter>
  std::set<double>& set_field1(T_Struct1_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct1_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const  ::cpp2::Struct0& get_field2() const&;
   ::cpp2::Struct0 get_field2() &&;

  template <typename T_Struct1_field2_struct_setter>
   ::cpp2::Struct0& set_field2(T_Struct1_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct1_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  int32_t get_field3() const {
    return field3;
  }

  int32_t& set_field3(int32_t field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }

  const std::string& get_field4() const& {
    return field4;
  }

  std::string get_field4() && {
    return std::move(field4);
  }

  template <typename T_Struct1_field4_struct_setter>
  std::string& set_field4(T_Struct1_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct1_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }
  const std::set<bool>& get_field5() const&;
  std::set<bool> get_field5() &&;

  template <typename T_Struct1_field5_struct_setter>
  std::set<bool>& set_field5(T_Struct1_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct1_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }

  int32_t get_field6() const {
    return field6;
  }

  int32_t& set_field6(int32_t field6_) {
    field6 = field6_;
    __isset.field6 = true;
    return field6;
  }
  const std::map<int16_t, int8_t>& get_field7() const&;
  std::map<int16_t, int8_t> get_field7() &&;

  template <typename T_Struct1_field7_struct_setter>
  std::map<int16_t, int8_t>& set_field7(T_Struct1_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct1_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }

  const std::string& get_field8() const& {
    return field8;
  }

  std::string get_field8() && {
    return std::move(field8);
  }

  template <typename T_Struct1_field8_struct_setter>
  std::string& set_field8(T_Struct1_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct1_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }
  const std::map<int32_t, std::string>& get_field9() const&;
  std::map<int32_t, std::string> get_field9() &&;

  template <typename T_Struct1_field9_struct_setter>
  std::map<int32_t, std::string>& set_field9(T_Struct1_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct1_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }

  int32_t get_field10() const {
    return field10;
  }

  int32_t& set_field10(int32_t field10_) {
    field10 = field10_;
    __isset.field10 = true;
    return field10;
  }
  const  ::cpp2::Struct0& get_field11() const&;
   ::cpp2::Struct0 get_field11() &&;

  template <typename T_Struct1_field11_struct_setter>
   ::cpp2::Struct0& set_field11(T_Struct1_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct1_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }

  int64_t get_field12() const {
    return field12;
  }

  int64_t& set_field12(int64_t field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }
  const std::set<int8_t>& get_field13() const&;
  std::set<int8_t> get_field13() &&;

  template <typename T_Struct1_field13_struct_setter>
  std::set<int8_t>& set_field13(T_Struct1_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct1_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }
  const std::vector<std::vector<bool>>& get_field14() const&;
  std::vector<std::vector<bool>> get_field14() &&;

  template <typename T_Struct1_field14_struct_setter>
  std::vector<std::vector<bool>>& set_field14(T_Struct1_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct1_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }
  const std::map<int16_t, int64_t>& get_field15() const&;
  std::map<int16_t, int64_t> get_field15() &&;

  template <typename T_Struct1_field15_struct_setter>
  std::map<int16_t, int64_t>& set_field15(T_Struct1_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct1_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }

  int64_t get_field16() const {
    return field16;
  }

  int64_t& set_field16(int64_t field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct1& a, Struct1& b);
extern template uint32_t Struct1::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct1::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct1::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct1::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct1::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct1::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct1::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct1::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct1>::clear( ::cpp2::Struct1* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct1>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct1>::write(Protocol* proto,  ::cpp2::Struct1 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct1>::read(Protocol* proto,  ::cpp2::Struct1* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct1>::serializedSize(Protocol const* proto,  ::cpp2::Struct1 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct1>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct1 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct2 : private apache::thrift::detail::st::ComparisonOperators<Struct2> {
 public:

  Struct2() :
      field1(0),
      field2(0),
      field3(0),
      field12(0),
      field13(0),
      field15(0),
      field16(0),
      field17(0),
      field23(0),
      field25(0),
      field26(0),
      field30(0),
      field31(0),
      field36(0),
      field38(0),
      field39(0),
      field40(0),
      field41(0),
      field42(0),
      field44(0),
      field48(0),
      field50(0),
      field56(0),
      field60(0),
      field63(0),
      field72(0),
      field73(0),
      field78(0),
      field81(0),
      field83(0),
      field85(0),
      field86(0),
      field87(0),
      field90(0),
      field99(0),
      field103(0),
      field104(0),
      field106(0),
      field108(0),
      field109(0),
      field110(0),
      field111(0),
      field112(0),
      field113(0),
      field117(0),
      field119(0),
      field121(0),
      field124(0),
      field125(0),
      field128(0),
      field131(0),
      field132(0),
      field133(0),
      field134(0),
      field138(0),
      field141(0),
      field144(0) {}
  // FragileConstructor for use in initialization lists only

  Struct2(apache::thrift::FragileConstructor, int64_t field1__arg, int16_t field2__arg, int8_t field3__arg, std::string field4__arg, std::map<std::set<int16_t>, std::vector<std::set<bool>>> field5__arg, std::vector<double> field6__arg, std::set<int8_t> field7__arg, std::map<double, std::string> field8__arg, std::map<int32_t, float> field9__arg, std::string field10__arg,  ::cpp2::Struct0 field11__arg, int64_t field12__arg, double field13__arg,  ::cpp2::Struct0 field14__arg, int32_t field15__arg, bool field16__arg, int32_t field17__arg, std::set<bool> field18__arg, std::vector<int8_t> field19__arg, std::vector<std::string> field20__arg,  ::cpp2::Struct0 field21__arg, std::string field22__arg, int16_t field23__arg, std::vector<int16_t> field24__arg, int16_t field25__arg, double field26__arg, std::set<int64_t> field27__arg, std::vector<double> field28__arg, std::vector<float> field29__arg, double field30__arg, int64_t field31__arg, std::string field32__arg, std::vector<int8_t> field33__arg,  ::cpp2::Struct0 field34__arg,  ::cpp2::Struct1 field35__arg, bool field36__arg, std::vector<int16_t> field37__arg, int32_t field38__arg, int32_t field39__arg, bool field40__arg, bool field41__arg, int32_t field42__arg, std::map< ::cpp2::Struct1, float> field43__arg, float field44__arg, std::set<std::string> field45__arg, std::string field46__arg, std::set<std::vector<int8_t>> field47__arg, bool field48__arg, std::set<int32_t> field49__arg, bool field50__arg, std::set<int16_t> field51__arg,  ::cpp2::Struct0 field52__arg, std::vector<bool> field53__arg,  ::cpp2::Struct0 field54__arg, std::string field55__arg, int16_t field56__arg, std::set<double> field57__arg, std::vector<int32_t> field58__arg, std::vector<bool> field59__arg, int8_t field60__arg, std::string field61__arg, std::vector<bool> field62__arg, int16_t field63__arg, std::vector<float> field64__arg, std::map<std::map< ::cpp2::Struct0, bool>, int32_t> field65__arg,  ::cpp2::Struct1 field66__arg, std::vector< ::cpp2::Struct0> field67__arg, std::vector<int64_t> field68__arg, std::set<std::string> field69__arg, std::map<double, int64_t> field70__arg, std::map<float, std::vector<bool>> field71__arg, double field72__arg, int16_t field73__arg, std::vector<std::vector<int64_t>> field74__arg,  ::cpp2::Struct1 field75__arg, std::vector<int64_t> field76__arg, std::string field77__arg, double field78__arg, std::map<int16_t, int16_t> field79__arg, std::vector<int32_t> field80__arg, int8_t field81__arg, std::map<std::string, float> field82__arg, int64_t field83__arg, std::set<std::map<bool, std::string>> field84__arg, int8_t field85__arg, int64_t field86__arg, bool field87__arg, std::string field88__arg, std::map<bool, std::string> field89__arg, int8_t field90__arg, std::set<std::string> field91__arg, std::map<std::vector<int32_t>, int8_t> field92__arg, std::set<int64_t> field93__arg, std::map<int16_t, std::set<int32_t>> field94__arg, std::set<std::string> field95__arg, std::map<float, bool> field96__arg,  ::cpp2::Struct0 field97__arg,  ::cpp2::Struct0 field98__arg, int32_t field99__arg, std::vector<float> field100__arg, std::set< ::cpp2::Struct0> field101__arg, std::map<bool, int32_t> field102__arg, int16_t field103__arg, float field104__arg, std::vector<float> field105__arg, int64_t field106__arg,  ::cpp2::Struct0 field107__arg, int64_t field108__arg, int64_t field109__arg, float field110__arg, float field111__arg, int8_t field112__arg, int16_t field113__arg,  ::cpp2::Struct0 field114__arg, std::set<int64_t> field115__arg, std::set<int8_t> field116__arg, int8_t field117__arg, std::map<double, std::set<int32_t>> field118__arg, int8_t field119__arg, std::string field120__arg, int16_t field121__arg, std::vector< ::cpp2::Struct1> field122__arg, std::vector<std::string> field123__arg, int16_t field124__arg, int16_t field125__arg, std::map<bool, std::string> field126__arg,  ::cpp2::Struct1 field127__arg, int8_t field128__arg, std::vector<std::map<bool, float>> field129__arg,  ::cpp2::Struct1 field130__arg, double field131__arg, int16_t field132__arg, bool field133__arg, int64_t field134__arg, std::map<double, std::string> field135__arg,  ::cpp2::Struct1 field136__arg,  ::cpp2::Struct0 field137__arg, int32_t field138__arg,  ::cpp2::Struct0 field139__arg, std::set<int8_t> field140__arg, int64_t field141__arg, std::map<int64_t, int64_t> field142__arg, std::string field143__arg, int16_t field144__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)),
      field97(std::move(field97__arg)),
      field98(std::move(field98__arg)),
      field99(std::move(field99__arg)),
      field100(std::move(field100__arg)),
      field101(std::move(field101__arg)),
      field102(std::move(field102__arg)),
      field103(std::move(field103__arg)),
      field104(std::move(field104__arg)),
      field105(std::move(field105__arg)),
      field106(std::move(field106__arg)),
      field107(std::move(field107__arg)),
      field108(std::move(field108__arg)),
      field109(std::move(field109__arg)),
      field110(std::move(field110__arg)),
      field111(std::move(field111__arg)),
      field112(std::move(field112__arg)),
      field113(std::move(field113__arg)),
      field114(std::move(field114__arg)),
      field115(std::move(field115__arg)),
      field116(std::move(field116__arg)),
      field117(std::move(field117__arg)),
      field118(std::move(field118__arg)),
      field119(std::move(field119__arg)),
      field120(std::move(field120__arg)),
      field121(std::move(field121__arg)),
      field122(std::move(field122__arg)),
      field123(std::move(field123__arg)),
      field124(std::move(field124__arg)),
      field125(std::move(field125__arg)),
      field126(std::move(field126__arg)),
      field127(std::move(field127__arg)),
      field128(std::move(field128__arg)),
      field129(std::move(field129__arg)),
      field130(std::move(field130__arg)),
      field131(std::move(field131__arg)),
      field132(std::move(field132__arg)),
      field133(std::move(field133__arg)),
      field134(std::move(field134__arg)),
      field135(std::move(field135__arg)),
      field136(std::move(field136__arg)),
      field137(std::move(field137__arg)),
      field138(std::move(field138__arg)),
      field139(std::move(field139__arg)),
      field140(std::move(field140__arg)),
      field141(std::move(field141__arg)),
      field142(std::move(field142__arg)),
      field143(std::move(field143__arg)),
      field144(std::move(field144__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
    __isset.field97 = true;
    __isset.field98 = true;
    __isset.field99 = true;
    __isset.field100 = true;
    __isset.field101 = true;
    __isset.field102 = true;
    __isset.field103 = true;
    __isset.field104 = true;
    __isset.field105 = true;
    __isset.field106 = true;
    __isset.field107 = true;
    __isset.field108 = true;
    __isset.field109 = true;
    __isset.field110 = true;
    __isset.field111 = true;
    __isset.field112 = true;
    __isset.field113 = true;
    __isset.field114 = true;
    __isset.field115 = true;
    __isset.field116 = true;
    __isset.field117 = true;
    __isset.field118 = true;
    __isset.field119 = true;
    __isset.field120 = true;
    __isset.field121 = true;
    __isset.field122 = true;
    __isset.field123 = true;
    __isset.field124 = true;
    __isset.field125 = true;
    __isset.field126 = true;
    __isset.field127 = true;
    __isset.field128 = true;
    __isset.field129 = true;
    __isset.field130 = true;
    __isset.field131 = true;
    __isset.field132 = true;
    __isset.field133 = true;
    __isset.field134 = true;
    __isset.field135 = true;
    __isset.field136 = true;
    __isset.field137 = true;
    __isset.field138 = true;
    __isset.field139 = true;
    __isset.field140 = true;
    __isset.field141 = true;
    __isset.field142 = true;
    __isset.field143 = true;
    __isset.field144 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<97, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field97 = arg.move();
    __isset.field97 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<98, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field98 = arg.move();
    __isset.field98 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<99, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field99 = arg.move();
    __isset.field99 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field100 = arg.move();
    __isset.field100 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field101 = arg.move();
    __isset.field101 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<102, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field102 = arg.move();
    __isset.field102 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<103, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field103 = arg.move();
    __isset.field103 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<104, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field104 = arg.move();
    __isset.field104 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<105, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field105 = arg.move();
    __isset.field105 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<106, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field106 = arg.move();
    __isset.field106 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<107, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field107 = arg.move();
    __isset.field107 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<108, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field108 = arg.move();
    __isset.field108 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<109, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field109 = arg.move();
    __isset.field109 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<110, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field110 = arg.move();
    __isset.field110 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<111, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field111 = arg.move();
    __isset.field111 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<112, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field112 = arg.move();
    __isset.field112 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<113, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field113 = arg.move();
    __isset.field113 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<114, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field114 = arg.move();
    __isset.field114 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<115, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field115 = arg.move();
    __isset.field115 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<116, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field116 = arg.move();
    __isset.field116 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<117, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field117 = arg.move();
    __isset.field117 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<118, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field118 = arg.move();
    __isset.field118 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<119, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field119 = arg.move();
    __isset.field119 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<120, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field120 = arg.move();
    __isset.field120 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<121, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field121 = arg.move();
    __isset.field121 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<122, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field122 = arg.move();
    __isset.field122 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<123, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field123 = arg.move();
    __isset.field123 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<124, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field124 = arg.move();
    __isset.field124 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<125, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field125 = arg.move();
    __isset.field125 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<126, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field126 = arg.move();
    __isset.field126 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<127, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field127 = arg.move();
    __isset.field127 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<128, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field128 = arg.move();
    __isset.field128 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<129, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field129 = arg.move();
    __isset.field129 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<130, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field130 = arg.move();
    __isset.field130 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<131, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field131 = arg.move();
    __isset.field131 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<132, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field132 = arg.move();
    __isset.field132 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<133, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field133 = arg.move();
    __isset.field133 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<134, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field134 = arg.move();
    __isset.field134 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<135, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field135 = arg.move();
    __isset.field135 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<136, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field136 = arg.move();
    __isset.field136 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<137, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field137 = arg.move();
    __isset.field137 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<138, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field138 = arg.move();
    __isset.field138 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<139, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field139 = arg.move();
    __isset.field139 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<140, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field140 = arg.move();
    __isset.field140 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<141, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field141 = arg.move();
    __isset.field141 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<142, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field142 = arg.move();
    __isset.field142 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<143, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field143 = arg.move();
    __isset.field143 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct2(::apache::thrift::detail::argument_wrapper<144, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct2(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field144 = arg.move();
    __isset.field144 = true;
  }

  Struct2(Struct2&&) = default;

  Struct2(const Struct2&) = default;

  Struct2& operator=(Struct2&&) = default;

  Struct2& operator=(const Struct2&) = default;
  void __clear();

  virtual ~Struct2() {}

  int64_t field1;
  int16_t field2;
  int8_t field3;
  std::string field4;
  std::map<std::set<int16_t>, std::vector<std::set<bool>>> field5;
  std::vector<double> field6;
  std::set<int8_t> field7;
  std::map<double, std::string> field8;
  std::map<int32_t, float> field9;
  std::string field10;
   ::cpp2::Struct0 field11;
  int64_t field12;
  double field13;
   ::cpp2::Struct0 field14;
  int32_t field15;
  bool field16;
  int32_t field17;
  std::set<bool> field18;
  std::vector<int8_t> field19;
  std::vector<std::string> field20;
   ::cpp2::Struct0 field21;
  std::string field22;
  int16_t field23;
  std::vector<int16_t> field24;
  int16_t field25;
  double field26;
  std::set<int64_t> field27;
  std::vector<double> field28;
  std::vector<float> field29;
  double field30;
  int64_t field31;
  std::string field32;
  std::vector<int8_t> field33;
   ::cpp2::Struct0 field34;
   ::cpp2::Struct1 field35;
  bool field36;
  std::vector<int16_t> field37;
  int32_t field38;
  int32_t field39;
  bool field40;
  bool field41;
  int32_t field42;
  std::map< ::cpp2::Struct1, float> field43;
  float field44;
  std::set<std::string> field45;
  std::string field46;
  std::set<std::vector<int8_t>> field47;
  bool field48;
  std::set<int32_t> field49;
  bool field50;
  std::set<int16_t> field51;
   ::cpp2::Struct0 field52;
  std::vector<bool> field53;
   ::cpp2::Struct0 field54;
  std::string field55;
  int16_t field56;
  std::set<double> field57;
  std::vector<int32_t> field58;
  std::vector<bool> field59;
  int8_t field60;
  std::string field61;
  std::vector<bool> field62;
  int16_t field63;
  std::vector<float> field64;
  std::map<std::map< ::cpp2::Struct0, bool>, int32_t> field65;
   ::cpp2::Struct1 field66;
  std::vector< ::cpp2::Struct0> field67;
  std::vector<int64_t> field68;
  std::set<std::string> field69;
  std::map<double, int64_t> field70;
  std::map<float, std::vector<bool>> field71;
  double field72;
  int16_t field73;
  std::vector<std::vector<int64_t>> field74;
   ::cpp2::Struct1 field75;
  std::vector<int64_t> field76;
  std::string field77;
  double field78;
  std::map<int16_t, int16_t> field79;
  std::vector<int32_t> field80;
  int8_t field81;
  std::map<std::string, float> field82;
  int64_t field83;
  std::set<std::map<bool, std::string>> field84;
  int8_t field85;
  int64_t field86;
  bool field87;
  std::string field88;
  std::map<bool, std::string> field89;
  int8_t field90;
  std::set<std::string> field91;
  std::map<std::vector<int32_t>, int8_t> field92;
  std::set<int64_t> field93;
  std::map<int16_t, std::set<int32_t>> field94;
  std::set<std::string> field95;
  std::map<float, bool> field96;
   ::cpp2::Struct0 field97;
   ::cpp2::Struct0 field98;
  int32_t field99;
  std::vector<float> field100;
  std::set< ::cpp2::Struct0> field101;
  std::map<bool, int32_t> field102;
  int16_t field103;
  float field104;
  std::vector<float> field105;
  int64_t field106;
   ::cpp2::Struct0 field107;
  int64_t field108;
  int64_t field109;
  float field110;
  float field111;
  int8_t field112;
  int16_t field113;
   ::cpp2::Struct0 field114;
  std::set<int64_t> field115;
  std::set<int8_t> field116;
  int8_t field117;
  std::map<double, std::set<int32_t>> field118;
  int8_t field119;
  std::string field120;
  int16_t field121;
  std::vector< ::cpp2::Struct1> field122;
  std::vector<std::string> field123;
  int16_t field124;
  int16_t field125;
  std::map<bool, std::string> field126;
   ::cpp2::Struct1 field127;
  int8_t field128;
  std::vector<std::map<bool, float>> field129;
   ::cpp2::Struct1 field130;
  double field131;
  int16_t field132;
  bool field133;
  int64_t field134;
  std::map<double, std::string> field135;
   ::cpp2::Struct1 field136;
   ::cpp2::Struct0 field137;
  int32_t field138;
   ::cpp2::Struct0 field139;
  std::set<int8_t> field140;
  int64_t field141;
  std::map<int64_t, int64_t> field142;
  std::string field143;
  int16_t field144;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
      field97 = false;
      field98 = false;
      field99 = false;
      field100 = false;
      field101 = false;
      field102 = false;
      field103 = false;
      field104 = false;
      field105 = false;
      field106 = false;
      field107 = false;
      field108 = false;
      field109 = false;
      field110 = false;
      field111 = false;
      field112 = false;
      field113 = false;
      field114 = false;
      field115 = false;
      field116 = false;
      field117 = false;
      field118 = false;
      field119 = false;
      field120 = false;
      field121 = false;
      field122 = false;
      field123 = false;
      field124 = false;
      field125 = false;
      field126 = false;
      field127 = false;
      field128 = false;
      field129 = false;
      field130 = false;
      field131 = false;
      field132 = false;
      field133 = false;
      field134 = false;
      field135 = false;
      field136 = false;
      field137 = false;
      field138 = false;
      field139 = false;
      field140 = false;
      field141 = false;
      field142 = false;
      field143 = false;
      field144 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
    bool field97 = false;
    bool field98 = false;
    bool field99 = false;
    bool field100 = false;
    bool field101 = false;
    bool field102 = false;
    bool field103 = false;
    bool field104 = false;
    bool field105 = false;
    bool field106 = false;
    bool field107 = false;
    bool field108 = false;
    bool field109 = false;
    bool field110 = false;
    bool field111 = false;
    bool field112 = false;
    bool field113 = false;
    bool field114 = false;
    bool field115 = false;
    bool field116 = false;
    bool field117 = false;
    bool field118 = false;
    bool field119 = false;
    bool field120 = false;
    bool field121 = false;
    bool field122 = false;
    bool field123 = false;
    bool field124 = false;
    bool field125 = false;
    bool field126 = false;
    bool field127 = false;
    bool field128 = false;
    bool field129 = false;
    bool field130 = false;
    bool field131 = false;
    bool field132 = false;
    bool field133 = false;
    bool field134 = false;
    bool field135 = false;
    bool field136 = false;
    bool field137 = false;
    bool field138 = false;
    bool field139 = false;
    bool field140 = false;
    bool field141 = false;
    bool field142 = false;
    bool field143 = false;
    bool field144 = false;
  } __isset;
  bool operator==(const Struct2& rhs) const;

  bool operator < (const Struct2& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    if (!(field97 == rhs.field97)) {
      return field97 < rhs.field97;
    }
    if (!(field98 == rhs.field98)) {
      return field98 < rhs.field98;
    }
    if (!(field99 == rhs.field99)) {
      return field99 < rhs.field99;
    }
    if (!(field100 == rhs.field100)) {
      return field100 < rhs.field100;
    }
    if (!(field101 == rhs.field101)) {
      return field101 < rhs.field101;
    }
    if (!(field102 == rhs.field102)) {
      return field102 < rhs.field102;
    }
    if (!(field103 == rhs.field103)) {
      return field103 < rhs.field103;
    }
    if (!(field104 == rhs.field104)) {
      return field104 < rhs.field104;
    }
    if (!(field105 == rhs.field105)) {
      return field105 < rhs.field105;
    }
    if (!(field106 == rhs.field106)) {
      return field106 < rhs.field106;
    }
    if (!(field107 == rhs.field107)) {
      return field107 < rhs.field107;
    }
    if (!(field108 == rhs.field108)) {
      return field108 < rhs.field108;
    }
    if (!(field109 == rhs.field109)) {
      return field109 < rhs.field109;
    }
    if (!(field110 == rhs.field110)) {
      return field110 < rhs.field110;
    }
    if (!(field111 == rhs.field111)) {
      return field111 < rhs.field111;
    }
    if (!(field112 == rhs.field112)) {
      return field112 < rhs.field112;
    }
    if (!(field113 == rhs.field113)) {
      return field113 < rhs.field113;
    }
    if (!(field114 == rhs.field114)) {
      return field114 < rhs.field114;
    }
    if (!(field115 == rhs.field115)) {
      return field115 < rhs.field115;
    }
    if (!(field116 == rhs.field116)) {
      return field116 < rhs.field116;
    }
    if (!(field117 == rhs.field117)) {
      return field117 < rhs.field117;
    }
    if (!(field118 == rhs.field118)) {
      return field118 < rhs.field118;
    }
    if (!(field119 == rhs.field119)) {
      return field119 < rhs.field119;
    }
    if (!(field120 == rhs.field120)) {
      return field120 < rhs.field120;
    }
    if (!(field121 == rhs.field121)) {
      return field121 < rhs.field121;
    }
    if (!(field122 == rhs.field122)) {
      return field122 < rhs.field122;
    }
    if (!(field123 == rhs.field123)) {
      return field123 < rhs.field123;
    }
    if (!(field124 == rhs.field124)) {
      return field124 < rhs.field124;
    }
    if (!(field125 == rhs.field125)) {
      return field125 < rhs.field125;
    }
    if (!(field126 == rhs.field126)) {
      return field126 < rhs.field126;
    }
    if (!(field127 == rhs.field127)) {
      return field127 < rhs.field127;
    }
    if (!(field128 == rhs.field128)) {
      return field128 < rhs.field128;
    }
    if (!(field129 == rhs.field129)) {
      return field129 < rhs.field129;
    }
    if (!(field130 == rhs.field130)) {
      return field130 < rhs.field130;
    }
    if (!(field131 == rhs.field131)) {
      return field131 < rhs.field131;
    }
    if (!(field132 == rhs.field132)) {
      return field132 < rhs.field132;
    }
    if (!(field133 == rhs.field133)) {
      return field133 < rhs.field133;
    }
    if (!(field134 == rhs.field134)) {
      return field134 < rhs.field134;
    }
    if (!(field135 == rhs.field135)) {
      return field135 < rhs.field135;
    }
    if (!(field136 == rhs.field136)) {
      return field136 < rhs.field136;
    }
    if (!(field137 == rhs.field137)) {
      return field137 < rhs.field137;
    }
    if (!(field138 == rhs.field138)) {
      return field138 < rhs.field138;
    }
    if (!(field139 == rhs.field139)) {
      return field139 < rhs.field139;
    }
    if (!(field140 == rhs.field140)) {
      return field140 < rhs.field140;
    }
    if (!(field141 == rhs.field141)) {
      return field141 < rhs.field141;
    }
    if (!(field142 == rhs.field142)) {
      return field142 < rhs.field142;
    }
    if (!(field143 == rhs.field143)) {
      return field143 < rhs.field143;
    }
    if (!(field144 == rhs.field144)) {
      return field144 < rhs.field144;
    }
    (void)rhs;
    return false;
  }

  int64_t get_field1() const {
    return field1;
  }

  int64_t& set_field1(int64_t field1_) {
    field1 = field1_;
    __isset.field1 = true;
    return field1;
  }

  int16_t get_field2() const {
    return field2;
  }

  int16_t& set_field2(int16_t field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }

  int8_t get_field3() const {
    return field3;
  }

  int8_t& set_field3(int8_t field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }

  const std::string& get_field4() const& {
    return field4;
  }

  std::string get_field4() && {
    return std::move(field4);
  }

  template <typename T_Struct2_field4_struct_setter>
  std::string& set_field4(T_Struct2_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct2_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }
  const std::map<std::set<int16_t>, std::vector<std::set<bool>>>& get_field5() const&;
  std::map<std::set<int16_t>, std::vector<std::set<bool>>> get_field5() &&;

  template <typename T_Struct2_field5_struct_setter>
  std::map<std::set<int16_t>, std::vector<std::set<bool>>>& set_field5(T_Struct2_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct2_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }
  const std::vector<double>& get_field6() const&;
  std::vector<double> get_field6() &&;

  template <typename T_Struct2_field6_struct_setter>
  std::vector<double>& set_field6(T_Struct2_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct2_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }
  const std::set<int8_t>& get_field7() const&;
  std::set<int8_t> get_field7() &&;

  template <typename T_Struct2_field7_struct_setter>
  std::set<int8_t>& set_field7(T_Struct2_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct2_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }
  const std::map<double, std::string>& get_field8() const&;
  std::map<double, std::string> get_field8() &&;

  template <typename T_Struct2_field8_struct_setter>
  std::map<double, std::string>& set_field8(T_Struct2_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct2_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }
  const std::map<int32_t, float>& get_field9() const&;
  std::map<int32_t, float> get_field9() &&;

  template <typename T_Struct2_field9_struct_setter>
  std::map<int32_t, float>& set_field9(T_Struct2_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct2_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }

  const std::string& get_field10() const& {
    return field10;
  }

  std::string get_field10() && {
    return std::move(field10);
  }

  template <typename T_Struct2_field10_struct_setter>
  std::string& set_field10(T_Struct2_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct2_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }
  const  ::cpp2::Struct0& get_field11() const&;
   ::cpp2::Struct0 get_field11() &&;

  template <typename T_Struct2_field11_struct_setter>
   ::cpp2::Struct0& set_field11(T_Struct2_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct2_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }

  int64_t get_field12() const {
    return field12;
  }

  int64_t& set_field12(int64_t field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }

  double get_field13() const {
    return field13;
  }

  double& set_field13(double field13_) {
    field13 = field13_;
    __isset.field13 = true;
    return field13;
  }
  const  ::cpp2::Struct0& get_field14() const&;
   ::cpp2::Struct0 get_field14() &&;

  template <typename T_Struct2_field14_struct_setter>
   ::cpp2::Struct0& set_field14(T_Struct2_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct2_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }

  int32_t get_field15() const {
    return field15;
  }

  int32_t& set_field15(int32_t field15_) {
    field15 = field15_;
    __isset.field15 = true;
    return field15;
  }

  bool get_field16() const {
    return field16;
  }

  bool& set_field16(bool field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }

  int32_t get_field17() const {
    return field17;
  }

  int32_t& set_field17(int32_t field17_) {
    field17 = field17_;
    __isset.field17 = true;
    return field17;
  }
  const std::set<bool>& get_field18() const&;
  std::set<bool> get_field18() &&;

  template <typename T_Struct2_field18_struct_setter>
  std::set<bool>& set_field18(T_Struct2_field18_struct_setter&& field18_) {
    field18 = std::forward<T_Struct2_field18_struct_setter>(field18_);
    __isset.field18 = true;
    return field18;
  }
  const std::vector<int8_t>& get_field19() const&;
  std::vector<int8_t> get_field19() &&;

  template <typename T_Struct2_field19_struct_setter>
  std::vector<int8_t>& set_field19(T_Struct2_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct2_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }
  const std::vector<std::string>& get_field20() const&;
  std::vector<std::string> get_field20() &&;

  template <typename T_Struct2_field20_struct_setter>
  std::vector<std::string>& set_field20(T_Struct2_field20_struct_setter&& field20_) {
    field20 = std::forward<T_Struct2_field20_struct_setter>(field20_);
    __isset.field20 = true;
    return field20;
  }
  const  ::cpp2::Struct0& get_field21() const&;
   ::cpp2::Struct0 get_field21() &&;

  template <typename T_Struct2_field21_struct_setter>
   ::cpp2::Struct0& set_field21(T_Struct2_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct2_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }

  const std::string& get_field22() const& {
    return field22;
  }

  std::string get_field22() && {
    return std::move(field22);
  }

  template <typename T_Struct2_field22_struct_setter>
  std::string& set_field22(T_Struct2_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct2_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }

  int16_t get_field23() const {
    return field23;
  }

  int16_t& set_field23(int16_t field23_) {
    field23 = field23_;
    __isset.field23 = true;
    return field23;
  }
  const std::vector<int16_t>& get_field24() const&;
  std::vector<int16_t> get_field24() &&;

  template <typename T_Struct2_field24_struct_setter>
  std::vector<int16_t>& set_field24(T_Struct2_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct2_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }

  int16_t get_field25() const {
    return field25;
  }

  int16_t& set_field25(int16_t field25_) {
    field25 = field25_;
    __isset.field25 = true;
    return field25;
  }

  double get_field26() const {
    return field26;
  }

  double& set_field26(double field26_) {
    field26 = field26_;
    __isset.field26 = true;
    return field26;
  }
  const std::set<int64_t>& get_field27() const&;
  std::set<int64_t> get_field27() &&;

  template <typename T_Struct2_field27_struct_setter>
  std::set<int64_t>& set_field27(T_Struct2_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct2_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }
  const std::vector<double>& get_field28() const&;
  std::vector<double> get_field28() &&;

  template <typename T_Struct2_field28_struct_setter>
  std::vector<double>& set_field28(T_Struct2_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct2_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }
  const std::vector<float>& get_field29() const&;
  std::vector<float> get_field29() &&;

  template <typename T_Struct2_field29_struct_setter>
  std::vector<float>& set_field29(T_Struct2_field29_struct_setter&& field29_) {
    field29 = std::forward<T_Struct2_field29_struct_setter>(field29_);
    __isset.field29 = true;
    return field29;
  }

  double get_field30() const {
    return field30;
  }

  double& set_field30(double field30_) {
    field30 = field30_;
    __isset.field30 = true;
    return field30;
  }

  int64_t get_field31() const {
    return field31;
  }

  int64_t& set_field31(int64_t field31_) {
    field31 = field31_;
    __isset.field31 = true;
    return field31;
  }

  const std::string& get_field32() const& {
    return field32;
  }

  std::string get_field32() && {
    return std::move(field32);
  }

  template <typename T_Struct2_field32_struct_setter>
  std::string& set_field32(T_Struct2_field32_struct_setter&& field32_) {
    field32 = std::forward<T_Struct2_field32_struct_setter>(field32_);
    __isset.field32 = true;
    return field32;
  }
  const std::vector<int8_t>& get_field33() const&;
  std::vector<int8_t> get_field33() &&;

  template <typename T_Struct2_field33_struct_setter>
  std::vector<int8_t>& set_field33(T_Struct2_field33_struct_setter&& field33_) {
    field33 = std::forward<T_Struct2_field33_struct_setter>(field33_);
    __isset.field33 = true;
    return field33;
  }
  const  ::cpp2::Struct0& get_field34() const&;
   ::cpp2::Struct0 get_field34() &&;

  template <typename T_Struct2_field34_struct_setter>
   ::cpp2::Struct0& set_field34(T_Struct2_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct2_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }
  const  ::cpp2::Struct1& get_field35() const&;
   ::cpp2::Struct1 get_field35() &&;

  template <typename T_Struct2_field35_struct_setter>
   ::cpp2::Struct1& set_field35(T_Struct2_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct2_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }

  bool get_field36() const {
    return field36;
  }

  bool& set_field36(bool field36_) {
    field36 = field36_;
    __isset.field36 = true;
    return field36;
  }
  const std::vector<int16_t>& get_field37() const&;
  std::vector<int16_t> get_field37() &&;

  template <typename T_Struct2_field37_struct_setter>
  std::vector<int16_t>& set_field37(T_Struct2_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct2_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }

  int32_t get_field38() const {
    return field38;
  }

  int32_t& set_field38(int32_t field38_) {
    field38 = field38_;
    __isset.field38 = true;
    return field38;
  }

  int32_t get_field39() const {
    return field39;
  }

  int32_t& set_field39(int32_t field39_) {
    field39 = field39_;
    __isset.field39 = true;
    return field39;
  }

  bool get_field40() const {
    return field40;
  }

  bool& set_field40(bool field40_) {
    field40 = field40_;
    __isset.field40 = true;
    return field40;
  }

  bool get_field41() const {
    return field41;
  }

  bool& set_field41(bool field41_) {
    field41 = field41_;
    __isset.field41 = true;
    return field41;
  }

  int32_t get_field42() const {
    return field42;
  }

  int32_t& set_field42(int32_t field42_) {
    field42 = field42_;
    __isset.field42 = true;
    return field42;
  }
  const std::map< ::cpp2::Struct1, float>& get_field43() const&;
  std::map< ::cpp2::Struct1, float> get_field43() &&;

  template <typename T_Struct2_field43_struct_setter>
  std::map< ::cpp2::Struct1, float>& set_field43(T_Struct2_field43_struct_setter&& field43_) {
    field43 = std::forward<T_Struct2_field43_struct_setter>(field43_);
    __isset.field43 = true;
    return field43;
  }

  float get_field44() const {
    return field44;
  }

  float& set_field44(float field44_) {
    field44 = field44_;
    __isset.field44 = true;
    return field44;
  }
  const std::set<std::string>& get_field45() const&;
  std::set<std::string> get_field45() &&;

  template <typename T_Struct2_field45_struct_setter>
  std::set<std::string>& set_field45(T_Struct2_field45_struct_setter&& field45_) {
    field45 = std::forward<T_Struct2_field45_struct_setter>(field45_);
    __isset.field45 = true;
    return field45;
  }

  const std::string& get_field46() const& {
    return field46;
  }

  std::string get_field46() && {
    return std::move(field46);
  }

  template <typename T_Struct2_field46_struct_setter>
  std::string& set_field46(T_Struct2_field46_struct_setter&& field46_) {
    field46 = std::forward<T_Struct2_field46_struct_setter>(field46_);
    __isset.field46 = true;
    return field46;
  }
  const std::set<std::vector<int8_t>>& get_field47() const&;
  std::set<std::vector<int8_t>> get_field47() &&;

  template <typename T_Struct2_field47_struct_setter>
  std::set<std::vector<int8_t>>& set_field47(T_Struct2_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct2_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }

  bool get_field48() const {
    return field48;
  }

  bool& set_field48(bool field48_) {
    field48 = field48_;
    __isset.field48 = true;
    return field48;
  }
  const std::set<int32_t>& get_field49() const&;
  std::set<int32_t> get_field49() &&;

  template <typename T_Struct2_field49_struct_setter>
  std::set<int32_t>& set_field49(T_Struct2_field49_struct_setter&& field49_) {
    field49 = std::forward<T_Struct2_field49_struct_setter>(field49_);
    __isset.field49 = true;
    return field49;
  }

  bool get_field50() const {
    return field50;
  }

  bool& set_field50(bool field50_) {
    field50 = field50_;
    __isset.field50 = true;
    return field50;
  }
  const std::set<int16_t>& get_field51() const&;
  std::set<int16_t> get_field51() &&;

  template <typename T_Struct2_field51_struct_setter>
  std::set<int16_t>& set_field51(T_Struct2_field51_struct_setter&& field51_) {
    field51 = std::forward<T_Struct2_field51_struct_setter>(field51_);
    __isset.field51 = true;
    return field51;
  }
  const  ::cpp2::Struct0& get_field52() const&;
   ::cpp2::Struct0 get_field52() &&;

  template <typename T_Struct2_field52_struct_setter>
   ::cpp2::Struct0& set_field52(T_Struct2_field52_struct_setter&& field52_) {
    field52 = std::forward<T_Struct2_field52_struct_setter>(field52_);
    __isset.field52 = true;
    return field52;
  }
  const std::vector<bool>& get_field53() const&;
  std::vector<bool> get_field53() &&;

  template <typename T_Struct2_field53_struct_setter>
  std::vector<bool>& set_field53(T_Struct2_field53_struct_setter&& field53_) {
    field53 = std::forward<T_Struct2_field53_struct_setter>(field53_);
    __isset.field53 = true;
    return field53;
  }
  const  ::cpp2::Struct0& get_field54() const&;
   ::cpp2::Struct0 get_field54() &&;

  template <typename T_Struct2_field54_struct_setter>
   ::cpp2::Struct0& set_field54(T_Struct2_field54_struct_setter&& field54_) {
    field54 = std::forward<T_Struct2_field54_struct_setter>(field54_);
    __isset.field54 = true;
    return field54;
  }

  const std::string& get_field55() const& {
    return field55;
  }

  std::string get_field55() && {
    return std::move(field55);
  }

  template <typename T_Struct2_field55_struct_setter>
  std::string& set_field55(T_Struct2_field55_struct_setter&& field55_) {
    field55 = std::forward<T_Struct2_field55_struct_setter>(field55_);
    __isset.field55 = true;
    return field55;
  }

  int16_t get_field56() const {
    return field56;
  }

  int16_t& set_field56(int16_t field56_) {
    field56 = field56_;
    __isset.field56 = true;
    return field56;
  }
  const std::set<double>& get_field57() const&;
  std::set<double> get_field57() &&;

  template <typename T_Struct2_field57_struct_setter>
  std::set<double>& set_field57(T_Struct2_field57_struct_setter&& field57_) {
    field57 = std::forward<T_Struct2_field57_struct_setter>(field57_);
    __isset.field57 = true;
    return field57;
  }
  const std::vector<int32_t>& get_field58() const&;
  std::vector<int32_t> get_field58() &&;

  template <typename T_Struct2_field58_struct_setter>
  std::vector<int32_t>& set_field58(T_Struct2_field58_struct_setter&& field58_) {
    field58 = std::forward<T_Struct2_field58_struct_setter>(field58_);
    __isset.field58 = true;
    return field58;
  }
  const std::vector<bool>& get_field59() const&;
  std::vector<bool> get_field59() &&;

  template <typename T_Struct2_field59_struct_setter>
  std::vector<bool>& set_field59(T_Struct2_field59_struct_setter&& field59_) {
    field59 = std::forward<T_Struct2_field59_struct_setter>(field59_);
    __isset.field59 = true;
    return field59;
  }

  int8_t get_field60() const {
    return field60;
  }

  int8_t& set_field60(int8_t field60_) {
    field60 = field60_;
    __isset.field60 = true;
    return field60;
  }

  const std::string& get_field61() const& {
    return field61;
  }

  std::string get_field61() && {
    return std::move(field61);
  }

  template <typename T_Struct2_field61_struct_setter>
  std::string& set_field61(T_Struct2_field61_struct_setter&& field61_) {
    field61 = std::forward<T_Struct2_field61_struct_setter>(field61_);
    __isset.field61 = true;
    return field61;
  }
  const std::vector<bool>& get_field62() const&;
  std::vector<bool> get_field62() &&;

  template <typename T_Struct2_field62_struct_setter>
  std::vector<bool>& set_field62(T_Struct2_field62_struct_setter&& field62_) {
    field62 = std::forward<T_Struct2_field62_struct_setter>(field62_);
    __isset.field62 = true;
    return field62;
  }

  int16_t get_field63() const {
    return field63;
  }

  int16_t& set_field63(int16_t field63_) {
    field63 = field63_;
    __isset.field63 = true;
    return field63;
  }
  const std::vector<float>& get_field64() const&;
  std::vector<float> get_field64() &&;

  template <typename T_Struct2_field64_struct_setter>
  std::vector<float>& set_field64(T_Struct2_field64_struct_setter&& field64_) {
    field64 = std::forward<T_Struct2_field64_struct_setter>(field64_);
    __isset.field64 = true;
    return field64;
  }
  const std::map<std::map< ::cpp2::Struct0, bool>, int32_t>& get_field65() const&;
  std::map<std::map< ::cpp2::Struct0, bool>, int32_t> get_field65() &&;

  template <typename T_Struct2_field65_struct_setter>
  std::map<std::map< ::cpp2::Struct0, bool>, int32_t>& set_field65(T_Struct2_field65_struct_setter&& field65_) {
    field65 = std::forward<T_Struct2_field65_struct_setter>(field65_);
    __isset.field65 = true;
    return field65;
  }
  const  ::cpp2::Struct1& get_field66() const&;
   ::cpp2::Struct1 get_field66() &&;

  template <typename T_Struct2_field66_struct_setter>
   ::cpp2::Struct1& set_field66(T_Struct2_field66_struct_setter&& field66_) {
    field66 = std::forward<T_Struct2_field66_struct_setter>(field66_);
    __isset.field66 = true;
    return field66;
  }
  const std::vector< ::cpp2::Struct0>& get_field67() const&;
  std::vector< ::cpp2::Struct0> get_field67() &&;

  template <typename T_Struct2_field67_struct_setter>
  std::vector< ::cpp2::Struct0>& set_field67(T_Struct2_field67_struct_setter&& field67_) {
    field67 = std::forward<T_Struct2_field67_struct_setter>(field67_);
    __isset.field67 = true;
    return field67;
  }
  const std::vector<int64_t>& get_field68() const&;
  std::vector<int64_t> get_field68() &&;

  template <typename T_Struct2_field68_struct_setter>
  std::vector<int64_t>& set_field68(T_Struct2_field68_struct_setter&& field68_) {
    field68 = std::forward<T_Struct2_field68_struct_setter>(field68_);
    __isset.field68 = true;
    return field68;
  }
  const std::set<std::string>& get_field69() const&;
  std::set<std::string> get_field69() &&;

  template <typename T_Struct2_field69_struct_setter>
  std::set<std::string>& set_field69(T_Struct2_field69_struct_setter&& field69_) {
    field69 = std::forward<T_Struct2_field69_struct_setter>(field69_);
    __isset.field69 = true;
    return field69;
  }
  const std::map<double, int64_t>& get_field70() const&;
  std::map<double, int64_t> get_field70() &&;

  template <typename T_Struct2_field70_struct_setter>
  std::map<double, int64_t>& set_field70(T_Struct2_field70_struct_setter&& field70_) {
    field70 = std::forward<T_Struct2_field70_struct_setter>(field70_);
    __isset.field70 = true;
    return field70;
  }
  const std::map<float, std::vector<bool>>& get_field71() const&;
  std::map<float, std::vector<bool>> get_field71() &&;

  template <typename T_Struct2_field71_struct_setter>
  std::map<float, std::vector<bool>>& set_field71(T_Struct2_field71_struct_setter&& field71_) {
    field71 = std::forward<T_Struct2_field71_struct_setter>(field71_);
    __isset.field71 = true;
    return field71;
  }

  double get_field72() const {
    return field72;
  }

  double& set_field72(double field72_) {
    field72 = field72_;
    __isset.field72 = true;
    return field72;
  }

  int16_t get_field73() const {
    return field73;
  }

  int16_t& set_field73(int16_t field73_) {
    field73 = field73_;
    __isset.field73 = true;
    return field73;
  }
  const std::vector<std::vector<int64_t>>& get_field74() const&;
  std::vector<std::vector<int64_t>> get_field74() &&;

  template <typename T_Struct2_field74_struct_setter>
  std::vector<std::vector<int64_t>>& set_field74(T_Struct2_field74_struct_setter&& field74_) {
    field74 = std::forward<T_Struct2_field74_struct_setter>(field74_);
    __isset.field74 = true;
    return field74;
  }
  const  ::cpp2::Struct1& get_field75() const&;
   ::cpp2::Struct1 get_field75() &&;

  template <typename T_Struct2_field75_struct_setter>
   ::cpp2::Struct1& set_field75(T_Struct2_field75_struct_setter&& field75_) {
    field75 = std::forward<T_Struct2_field75_struct_setter>(field75_);
    __isset.field75 = true;
    return field75;
  }
  const std::vector<int64_t>& get_field76() const&;
  std::vector<int64_t> get_field76() &&;

  template <typename T_Struct2_field76_struct_setter>
  std::vector<int64_t>& set_field76(T_Struct2_field76_struct_setter&& field76_) {
    field76 = std::forward<T_Struct2_field76_struct_setter>(field76_);
    __isset.field76 = true;
    return field76;
  }

  const std::string& get_field77() const& {
    return field77;
  }

  std::string get_field77() && {
    return std::move(field77);
  }

  template <typename T_Struct2_field77_struct_setter>
  std::string& set_field77(T_Struct2_field77_struct_setter&& field77_) {
    field77 = std::forward<T_Struct2_field77_struct_setter>(field77_);
    __isset.field77 = true;
    return field77;
  }

  double get_field78() const {
    return field78;
  }

  double& set_field78(double field78_) {
    field78 = field78_;
    __isset.field78 = true;
    return field78;
  }
  const std::map<int16_t, int16_t>& get_field79() const&;
  std::map<int16_t, int16_t> get_field79() &&;

  template <typename T_Struct2_field79_struct_setter>
  std::map<int16_t, int16_t>& set_field79(T_Struct2_field79_struct_setter&& field79_) {
    field79 = std::forward<T_Struct2_field79_struct_setter>(field79_);
    __isset.field79 = true;
    return field79;
  }
  const std::vector<int32_t>& get_field80() const&;
  std::vector<int32_t> get_field80() &&;

  template <typename T_Struct2_field80_struct_setter>
  std::vector<int32_t>& set_field80(T_Struct2_field80_struct_setter&& field80_) {
    field80 = std::forward<T_Struct2_field80_struct_setter>(field80_);
    __isset.field80 = true;
    return field80;
  }

  int8_t get_field81() const {
    return field81;
  }

  int8_t& set_field81(int8_t field81_) {
    field81 = field81_;
    __isset.field81 = true;
    return field81;
  }
  const std::map<std::string, float>& get_field82() const&;
  std::map<std::string, float> get_field82() &&;

  template <typename T_Struct2_field82_struct_setter>
  std::map<std::string, float>& set_field82(T_Struct2_field82_struct_setter&& field82_) {
    field82 = std::forward<T_Struct2_field82_struct_setter>(field82_);
    __isset.field82 = true;
    return field82;
  }

  int64_t get_field83() const {
    return field83;
  }

  int64_t& set_field83(int64_t field83_) {
    field83 = field83_;
    __isset.field83 = true;
    return field83;
  }
  const std::set<std::map<bool, std::string>>& get_field84() const&;
  std::set<std::map<bool, std::string>> get_field84() &&;

  template <typename T_Struct2_field84_struct_setter>
  std::set<std::map<bool, std::string>>& set_field84(T_Struct2_field84_struct_setter&& field84_) {
    field84 = std::forward<T_Struct2_field84_struct_setter>(field84_);
    __isset.field84 = true;
    return field84;
  }

  int8_t get_field85() const {
    return field85;
  }

  int8_t& set_field85(int8_t field85_) {
    field85 = field85_;
    __isset.field85 = true;
    return field85;
  }

  int64_t get_field86() const {
    return field86;
  }

  int64_t& set_field86(int64_t field86_) {
    field86 = field86_;
    __isset.field86 = true;
    return field86;
  }

  bool get_field87() const {
    return field87;
  }

  bool& set_field87(bool field87_) {
    field87 = field87_;
    __isset.field87 = true;
    return field87;
  }

  const std::string& get_field88() const& {
    return field88;
  }

  std::string get_field88() && {
    return std::move(field88);
  }

  template <typename T_Struct2_field88_struct_setter>
  std::string& set_field88(T_Struct2_field88_struct_setter&& field88_) {
    field88 = std::forward<T_Struct2_field88_struct_setter>(field88_);
    __isset.field88 = true;
    return field88;
  }
  const std::map<bool, std::string>& get_field89() const&;
  std::map<bool, std::string> get_field89() &&;

  template <typename T_Struct2_field89_struct_setter>
  std::map<bool, std::string>& set_field89(T_Struct2_field89_struct_setter&& field89_) {
    field89 = std::forward<T_Struct2_field89_struct_setter>(field89_);
    __isset.field89 = true;
    return field89;
  }

  int8_t get_field90() const {
    return field90;
  }

  int8_t& set_field90(int8_t field90_) {
    field90 = field90_;
    __isset.field90 = true;
    return field90;
  }
  const std::set<std::string>& get_field91() const&;
  std::set<std::string> get_field91() &&;

  template <typename T_Struct2_field91_struct_setter>
  std::set<std::string>& set_field91(T_Struct2_field91_struct_setter&& field91_) {
    field91 = std::forward<T_Struct2_field91_struct_setter>(field91_);
    __isset.field91 = true;
    return field91;
  }
  const std::map<std::vector<int32_t>, int8_t>& get_field92() const&;
  std::map<std::vector<int32_t>, int8_t> get_field92() &&;

  template <typename T_Struct2_field92_struct_setter>
  std::map<std::vector<int32_t>, int8_t>& set_field92(T_Struct2_field92_struct_setter&& field92_) {
    field92 = std::forward<T_Struct2_field92_struct_setter>(field92_);
    __isset.field92 = true;
    return field92;
  }
  const std::set<int64_t>& get_field93() const&;
  std::set<int64_t> get_field93() &&;

  template <typename T_Struct2_field93_struct_setter>
  std::set<int64_t>& set_field93(T_Struct2_field93_struct_setter&& field93_) {
    field93 = std::forward<T_Struct2_field93_struct_setter>(field93_);
    __isset.field93 = true;
    return field93;
  }
  const std::map<int16_t, std::set<int32_t>>& get_field94() const&;
  std::map<int16_t, std::set<int32_t>> get_field94() &&;

  template <typename T_Struct2_field94_struct_setter>
  std::map<int16_t, std::set<int32_t>>& set_field94(T_Struct2_field94_struct_setter&& field94_) {
    field94 = std::forward<T_Struct2_field94_struct_setter>(field94_);
    __isset.field94 = true;
    return field94;
  }
  const std::set<std::string>& get_field95() const&;
  std::set<std::string> get_field95() &&;

  template <typename T_Struct2_field95_struct_setter>
  std::set<std::string>& set_field95(T_Struct2_field95_struct_setter&& field95_) {
    field95 = std::forward<T_Struct2_field95_struct_setter>(field95_);
    __isset.field95 = true;
    return field95;
  }
  const std::map<float, bool>& get_field96() const&;
  std::map<float, bool> get_field96() &&;

  template <typename T_Struct2_field96_struct_setter>
  std::map<float, bool>& set_field96(T_Struct2_field96_struct_setter&& field96_) {
    field96 = std::forward<T_Struct2_field96_struct_setter>(field96_);
    __isset.field96 = true;
    return field96;
  }
  const  ::cpp2::Struct0& get_field97() const&;
   ::cpp2::Struct0 get_field97() &&;

  template <typename T_Struct2_field97_struct_setter>
   ::cpp2::Struct0& set_field97(T_Struct2_field97_struct_setter&& field97_) {
    field97 = std::forward<T_Struct2_field97_struct_setter>(field97_);
    __isset.field97 = true;
    return field97;
  }
  const  ::cpp2::Struct0& get_field98() const&;
   ::cpp2::Struct0 get_field98() &&;

  template <typename T_Struct2_field98_struct_setter>
   ::cpp2::Struct0& set_field98(T_Struct2_field98_struct_setter&& field98_) {
    field98 = std::forward<T_Struct2_field98_struct_setter>(field98_);
    __isset.field98 = true;
    return field98;
  }

  int32_t get_field99() const {
    return field99;
  }

  int32_t& set_field99(int32_t field99_) {
    field99 = field99_;
    __isset.field99 = true;
    return field99;
  }
  const std::vector<float>& get_field100() const&;
  std::vector<float> get_field100() &&;

  template <typename T_Struct2_field100_struct_setter>
  std::vector<float>& set_field100(T_Struct2_field100_struct_setter&& field100_) {
    field100 = std::forward<T_Struct2_field100_struct_setter>(field100_);
    __isset.field100 = true;
    return field100;
  }
  const std::set< ::cpp2::Struct0>& get_field101() const&;
  std::set< ::cpp2::Struct0> get_field101() &&;

  template <typename T_Struct2_field101_struct_setter>
  std::set< ::cpp2::Struct0>& set_field101(T_Struct2_field101_struct_setter&& field101_) {
    field101 = std::forward<T_Struct2_field101_struct_setter>(field101_);
    __isset.field101 = true;
    return field101;
  }
  const std::map<bool, int32_t>& get_field102() const&;
  std::map<bool, int32_t> get_field102() &&;

  template <typename T_Struct2_field102_struct_setter>
  std::map<bool, int32_t>& set_field102(T_Struct2_field102_struct_setter&& field102_) {
    field102 = std::forward<T_Struct2_field102_struct_setter>(field102_);
    __isset.field102 = true;
    return field102;
  }

  int16_t get_field103() const {
    return field103;
  }

  int16_t& set_field103(int16_t field103_) {
    field103 = field103_;
    __isset.field103 = true;
    return field103;
  }

  float get_field104() const {
    return field104;
  }

  float& set_field104(float field104_) {
    field104 = field104_;
    __isset.field104 = true;
    return field104;
  }
  const std::vector<float>& get_field105() const&;
  std::vector<float> get_field105() &&;

  template <typename T_Struct2_field105_struct_setter>
  std::vector<float>& set_field105(T_Struct2_field105_struct_setter&& field105_) {
    field105 = std::forward<T_Struct2_field105_struct_setter>(field105_);
    __isset.field105 = true;
    return field105;
  }

  int64_t get_field106() const {
    return field106;
  }

  int64_t& set_field106(int64_t field106_) {
    field106 = field106_;
    __isset.field106 = true;
    return field106;
  }
  const  ::cpp2::Struct0& get_field107() const&;
   ::cpp2::Struct0 get_field107() &&;

  template <typename T_Struct2_field107_struct_setter>
   ::cpp2::Struct0& set_field107(T_Struct2_field107_struct_setter&& field107_) {
    field107 = std::forward<T_Struct2_field107_struct_setter>(field107_);
    __isset.field107 = true;
    return field107;
  }

  int64_t get_field108() const {
    return field108;
  }

  int64_t& set_field108(int64_t field108_) {
    field108 = field108_;
    __isset.field108 = true;
    return field108;
  }

  int64_t get_field109() const {
    return field109;
  }

  int64_t& set_field109(int64_t field109_) {
    field109 = field109_;
    __isset.field109 = true;
    return field109;
  }

  float get_field110() const {
    return field110;
  }

  float& set_field110(float field110_) {
    field110 = field110_;
    __isset.field110 = true;
    return field110;
  }

  float get_field111() const {
    return field111;
  }

  float& set_field111(float field111_) {
    field111 = field111_;
    __isset.field111 = true;
    return field111;
  }

  int8_t get_field112() const {
    return field112;
  }

  int8_t& set_field112(int8_t field112_) {
    field112 = field112_;
    __isset.field112 = true;
    return field112;
  }

  int16_t get_field113() const {
    return field113;
  }

  int16_t& set_field113(int16_t field113_) {
    field113 = field113_;
    __isset.field113 = true;
    return field113;
  }
  const  ::cpp2::Struct0& get_field114() const&;
   ::cpp2::Struct0 get_field114() &&;

  template <typename T_Struct2_field114_struct_setter>
   ::cpp2::Struct0& set_field114(T_Struct2_field114_struct_setter&& field114_) {
    field114 = std::forward<T_Struct2_field114_struct_setter>(field114_);
    __isset.field114 = true;
    return field114;
  }
  const std::set<int64_t>& get_field115() const&;
  std::set<int64_t> get_field115() &&;

  template <typename T_Struct2_field115_struct_setter>
  std::set<int64_t>& set_field115(T_Struct2_field115_struct_setter&& field115_) {
    field115 = std::forward<T_Struct2_field115_struct_setter>(field115_);
    __isset.field115 = true;
    return field115;
  }
  const std::set<int8_t>& get_field116() const&;
  std::set<int8_t> get_field116() &&;

  template <typename T_Struct2_field116_struct_setter>
  std::set<int8_t>& set_field116(T_Struct2_field116_struct_setter&& field116_) {
    field116 = std::forward<T_Struct2_field116_struct_setter>(field116_);
    __isset.field116 = true;
    return field116;
  }

  int8_t get_field117() const {
    return field117;
  }

  int8_t& set_field117(int8_t field117_) {
    field117 = field117_;
    __isset.field117 = true;
    return field117;
  }
  const std::map<double, std::set<int32_t>>& get_field118() const&;
  std::map<double, std::set<int32_t>> get_field118() &&;

  template <typename T_Struct2_field118_struct_setter>
  std::map<double, std::set<int32_t>>& set_field118(T_Struct2_field118_struct_setter&& field118_) {
    field118 = std::forward<T_Struct2_field118_struct_setter>(field118_);
    __isset.field118 = true;
    return field118;
  }

  int8_t get_field119() const {
    return field119;
  }

  int8_t& set_field119(int8_t field119_) {
    field119 = field119_;
    __isset.field119 = true;
    return field119;
  }

  const std::string& get_field120() const& {
    return field120;
  }

  std::string get_field120() && {
    return std::move(field120);
  }

  template <typename T_Struct2_field120_struct_setter>
  std::string& set_field120(T_Struct2_field120_struct_setter&& field120_) {
    field120 = std::forward<T_Struct2_field120_struct_setter>(field120_);
    __isset.field120 = true;
    return field120;
  }

  int16_t get_field121() const {
    return field121;
  }

  int16_t& set_field121(int16_t field121_) {
    field121 = field121_;
    __isset.field121 = true;
    return field121;
  }
  const std::vector< ::cpp2::Struct1>& get_field122() const&;
  std::vector< ::cpp2::Struct1> get_field122() &&;

  template <typename T_Struct2_field122_struct_setter>
  std::vector< ::cpp2::Struct1>& set_field122(T_Struct2_field122_struct_setter&& field122_) {
    field122 = std::forward<T_Struct2_field122_struct_setter>(field122_);
    __isset.field122 = true;
    return field122;
  }
  const std::vector<std::string>& get_field123() const&;
  std::vector<std::string> get_field123() &&;

  template <typename T_Struct2_field123_struct_setter>
  std::vector<std::string>& set_field123(T_Struct2_field123_struct_setter&& field123_) {
    field123 = std::forward<T_Struct2_field123_struct_setter>(field123_);
    __isset.field123 = true;
    return field123;
  }

  int16_t get_field124() const {
    return field124;
  }

  int16_t& set_field124(int16_t field124_) {
    field124 = field124_;
    __isset.field124 = true;
    return field124;
  }

  int16_t get_field125() const {
    return field125;
  }

  int16_t& set_field125(int16_t field125_) {
    field125 = field125_;
    __isset.field125 = true;
    return field125;
  }
  const std::map<bool, std::string>& get_field126() const&;
  std::map<bool, std::string> get_field126() &&;

  template <typename T_Struct2_field126_struct_setter>
  std::map<bool, std::string>& set_field126(T_Struct2_field126_struct_setter&& field126_) {
    field126 = std::forward<T_Struct2_field126_struct_setter>(field126_);
    __isset.field126 = true;
    return field126;
  }
  const  ::cpp2::Struct1& get_field127() const&;
   ::cpp2::Struct1 get_field127() &&;

  template <typename T_Struct2_field127_struct_setter>
   ::cpp2::Struct1& set_field127(T_Struct2_field127_struct_setter&& field127_) {
    field127 = std::forward<T_Struct2_field127_struct_setter>(field127_);
    __isset.field127 = true;
    return field127;
  }

  int8_t get_field128() const {
    return field128;
  }

  int8_t& set_field128(int8_t field128_) {
    field128 = field128_;
    __isset.field128 = true;
    return field128;
  }
  const std::vector<std::map<bool, float>>& get_field129() const&;
  std::vector<std::map<bool, float>> get_field129() &&;

  template <typename T_Struct2_field129_struct_setter>
  std::vector<std::map<bool, float>>& set_field129(T_Struct2_field129_struct_setter&& field129_) {
    field129 = std::forward<T_Struct2_field129_struct_setter>(field129_);
    __isset.field129 = true;
    return field129;
  }
  const  ::cpp2::Struct1& get_field130() const&;
   ::cpp2::Struct1 get_field130() &&;

  template <typename T_Struct2_field130_struct_setter>
   ::cpp2::Struct1& set_field130(T_Struct2_field130_struct_setter&& field130_) {
    field130 = std::forward<T_Struct2_field130_struct_setter>(field130_);
    __isset.field130 = true;
    return field130;
  }

  double get_field131() const {
    return field131;
  }

  double& set_field131(double field131_) {
    field131 = field131_;
    __isset.field131 = true;
    return field131;
  }

  int16_t get_field132() const {
    return field132;
  }

  int16_t& set_field132(int16_t field132_) {
    field132 = field132_;
    __isset.field132 = true;
    return field132;
  }

  bool get_field133() const {
    return field133;
  }

  bool& set_field133(bool field133_) {
    field133 = field133_;
    __isset.field133 = true;
    return field133;
  }

  int64_t get_field134() const {
    return field134;
  }

  int64_t& set_field134(int64_t field134_) {
    field134 = field134_;
    __isset.field134 = true;
    return field134;
  }
  const std::map<double, std::string>& get_field135() const&;
  std::map<double, std::string> get_field135() &&;

  template <typename T_Struct2_field135_struct_setter>
  std::map<double, std::string>& set_field135(T_Struct2_field135_struct_setter&& field135_) {
    field135 = std::forward<T_Struct2_field135_struct_setter>(field135_);
    __isset.field135 = true;
    return field135;
  }
  const  ::cpp2::Struct1& get_field136() const&;
   ::cpp2::Struct1 get_field136() &&;

  template <typename T_Struct2_field136_struct_setter>
   ::cpp2::Struct1& set_field136(T_Struct2_field136_struct_setter&& field136_) {
    field136 = std::forward<T_Struct2_field136_struct_setter>(field136_);
    __isset.field136 = true;
    return field136;
  }
  const  ::cpp2::Struct0& get_field137() const&;
   ::cpp2::Struct0 get_field137() &&;

  template <typename T_Struct2_field137_struct_setter>
   ::cpp2::Struct0& set_field137(T_Struct2_field137_struct_setter&& field137_) {
    field137 = std::forward<T_Struct2_field137_struct_setter>(field137_);
    __isset.field137 = true;
    return field137;
  }

  int32_t get_field138() const {
    return field138;
  }

  int32_t& set_field138(int32_t field138_) {
    field138 = field138_;
    __isset.field138 = true;
    return field138;
  }
  const  ::cpp2::Struct0& get_field139() const&;
   ::cpp2::Struct0 get_field139() &&;

  template <typename T_Struct2_field139_struct_setter>
   ::cpp2::Struct0& set_field139(T_Struct2_field139_struct_setter&& field139_) {
    field139 = std::forward<T_Struct2_field139_struct_setter>(field139_);
    __isset.field139 = true;
    return field139;
  }
  const std::set<int8_t>& get_field140() const&;
  std::set<int8_t> get_field140() &&;

  template <typename T_Struct2_field140_struct_setter>
  std::set<int8_t>& set_field140(T_Struct2_field140_struct_setter&& field140_) {
    field140 = std::forward<T_Struct2_field140_struct_setter>(field140_);
    __isset.field140 = true;
    return field140;
  }

  int64_t get_field141() const {
    return field141;
  }

  int64_t& set_field141(int64_t field141_) {
    field141 = field141_;
    __isset.field141 = true;
    return field141;
  }
  const std::map<int64_t, int64_t>& get_field142() const&;
  std::map<int64_t, int64_t> get_field142() &&;

  template <typename T_Struct2_field142_struct_setter>
  std::map<int64_t, int64_t>& set_field142(T_Struct2_field142_struct_setter&& field142_) {
    field142 = std::forward<T_Struct2_field142_struct_setter>(field142_);
    __isset.field142 = true;
    return field142;
  }

  const std::string& get_field143() const& {
    return field143;
  }

  std::string get_field143() && {
    return std::move(field143);
  }

  template <typename T_Struct2_field143_struct_setter>
  std::string& set_field143(T_Struct2_field143_struct_setter&& field143_) {
    field143 = std::forward<T_Struct2_field143_struct_setter>(field143_);
    __isset.field143 = true;
    return field143;
  }

  int16_t get_field144() const {
    return field144;
  }

  int16_t& set_field144(int16_t field144_) {
    field144 = field144_;
    __isset.field144 = true;
    return field144;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct2& a, Struct2& b);
extern template uint32_t Struct2::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct2::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct2::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct2::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct2::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct2::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct2::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct2::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct2>::clear( ::cpp2::Struct2* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct2>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct2>::write(Protocol* proto,  ::cpp2::Struct2 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct2>::read(Protocol* proto,  ::cpp2::Struct2* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct2>::serializedSize(Protocol const* proto,  ::cpp2::Struct2 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct2>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct2 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct3 : private apache::thrift::detail::st::ComparisonOperators<Struct3> {
 public:

  Struct3() :
      field2(0),
      field8(0),
      field21(0),
      field23(0),
      field25(0),
      field26(0),
      field27(0),
      field30(0),
      field33(0),
      field35(0),
      field36(0),
      field39(0),
      field41(0),
      field46(0),
      field47(0),
      field50(0),
      field51(0),
      field52(0),
      field55(0),
      field57(0),
      field58(0),
      field60(0),
      field64(0),
      field67(0),
      field68(0),
      field69(0),
      field70(0),
      field71(0),
      field73(0),
      field74(0),
      field75(0),
      field76(0),
      field80(0),
      field81(0),
      field84(0),
      field86(0),
      field87(0),
      field88(0),
      field90(0),
      field93(0),
      field94(0),
      field99(0),
      field102(0),
      field103(0),
      field106(0),
      field107(0),
      field108(0),
      field109(0),
      field110(0),
      field112(0),
      field113(0),
      field114(0),
      field115(0),
      field120(0),
      field121(0),
      field122(0),
      field123(0),
      field124(0),
      field126(0),
      field127(0),
      field128(0),
      field132(0),
      field134(0),
      field143(0),
      field145(0),
      field146(0),
      field153(0),
      field156(0),
      field159(0),
      field160(0),
      field164(0),
      field165(0),
      field167(0),
      field168(0),
      field170(0),
      field175(0),
      field176(0),
      field180(0) {}
  // FragileConstructor for use in initialization lists only

  Struct3(apache::thrift::FragileConstructor, std::map<bool, float> field1__arg, double field2__arg,  ::cpp2::Struct1 field3__arg, std::map<bool, double> field4__arg, std::map<std::vector<int8_t>, int64_t> field5__arg, std::string field6__arg,  ::cpp2::Struct1 field7__arg, int64_t field8__arg, std::vector<int32_t> field9__arg, std::set<std::vector<std::string>> field10__arg, std::vector<std::set<int64_t>> field11__arg, std::set<std::map<std::string, double>> field12__arg, std::string field13__arg,  ::cpp2::Struct0 field14__arg, std::vector<std::set<std::map<int8_t, std::string>>> field15__arg, std::map< ::cpp2::Struct0, std::string> field16__arg, std::vector< ::cpp2::Struct1> field17__arg, std::string field18__arg, std::map<bool, bool> field19__arg, std::vector<bool> field20__arg, int64_t field21__arg,  ::cpp2::Struct0 field22__arg, int8_t field23__arg, std::set<int8_t> field24__arg, float field25__arg, int32_t field26__arg, double field27__arg, std::set< ::cpp2::Struct0> field28__arg,  ::cpp2::Struct2 field29__arg, int8_t field30__arg, std::set<std::vector<bool>> field31__arg, std::vector<std::vector<int16_t>> field32__arg, int32_t field33__arg,  ::cpp2::Struct1 field34__arg, int16_t field35__arg, bool field36__arg, std::set<float> field37__arg,  ::cpp2::Struct0 field38__arg, int8_t field39__arg, std::vector<int8_t> field40__arg, int32_t field41__arg, std::set<std::string> field42__arg,  ::cpp2::Struct1 field43__arg,  ::cpp2::Struct0 field44__arg, std::set<int64_t> field45__arg, float field46__arg, int64_t field47__arg, std::vector<std::string> field48__arg, std::map<int16_t, std::set<int32_t>> field49__arg, bool field50__arg, int64_t field51__arg, int32_t field52__arg, std::vector<int16_t> field53__arg,  ::cpp2::Struct0 field54__arg, bool field55__arg,  ::cpp2::Struct1 field56__arg, int32_t field57__arg, bool field58__arg, std::string field59__arg, int16_t field60__arg,  ::cpp2::Struct0 field61__arg, std::set<float> field62__arg, std::set<std::map<int16_t, int64_t>> field63__arg, int32_t field64__arg,  ::cpp2::Struct1 field65__arg, std::vector<std::string> field66__arg, int8_t field67__arg, bool field68__arg, float field69__arg, float field70__arg, bool field71__arg, std::map<std::map<std::string, int8_t>, std::string> field72__arg, int32_t field73__arg, double field74__arg, int64_t field75__arg, int64_t field76__arg, std::vector<std::string> field77__arg, std::vector<std::string> field78__arg, std::string field79__arg, bool field80__arg, int64_t field81__arg, std::map<double, int64_t> field82__arg, std::map<int64_t, std::vector<double>> field83__arg, int8_t field84__arg, std::vector<bool> field85__arg, double field86__arg, float field87__arg, float field88__arg, std::string field89__arg, int32_t field90__arg,  ::cpp2::Struct1 field91__arg, std::set< ::cpp2::Struct2> field92__arg, float field93__arg, int16_t field94__arg, std::vector<double> field95__arg, std::map<int64_t, std::map<double, int64_t>> field96__arg, std::vector<std::string> field97__arg, std::map<int8_t, std::string> field98__arg, int32_t field99__arg,  ::cpp2::Struct2 field100__arg, std::vector<double> field101__arg, int16_t field102__arg, int16_t field103__arg, std::vector<double> field104__arg, std::string field105__arg, int16_t field106__arg, float field107__arg, double field108__arg, float field109__arg, double field110__arg, std::map<int8_t,  ::cpp2::Struct0> field111__arg, float field112__arg, double field113__arg, float field114__arg, bool field115__arg, std::map<bool, int16_t> field116__arg, std::string field117__arg,  ::cpp2::Struct0 field118__arg, std::map<std::string, int32_t> field119__arg, int16_t field120__arg, float field121__arg, bool field122__arg, int8_t field123__arg, float field124__arg, std::set<int64_t> field125__arg, int32_t field126__arg, int16_t field127__arg, bool field128__arg,  ::cpp2::Struct1 field129__arg,  ::cpp2::Struct0 field130__arg, std::string field131__arg, int16_t field132__arg, std::vector<std::string> field133__arg, int16_t field134__arg, std::vector<double> field135__arg, std::set<int16_t> field136__arg, std::set<float> field137__arg, std::map<float, std::string> field138__arg, std::map<bool,  ::cpp2::Struct1> field139__arg, std::set<int8_t> field140__arg, std::set<bool> field141__arg, std::set<float> field142__arg, bool field143__arg,  ::cpp2::Struct2 field144__arg, float field145__arg, int32_t field146__arg, std::string field147__arg, std::set<std::vector<int8_t>> field148__arg, std::vector<int16_t> field149__arg, std::map<std::string, double> field150__arg, std::map<std::set<int32_t>, int16_t> field151__arg, std::vector<int8_t> field152__arg, float field153__arg, std::map<bool, int64_t> field154__arg, std::vector< ::cpp2::Struct1> field155__arg, float field156__arg, std::map<int16_t, std::set<bool>> field157__arg,  ::cpp2::Struct1 field158__arg, int32_t field159__arg, int16_t field160__arg,  ::cpp2::Struct2 field161__arg, std::string field162__arg, std::vector< ::cpp2::Struct1> field163__arg, int64_t field164__arg, float field165__arg,  ::cpp2::Struct0 field166__arg, int8_t field167__arg, bool field168__arg, std::map<float, double> field169__arg, int32_t field170__arg, std::map<std::vector<double>, double> field171__arg, std::string field172__arg, std::vector<std::vector<float>> field173__arg, std::string field174__arg, int32_t field175__arg, int32_t field176__arg, std::string field177__arg, std::map<int32_t, std::string> field178__arg, std::set<std::set<std::string>> field179__arg, int8_t field180__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)),
      field97(std::move(field97__arg)),
      field98(std::move(field98__arg)),
      field99(std::move(field99__arg)),
      field100(std::move(field100__arg)),
      field101(std::move(field101__arg)),
      field102(std::move(field102__arg)),
      field103(std::move(field103__arg)),
      field104(std::move(field104__arg)),
      field105(std::move(field105__arg)),
      field106(std::move(field106__arg)),
      field107(std::move(field107__arg)),
      field108(std::move(field108__arg)),
      field109(std::move(field109__arg)),
      field110(std::move(field110__arg)),
      field111(std::move(field111__arg)),
      field112(std::move(field112__arg)),
      field113(std::move(field113__arg)),
      field114(std::move(field114__arg)),
      field115(std::move(field115__arg)),
      field116(std::move(field116__arg)),
      field117(std::move(field117__arg)),
      field118(std::move(field118__arg)),
      field119(std::move(field119__arg)),
      field120(std::move(field120__arg)),
      field121(std::move(field121__arg)),
      field122(std::move(field122__arg)),
      field123(std::move(field123__arg)),
      field124(std::move(field124__arg)),
      field125(std::move(field125__arg)),
      field126(std::move(field126__arg)),
      field127(std::move(field127__arg)),
      field128(std::move(field128__arg)),
      field129(std::move(field129__arg)),
      field130(std::move(field130__arg)),
      field131(std::move(field131__arg)),
      field132(std::move(field132__arg)),
      field133(std::move(field133__arg)),
      field134(std::move(field134__arg)),
      field135(std::move(field135__arg)),
      field136(std::move(field136__arg)),
      field137(std::move(field137__arg)),
      field138(std::move(field138__arg)),
      field139(std::move(field139__arg)),
      field140(std::move(field140__arg)),
      field141(std::move(field141__arg)),
      field142(std::move(field142__arg)),
      field143(std::move(field143__arg)),
      field144(std::move(field144__arg)),
      field145(std::move(field145__arg)),
      field146(std::move(field146__arg)),
      field147(std::move(field147__arg)),
      field148(std::move(field148__arg)),
      field149(std::move(field149__arg)),
      field150(std::move(field150__arg)),
      field151(std::move(field151__arg)),
      field152(std::move(field152__arg)),
      field153(std::move(field153__arg)),
      field154(std::move(field154__arg)),
      field155(std::move(field155__arg)),
      field156(std::move(field156__arg)),
      field157(std::move(field157__arg)),
      field158(std::move(field158__arg)),
      field159(std::move(field159__arg)),
      field160(std::move(field160__arg)),
      field161(std::move(field161__arg)),
      field162(std::move(field162__arg)),
      field163(std::move(field163__arg)),
      field164(std::move(field164__arg)),
      field165(std::move(field165__arg)),
      field166(std::move(field166__arg)),
      field167(std::move(field167__arg)),
      field168(std::move(field168__arg)),
      field169(std::move(field169__arg)),
      field170(std::move(field170__arg)),
      field171(std::move(field171__arg)),
      field172(std::move(field172__arg)),
      field173(std::move(field173__arg)),
      field174(std::move(field174__arg)),
      field175(std::move(field175__arg)),
      field176(std::move(field176__arg)),
      field177(std::move(field177__arg)),
      field178(std::move(field178__arg)),
      field179(std::move(field179__arg)),
      field180(std::move(field180__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
    __isset.field97 = true;
    __isset.field98 = true;
    __isset.field99 = true;
    __isset.field100 = true;
    __isset.field101 = true;
    __isset.field102 = true;
    __isset.field103 = true;
    __isset.field104 = true;
    __isset.field105 = true;
    __isset.field106 = true;
    __isset.field107 = true;
    __isset.field108 = true;
    __isset.field109 = true;
    __isset.field110 = true;
    __isset.field111 = true;
    __isset.field112 = true;
    __isset.field113 = true;
    __isset.field114 = true;
    __isset.field115 = true;
    __isset.field116 = true;
    __isset.field117 = true;
    __isset.field118 = true;
    __isset.field119 = true;
    __isset.field120 = true;
    __isset.field121 = true;
    __isset.field122 = true;
    __isset.field123 = true;
    __isset.field124 = true;
    __isset.field125 = true;
    __isset.field126 = true;
    __isset.field127 = true;
    __isset.field128 = true;
    __isset.field129 = true;
    __isset.field130 = true;
    __isset.field131 = true;
    __isset.field132 = true;
    __isset.field133 = true;
    __isset.field134 = true;
    __isset.field135 = true;
    __isset.field136 = true;
    __isset.field137 = true;
    __isset.field138 = true;
    __isset.field139 = true;
    __isset.field140 = true;
    __isset.field141 = true;
    __isset.field142 = true;
    __isset.field143 = true;
    __isset.field144 = true;
    __isset.field145 = true;
    __isset.field146 = true;
    __isset.field147 = true;
    __isset.field148 = true;
    __isset.field149 = true;
    __isset.field150 = true;
    __isset.field151 = true;
    __isset.field152 = true;
    __isset.field153 = true;
    __isset.field154 = true;
    __isset.field155 = true;
    __isset.field156 = true;
    __isset.field157 = true;
    __isset.field158 = true;
    __isset.field159 = true;
    __isset.field160 = true;
    __isset.field161 = true;
    __isset.field162 = true;
    __isset.field163 = true;
    __isset.field164 = true;
    __isset.field165 = true;
    __isset.field166 = true;
    __isset.field167 = true;
    __isset.field168 = true;
    __isset.field169 = true;
    __isset.field170 = true;
    __isset.field171 = true;
    __isset.field172 = true;
    __isset.field173 = true;
    __isset.field174 = true;
    __isset.field175 = true;
    __isset.field176 = true;
    __isset.field177 = true;
    __isset.field178 = true;
    __isset.field179 = true;
    __isset.field180 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<97, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field97 = arg.move();
    __isset.field97 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<98, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field98 = arg.move();
    __isset.field98 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<99, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field99 = arg.move();
    __isset.field99 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field100 = arg.move();
    __isset.field100 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field101 = arg.move();
    __isset.field101 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<102, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field102 = arg.move();
    __isset.field102 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<103, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field103 = arg.move();
    __isset.field103 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<104, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field104 = arg.move();
    __isset.field104 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<105, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field105 = arg.move();
    __isset.field105 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<106, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field106 = arg.move();
    __isset.field106 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<107, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field107 = arg.move();
    __isset.field107 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<108, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field108 = arg.move();
    __isset.field108 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<109, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field109 = arg.move();
    __isset.field109 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<110, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field110 = arg.move();
    __isset.field110 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<111, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field111 = arg.move();
    __isset.field111 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<112, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field112 = arg.move();
    __isset.field112 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<113, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field113 = arg.move();
    __isset.field113 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<114, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field114 = arg.move();
    __isset.field114 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<115, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field115 = arg.move();
    __isset.field115 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<116, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field116 = arg.move();
    __isset.field116 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<117, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field117 = arg.move();
    __isset.field117 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<118, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field118 = arg.move();
    __isset.field118 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<119, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field119 = arg.move();
    __isset.field119 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<120, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field120 = arg.move();
    __isset.field120 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<121, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field121 = arg.move();
    __isset.field121 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<122, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field122 = arg.move();
    __isset.field122 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<123, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field123 = arg.move();
    __isset.field123 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<124, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field124 = arg.move();
    __isset.field124 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<125, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field125 = arg.move();
    __isset.field125 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<126, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field126 = arg.move();
    __isset.field126 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<127, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field127 = arg.move();
    __isset.field127 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<128, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field128 = arg.move();
    __isset.field128 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<129, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field129 = arg.move();
    __isset.field129 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<130, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field130 = arg.move();
    __isset.field130 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<131, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field131 = arg.move();
    __isset.field131 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<132, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field132 = arg.move();
    __isset.field132 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<133, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field133 = arg.move();
    __isset.field133 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<134, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field134 = arg.move();
    __isset.field134 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<135, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field135 = arg.move();
    __isset.field135 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<136, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field136 = arg.move();
    __isset.field136 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<137, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field137 = arg.move();
    __isset.field137 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<138, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field138 = arg.move();
    __isset.field138 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<139, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field139 = arg.move();
    __isset.field139 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<140, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field140 = arg.move();
    __isset.field140 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<141, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field141 = arg.move();
    __isset.field141 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<142, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field142 = arg.move();
    __isset.field142 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<143, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field143 = arg.move();
    __isset.field143 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<144, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field144 = arg.move();
    __isset.field144 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<145, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field145 = arg.move();
    __isset.field145 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<146, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field146 = arg.move();
    __isset.field146 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<147, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field147 = arg.move();
    __isset.field147 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<148, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field148 = arg.move();
    __isset.field148 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<149, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field149 = arg.move();
    __isset.field149 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<150, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field150 = arg.move();
    __isset.field150 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<151, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field151 = arg.move();
    __isset.field151 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<152, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field152 = arg.move();
    __isset.field152 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<153, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field153 = arg.move();
    __isset.field153 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<154, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field154 = arg.move();
    __isset.field154 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<155, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field155 = arg.move();
    __isset.field155 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<156, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field156 = arg.move();
    __isset.field156 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<157, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field157 = arg.move();
    __isset.field157 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<158, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field158 = arg.move();
    __isset.field158 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<159, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field159 = arg.move();
    __isset.field159 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<160, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field160 = arg.move();
    __isset.field160 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<161, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field161 = arg.move();
    __isset.field161 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<162, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field162 = arg.move();
    __isset.field162 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<163, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field163 = arg.move();
    __isset.field163 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<164, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field164 = arg.move();
    __isset.field164 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<165, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field165 = arg.move();
    __isset.field165 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<166, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field166 = arg.move();
    __isset.field166 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<167, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field167 = arg.move();
    __isset.field167 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<168, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field168 = arg.move();
    __isset.field168 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<169, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field169 = arg.move();
    __isset.field169 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<170, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field170 = arg.move();
    __isset.field170 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<171, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field171 = arg.move();
    __isset.field171 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<172, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field172 = arg.move();
    __isset.field172 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<173, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field173 = arg.move();
    __isset.field173 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<174, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field174 = arg.move();
    __isset.field174 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<175, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field175 = arg.move();
    __isset.field175 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<176, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field176 = arg.move();
    __isset.field176 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<177, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field177 = arg.move();
    __isset.field177 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<178, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field178 = arg.move();
    __isset.field178 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<179, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field179 = arg.move();
    __isset.field179 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct3(::apache::thrift::detail::argument_wrapper<180, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct3(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field180 = arg.move();
    __isset.field180 = true;
  }

  Struct3(Struct3&&) = default;

  Struct3(const Struct3&) = default;

  Struct3& operator=(Struct3&&) = default;

  Struct3& operator=(const Struct3&) = default;
  void __clear();

  virtual ~Struct3() {}

  std::map<bool, float> field1;
  double field2;
   ::cpp2::Struct1 field3;
  std::map<bool, double> field4;
  std::map<std::vector<int8_t>, int64_t> field5;
  std::string field6;
   ::cpp2::Struct1 field7;
  int64_t field8;
  std::vector<int32_t> field9;
  std::set<std::vector<std::string>> field10;
  std::vector<std::set<int64_t>> field11;
  std::set<std::map<std::string, double>> field12;
  std::string field13;
   ::cpp2::Struct0 field14;
  std::vector<std::set<std::map<int8_t, std::string>>> field15;
  std::map< ::cpp2::Struct0, std::string> field16;
  std::vector< ::cpp2::Struct1> field17;
  std::string field18;
  std::map<bool, bool> field19;
  std::vector<bool> field20;
  int64_t field21;
   ::cpp2::Struct0 field22;
  int8_t field23;
  std::set<int8_t> field24;
  float field25;
  int32_t field26;
  double field27;
  std::set< ::cpp2::Struct0> field28;
   ::cpp2::Struct2 field29;
  int8_t field30;
  std::set<std::vector<bool>> field31;
  std::vector<std::vector<int16_t>> field32;
  int32_t field33;
   ::cpp2::Struct1 field34;
  int16_t field35;
  bool field36;
  std::set<float> field37;
   ::cpp2::Struct0 field38;
  int8_t field39;
  std::vector<int8_t> field40;
  int32_t field41;
  std::set<std::string> field42;
   ::cpp2::Struct1 field43;
   ::cpp2::Struct0 field44;
  std::set<int64_t> field45;
  float field46;
  int64_t field47;
  std::vector<std::string> field48;
  std::map<int16_t, std::set<int32_t>> field49;
  bool field50;
  int64_t field51;
  int32_t field52;
  std::vector<int16_t> field53;
   ::cpp2::Struct0 field54;
  bool field55;
   ::cpp2::Struct1 field56;
  int32_t field57;
  bool field58;
  std::string field59;
  int16_t field60;
   ::cpp2::Struct0 field61;
  std::set<float> field62;
  std::set<std::map<int16_t, int64_t>> field63;
  int32_t field64;
   ::cpp2::Struct1 field65;
  std::vector<std::string> field66;
  int8_t field67;
  bool field68;
  float field69;
  float field70;
  bool field71;
  std::map<std::map<std::string, int8_t>, std::string> field72;
  int32_t field73;
  double field74;
  int64_t field75;
  int64_t field76;
  std::vector<std::string> field77;
  std::vector<std::string> field78;
  std::string field79;
  bool field80;
  int64_t field81;
  std::map<double, int64_t> field82;
  std::map<int64_t, std::vector<double>> field83;
  int8_t field84;
  std::vector<bool> field85;
  double field86;
  float field87;
  float field88;
  std::string field89;
  int32_t field90;
   ::cpp2::Struct1 field91;
  std::set< ::cpp2::Struct2> field92;
  float field93;
  int16_t field94;
  std::vector<double> field95;
  std::map<int64_t, std::map<double, int64_t>> field96;
  std::vector<std::string> field97;
  std::map<int8_t, std::string> field98;
  int32_t field99;
   ::cpp2::Struct2 field100;
  std::vector<double> field101;
  int16_t field102;
  int16_t field103;
  std::vector<double> field104;
  std::string field105;
  int16_t field106;
  float field107;
  double field108;
  float field109;
  double field110;
  std::map<int8_t,  ::cpp2::Struct0> field111;
  float field112;
  double field113;
  float field114;
  bool field115;
  std::map<bool, int16_t> field116;
  std::string field117;
   ::cpp2::Struct0 field118;
  std::map<std::string, int32_t> field119;
  int16_t field120;
  float field121;
  bool field122;
  int8_t field123;
  float field124;
  std::set<int64_t> field125;
  int32_t field126;
  int16_t field127;
  bool field128;
   ::cpp2::Struct1 field129;
   ::cpp2::Struct0 field130;
  std::string field131;
  int16_t field132;
  std::vector<std::string> field133;
  int16_t field134;
  std::vector<double> field135;
  std::set<int16_t> field136;
  std::set<float> field137;
  std::map<float, std::string> field138;
  std::map<bool,  ::cpp2::Struct1> field139;
  std::set<int8_t> field140;
  std::set<bool> field141;
  std::set<float> field142;
  bool field143;
   ::cpp2::Struct2 field144;
  float field145;
  int32_t field146;
  std::string field147;
  std::set<std::vector<int8_t>> field148;
  std::vector<int16_t> field149;
  std::map<std::string, double> field150;
  std::map<std::set<int32_t>, int16_t> field151;
  std::vector<int8_t> field152;
  float field153;
  std::map<bool, int64_t> field154;
  std::vector< ::cpp2::Struct1> field155;
  float field156;
  std::map<int16_t, std::set<bool>> field157;
   ::cpp2::Struct1 field158;
  int32_t field159;
  int16_t field160;
   ::cpp2::Struct2 field161;
  std::string field162;
  std::vector< ::cpp2::Struct1> field163;
  int64_t field164;
  float field165;
   ::cpp2::Struct0 field166;
  int8_t field167;
  bool field168;
  std::map<float, double> field169;
  int32_t field170;
  std::map<std::vector<double>, double> field171;
  std::string field172;
  std::vector<std::vector<float>> field173;
  std::string field174;
  int32_t field175;
  int32_t field176;
  std::string field177;
  std::map<int32_t, std::string> field178;
  std::set<std::set<std::string>> field179;
  int8_t field180;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
      field97 = false;
      field98 = false;
      field99 = false;
      field100 = false;
      field101 = false;
      field102 = false;
      field103 = false;
      field104 = false;
      field105 = false;
      field106 = false;
      field107 = false;
      field108 = false;
      field109 = false;
      field110 = false;
      field111 = false;
      field112 = false;
      field113 = false;
      field114 = false;
      field115 = false;
      field116 = false;
      field117 = false;
      field118 = false;
      field119 = false;
      field120 = false;
      field121 = false;
      field122 = false;
      field123 = false;
      field124 = false;
      field125 = false;
      field126 = false;
      field127 = false;
      field128 = false;
      field129 = false;
      field130 = false;
      field131 = false;
      field132 = false;
      field133 = false;
      field134 = false;
      field135 = false;
      field136 = false;
      field137 = false;
      field138 = false;
      field139 = false;
      field140 = false;
      field141 = false;
      field142 = false;
      field143 = false;
      field144 = false;
      field145 = false;
      field146 = false;
      field147 = false;
      field148 = false;
      field149 = false;
      field150 = false;
      field151 = false;
      field152 = false;
      field153 = false;
      field154 = false;
      field155 = false;
      field156 = false;
      field157 = false;
      field158 = false;
      field159 = false;
      field160 = false;
      field161 = false;
      field162 = false;
      field163 = false;
      field164 = false;
      field165 = false;
      field166 = false;
      field167 = false;
      field168 = false;
      field169 = false;
      field170 = false;
      field171 = false;
      field172 = false;
      field173 = false;
      field174 = false;
      field175 = false;
      field176 = false;
      field177 = false;
      field178 = false;
      field179 = false;
      field180 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
    bool field97 = false;
    bool field98 = false;
    bool field99 = false;
    bool field100 = false;
    bool field101 = false;
    bool field102 = false;
    bool field103 = false;
    bool field104 = false;
    bool field105 = false;
    bool field106 = false;
    bool field107 = false;
    bool field108 = false;
    bool field109 = false;
    bool field110 = false;
    bool field111 = false;
    bool field112 = false;
    bool field113 = false;
    bool field114 = false;
    bool field115 = false;
    bool field116 = false;
    bool field117 = false;
    bool field118 = false;
    bool field119 = false;
    bool field120 = false;
    bool field121 = false;
    bool field122 = false;
    bool field123 = false;
    bool field124 = false;
    bool field125 = false;
    bool field126 = false;
    bool field127 = false;
    bool field128 = false;
    bool field129 = false;
    bool field130 = false;
    bool field131 = false;
    bool field132 = false;
    bool field133 = false;
    bool field134 = false;
    bool field135 = false;
    bool field136 = false;
    bool field137 = false;
    bool field138 = false;
    bool field139 = false;
    bool field140 = false;
    bool field141 = false;
    bool field142 = false;
    bool field143 = false;
    bool field144 = false;
    bool field145 = false;
    bool field146 = false;
    bool field147 = false;
    bool field148 = false;
    bool field149 = false;
    bool field150 = false;
    bool field151 = false;
    bool field152 = false;
    bool field153 = false;
    bool field154 = false;
    bool field155 = false;
    bool field156 = false;
    bool field157 = false;
    bool field158 = false;
    bool field159 = false;
    bool field160 = false;
    bool field161 = false;
    bool field162 = false;
    bool field163 = false;
    bool field164 = false;
    bool field165 = false;
    bool field166 = false;
    bool field167 = false;
    bool field168 = false;
    bool field169 = false;
    bool field170 = false;
    bool field171 = false;
    bool field172 = false;
    bool field173 = false;
    bool field174 = false;
    bool field175 = false;
    bool field176 = false;
    bool field177 = false;
    bool field178 = false;
    bool field179 = false;
    bool field180 = false;
  } __isset;
  bool operator==(const Struct3& rhs) const;

  bool operator < (const Struct3& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    if (!(field97 == rhs.field97)) {
      return field97 < rhs.field97;
    }
    if (!(field98 == rhs.field98)) {
      return field98 < rhs.field98;
    }
    if (!(field99 == rhs.field99)) {
      return field99 < rhs.field99;
    }
    if (!(field100 == rhs.field100)) {
      return field100 < rhs.field100;
    }
    if (!(field101 == rhs.field101)) {
      return field101 < rhs.field101;
    }
    if (!(field102 == rhs.field102)) {
      return field102 < rhs.field102;
    }
    if (!(field103 == rhs.field103)) {
      return field103 < rhs.field103;
    }
    if (!(field104 == rhs.field104)) {
      return field104 < rhs.field104;
    }
    if (!(field105 == rhs.field105)) {
      return field105 < rhs.field105;
    }
    if (!(field106 == rhs.field106)) {
      return field106 < rhs.field106;
    }
    if (!(field107 == rhs.field107)) {
      return field107 < rhs.field107;
    }
    if (!(field108 == rhs.field108)) {
      return field108 < rhs.field108;
    }
    if (!(field109 == rhs.field109)) {
      return field109 < rhs.field109;
    }
    if (!(field110 == rhs.field110)) {
      return field110 < rhs.field110;
    }
    if (!(field111 == rhs.field111)) {
      return field111 < rhs.field111;
    }
    if (!(field112 == rhs.field112)) {
      return field112 < rhs.field112;
    }
    if (!(field113 == rhs.field113)) {
      return field113 < rhs.field113;
    }
    if (!(field114 == rhs.field114)) {
      return field114 < rhs.field114;
    }
    if (!(field115 == rhs.field115)) {
      return field115 < rhs.field115;
    }
    if (!(field116 == rhs.field116)) {
      return field116 < rhs.field116;
    }
    if (!(field117 == rhs.field117)) {
      return field117 < rhs.field117;
    }
    if (!(field118 == rhs.field118)) {
      return field118 < rhs.field118;
    }
    if (!(field119 == rhs.field119)) {
      return field119 < rhs.field119;
    }
    if (!(field120 == rhs.field120)) {
      return field120 < rhs.field120;
    }
    if (!(field121 == rhs.field121)) {
      return field121 < rhs.field121;
    }
    if (!(field122 == rhs.field122)) {
      return field122 < rhs.field122;
    }
    if (!(field123 == rhs.field123)) {
      return field123 < rhs.field123;
    }
    if (!(field124 == rhs.field124)) {
      return field124 < rhs.field124;
    }
    if (!(field125 == rhs.field125)) {
      return field125 < rhs.field125;
    }
    if (!(field126 == rhs.field126)) {
      return field126 < rhs.field126;
    }
    if (!(field127 == rhs.field127)) {
      return field127 < rhs.field127;
    }
    if (!(field128 == rhs.field128)) {
      return field128 < rhs.field128;
    }
    if (!(field129 == rhs.field129)) {
      return field129 < rhs.field129;
    }
    if (!(field130 == rhs.field130)) {
      return field130 < rhs.field130;
    }
    if (!(field131 == rhs.field131)) {
      return field131 < rhs.field131;
    }
    if (!(field132 == rhs.field132)) {
      return field132 < rhs.field132;
    }
    if (!(field133 == rhs.field133)) {
      return field133 < rhs.field133;
    }
    if (!(field134 == rhs.field134)) {
      return field134 < rhs.field134;
    }
    if (!(field135 == rhs.field135)) {
      return field135 < rhs.field135;
    }
    if (!(field136 == rhs.field136)) {
      return field136 < rhs.field136;
    }
    if (!(field137 == rhs.field137)) {
      return field137 < rhs.field137;
    }
    if (!(field138 == rhs.field138)) {
      return field138 < rhs.field138;
    }
    if (!(field139 == rhs.field139)) {
      return field139 < rhs.field139;
    }
    if (!(field140 == rhs.field140)) {
      return field140 < rhs.field140;
    }
    if (!(field141 == rhs.field141)) {
      return field141 < rhs.field141;
    }
    if (!(field142 == rhs.field142)) {
      return field142 < rhs.field142;
    }
    if (!(field143 == rhs.field143)) {
      return field143 < rhs.field143;
    }
    if (!(field144 == rhs.field144)) {
      return field144 < rhs.field144;
    }
    if (!(field145 == rhs.field145)) {
      return field145 < rhs.field145;
    }
    if (!(field146 == rhs.field146)) {
      return field146 < rhs.field146;
    }
    if (!(field147 == rhs.field147)) {
      return field147 < rhs.field147;
    }
    if (!(field148 == rhs.field148)) {
      return field148 < rhs.field148;
    }
    if (!(field149 == rhs.field149)) {
      return field149 < rhs.field149;
    }
    if (!(field150 == rhs.field150)) {
      return field150 < rhs.field150;
    }
    if (!(field151 == rhs.field151)) {
      return field151 < rhs.field151;
    }
    if (!(field152 == rhs.field152)) {
      return field152 < rhs.field152;
    }
    if (!(field153 == rhs.field153)) {
      return field153 < rhs.field153;
    }
    if (!(field154 == rhs.field154)) {
      return field154 < rhs.field154;
    }
    if (!(field155 == rhs.field155)) {
      return field155 < rhs.field155;
    }
    if (!(field156 == rhs.field156)) {
      return field156 < rhs.field156;
    }
    if (!(field157 == rhs.field157)) {
      return field157 < rhs.field157;
    }
    if (!(field158 == rhs.field158)) {
      return field158 < rhs.field158;
    }
    if (!(field159 == rhs.field159)) {
      return field159 < rhs.field159;
    }
    if (!(field160 == rhs.field160)) {
      return field160 < rhs.field160;
    }
    if (!(field161 == rhs.field161)) {
      return field161 < rhs.field161;
    }
    if (!(field162 == rhs.field162)) {
      return field162 < rhs.field162;
    }
    if (!(field163 == rhs.field163)) {
      return field163 < rhs.field163;
    }
    if (!(field164 == rhs.field164)) {
      return field164 < rhs.field164;
    }
    if (!(field165 == rhs.field165)) {
      return field165 < rhs.field165;
    }
    if (!(field166 == rhs.field166)) {
      return field166 < rhs.field166;
    }
    if (!(field167 == rhs.field167)) {
      return field167 < rhs.field167;
    }
    if (!(field168 == rhs.field168)) {
      return field168 < rhs.field168;
    }
    if (!(field169 == rhs.field169)) {
      return field169 < rhs.field169;
    }
    if (!(field170 == rhs.field170)) {
      return field170 < rhs.field170;
    }
    if (!(field171 == rhs.field171)) {
      return field171 < rhs.field171;
    }
    if (!(field172 == rhs.field172)) {
      return field172 < rhs.field172;
    }
    if (!(field173 == rhs.field173)) {
      return field173 < rhs.field173;
    }
    if (!(field174 == rhs.field174)) {
      return field174 < rhs.field174;
    }
    if (!(field175 == rhs.field175)) {
      return field175 < rhs.field175;
    }
    if (!(field176 == rhs.field176)) {
      return field176 < rhs.field176;
    }
    if (!(field177 == rhs.field177)) {
      return field177 < rhs.field177;
    }
    if (!(field178 == rhs.field178)) {
      return field178 < rhs.field178;
    }
    if (!(field179 == rhs.field179)) {
      return field179 < rhs.field179;
    }
    if (!(field180 == rhs.field180)) {
      return field180 < rhs.field180;
    }
    (void)rhs;
    return false;
  }
  const std::map<bool, float>& get_field1() const&;
  std::map<bool, float> get_field1() &&;

  template <typename T_Struct3_field1_struct_setter>
  std::map<bool, float>& set_field1(T_Struct3_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct3_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  double get_field2() const {
    return field2;
  }

  double& set_field2(double field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }
  const  ::cpp2::Struct1& get_field3() const&;
   ::cpp2::Struct1 get_field3() &&;

  template <typename T_Struct3_field3_struct_setter>
   ::cpp2::Struct1& set_field3(T_Struct3_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct3_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }
  const std::map<bool, double>& get_field4() const&;
  std::map<bool, double> get_field4() &&;

  template <typename T_Struct3_field4_struct_setter>
  std::map<bool, double>& set_field4(T_Struct3_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct3_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }
  const std::map<std::vector<int8_t>, int64_t>& get_field5() const&;
  std::map<std::vector<int8_t>, int64_t> get_field5() &&;

  template <typename T_Struct3_field5_struct_setter>
  std::map<std::vector<int8_t>, int64_t>& set_field5(T_Struct3_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct3_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }

  const std::string& get_field6() const& {
    return field6;
  }

  std::string get_field6() && {
    return std::move(field6);
  }

  template <typename T_Struct3_field6_struct_setter>
  std::string& set_field6(T_Struct3_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct3_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }
  const  ::cpp2::Struct1& get_field7() const&;
   ::cpp2::Struct1 get_field7() &&;

  template <typename T_Struct3_field7_struct_setter>
   ::cpp2::Struct1& set_field7(T_Struct3_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct3_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }

  int64_t get_field8() const {
    return field8;
  }

  int64_t& set_field8(int64_t field8_) {
    field8 = field8_;
    __isset.field8 = true;
    return field8;
  }
  const std::vector<int32_t>& get_field9() const&;
  std::vector<int32_t> get_field9() &&;

  template <typename T_Struct3_field9_struct_setter>
  std::vector<int32_t>& set_field9(T_Struct3_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct3_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }
  const std::set<std::vector<std::string>>& get_field10() const&;
  std::set<std::vector<std::string>> get_field10() &&;

  template <typename T_Struct3_field10_struct_setter>
  std::set<std::vector<std::string>>& set_field10(T_Struct3_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct3_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }
  const std::vector<std::set<int64_t>>& get_field11() const&;
  std::vector<std::set<int64_t>> get_field11() &&;

  template <typename T_Struct3_field11_struct_setter>
  std::vector<std::set<int64_t>>& set_field11(T_Struct3_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct3_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }
  const std::set<std::map<std::string, double>>& get_field12() const&;
  std::set<std::map<std::string, double>> get_field12() &&;

  template <typename T_Struct3_field12_struct_setter>
  std::set<std::map<std::string, double>>& set_field12(T_Struct3_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct3_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }

  const std::string& get_field13() const& {
    return field13;
  }

  std::string get_field13() && {
    return std::move(field13);
  }

  template <typename T_Struct3_field13_struct_setter>
  std::string& set_field13(T_Struct3_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct3_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }
  const  ::cpp2::Struct0& get_field14() const&;
   ::cpp2::Struct0 get_field14() &&;

  template <typename T_Struct3_field14_struct_setter>
   ::cpp2::Struct0& set_field14(T_Struct3_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct3_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }
  const std::vector<std::set<std::map<int8_t, std::string>>>& get_field15() const&;
  std::vector<std::set<std::map<int8_t, std::string>>> get_field15() &&;

  template <typename T_Struct3_field15_struct_setter>
  std::vector<std::set<std::map<int8_t, std::string>>>& set_field15(T_Struct3_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct3_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }
  const std::map< ::cpp2::Struct0, std::string>& get_field16() const&;
  std::map< ::cpp2::Struct0, std::string> get_field16() &&;

  template <typename T_Struct3_field16_struct_setter>
  std::map< ::cpp2::Struct0, std::string>& set_field16(T_Struct3_field16_struct_setter&& field16_) {
    field16 = std::forward<T_Struct3_field16_struct_setter>(field16_);
    __isset.field16 = true;
    return field16;
  }
  const std::vector< ::cpp2::Struct1>& get_field17() const&;
  std::vector< ::cpp2::Struct1> get_field17() &&;

  template <typename T_Struct3_field17_struct_setter>
  std::vector< ::cpp2::Struct1>& set_field17(T_Struct3_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct3_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }

  const std::string& get_field18() const& {
    return field18;
  }

  std::string get_field18() && {
    return std::move(field18);
  }

  template <typename T_Struct3_field18_struct_setter>
  std::string& set_field18(T_Struct3_field18_struct_setter&& field18_) {
    field18 = std::forward<T_Struct3_field18_struct_setter>(field18_);
    __isset.field18 = true;
    return field18;
  }
  const std::map<bool, bool>& get_field19() const&;
  std::map<bool, bool> get_field19() &&;

  template <typename T_Struct3_field19_struct_setter>
  std::map<bool, bool>& set_field19(T_Struct3_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct3_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }
  const std::vector<bool>& get_field20() const&;
  std::vector<bool> get_field20() &&;

  template <typename T_Struct3_field20_struct_setter>
  std::vector<bool>& set_field20(T_Struct3_field20_struct_setter&& field20_) {
    field20 = std::forward<T_Struct3_field20_struct_setter>(field20_);
    __isset.field20 = true;
    return field20;
  }

  int64_t get_field21() const {
    return field21;
  }

  int64_t& set_field21(int64_t field21_) {
    field21 = field21_;
    __isset.field21 = true;
    return field21;
  }
  const  ::cpp2::Struct0& get_field22() const&;
   ::cpp2::Struct0 get_field22() &&;

  template <typename T_Struct3_field22_struct_setter>
   ::cpp2::Struct0& set_field22(T_Struct3_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct3_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }

  int8_t get_field23() const {
    return field23;
  }

  int8_t& set_field23(int8_t field23_) {
    field23 = field23_;
    __isset.field23 = true;
    return field23;
  }
  const std::set<int8_t>& get_field24() const&;
  std::set<int8_t> get_field24() &&;

  template <typename T_Struct3_field24_struct_setter>
  std::set<int8_t>& set_field24(T_Struct3_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct3_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }

  float get_field25() const {
    return field25;
  }

  float& set_field25(float field25_) {
    field25 = field25_;
    __isset.field25 = true;
    return field25;
  }

  int32_t get_field26() const {
    return field26;
  }

  int32_t& set_field26(int32_t field26_) {
    field26 = field26_;
    __isset.field26 = true;
    return field26;
  }

  double get_field27() const {
    return field27;
  }

  double& set_field27(double field27_) {
    field27 = field27_;
    __isset.field27 = true;
    return field27;
  }
  const std::set< ::cpp2::Struct0>& get_field28() const&;
  std::set< ::cpp2::Struct0> get_field28() &&;

  template <typename T_Struct3_field28_struct_setter>
  std::set< ::cpp2::Struct0>& set_field28(T_Struct3_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct3_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }
  const  ::cpp2::Struct2& get_field29() const&;
   ::cpp2::Struct2 get_field29() &&;

  template <typename T_Struct3_field29_struct_setter>
   ::cpp2::Struct2& set_field29(T_Struct3_field29_struct_setter&& field29_) {
    field29 = std::forward<T_Struct3_field29_struct_setter>(field29_);
    __isset.field29 = true;
    return field29;
  }

  int8_t get_field30() const {
    return field30;
  }

  int8_t& set_field30(int8_t field30_) {
    field30 = field30_;
    __isset.field30 = true;
    return field30;
  }
  const std::set<std::vector<bool>>& get_field31() const&;
  std::set<std::vector<bool>> get_field31() &&;

  template <typename T_Struct3_field31_struct_setter>
  std::set<std::vector<bool>>& set_field31(T_Struct3_field31_struct_setter&& field31_) {
    field31 = std::forward<T_Struct3_field31_struct_setter>(field31_);
    __isset.field31 = true;
    return field31;
  }
  const std::vector<std::vector<int16_t>>& get_field32() const&;
  std::vector<std::vector<int16_t>> get_field32() &&;

  template <typename T_Struct3_field32_struct_setter>
  std::vector<std::vector<int16_t>>& set_field32(T_Struct3_field32_struct_setter&& field32_) {
    field32 = std::forward<T_Struct3_field32_struct_setter>(field32_);
    __isset.field32 = true;
    return field32;
  }

  int32_t get_field33() const {
    return field33;
  }

  int32_t& set_field33(int32_t field33_) {
    field33 = field33_;
    __isset.field33 = true;
    return field33;
  }
  const  ::cpp2::Struct1& get_field34() const&;
   ::cpp2::Struct1 get_field34() &&;

  template <typename T_Struct3_field34_struct_setter>
   ::cpp2::Struct1& set_field34(T_Struct3_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct3_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }

  int16_t get_field35() const {
    return field35;
  }

  int16_t& set_field35(int16_t field35_) {
    field35 = field35_;
    __isset.field35 = true;
    return field35;
  }

  bool get_field36() const {
    return field36;
  }

  bool& set_field36(bool field36_) {
    field36 = field36_;
    __isset.field36 = true;
    return field36;
  }
  const std::set<float>& get_field37() const&;
  std::set<float> get_field37() &&;

  template <typename T_Struct3_field37_struct_setter>
  std::set<float>& set_field37(T_Struct3_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct3_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }
  const  ::cpp2::Struct0& get_field38() const&;
   ::cpp2::Struct0 get_field38() &&;

  template <typename T_Struct3_field38_struct_setter>
   ::cpp2::Struct0& set_field38(T_Struct3_field38_struct_setter&& field38_) {
    field38 = std::forward<T_Struct3_field38_struct_setter>(field38_);
    __isset.field38 = true;
    return field38;
  }

  int8_t get_field39() const {
    return field39;
  }

  int8_t& set_field39(int8_t field39_) {
    field39 = field39_;
    __isset.field39 = true;
    return field39;
  }
  const std::vector<int8_t>& get_field40() const&;
  std::vector<int8_t> get_field40() &&;

  template <typename T_Struct3_field40_struct_setter>
  std::vector<int8_t>& set_field40(T_Struct3_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct3_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }

  int32_t get_field41() const {
    return field41;
  }

  int32_t& set_field41(int32_t field41_) {
    field41 = field41_;
    __isset.field41 = true;
    return field41;
  }
  const std::set<std::string>& get_field42() const&;
  std::set<std::string> get_field42() &&;

  template <typename T_Struct3_field42_struct_setter>
  std::set<std::string>& set_field42(T_Struct3_field42_struct_setter&& field42_) {
    field42 = std::forward<T_Struct3_field42_struct_setter>(field42_);
    __isset.field42 = true;
    return field42;
  }
  const  ::cpp2::Struct1& get_field43() const&;
   ::cpp2::Struct1 get_field43() &&;

  template <typename T_Struct3_field43_struct_setter>
   ::cpp2::Struct1& set_field43(T_Struct3_field43_struct_setter&& field43_) {
    field43 = std::forward<T_Struct3_field43_struct_setter>(field43_);
    __isset.field43 = true;
    return field43;
  }
  const  ::cpp2::Struct0& get_field44() const&;
   ::cpp2::Struct0 get_field44() &&;

  template <typename T_Struct3_field44_struct_setter>
   ::cpp2::Struct0& set_field44(T_Struct3_field44_struct_setter&& field44_) {
    field44 = std::forward<T_Struct3_field44_struct_setter>(field44_);
    __isset.field44 = true;
    return field44;
  }
  const std::set<int64_t>& get_field45() const&;
  std::set<int64_t> get_field45() &&;

  template <typename T_Struct3_field45_struct_setter>
  std::set<int64_t>& set_field45(T_Struct3_field45_struct_setter&& field45_) {
    field45 = std::forward<T_Struct3_field45_struct_setter>(field45_);
    __isset.field45 = true;
    return field45;
  }

  float get_field46() const {
    return field46;
  }

  float& set_field46(float field46_) {
    field46 = field46_;
    __isset.field46 = true;
    return field46;
  }

  int64_t get_field47() const {
    return field47;
  }

  int64_t& set_field47(int64_t field47_) {
    field47 = field47_;
    __isset.field47 = true;
    return field47;
  }
  const std::vector<std::string>& get_field48() const&;
  std::vector<std::string> get_field48() &&;

  template <typename T_Struct3_field48_struct_setter>
  std::vector<std::string>& set_field48(T_Struct3_field48_struct_setter&& field48_) {
    field48 = std::forward<T_Struct3_field48_struct_setter>(field48_);
    __isset.field48 = true;
    return field48;
  }
  const std::map<int16_t, std::set<int32_t>>& get_field49() const&;
  std::map<int16_t, std::set<int32_t>> get_field49() &&;

  template <typename T_Struct3_field49_struct_setter>
  std::map<int16_t, std::set<int32_t>>& set_field49(T_Struct3_field49_struct_setter&& field49_) {
    field49 = std::forward<T_Struct3_field49_struct_setter>(field49_);
    __isset.field49 = true;
    return field49;
  }

  bool get_field50() const {
    return field50;
  }

  bool& set_field50(bool field50_) {
    field50 = field50_;
    __isset.field50 = true;
    return field50;
  }

  int64_t get_field51() const {
    return field51;
  }

  int64_t& set_field51(int64_t field51_) {
    field51 = field51_;
    __isset.field51 = true;
    return field51;
  }

  int32_t get_field52() const {
    return field52;
  }

  int32_t& set_field52(int32_t field52_) {
    field52 = field52_;
    __isset.field52 = true;
    return field52;
  }
  const std::vector<int16_t>& get_field53() const&;
  std::vector<int16_t> get_field53() &&;

  template <typename T_Struct3_field53_struct_setter>
  std::vector<int16_t>& set_field53(T_Struct3_field53_struct_setter&& field53_) {
    field53 = std::forward<T_Struct3_field53_struct_setter>(field53_);
    __isset.field53 = true;
    return field53;
  }
  const  ::cpp2::Struct0& get_field54() const&;
   ::cpp2::Struct0 get_field54() &&;

  template <typename T_Struct3_field54_struct_setter>
   ::cpp2::Struct0& set_field54(T_Struct3_field54_struct_setter&& field54_) {
    field54 = std::forward<T_Struct3_field54_struct_setter>(field54_);
    __isset.field54 = true;
    return field54;
  }

  bool get_field55() const {
    return field55;
  }

  bool& set_field55(bool field55_) {
    field55 = field55_;
    __isset.field55 = true;
    return field55;
  }
  const  ::cpp2::Struct1& get_field56() const&;
   ::cpp2::Struct1 get_field56() &&;

  template <typename T_Struct3_field56_struct_setter>
   ::cpp2::Struct1& set_field56(T_Struct3_field56_struct_setter&& field56_) {
    field56 = std::forward<T_Struct3_field56_struct_setter>(field56_);
    __isset.field56 = true;
    return field56;
  }

  int32_t get_field57() const {
    return field57;
  }

  int32_t& set_field57(int32_t field57_) {
    field57 = field57_;
    __isset.field57 = true;
    return field57;
  }

  bool get_field58() const {
    return field58;
  }

  bool& set_field58(bool field58_) {
    field58 = field58_;
    __isset.field58 = true;
    return field58;
  }

  const std::string& get_field59() const& {
    return field59;
  }

  std::string get_field59() && {
    return std::move(field59);
  }

  template <typename T_Struct3_field59_struct_setter>
  std::string& set_field59(T_Struct3_field59_struct_setter&& field59_) {
    field59 = std::forward<T_Struct3_field59_struct_setter>(field59_);
    __isset.field59 = true;
    return field59;
  }

  int16_t get_field60() const {
    return field60;
  }

  int16_t& set_field60(int16_t field60_) {
    field60 = field60_;
    __isset.field60 = true;
    return field60;
  }
  const  ::cpp2::Struct0& get_field61() const&;
   ::cpp2::Struct0 get_field61() &&;

  template <typename T_Struct3_field61_struct_setter>
   ::cpp2::Struct0& set_field61(T_Struct3_field61_struct_setter&& field61_) {
    field61 = std::forward<T_Struct3_field61_struct_setter>(field61_);
    __isset.field61 = true;
    return field61;
  }
  const std::set<float>& get_field62() const&;
  std::set<float> get_field62() &&;

  template <typename T_Struct3_field62_struct_setter>
  std::set<float>& set_field62(T_Struct3_field62_struct_setter&& field62_) {
    field62 = std::forward<T_Struct3_field62_struct_setter>(field62_);
    __isset.field62 = true;
    return field62;
  }
  const std::set<std::map<int16_t, int64_t>>& get_field63() const&;
  std::set<std::map<int16_t, int64_t>> get_field63() &&;

  template <typename T_Struct3_field63_struct_setter>
  std::set<std::map<int16_t, int64_t>>& set_field63(T_Struct3_field63_struct_setter&& field63_) {
    field63 = std::forward<T_Struct3_field63_struct_setter>(field63_);
    __isset.field63 = true;
    return field63;
  }

  int32_t get_field64() const {
    return field64;
  }

  int32_t& set_field64(int32_t field64_) {
    field64 = field64_;
    __isset.field64 = true;
    return field64;
  }
  const  ::cpp2::Struct1& get_field65() const&;
   ::cpp2::Struct1 get_field65() &&;

  template <typename T_Struct3_field65_struct_setter>
   ::cpp2::Struct1& set_field65(T_Struct3_field65_struct_setter&& field65_) {
    field65 = std::forward<T_Struct3_field65_struct_setter>(field65_);
    __isset.field65 = true;
    return field65;
  }
  const std::vector<std::string>& get_field66() const&;
  std::vector<std::string> get_field66() &&;

  template <typename T_Struct3_field66_struct_setter>
  std::vector<std::string>& set_field66(T_Struct3_field66_struct_setter&& field66_) {
    field66 = std::forward<T_Struct3_field66_struct_setter>(field66_);
    __isset.field66 = true;
    return field66;
  }

  int8_t get_field67() const {
    return field67;
  }

  int8_t& set_field67(int8_t field67_) {
    field67 = field67_;
    __isset.field67 = true;
    return field67;
  }

  bool get_field68() const {
    return field68;
  }

  bool& set_field68(bool field68_) {
    field68 = field68_;
    __isset.field68 = true;
    return field68;
  }

  float get_field69() const {
    return field69;
  }

  float& set_field69(float field69_) {
    field69 = field69_;
    __isset.field69 = true;
    return field69;
  }

  float get_field70() const {
    return field70;
  }

  float& set_field70(float field70_) {
    field70 = field70_;
    __isset.field70 = true;
    return field70;
  }

  bool get_field71() const {
    return field71;
  }

  bool& set_field71(bool field71_) {
    field71 = field71_;
    __isset.field71 = true;
    return field71;
  }
  const std::map<std::map<std::string, int8_t>, std::string>& get_field72() const&;
  std::map<std::map<std::string, int8_t>, std::string> get_field72() &&;

  template <typename T_Struct3_field72_struct_setter>
  std::map<std::map<std::string, int8_t>, std::string>& set_field72(T_Struct3_field72_struct_setter&& field72_) {
    field72 = std::forward<T_Struct3_field72_struct_setter>(field72_);
    __isset.field72 = true;
    return field72;
  }

  int32_t get_field73() const {
    return field73;
  }

  int32_t& set_field73(int32_t field73_) {
    field73 = field73_;
    __isset.field73 = true;
    return field73;
  }

  double get_field74() const {
    return field74;
  }

  double& set_field74(double field74_) {
    field74 = field74_;
    __isset.field74 = true;
    return field74;
  }

  int64_t get_field75() const {
    return field75;
  }

  int64_t& set_field75(int64_t field75_) {
    field75 = field75_;
    __isset.field75 = true;
    return field75;
  }

  int64_t get_field76() const {
    return field76;
  }

  int64_t& set_field76(int64_t field76_) {
    field76 = field76_;
    __isset.field76 = true;
    return field76;
  }
  const std::vector<std::string>& get_field77() const&;
  std::vector<std::string> get_field77() &&;

  template <typename T_Struct3_field77_struct_setter>
  std::vector<std::string>& set_field77(T_Struct3_field77_struct_setter&& field77_) {
    field77 = std::forward<T_Struct3_field77_struct_setter>(field77_);
    __isset.field77 = true;
    return field77;
  }
  const std::vector<std::string>& get_field78() const&;
  std::vector<std::string> get_field78() &&;

  template <typename T_Struct3_field78_struct_setter>
  std::vector<std::string>& set_field78(T_Struct3_field78_struct_setter&& field78_) {
    field78 = std::forward<T_Struct3_field78_struct_setter>(field78_);
    __isset.field78 = true;
    return field78;
  }

  const std::string& get_field79() const& {
    return field79;
  }

  std::string get_field79() && {
    return std::move(field79);
  }

  template <typename T_Struct3_field79_struct_setter>
  std::string& set_field79(T_Struct3_field79_struct_setter&& field79_) {
    field79 = std::forward<T_Struct3_field79_struct_setter>(field79_);
    __isset.field79 = true;
    return field79;
  }

  bool get_field80() const {
    return field80;
  }

  bool& set_field80(bool field80_) {
    field80 = field80_;
    __isset.field80 = true;
    return field80;
  }

  int64_t get_field81() const {
    return field81;
  }

  int64_t& set_field81(int64_t field81_) {
    field81 = field81_;
    __isset.field81 = true;
    return field81;
  }
  const std::map<double, int64_t>& get_field82() const&;
  std::map<double, int64_t> get_field82() &&;

  template <typename T_Struct3_field82_struct_setter>
  std::map<double, int64_t>& set_field82(T_Struct3_field82_struct_setter&& field82_) {
    field82 = std::forward<T_Struct3_field82_struct_setter>(field82_);
    __isset.field82 = true;
    return field82;
  }
  const std::map<int64_t, std::vector<double>>& get_field83() const&;
  std::map<int64_t, std::vector<double>> get_field83() &&;

  template <typename T_Struct3_field83_struct_setter>
  std::map<int64_t, std::vector<double>>& set_field83(T_Struct3_field83_struct_setter&& field83_) {
    field83 = std::forward<T_Struct3_field83_struct_setter>(field83_);
    __isset.field83 = true;
    return field83;
  }

  int8_t get_field84() const {
    return field84;
  }

  int8_t& set_field84(int8_t field84_) {
    field84 = field84_;
    __isset.field84 = true;
    return field84;
  }
  const std::vector<bool>& get_field85() const&;
  std::vector<bool> get_field85() &&;

  template <typename T_Struct3_field85_struct_setter>
  std::vector<bool>& set_field85(T_Struct3_field85_struct_setter&& field85_) {
    field85 = std::forward<T_Struct3_field85_struct_setter>(field85_);
    __isset.field85 = true;
    return field85;
  }

  double get_field86() const {
    return field86;
  }

  double& set_field86(double field86_) {
    field86 = field86_;
    __isset.field86 = true;
    return field86;
  }

  float get_field87() const {
    return field87;
  }

  float& set_field87(float field87_) {
    field87 = field87_;
    __isset.field87 = true;
    return field87;
  }

  float get_field88() const {
    return field88;
  }

  float& set_field88(float field88_) {
    field88 = field88_;
    __isset.field88 = true;
    return field88;
  }

  const std::string& get_field89() const& {
    return field89;
  }

  std::string get_field89() && {
    return std::move(field89);
  }

  template <typename T_Struct3_field89_struct_setter>
  std::string& set_field89(T_Struct3_field89_struct_setter&& field89_) {
    field89 = std::forward<T_Struct3_field89_struct_setter>(field89_);
    __isset.field89 = true;
    return field89;
  }

  int32_t get_field90() const {
    return field90;
  }

  int32_t& set_field90(int32_t field90_) {
    field90 = field90_;
    __isset.field90 = true;
    return field90;
  }
  const  ::cpp2::Struct1& get_field91() const&;
   ::cpp2::Struct1 get_field91() &&;

  template <typename T_Struct3_field91_struct_setter>
   ::cpp2::Struct1& set_field91(T_Struct3_field91_struct_setter&& field91_) {
    field91 = std::forward<T_Struct3_field91_struct_setter>(field91_);
    __isset.field91 = true;
    return field91;
  }
  const std::set< ::cpp2::Struct2>& get_field92() const&;
  std::set< ::cpp2::Struct2> get_field92() &&;

  template <typename T_Struct3_field92_struct_setter>
  std::set< ::cpp2::Struct2>& set_field92(T_Struct3_field92_struct_setter&& field92_) {
    field92 = std::forward<T_Struct3_field92_struct_setter>(field92_);
    __isset.field92 = true;
    return field92;
  }

  float get_field93() const {
    return field93;
  }

  float& set_field93(float field93_) {
    field93 = field93_;
    __isset.field93 = true;
    return field93;
  }

  int16_t get_field94() const {
    return field94;
  }

  int16_t& set_field94(int16_t field94_) {
    field94 = field94_;
    __isset.field94 = true;
    return field94;
  }
  const std::vector<double>& get_field95() const&;
  std::vector<double> get_field95() &&;

  template <typename T_Struct3_field95_struct_setter>
  std::vector<double>& set_field95(T_Struct3_field95_struct_setter&& field95_) {
    field95 = std::forward<T_Struct3_field95_struct_setter>(field95_);
    __isset.field95 = true;
    return field95;
  }
  const std::map<int64_t, std::map<double, int64_t>>& get_field96() const&;
  std::map<int64_t, std::map<double, int64_t>> get_field96() &&;

  template <typename T_Struct3_field96_struct_setter>
  std::map<int64_t, std::map<double, int64_t>>& set_field96(T_Struct3_field96_struct_setter&& field96_) {
    field96 = std::forward<T_Struct3_field96_struct_setter>(field96_);
    __isset.field96 = true;
    return field96;
  }
  const std::vector<std::string>& get_field97() const&;
  std::vector<std::string> get_field97() &&;

  template <typename T_Struct3_field97_struct_setter>
  std::vector<std::string>& set_field97(T_Struct3_field97_struct_setter&& field97_) {
    field97 = std::forward<T_Struct3_field97_struct_setter>(field97_);
    __isset.field97 = true;
    return field97;
  }
  const std::map<int8_t, std::string>& get_field98() const&;
  std::map<int8_t, std::string> get_field98() &&;

  template <typename T_Struct3_field98_struct_setter>
  std::map<int8_t, std::string>& set_field98(T_Struct3_field98_struct_setter&& field98_) {
    field98 = std::forward<T_Struct3_field98_struct_setter>(field98_);
    __isset.field98 = true;
    return field98;
  }

  int32_t get_field99() const {
    return field99;
  }

  int32_t& set_field99(int32_t field99_) {
    field99 = field99_;
    __isset.field99 = true;
    return field99;
  }
  const  ::cpp2::Struct2& get_field100() const&;
   ::cpp2::Struct2 get_field100() &&;

  template <typename T_Struct3_field100_struct_setter>
   ::cpp2::Struct2& set_field100(T_Struct3_field100_struct_setter&& field100_) {
    field100 = std::forward<T_Struct3_field100_struct_setter>(field100_);
    __isset.field100 = true;
    return field100;
  }
  const std::vector<double>& get_field101() const&;
  std::vector<double> get_field101() &&;

  template <typename T_Struct3_field101_struct_setter>
  std::vector<double>& set_field101(T_Struct3_field101_struct_setter&& field101_) {
    field101 = std::forward<T_Struct3_field101_struct_setter>(field101_);
    __isset.field101 = true;
    return field101;
  }

  int16_t get_field102() const {
    return field102;
  }

  int16_t& set_field102(int16_t field102_) {
    field102 = field102_;
    __isset.field102 = true;
    return field102;
  }

  int16_t get_field103() const {
    return field103;
  }

  int16_t& set_field103(int16_t field103_) {
    field103 = field103_;
    __isset.field103 = true;
    return field103;
  }
  const std::vector<double>& get_field104() const&;
  std::vector<double> get_field104() &&;

  template <typename T_Struct3_field104_struct_setter>
  std::vector<double>& set_field104(T_Struct3_field104_struct_setter&& field104_) {
    field104 = std::forward<T_Struct3_field104_struct_setter>(field104_);
    __isset.field104 = true;
    return field104;
  }

  const std::string& get_field105() const& {
    return field105;
  }

  std::string get_field105() && {
    return std::move(field105);
  }

  template <typename T_Struct3_field105_struct_setter>
  std::string& set_field105(T_Struct3_field105_struct_setter&& field105_) {
    field105 = std::forward<T_Struct3_field105_struct_setter>(field105_);
    __isset.field105 = true;
    return field105;
  }

  int16_t get_field106() const {
    return field106;
  }

  int16_t& set_field106(int16_t field106_) {
    field106 = field106_;
    __isset.field106 = true;
    return field106;
  }

  float get_field107() const {
    return field107;
  }

  float& set_field107(float field107_) {
    field107 = field107_;
    __isset.field107 = true;
    return field107;
  }

  double get_field108() const {
    return field108;
  }

  double& set_field108(double field108_) {
    field108 = field108_;
    __isset.field108 = true;
    return field108;
  }

  float get_field109() const {
    return field109;
  }

  float& set_field109(float field109_) {
    field109 = field109_;
    __isset.field109 = true;
    return field109;
  }

  double get_field110() const {
    return field110;
  }

  double& set_field110(double field110_) {
    field110 = field110_;
    __isset.field110 = true;
    return field110;
  }
  const std::map<int8_t,  ::cpp2::Struct0>& get_field111() const&;
  std::map<int8_t,  ::cpp2::Struct0> get_field111() &&;

  template <typename T_Struct3_field111_struct_setter>
  std::map<int8_t,  ::cpp2::Struct0>& set_field111(T_Struct3_field111_struct_setter&& field111_) {
    field111 = std::forward<T_Struct3_field111_struct_setter>(field111_);
    __isset.field111 = true;
    return field111;
  }

  float get_field112() const {
    return field112;
  }

  float& set_field112(float field112_) {
    field112 = field112_;
    __isset.field112 = true;
    return field112;
  }

  double get_field113() const {
    return field113;
  }

  double& set_field113(double field113_) {
    field113 = field113_;
    __isset.field113 = true;
    return field113;
  }

  float get_field114() const {
    return field114;
  }

  float& set_field114(float field114_) {
    field114 = field114_;
    __isset.field114 = true;
    return field114;
  }

  bool get_field115() const {
    return field115;
  }

  bool& set_field115(bool field115_) {
    field115 = field115_;
    __isset.field115 = true;
    return field115;
  }
  const std::map<bool, int16_t>& get_field116() const&;
  std::map<bool, int16_t> get_field116() &&;

  template <typename T_Struct3_field116_struct_setter>
  std::map<bool, int16_t>& set_field116(T_Struct3_field116_struct_setter&& field116_) {
    field116 = std::forward<T_Struct3_field116_struct_setter>(field116_);
    __isset.field116 = true;
    return field116;
  }

  const std::string& get_field117() const& {
    return field117;
  }

  std::string get_field117() && {
    return std::move(field117);
  }

  template <typename T_Struct3_field117_struct_setter>
  std::string& set_field117(T_Struct3_field117_struct_setter&& field117_) {
    field117 = std::forward<T_Struct3_field117_struct_setter>(field117_);
    __isset.field117 = true;
    return field117;
  }
  const  ::cpp2::Struct0& get_field118() const&;
   ::cpp2::Struct0 get_field118() &&;

  template <typename T_Struct3_field118_struct_setter>
   ::cpp2::Struct0& set_field118(T_Struct3_field118_struct_setter&& field118_) {
    field118 = std::forward<T_Struct3_field118_struct_setter>(field118_);
    __isset.field118 = true;
    return field118;
  }
  const std::map<std::string, int32_t>& get_field119() const&;
  std::map<std::string, int32_t> get_field119() &&;

  template <typename T_Struct3_field119_struct_setter>
  std::map<std::string, int32_t>& set_field119(T_Struct3_field119_struct_setter&& field119_) {
    field119 = std::forward<T_Struct3_field119_struct_setter>(field119_);
    __isset.field119 = true;
    return field119;
  }

  int16_t get_field120() const {
    return field120;
  }

  int16_t& set_field120(int16_t field120_) {
    field120 = field120_;
    __isset.field120 = true;
    return field120;
  }

  float get_field121() const {
    return field121;
  }

  float& set_field121(float field121_) {
    field121 = field121_;
    __isset.field121 = true;
    return field121;
  }

  bool get_field122() const {
    return field122;
  }

  bool& set_field122(bool field122_) {
    field122 = field122_;
    __isset.field122 = true;
    return field122;
  }

  int8_t get_field123() const {
    return field123;
  }

  int8_t& set_field123(int8_t field123_) {
    field123 = field123_;
    __isset.field123 = true;
    return field123;
  }

  float get_field124() const {
    return field124;
  }

  float& set_field124(float field124_) {
    field124 = field124_;
    __isset.field124 = true;
    return field124;
  }
  const std::set<int64_t>& get_field125() const&;
  std::set<int64_t> get_field125() &&;

  template <typename T_Struct3_field125_struct_setter>
  std::set<int64_t>& set_field125(T_Struct3_field125_struct_setter&& field125_) {
    field125 = std::forward<T_Struct3_field125_struct_setter>(field125_);
    __isset.field125 = true;
    return field125;
  }

  int32_t get_field126() const {
    return field126;
  }

  int32_t& set_field126(int32_t field126_) {
    field126 = field126_;
    __isset.field126 = true;
    return field126;
  }

  int16_t get_field127() const {
    return field127;
  }

  int16_t& set_field127(int16_t field127_) {
    field127 = field127_;
    __isset.field127 = true;
    return field127;
  }

  bool get_field128() const {
    return field128;
  }

  bool& set_field128(bool field128_) {
    field128 = field128_;
    __isset.field128 = true;
    return field128;
  }
  const  ::cpp2::Struct1& get_field129() const&;
   ::cpp2::Struct1 get_field129() &&;

  template <typename T_Struct3_field129_struct_setter>
   ::cpp2::Struct1& set_field129(T_Struct3_field129_struct_setter&& field129_) {
    field129 = std::forward<T_Struct3_field129_struct_setter>(field129_);
    __isset.field129 = true;
    return field129;
  }
  const  ::cpp2::Struct0& get_field130() const&;
   ::cpp2::Struct0 get_field130() &&;

  template <typename T_Struct3_field130_struct_setter>
   ::cpp2::Struct0& set_field130(T_Struct3_field130_struct_setter&& field130_) {
    field130 = std::forward<T_Struct3_field130_struct_setter>(field130_);
    __isset.field130 = true;
    return field130;
  }

  const std::string& get_field131() const& {
    return field131;
  }

  std::string get_field131() && {
    return std::move(field131);
  }

  template <typename T_Struct3_field131_struct_setter>
  std::string& set_field131(T_Struct3_field131_struct_setter&& field131_) {
    field131 = std::forward<T_Struct3_field131_struct_setter>(field131_);
    __isset.field131 = true;
    return field131;
  }

  int16_t get_field132() const {
    return field132;
  }

  int16_t& set_field132(int16_t field132_) {
    field132 = field132_;
    __isset.field132 = true;
    return field132;
  }
  const std::vector<std::string>& get_field133() const&;
  std::vector<std::string> get_field133() &&;

  template <typename T_Struct3_field133_struct_setter>
  std::vector<std::string>& set_field133(T_Struct3_field133_struct_setter&& field133_) {
    field133 = std::forward<T_Struct3_field133_struct_setter>(field133_);
    __isset.field133 = true;
    return field133;
  }

  int16_t get_field134() const {
    return field134;
  }

  int16_t& set_field134(int16_t field134_) {
    field134 = field134_;
    __isset.field134 = true;
    return field134;
  }
  const std::vector<double>& get_field135() const&;
  std::vector<double> get_field135() &&;

  template <typename T_Struct3_field135_struct_setter>
  std::vector<double>& set_field135(T_Struct3_field135_struct_setter&& field135_) {
    field135 = std::forward<T_Struct3_field135_struct_setter>(field135_);
    __isset.field135 = true;
    return field135;
  }
  const std::set<int16_t>& get_field136() const&;
  std::set<int16_t> get_field136() &&;

  template <typename T_Struct3_field136_struct_setter>
  std::set<int16_t>& set_field136(T_Struct3_field136_struct_setter&& field136_) {
    field136 = std::forward<T_Struct3_field136_struct_setter>(field136_);
    __isset.field136 = true;
    return field136;
  }
  const std::set<float>& get_field137() const&;
  std::set<float> get_field137() &&;

  template <typename T_Struct3_field137_struct_setter>
  std::set<float>& set_field137(T_Struct3_field137_struct_setter&& field137_) {
    field137 = std::forward<T_Struct3_field137_struct_setter>(field137_);
    __isset.field137 = true;
    return field137;
  }
  const std::map<float, std::string>& get_field138() const&;
  std::map<float, std::string> get_field138() &&;

  template <typename T_Struct3_field138_struct_setter>
  std::map<float, std::string>& set_field138(T_Struct3_field138_struct_setter&& field138_) {
    field138 = std::forward<T_Struct3_field138_struct_setter>(field138_);
    __isset.field138 = true;
    return field138;
  }
  const std::map<bool,  ::cpp2::Struct1>& get_field139() const&;
  std::map<bool,  ::cpp2::Struct1> get_field139() &&;

  template <typename T_Struct3_field139_struct_setter>
  std::map<bool,  ::cpp2::Struct1>& set_field139(T_Struct3_field139_struct_setter&& field139_) {
    field139 = std::forward<T_Struct3_field139_struct_setter>(field139_);
    __isset.field139 = true;
    return field139;
  }
  const std::set<int8_t>& get_field140() const&;
  std::set<int8_t> get_field140() &&;

  template <typename T_Struct3_field140_struct_setter>
  std::set<int8_t>& set_field140(T_Struct3_field140_struct_setter&& field140_) {
    field140 = std::forward<T_Struct3_field140_struct_setter>(field140_);
    __isset.field140 = true;
    return field140;
  }
  const std::set<bool>& get_field141() const&;
  std::set<bool> get_field141() &&;

  template <typename T_Struct3_field141_struct_setter>
  std::set<bool>& set_field141(T_Struct3_field141_struct_setter&& field141_) {
    field141 = std::forward<T_Struct3_field141_struct_setter>(field141_);
    __isset.field141 = true;
    return field141;
  }
  const std::set<float>& get_field142() const&;
  std::set<float> get_field142() &&;

  template <typename T_Struct3_field142_struct_setter>
  std::set<float>& set_field142(T_Struct3_field142_struct_setter&& field142_) {
    field142 = std::forward<T_Struct3_field142_struct_setter>(field142_);
    __isset.field142 = true;
    return field142;
  }

  bool get_field143() const {
    return field143;
  }

  bool& set_field143(bool field143_) {
    field143 = field143_;
    __isset.field143 = true;
    return field143;
  }
  const  ::cpp2::Struct2& get_field144() const&;
   ::cpp2::Struct2 get_field144() &&;

  template <typename T_Struct3_field144_struct_setter>
   ::cpp2::Struct2& set_field144(T_Struct3_field144_struct_setter&& field144_) {
    field144 = std::forward<T_Struct3_field144_struct_setter>(field144_);
    __isset.field144 = true;
    return field144;
  }

  float get_field145() const {
    return field145;
  }

  float& set_field145(float field145_) {
    field145 = field145_;
    __isset.field145 = true;
    return field145;
  }

  int32_t get_field146() const {
    return field146;
  }

  int32_t& set_field146(int32_t field146_) {
    field146 = field146_;
    __isset.field146 = true;
    return field146;
  }

  const std::string& get_field147() const& {
    return field147;
  }

  std::string get_field147() && {
    return std::move(field147);
  }

  template <typename T_Struct3_field147_struct_setter>
  std::string& set_field147(T_Struct3_field147_struct_setter&& field147_) {
    field147 = std::forward<T_Struct3_field147_struct_setter>(field147_);
    __isset.field147 = true;
    return field147;
  }
  const std::set<std::vector<int8_t>>& get_field148() const&;
  std::set<std::vector<int8_t>> get_field148() &&;

  template <typename T_Struct3_field148_struct_setter>
  std::set<std::vector<int8_t>>& set_field148(T_Struct3_field148_struct_setter&& field148_) {
    field148 = std::forward<T_Struct3_field148_struct_setter>(field148_);
    __isset.field148 = true;
    return field148;
  }
  const std::vector<int16_t>& get_field149() const&;
  std::vector<int16_t> get_field149() &&;

  template <typename T_Struct3_field149_struct_setter>
  std::vector<int16_t>& set_field149(T_Struct3_field149_struct_setter&& field149_) {
    field149 = std::forward<T_Struct3_field149_struct_setter>(field149_);
    __isset.field149 = true;
    return field149;
  }
  const std::map<std::string, double>& get_field150() const&;
  std::map<std::string, double> get_field150() &&;

  template <typename T_Struct3_field150_struct_setter>
  std::map<std::string, double>& set_field150(T_Struct3_field150_struct_setter&& field150_) {
    field150 = std::forward<T_Struct3_field150_struct_setter>(field150_);
    __isset.field150 = true;
    return field150;
  }
  const std::map<std::set<int32_t>, int16_t>& get_field151() const&;
  std::map<std::set<int32_t>, int16_t> get_field151() &&;

  template <typename T_Struct3_field151_struct_setter>
  std::map<std::set<int32_t>, int16_t>& set_field151(T_Struct3_field151_struct_setter&& field151_) {
    field151 = std::forward<T_Struct3_field151_struct_setter>(field151_);
    __isset.field151 = true;
    return field151;
  }
  const std::vector<int8_t>& get_field152() const&;
  std::vector<int8_t> get_field152() &&;

  template <typename T_Struct3_field152_struct_setter>
  std::vector<int8_t>& set_field152(T_Struct3_field152_struct_setter&& field152_) {
    field152 = std::forward<T_Struct3_field152_struct_setter>(field152_);
    __isset.field152 = true;
    return field152;
  }

  float get_field153() const {
    return field153;
  }

  float& set_field153(float field153_) {
    field153 = field153_;
    __isset.field153 = true;
    return field153;
  }
  const std::map<bool, int64_t>& get_field154() const&;
  std::map<bool, int64_t> get_field154() &&;

  template <typename T_Struct3_field154_struct_setter>
  std::map<bool, int64_t>& set_field154(T_Struct3_field154_struct_setter&& field154_) {
    field154 = std::forward<T_Struct3_field154_struct_setter>(field154_);
    __isset.field154 = true;
    return field154;
  }
  const std::vector< ::cpp2::Struct1>& get_field155() const&;
  std::vector< ::cpp2::Struct1> get_field155() &&;

  template <typename T_Struct3_field155_struct_setter>
  std::vector< ::cpp2::Struct1>& set_field155(T_Struct3_field155_struct_setter&& field155_) {
    field155 = std::forward<T_Struct3_field155_struct_setter>(field155_);
    __isset.field155 = true;
    return field155;
  }

  float get_field156() const {
    return field156;
  }

  float& set_field156(float field156_) {
    field156 = field156_;
    __isset.field156 = true;
    return field156;
  }
  const std::map<int16_t, std::set<bool>>& get_field157() const&;
  std::map<int16_t, std::set<bool>> get_field157() &&;

  template <typename T_Struct3_field157_struct_setter>
  std::map<int16_t, std::set<bool>>& set_field157(T_Struct3_field157_struct_setter&& field157_) {
    field157 = std::forward<T_Struct3_field157_struct_setter>(field157_);
    __isset.field157 = true;
    return field157;
  }
  const  ::cpp2::Struct1& get_field158() const&;
   ::cpp2::Struct1 get_field158() &&;

  template <typename T_Struct3_field158_struct_setter>
   ::cpp2::Struct1& set_field158(T_Struct3_field158_struct_setter&& field158_) {
    field158 = std::forward<T_Struct3_field158_struct_setter>(field158_);
    __isset.field158 = true;
    return field158;
  }

  int32_t get_field159() const {
    return field159;
  }

  int32_t& set_field159(int32_t field159_) {
    field159 = field159_;
    __isset.field159 = true;
    return field159;
  }

  int16_t get_field160() const {
    return field160;
  }

  int16_t& set_field160(int16_t field160_) {
    field160 = field160_;
    __isset.field160 = true;
    return field160;
  }
  const  ::cpp2::Struct2& get_field161() const&;
   ::cpp2::Struct2 get_field161() &&;

  template <typename T_Struct3_field161_struct_setter>
   ::cpp2::Struct2& set_field161(T_Struct3_field161_struct_setter&& field161_) {
    field161 = std::forward<T_Struct3_field161_struct_setter>(field161_);
    __isset.field161 = true;
    return field161;
  }

  const std::string& get_field162() const& {
    return field162;
  }

  std::string get_field162() && {
    return std::move(field162);
  }

  template <typename T_Struct3_field162_struct_setter>
  std::string& set_field162(T_Struct3_field162_struct_setter&& field162_) {
    field162 = std::forward<T_Struct3_field162_struct_setter>(field162_);
    __isset.field162 = true;
    return field162;
  }
  const std::vector< ::cpp2::Struct1>& get_field163() const&;
  std::vector< ::cpp2::Struct1> get_field163() &&;

  template <typename T_Struct3_field163_struct_setter>
  std::vector< ::cpp2::Struct1>& set_field163(T_Struct3_field163_struct_setter&& field163_) {
    field163 = std::forward<T_Struct3_field163_struct_setter>(field163_);
    __isset.field163 = true;
    return field163;
  }

  int64_t get_field164() const {
    return field164;
  }

  int64_t& set_field164(int64_t field164_) {
    field164 = field164_;
    __isset.field164 = true;
    return field164;
  }

  float get_field165() const {
    return field165;
  }

  float& set_field165(float field165_) {
    field165 = field165_;
    __isset.field165 = true;
    return field165;
  }
  const  ::cpp2::Struct0& get_field166() const&;
   ::cpp2::Struct0 get_field166() &&;

  template <typename T_Struct3_field166_struct_setter>
   ::cpp2::Struct0& set_field166(T_Struct3_field166_struct_setter&& field166_) {
    field166 = std::forward<T_Struct3_field166_struct_setter>(field166_);
    __isset.field166 = true;
    return field166;
  }

  int8_t get_field167() const {
    return field167;
  }

  int8_t& set_field167(int8_t field167_) {
    field167 = field167_;
    __isset.field167 = true;
    return field167;
  }

  bool get_field168() const {
    return field168;
  }

  bool& set_field168(bool field168_) {
    field168 = field168_;
    __isset.field168 = true;
    return field168;
  }
  const std::map<float, double>& get_field169() const&;
  std::map<float, double> get_field169() &&;

  template <typename T_Struct3_field169_struct_setter>
  std::map<float, double>& set_field169(T_Struct3_field169_struct_setter&& field169_) {
    field169 = std::forward<T_Struct3_field169_struct_setter>(field169_);
    __isset.field169 = true;
    return field169;
  }

  int32_t get_field170() const {
    return field170;
  }

  int32_t& set_field170(int32_t field170_) {
    field170 = field170_;
    __isset.field170 = true;
    return field170;
  }
  const std::map<std::vector<double>, double>& get_field171() const&;
  std::map<std::vector<double>, double> get_field171() &&;

  template <typename T_Struct3_field171_struct_setter>
  std::map<std::vector<double>, double>& set_field171(T_Struct3_field171_struct_setter&& field171_) {
    field171 = std::forward<T_Struct3_field171_struct_setter>(field171_);
    __isset.field171 = true;
    return field171;
  }

  const std::string& get_field172() const& {
    return field172;
  }

  std::string get_field172() && {
    return std::move(field172);
  }

  template <typename T_Struct3_field172_struct_setter>
  std::string& set_field172(T_Struct3_field172_struct_setter&& field172_) {
    field172 = std::forward<T_Struct3_field172_struct_setter>(field172_);
    __isset.field172 = true;
    return field172;
  }
  const std::vector<std::vector<float>>& get_field173() const&;
  std::vector<std::vector<float>> get_field173() &&;

  template <typename T_Struct3_field173_struct_setter>
  std::vector<std::vector<float>>& set_field173(T_Struct3_field173_struct_setter&& field173_) {
    field173 = std::forward<T_Struct3_field173_struct_setter>(field173_);
    __isset.field173 = true;
    return field173;
  }

  const std::string& get_field174() const& {
    return field174;
  }

  std::string get_field174() && {
    return std::move(field174);
  }

  template <typename T_Struct3_field174_struct_setter>
  std::string& set_field174(T_Struct3_field174_struct_setter&& field174_) {
    field174 = std::forward<T_Struct3_field174_struct_setter>(field174_);
    __isset.field174 = true;
    return field174;
  }

  int32_t get_field175() const {
    return field175;
  }

  int32_t& set_field175(int32_t field175_) {
    field175 = field175_;
    __isset.field175 = true;
    return field175;
  }

  int32_t get_field176() const {
    return field176;
  }

  int32_t& set_field176(int32_t field176_) {
    field176 = field176_;
    __isset.field176 = true;
    return field176;
  }

  const std::string& get_field177() const& {
    return field177;
  }

  std::string get_field177() && {
    return std::move(field177);
  }

  template <typename T_Struct3_field177_struct_setter>
  std::string& set_field177(T_Struct3_field177_struct_setter&& field177_) {
    field177 = std::forward<T_Struct3_field177_struct_setter>(field177_);
    __isset.field177 = true;
    return field177;
  }
  const std::map<int32_t, std::string>& get_field178() const&;
  std::map<int32_t, std::string> get_field178() &&;

  template <typename T_Struct3_field178_struct_setter>
  std::map<int32_t, std::string>& set_field178(T_Struct3_field178_struct_setter&& field178_) {
    field178 = std::forward<T_Struct3_field178_struct_setter>(field178_);
    __isset.field178 = true;
    return field178;
  }
  const std::set<std::set<std::string>>& get_field179() const&;
  std::set<std::set<std::string>> get_field179() &&;

  template <typename T_Struct3_field179_struct_setter>
  std::set<std::set<std::string>>& set_field179(T_Struct3_field179_struct_setter&& field179_) {
    field179 = std::forward<T_Struct3_field179_struct_setter>(field179_);
    __isset.field179 = true;
    return field179;
  }

  int8_t get_field180() const {
    return field180;
  }

  int8_t& set_field180(int8_t field180_) {
    field180 = field180_;
    __isset.field180 = true;
    return field180;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct3& a, Struct3& b);
extern template uint32_t Struct3::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct3::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct3::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct3::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct3::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct3::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct3::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct3::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct3>::clear( ::cpp2::Struct3* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct3>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct3>::write(Protocol* proto,  ::cpp2::Struct3 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct3>::read(Protocol* proto,  ::cpp2::Struct3* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct3>::serializedSize(Protocol const* proto,  ::cpp2::Struct3 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct3>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct3 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct4 : private apache::thrift::detail::st::ComparisonOperators<Struct4> {
 public:

  Struct4() :
      field6(0),
      field8(0),
      field14(0),
      field15(0),
      field16(0),
      field17(0),
      field25(0),
      field26(0),
      field27(0),
      field33(0),
      field36(0),
      field39(0),
      field42(0),
      field43(0),
      field51(0),
      field53(0),
      field59(0),
      field60(0),
      field61(0),
      field65(0),
      field70(0),
      field71(0),
      field74(0),
      field82(0),
      field84(0),
      field85(0),
      field87(0),
      field89(0),
      field91(0),
      field92(0),
      field93(0),
      field96(0),
      field97(0),
      field101(0) {}
  // FragileConstructor for use in initialization lists only

  Struct4(apache::thrift::FragileConstructor, std::map<double, int8_t> field1__arg, std::string field2__arg, std::map<double,  ::cpp2::Struct1> field3__arg, std::map<int8_t,  ::cpp2::Struct2> field4__arg, std::string field5__arg, int32_t field6__arg, std::map<bool, std::vector<double>> field7__arg, bool field8__arg, std::string field9__arg, std::map<float, int8_t> field10__arg,  ::cpp2::Struct0 field11__arg, std::vector<int64_t> field12__arg,  ::cpp2::Struct0 field13__arg, int64_t field14__arg, bool field15__arg, int64_t field16__arg, double field17__arg,  ::cpp2::Struct1 field18__arg, std::set<float> field19__arg, std::vector<std::string> field20__arg, std::map<int8_t, double> field21__arg, std::vector<int8_t> field22__arg,  ::cpp2::Struct0 field23__arg, std::map<int8_t, int8_t> field24__arg, int8_t field25__arg, int8_t field26__arg, int8_t field27__arg, std::map<int16_t, std::vector<int16_t>> field28__arg,  ::cpp2::Struct0 field29__arg, std::set<int32_t> field30__arg, std::map<double, double> field31__arg,  ::cpp2::Struct1 field32__arg, int16_t field33__arg, std::string field34__arg, std::set<float> field35__arg, float field36__arg, std::vector<bool> field37__arg,  ::cpp2::Struct1 field38__arg, double field39__arg, std::map<std::set<float>, std::set<double>> field40__arg, std::vector<std::string> field41__arg, int16_t field42__arg, int32_t field43__arg, std::set<bool> field44__arg, std::string field45__arg, std::vector<double> field46__arg, std::map<int16_t,  ::cpp2::Struct2> field47__arg, std::set<int16_t> field48__arg, std::map<std::map<int32_t, int32_t>, int64_t> field49__arg,  ::cpp2::Struct0 field50__arg, int16_t field51__arg, std::set<std::string> field52__arg, bool field53__arg, std::vector<std::string> field54__arg, std::string field55__arg, std::string field56__arg, std::vector<bool> field57__arg, std::string field58__arg, int8_t field59__arg, int8_t field60__arg, int32_t field61__arg,  ::cpp2::Struct1 field62__arg,  ::cpp2::Struct1 field63__arg, std::set< ::cpp2::Struct0> field64__arg, int32_t field65__arg, std::set<bool> field66__arg, std::string field67__arg, std::map<std::map<int32_t, float>, float> field68__arg, std::vector<float> field69__arg, bool field70__arg, bool field71__arg, std::vector<int16_t> field72__arg, std::map<double,  ::cpp2::Struct1> field73__arg, float field74__arg, std::set<std::map<double, std::string>> field75__arg, std::set<int32_t> field76__arg, std::set<int8_t> field77__arg, std::map<std::string, int8_t> field78__arg, std::map<std::set<float>, std::set<std::map<float, std::string>>> field79__arg, std::set<std::string> field80__arg, std::map<bool, float> field81__arg, int16_t field82__arg, std::string field83__arg, int8_t field84__arg, int16_t field85__arg, std::map<std::string, double> field86__arg, bool field87__arg, std::vector<std::set<std::string>> field88__arg, int8_t field89__arg, std::vector<std::set<int16_t>> field90__arg, bool field91__arg, int64_t field92__arg, int64_t field93__arg, std::map<int8_t, int16_t> field94__arg, std::string field95__arg, int8_t field96__arg, int16_t field97__arg,  ::cpp2::Struct3 field98__arg,  ::cpp2::Struct0 field99__arg, std::map<int16_t, int8_t> field100__arg, int32_t field101__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)),
      field97(std::move(field97__arg)),
      field98(std::move(field98__arg)),
      field99(std::move(field99__arg)),
      field100(std::move(field100__arg)),
      field101(std::move(field101__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
    __isset.field97 = true;
    __isset.field98 = true;
    __isset.field99 = true;
    __isset.field100 = true;
    __isset.field101 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<97, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field97 = arg.move();
    __isset.field97 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<98, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field98 = arg.move();
    __isset.field98 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<99, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field99 = arg.move();
    __isset.field99 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field100 = arg.move();
    __isset.field100 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct4(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct4(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field101 = arg.move();
    __isset.field101 = true;
  }

  Struct4(Struct4&&) = default;

  Struct4(const Struct4&) = default;

  Struct4& operator=(Struct4&&) = default;

  Struct4& operator=(const Struct4&) = default;
  void __clear();

  virtual ~Struct4() {}

  std::map<double, int8_t> field1;
  std::string field2;
  std::map<double,  ::cpp2::Struct1> field3;
  std::map<int8_t,  ::cpp2::Struct2> field4;
  std::string field5;
  int32_t field6;
  std::map<bool, std::vector<double>> field7;
  bool field8;
  std::string field9;
  std::map<float, int8_t> field10;
   ::cpp2::Struct0 field11;
  std::vector<int64_t> field12;
   ::cpp2::Struct0 field13;
  int64_t field14;
  bool field15;
  int64_t field16;
  double field17;
   ::cpp2::Struct1 field18;
  std::set<float> field19;
  std::vector<std::string> field20;
  std::map<int8_t, double> field21;
  std::vector<int8_t> field22;
   ::cpp2::Struct0 field23;
  std::map<int8_t, int8_t> field24;
  int8_t field25;
  int8_t field26;
  int8_t field27;
  std::map<int16_t, std::vector<int16_t>> field28;
   ::cpp2::Struct0 field29;
  std::set<int32_t> field30;
  std::map<double, double> field31;
   ::cpp2::Struct1 field32;
  int16_t field33;
  std::string field34;
  std::set<float> field35;
  float field36;
  std::vector<bool> field37;
   ::cpp2::Struct1 field38;
  double field39;
  std::map<std::set<float>, std::set<double>> field40;
  std::vector<std::string> field41;
  int16_t field42;
  int32_t field43;
  std::set<bool> field44;
  std::string field45;
  std::vector<double> field46;
  std::map<int16_t,  ::cpp2::Struct2> field47;
  std::set<int16_t> field48;
  std::map<std::map<int32_t, int32_t>, int64_t> field49;
   ::cpp2::Struct0 field50;
  int16_t field51;
  std::set<std::string> field52;
  bool field53;
  std::vector<std::string> field54;
  std::string field55;
  std::string field56;
  std::vector<bool> field57;
  std::string field58;
  int8_t field59;
  int8_t field60;
  int32_t field61;
   ::cpp2::Struct1 field62;
   ::cpp2::Struct1 field63;
  std::set< ::cpp2::Struct0> field64;
  int32_t field65;
  std::set<bool> field66;
  std::string field67;
  std::map<std::map<int32_t, float>, float> field68;
  std::vector<float> field69;
  bool field70;
  bool field71;
  std::vector<int16_t> field72;
  std::map<double,  ::cpp2::Struct1> field73;
  float field74;
  std::set<std::map<double, std::string>> field75;
  std::set<int32_t> field76;
  std::set<int8_t> field77;
  std::map<std::string, int8_t> field78;
  std::map<std::set<float>, std::set<std::map<float, std::string>>> field79;
  std::set<std::string> field80;
  std::map<bool, float> field81;
  int16_t field82;
  std::string field83;
  int8_t field84;
  int16_t field85;
  std::map<std::string, double> field86;
  bool field87;
  std::vector<std::set<std::string>> field88;
  int8_t field89;
  std::vector<std::set<int16_t>> field90;
  bool field91;
  int64_t field92;
  int64_t field93;
  std::map<int8_t, int16_t> field94;
  std::string field95;
  int8_t field96;
  int16_t field97;
   ::cpp2::Struct3 field98;
   ::cpp2::Struct0 field99;
  std::map<int16_t, int8_t> field100;
  int32_t field101;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
      field97 = false;
      field98 = false;
      field99 = false;
      field100 = false;
      field101 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
    bool field97 = false;
    bool field98 = false;
    bool field99 = false;
    bool field100 = false;
    bool field101 = false;
  } __isset;
  bool operator==(const Struct4& rhs) const;

  bool operator < (const Struct4& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    if (!(field97 == rhs.field97)) {
      return field97 < rhs.field97;
    }
    if (!(field98 == rhs.field98)) {
      return field98 < rhs.field98;
    }
    if (!(field99 == rhs.field99)) {
      return field99 < rhs.field99;
    }
    if (!(field100 == rhs.field100)) {
      return field100 < rhs.field100;
    }
    if (!(field101 == rhs.field101)) {
      return field101 < rhs.field101;
    }
    (void)rhs;
    return false;
  }
  const std::map<double, int8_t>& get_field1() const&;
  std::map<double, int8_t> get_field1() &&;

  template <typename T_Struct4_field1_struct_setter>
  std::map<double, int8_t>& set_field1(T_Struct4_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct4_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  const std::string& get_field2() const& {
    return field2;
  }

  std::string get_field2() && {
    return std::move(field2);
  }

  template <typename T_Struct4_field2_struct_setter>
  std::string& set_field2(T_Struct4_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct4_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const std::map<double,  ::cpp2::Struct1>& get_field3() const&;
  std::map<double,  ::cpp2::Struct1> get_field3() &&;

  template <typename T_Struct4_field3_struct_setter>
  std::map<double,  ::cpp2::Struct1>& set_field3(T_Struct4_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct4_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }
  const std::map<int8_t,  ::cpp2::Struct2>& get_field4() const&;
  std::map<int8_t,  ::cpp2::Struct2> get_field4() &&;

  template <typename T_Struct4_field4_struct_setter>
  std::map<int8_t,  ::cpp2::Struct2>& set_field4(T_Struct4_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct4_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }

  const std::string& get_field5() const& {
    return field5;
  }

  std::string get_field5() && {
    return std::move(field5);
  }

  template <typename T_Struct4_field5_struct_setter>
  std::string& set_field5(T_Struct4_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct4_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }

  int32_t get_field6() const {
    return field6;
  }

  int32_t& set_field6(int32_t field6_) {
    field6 = field6_;
    __isset.field6 = true;
    return field6;
  }
  const std::map<bool, std::vector<double>>& get_field7() const&;
  std::map<bool, std::vector<double>> get_field7() &&;

  template <typename T_Struct4_field7_struct_setter>
  std::map<bool, std::vector<double>>& set_field7(T_Struct4_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct4_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }

  bool get_field8() const {
    return field8;
  }

  bool& set_field8(bool field8_) {
    field8 = field8_;
    __isset.field8 = true;
    return field8;
  }

  const std::string& get_field9() const& {
    return field9;
  }

  std::string get_field9() && {
    return std::move(field9);
  }

  template <typename T_Struct4_field9_struct_setter>
  std::string& set_field9(T_Struct4_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct4_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }
  const std::map<float, int8_t>& get_field10() const&;
  std::map<float, int8_t> get_field10() &&;

  template <typename T_Struct4_field10_struct_setter>
  std::map<float, int8_t>& set_field10(T_Struct4_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct4_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }
  const  ::cpp2::Struct0& get_field11() const&;
   ::cpp2::Struct0 get_field11() &&;

  template <typename T_Struct4_field11_struct_setter>
   ::cpp2::Struct0& set_field11(T_Struct4_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct4_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }
  const std::vector<int64_t>& get_field12() const&;
  std::vector<int64_t> get_field12() &&;

  template <typename T_Struct4_field12_struct_setter>
  std::vector<int64_t>& set_field12(T_Struct4_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct4_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }
  const  ::cpp2::Struct0& get_field13() const&;
   ::cpp2::Struct0 get_field13() &&;

  template <typename T_Struct4_field13_struct_setter>
   ::cpp2::Struct0& set_field13(T_Struct4_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct4_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }

  int64_t get_field14() const {
    return field14;
  }

  int64_t& set_field14(int64_t field14_) {
    field14 = field14_;
    __isset.field14 = true;
    return field14;
  }

  bool get_field15() const {
    return field15;
  }

  bool& set_field15(bool field15_) {
    field15 = field15_;
    __isset.field15 = true;
    return field15;
  }

  int64_t get_field16() const {
    return field16;
  }

  int64_t& set_field16(int64_t field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }

  double get_field17() const {
    return field17;
  }

  double& set_field17(double field17_) {
    field17 = field17_;
    __isset.field17 = true;
    return field17;
  }
  const  ::cpp2::Struct1& get_field18() const&;
   ::cpp2::Struct1 get_field18() &&;

  template <typename T_Struct4_field18_struct_setter>
   ::cpp2::Struct1& set_field18(T_Struct4_field18_struct_setter&& field18_) {
    field18 = std::forward<T_Struct4_field18_struct_setter>(field18_);
    __isset.field18 = true;
    return field18;
  }
  const std::set<float>& get_field19() const&;
  std::set<float> get_field19() &&;

  template <typename T_Struct4_field19_struct_setter>
  std::set<float>& set_field19(T_Struct4_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct4_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }
  const std::vector<std::string>& get_field20() const&;
  std::vector<std::string> get_field20() &&;

  template <typename T_Struct4_field20_struct_setter>
  std::vector<std::string>& set_field20(T_Struct4_field20_struct_setter&& field20_) {
    field20 = std::forward<T_Struct4_field20_struct_setter>(field20_);
    __isset.field20 = true;
    return field20;
  }
  const std::map<int8_t, double>& get_field21() const&;
  std::map<int8_t, double> get_field21() &&;

  template <typename T_Struct4_field21_struct_setter>
  std::map<int8_t, double>& set_field21(T_Struct4_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct4_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }
  const std::vector<int8_t>& get_field22() const&;
  std::vector<int8_t> get_field22() &&;

  template <typename T_Struct4_field22_struct_setter>
  std::vector<int8_t>& set_field22(T_Struct4_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct4_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }
  const  ::cpp2::Struct0& get_field23() const&;
   ::cpp2::Struct0 get_field23() &&;

  template <typename T_Struct4_field23_struct_setter>
   ::cpp2::Struct0& set_field23(T_Struct4_field23_struct_setter&& field23_) {
    field23 = std::forward<T_Struct4_field23_struct_setter>(field23_);
    __isset.field23 = true;
    return field23;
  }
  const std::map<int8_t, int8_t>& get_field24() const&;
  std::map<int8_t, int8_t> get_field24() &&;

  template <typename T_Struct4_field24_struct_setter>
  std::map<int8_t, int8_t>& set_field24(T_Struct4_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct4_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }

  int8_t get_field25() const {
    return field25;
  }

  int8_t& set_field25(int8_t field25_) {
    field25 = field25_;
    __isset.field25 = true;
    return field25;
  }

  int8_t get_field26() const {
    return field26;
  }

  int8_t& set_field26(int8_t field26_) {
    field26 = field26_;
    __isset.field26 = true;
    return field26;
  }

  int8_t get_field27() const {
    return field27;
  }

  int8_t& set_field27(int8_t field27_) {
    field27 = field27_;
    __isset.field27 = true;
    return field27;
  }
  const std::map<int16_t, std::vector<int16_t>>& get_field28() const&;
  std::map<int16_t, std::vector<int16_t>> get_field28() &&;

  template <typename T_Struct4_field28_struct_setter>
  std::map<int16_t, std::vector<int16_t>>& set_field28(T_Struct4_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct4_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }
  const  ::cpp2::Struct0& get_field29() const&;
   ::cpp2::Struct0 get_field29() &&;

  template <typename T_Struct4_field29_struct_setter>
   ::cpp2::Struct0& set_field29(T_Struct4_field29_struct_setter&& field29_) {
    field29 = std::forward<T_Struct4_field29_struct_setter>(field29_);
    __isset.field29 = true;
    return field29;
  }
  const std::set<int32_t>& get_field30() const&;
  std::set<int32_t> get_field30() &&;

  template <typename T_Struct4_field30_struct_setter>
  std::set<int32_t>& set_field30(T_Struct4_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct4_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }
  const std::map<double, double>& get_field31() const&;
  std::map<double, double> get_field31() &&;

  template <typename T_Struct4_field31_struct_setter>
  std::map<double, double>& set_field31(T_Struct4_field31_struct_setter&& field31_) {
    field31 = std::forward<T_Struct4_field31_struct_setter>(field31_);
    __isset.field31 = true;
    return field31;
  }
  const  ::cpp2::Struct1& get_field32() const&;
   ::cpp2::Struct1 get_field32() &&;

  template <typename T_Struct4_field32_struct_setter>
   ::cpp2::Struct1& set_field32(T_Struct4_field32_struct_setter&& field32_) {
    field32 = std::forward<T_Struct4_field32_struct_setter>(field32_);
    __isset.field32 = true;
    return field32;
  }

  int16_t get_field33() const {
    return field33;
  }

  int16_t& set_field33(int16_t field33_) {
    field33 = field33_;
    __isset.field33 = true;
    return field33;
  }

  const std::string& get_field34() const& {
    return field34;
  }

  std::string get_field34() && {
    return std::move(field34);
  }

  template <typename T_Struct4_field34_struct_setter>
  std::string& set_field34(T_Struct4_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct4_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }
  const std::set<float>& get_field35() const&;
  std::set<float> get_field35() &&;

  template <typename T_Struct4_field35_struct_setter>
  std::set<float>& set_field35(T_Struct4_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct4_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }

  float get_field36() const {
    return field36;
  }

  float& set_field36(float field36_) {
    field36 = field36_;
    __isset.field36 = true;
    return field36;
  }
  const std::vector<bool>& get_field37() const&;
  std::vector<bool> get_field37() &&;

  template <typename T_Struct4_field37_struct_setter>
  std::vector<bool>& set_field37(T_Struct4_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct4_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }
  const  ::cpp2::Struct1& get_field38() const&;
   ::cpp2::Struct1 get_field38() &&;

  template <typename T_Struct4_field38_struct_setter>
   ::cpp2::Struct1& set_field38(T_Struct4_field38_struct_setter&& field38_) {
    field38 = std::forward<T_Struct4_field38_struct_setter>(field38_);
    __isset.field38 = true;
    return field38;
  }

  double get_field39() const {
    return field39;
  }

  double& set_field39(double field39_) {
    field39 = field39_;
    __isset.field39 = true;
    return field39;
  }
  const std::map<std::set<float>, std::set<double>>& get_field40() const&;
  std::map<std::set<float>, std::set<double>> get_field40() &&;

  template <typename T_Struct4_field40_struct_setter>
  std::map<std::set<float>, std::set<double>>& set_field40(T_Struct4_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct4_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }
  const std::vector<std::string>& get_field41() const&;
  std::vector<std::string> get_field41() &&;

  template <typename T_Struct4_field41_struct_setter>
  std::vector<std::string>& set_field41(T_Struct4_field41_struct_setter&& field41_) {
    field41 = std::forward<T_Struct4_field41_struct_setter>(field41_);
    __isset.field41 = true;
    return field41;
  }

  int16_t get_field42() const {
    return field42;
  }

  int16_t& set_field42(int16_t field42_) {
    field42 = field42_;
    __isset.field42 = true;
    return field42;
  }

  int32_t get_field43() const {
    return field43;
  }

  int32_t& set_field43(int32_t field43_) {
    field43 = field43_;
    __isset.field43 = true;
    return field43;
  }
  const std::set<bool>& get_field44() const&;
  std::set<bool> get_field44() &&;

  template <typename T_Struct4_field44_struct_setter>
  std::set<bool>& set_field44(T_Struct4_field44_struct_setter&& field44_) {
    field44 = std::forward<T_Struct4_field44_struct_setter>(field44_);
    __isset.field44 = true;
    return field44;
  }

  const std::string& get_field45() const& {
    return field45;
  }

  std::string get_field45() && {
    return std::move(field45);
  }

  template <typename T_Struct4_field45_struct_setter>
  std::string& set_field45(T_Struct4_field45_struct_setter&& field45_) {
    field45 = std::forward<T_Struct4_field45_struct_setter>(field45_);
    __isset.field45 = true;
    return field45;
  }
  const std::vector<double>& get_field46() const&;
  std::vector<double> get_field46() &&;

  template <typename T_Struct4_field46_struct_setter>
  std::vector<double>& set_field46(T_Struct4_field46_struct_setter&& field46_) {
    field46 = std::forward<T_Struct4_field46_struct_setter>(field46_);
    __isset.field46 = true;
    return field46;
  }
  const std::map<int16_t,  ::cpp2::Struct2>& get_field47() const&;
  std::map<int16_t,  ::cpp2::Struct2> get_field47() &&;

  template <typename T_Struct4_field47_struct_setter>
  std::map<int16_t,  ::cpp2::Struct2>& set_field47(T_Struct4_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct4_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }
  const std::set<int16_t>& get_field48() const&;
  std::set<int16_t> get_field48() &&;

  template <typename T_Struct4_field48_struct_setter>
  std::set<int16_t>& set_field48(T_Struct4_field48_struct_setter&& field48_) {
    field48 = std::forward<T_Struct4_field48_struct_setter>(field48_);
    __isset.field48 = true;
    return field48;
  }
  const std::map<std::map<int32_t, int32_t>, int64_t>& get_field49() const&;
  std::map<std::map<int32_t, int32_t>, int64_t> get_field49() &&;

  template <typename T_Struct4_field49_struct_setter>
  std::map<std::map<int32_t, int32_t>, int64_t>& set_field49(T_Struct4_field49_struct_setter&& field49_) {
    field49 = std::forward<T_Struct4_field49_struct_setter>(field49_);
    __isset.field49 = true;
    return field49;
  }
  const  ::cpp2::Struct0& get_field50() const&;
   ::cpp2::Struct0 get_field50() &&;

  template <typename T_Struct4_field50_struct_setter>
   ::cpp2::Struct0& set_field50(T_Struct4_field50_struct_setter&& field50_) {
    field50 = std::forward<T_Struct4_field50_struct_setter>(field50_);
    __isset.field50 = true;
    return field50;
  }

  int16_t get_field51() const {
    return field51;
  }

  int16_t& set_field51(int16_t field51_) {
    field51 = field51_;
    __isset.field51 = true;
    return field51;
  }
  const std::set<std::string>& get_field52() const&;
  std::set<std::string> get_field52() &&;

  template <typename T_Struct4_field52_struct_setter>
  std::set<std::string>& set_field52(T_Struct4_field52_struct_setter&& field52_) {
    field52 = std::forward<T_Struct4_field52_struct_setter>(field52_);
    __isset.field52 = true;
    return field52;
  }

  bool get_field53() const {
    return field53;
  }

  bool& set_field53(bool field53_) {
    field53 = field53_;
    __isset.field53 = true;
    return field53;
  }
  const std::vector<std::string>& get_field54() const&;
  std::vector<std::string> get_field54() &&;

  template <typename T_Struct4_field54_struct_setter>
  std::vector<std::string>& set_field54(T_Struct4_field54_struct_setter&& field54_) {
    field54 = std::forward<T_Struct4_field54_struct_setter>(field54_);
    __isset.field54 = true;
    return field54;
  }

  const std::string& get_field55() const& {
    return field55;
  }

  std::string get_field55() && {
    return std::move(field55);
  }

  template <typename T_Struct4_field55_struct_setter>
  std::string& set_field55(T_Struct4_field55_struct_setter&& field55_) {
    field55 = std::forward<T_Struct4_field55_struct_setter>(field55_);
    __isset.field55 = true;
    return field55;
  }

  const std::string& get_field56() const& {
    return field56;
  }

  std::string get_field56() && {
    return std::move(field56);
  }

  template <typename T_Struct4_field56_struct_setter>
  std::string& set_field56(T_Struct4_field56_struct_setter&& field56_) {
    field56 = std::forward<T_Struct4_field56_struct_setter>(field56_);
    __isset.field56 = true;
    return field56;
  }
  const std::vector<bool>& get_field57() const&;
  std::vector<bool> get_field57() &&;

  template <typename T_Struct4_field57_struct_setter>
  std::vector<bool>& set_field57(T_Struct4_field57_struct_setter&& field57_) {
    field57 = std::forward<T_Struct4_field57_struct_setter>(field57_);
    __isset.field57 = true;
    return field57;
  }

  const std::string& get_field58() const& {
    return field58;
  }

  std::string get_field58() && {
    return std::move(field58);
  }

  template <typename T_Struct4_field58_struct_setter>
  std::string& set_field58(T_Struct4_field58_struct_setter&& field58_) {
    field58 = std::forward<T_Struct4_field58_struct_setter>(field58_);
    __isset.field58 = true;
    return field58;
  }

  int8_t get_field59() const {
    return field59;
  }

  int8_t& set_field59(int8_t field59_) {
    field59 = field59_;
    __isset.field59 = true;
    return field59;
  }

  int8_t get_field60() const {
    return field60;
  }

  int8_t& set_field60(int8_t field60_) {
    field60 = field60_;
    __isset.field60 = true;
    return field60;
  }

  int32_t get_field61() const {
    return field61;
  }

  int32_t& set_field61(int32_t field61_) {
    field61 = field61_;
    __isset.field61 = true;
    return field61;
  }
  const  ::cpp2::Struct1& get_field62() const&;
   ::cpp2::Struct1 get_field62() &&;

  template <typename T_Struct4_field62_struct_setter>
   ::cpp2::Struct1& set_field62(T_Struct4_field62_struct_setter&& field62_) {
    field62 = std::forward<T_Struct4_field62_struct_setter>(field62_);
    __isset.field62 = true;
    return field62;
  }
  const  ::cpp2::Struct1& get_field63() const&;
   ::cpp2::Struct1 get_field63() &&;

  template <typename T_Struct4_field63_struct_setter>
   ::cpp2::Struct1& set_field63(T_Struct4_field63_struct_setter&& field63_) {
    field63 = std::forward<T_Struct4_field63_struct_setter>(field63_);
    __isset.field63 = true;
    return field63;
  }
  const std::set< ::cpp2::Struct0>& get_field64() const&;
  std::set< ::cpp2::Struct0> get_field64() &&;

  template <typename T_Struct4_field64_struct_setter>
  std::set< ::cpp2::Struct0>& set_field64(T_Struct4_field64_struct_setter&& field64_) {
    field64 = std::forward<T_Struct4_field64_struct_setter>(field64_);
    __isset.field64 = true;
    return field64;
  }

  int32_t get_field65() const {
    return field65;
  }

  int32_t& set_field65(int32_t field65_) {
    field65 = field65_;
    __isset.field65 = true;
    return field65;
  }
  const std::set<bool>& get_field66() const&;
  std::set<bool> get_field66() &&;

  template <typename T_Struct4_field66_struct_setter>
  std::set<bool>& set_field66(T_Struct4_field66_struct_setter&& field66_) {
    field66 = std::forward<T_Struct4_field66_struct_setter>(field66_);
    __isset.field66 = true;
    return field66;
  }

  const std::string& get_field67() const& {
    return field67;
  }

  std::string get_field67() && {
    return std::move(field67);
  }

  template <typename T_Struct4_field67_struct_setter>
  std::string& set_field67(T_Struct4_field67_struct_setter&& field67_) {
    field67 = std::forward<T_Struct4_field67_struct_setter>(field67_);
    __isset.field67 = true;
    return field67;
  }
  const std::map<std::map<int32_t, float>, float>& get_field68() const&;
  std::map<std::map<int32_t, float>, float> get_field68() &&;

  template <typename T_Struct4_field68_struct_setter>
  std::map<std::map<int32_t, float>, float>& set_field68(T_Struct4_field68_struct_setter&& field68_) {
    field68 = std::forward<T_Struct4_field68_struct_setter>(field68_);
    __isset.field68 = true;
    return field68;
  }
  const std::vector<float>& get_field69() const&;
  std::vector<float> get_field69() &&;

  template <typename T_Struct4_field69_struct_setter>
  std::vector<float>& set_field69(T_Struct4_field69_struct_setter&& field69_) {
    field69 = std::forward<T_Struct4_field69_struct_setter>(field69_);
    __isset.field69 = true;
    return field69;
  }

  bool get_field70() const {
    return field70;
  }

  bool& set_field70(bool field70_) {
    field70 = field70_;
    __isset.field70 = true;
    return field70;
  }

  bool get_field71() const {
    return field71;
  }

  bool& set_field71(bool field71_) {
    field71 = field71_;
    __isset.field71 = true;
    return field71;
  }
  const std::vector<int16_t>& get_field72() const&;
  std::vector<int16_t> get_field72() &&;

  template <typename T_Struct4_field72_struct_setter>
  std::vector<int16_t>& set_field72(T_Struct4_field72_struct_setter&& field72_) {
    field72 = std::forward<T_Struct4_field72_struct_setter>(field72_);
    __isset.field72 = true;
    return field72;
  }
  const std::map<double,  ::cpp2::Struct1>& get_field73() const&;
  std::map<double,  ::cpp2::Struct1> get_field73() &&;

  template <typename T_Struct4_field73_struct_setter>
  std::map<double,  ::cpp2::Struct1>& set_field73(T_Struct4_field73_struct_setter&& field73_) {
    field73 = std::forward<T_Struct4_field73_struct_setter>(field73_);
    __isset.field73 = true;
    return field73;
  }

  float get_field74() const {
    return field74;
  }

  float& set_field74(float field74_) {
    field74 = field74_;
    __isset.field74 = true;
    return field74;
  }
  const std::set<std::map<double, std::string>>& get_field75() const&;
  std::set<std::map<double, std::string>> get_field75() &&;

  template <typename T_Struct4_field75_struct_setter>
  std::set<std::map<double, std::string>>& set_field75(T_Struct4_field75_struct_setter&& field75_) {
    field75 = std::forward<T_Struct4_field75_struct_setter>(field75_);
    __isset.field75 = true;
    return field75;
  }
  const std::set<int32_t>& get_field76() const&;
  std::set<int32_t> get_field76() &&;

  template <typename T_Struct4_field76_struct_setter>
  std::set<int32_t>& set_field76(T_Struct4_field76_struct_setter&& field76_) {
    field76 = std::forward<T_Struct4_field76_struct_setter>(field76_);
    __isset.field76 = true;
    return field76;
  }
  const std::set<int8_t>& get_field77() const&;
  std::set<int8_t> get_field77() &&;

  template <typename T_Struct4_field77_struct_setter>
  std::set<int8_t>& set_field77(T_Struct4_field77_struct_setter&& field77_) {
    field77 = std::forward<T_Struct4_field77_struct_setter>(field77_);
    __isset.field77 = true;
    return field77;
  }
  const std::map<std::string, int8_t>& get_field78() const&;
  std::map<std::string, int8_t> get_field78() &&;

  template <typename T_Struct4_field78_struct_setter>
  std::map<std::string, int8_t>& set_field78(T_Struct4_field78_struct_setter&& field78_) {
    field78 = std::forward<T_Struct4_field78_struct_setter>(field78_);
    __isset.field78 = true;
    return field78;
  }
  const std::map<std::set<float>, std::set<std::map<float, std::string>>>& get_field79() const&;
  std::map<std::set<float>, std::set<std::map<float, std::string>>> get_field79() &&;

  template <typename T_Struct4_field79_struct_setter>
  std::map<std::set<float>, std::set<std::map<float, std::string>>>& set_field79(T_Struct4_field79_struct_setter&& field79_) {
    field79 = std::forward<T_Struct4_field79_struct_setter>(field79_);
    __isset.field79 = true;
    return field79;
  }
  const std::set<std::string>& get_field80() const&;
  std::set<std::string> get_field80() &&;

  template <typename T_Struct4_field80_struct_setter>
  std::set<std::string>& set_field80(T_Struct4_field80_struct_setter&& field80_) {
    field80 = std::forward<T_Struct4_field80_struct_setter>(field80_);
    __isset.field80 = true;
    return field80;
  }
  const std::map<bool, float>& get_field81() const&;
  std::map<bool, float> get_field81() &&;

  template <typename T_Struct4_field81_struct_setter>
  std::map<bool, float>& set_field81(T_Struct4_field81_struct_setter&& field81_) {
    field81 = std::forward<T_Struct4_field81_struct_setter>(field81_);
    __isset.field81 = true;
    return field81;
  }

  int16_t get_field82() const {
    return field82;
  }

  int16_t& set_field82(int16_t field82_) {
    field82 = field82_;
    __isset.field82 = true;
    return field82;
  }

  const std::string& get_field83() const& {
    return field83;
  }

  std::string get_field83() && {
    return std::move(field83);
  }

  template <typename T_Struct4_field83_struct_setter>
  std::string& set_field83(T_Struct4_field83_struct_setter&& field83_) {
    field83 = std::forward<T_Struct4_field83_struct_setter>(field83_);
    __isset.field83 = true;
    return field83;
  }

  int8_t get_field84() const {
    return field84;
  }

  int8_t& set_field84(int8_t field84_) {
    field84 = field84_;
    __isset.field84 = true;
    return field84;
  }

  int16_t get_field85() const {
    return field85;
  }

  int16_t& set_field85(int16_t field85_) {
    field85 = field85_;
    __isset.field85 = true;
    return field85;
  }
  const std::map<std::string, double>& get_field86() const&;
  std::map<std::string, double> get_field86() &&;

  template <typename T_Struct4_field86_struct_setter>
  std::map<std::string, double>& set_field86(T_Struct4_field86_struct_setter&& field86_) {
    field86 = std::forward<T_Struct4_field86_struct_setter>(field86_);
    __isset.field86 = true;
    return field86;
  }

  bool get_field87() const {
    return field87;
  }

  bool& set_field87(bool field87_) {
    field87 = field87_;
    __isset.field87 = true;
    return field87;
  }
  const std::vector<std::set<std::string>>& get_field88() const&;
  std::vector<std::set<std::string>> get_field88() &&;

  template <typename T_Struct4_field88_struct_setter>
  std::vector<std::set<std::string>>& set_field88(T_Struct4_field88_struct_setter&& field88_) {
    field88 = std::forward<T_Struct4_field88_struct_setter>(field88_);
    __isset.field88 = true;
    return field88;
  }

  int8_t get_field89() const {
    return field89;
  }

  int8_t& set_field89(int8_t field89_) {
    field89 = field89_;
    __isset.field89 = true;
    return field89;
  }
  const std::vector<std::set<int16_t>>& get_field90() const&;
  std::vector<std::set<int16_t>> get_field90() &&;

  template <typename T_Struct4_field90_struct_setter>
  std::vector<std::set<int16_t>>& set_field90(T_Struct4_field90_struct_setter&& field90_) {
    field90 = std::forward<T_Struct4_field90_struct_setter>(field90_);
    __isset.field90 = true;
    return field90;
  }

  bool get_field91() const {
    return field91;
  }

  bool& set_field91(bool field91_) {
    field91 = field91_;
    __isset.field91 = true;
    return field91;
  }

  int64_t get_field92() const {
    return field92;
  }

  int64_t& set_field92(int64_t field92_) {
    field92 = field92_;
    __isset.field92 = true;
    return field92;
  }

  int64_t get_field93() const {
    return field93;
  }

  int64_t& set_field93(int64_t field93_) {
    field93 = field93_;
    __isset.field93 = true;
    return field93;
  }
  const std::map<int8_t, int16_t>& get_field94() const&;
  std::map<int8_t, int16_t> get_field94() &&;

  template <typename T_Struct4_field94_struct_setter>
  std::map<int8_t, int16_t>& set_field94(T_Struct4_field94_struct_setter&& field94_) {
    field94 = std::forward<T_Struct4_field94_struct_setter>(field94_);
    __isset.field94 = true;
    return field94;
  }

  const std::string& get_field95() const& {
    return field95;
  }

  std::string get_field95() && {
    return std::move(field95);
  }

  template <typename T_Struct4_field95_struct_setter>
  std::string& set_field95(T_Struct4_field95_struct_setter&& field95_) {
    field95 = std::forward<T_Struct4_field95_struct_setter>(field95_);
    __isset.field95 = true;
    return field95;
  }

  int8_t get_field96() const {
    return field96;
  }

  int8_t& set_field96(int8_t field96_) {
    field96 = field96_;
    __isset.field96 = true;
    return field96;
  }

  int16_t get_field97() const {
    return field97;
  }

  int16_t& set_field97(int16_t field97_) {
    field97 = field97_;
    __isset.field97 = true;
    return field97;
  }
  const  ::cpp2::Struct3& get_field98() const&;
   ::cpp2::Struct3 get_field98() &&;

  template <typename T_Struct4_field98_struct_setter>
   ::cpp2::Struct3& set_field98(T_Struct4_field98_struct_setter&& field98_) {
    field98 = std::forward<T_Struct4_field98_struct_setter>(field98_);
    __isset.field98 = true;
    return field98;
  }
  const  ::cpp2::Struct0& get_field99() const&;
   ::cpp2::Struct0 get_field99() &&;

  template <typename T_Struct4_field99_struct_setter>
   ::cpp2::Struct0& set_field99(T_Struct4_field99_struct_setter&& field99_) {
    field99 = std::forward<T_Struct4_field99_struct_setter>(field99_);
    __isset.field99 = true;
    return field99;
  }
  const std::map<int16_t, int8_t>& get_field100() const&;
  std::map<int16_t, int8_t> get_field100() &&;

  template <typename T_Struct4_field100_struct_setter>
  std::map<int16_t, int8_t>& set_field100(T_Struct4_field100_struct_setter&& field100_) {
    field100 = std::forward<T_Struct4_field100_struct_setter>(field100_);
    __isset.field100 = true;
    return field100;
  }

  int32_t get_field101() const {
    return field101;
  }

  int32_t& set_field101(int32_t field101_) {
    field101 = field101_;
    __isset.field101 = true;
    return field101;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct4& a, Struct4& b);
extern template uint32_t Struct4::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct4::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct4::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct4::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct4::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct4::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct4::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct4::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct4>::clear( ::cpp2::Struct4* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct4>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct4>::write(Protocol* proto,  ::cpp2::Struct4 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct4>::read(Protocol* proto,  ::cpp2::Struct4* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct4>::serializedSize(Protocol const* proto,  ::cpp2::Struct4 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct4>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct4 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct5 : private apache::thrift::detail::st::ComparisonOperators<Struct5> {
 public:

  Struct5() :
      field3(0),
      field4(0),
      field5(0),
      field6(0),
      field8(0),
      field10(0),
      field16(0),
      field18(0),
      field19(0),
      field22(0),
      field23(0),
      field24(0),
      field32(0),
      field34(0),
      field36(0),
      field38(0),
      field39(0),
      field40(0),
      field41(0),
      field45(0),
      field46(0),
      field48(0),
      field56(0),
      field57(0),
      field61(0),
      field71(0),
      field72(0),
      field74(0),
      field80(0),
      field92(0),
      field95(0),
      field96(0) {}
  // FragileConstructor for use in initialization lists only

  Struct5(apache::thrift::FragileConstructor, std::set<double> field1__arg, std::vector<int16_t> field2__arg, int16_t field3__arg, int64_t field4__arg, float field5__arg, bool field6__arg, std::vector<std::string> field7__arg, int32_t field8__arg, std::vector<std::map<double, std::string>> field9__arg, int64_t field10__arg, std::map<bool, int64_t> field11__arg, std::map<std::string, std::set<double>> field12__arg, std::string field13__arg,  ::cpp2::Struct2 field14__arg, std::map<std::vector<bool>, int32_t> field15__arg, int32_t field16__arg, std::string field17__arg, int64_t field18__arg, int16_t field19__arg, std::map<int32_t, std::map<std::vector<int8_t>, float>> field20__arg, std::vector<bool> field21__arg, int16_t field22__arg, float field23__arg, int16_t field24__arg,  ::cpp2::Struct1 field25__arg, std::set<std::string> field26__arg, std::vector<std::vector<float>> field27__arg, std::map<int64_t, int8_t> field28__arg, std::vector<int16_t> field29__arg, std::set<std::vector<int16_t>> field30__arg, std::map<std::set<std::string>, float> field31__arg, bool field32__arg, std::string field33__arg, float field34__arg, std::map<std::set<int64_t>, double> field35__arg, double field36__arg,  ::cpp2::Struct2 field37__arg, bool field38__arg, int32_t field39__arg, int64_t field40__arg, int8_t field41__arg, std::vector<std::vector<int32_t>> field42__arg, std::set<std::map<double, int8_t>> field43__arg, std::set<std::map<int16_t, bool>> field44__arg, int32_t field45__arg, int64_t field46__arg,  ::cpp2::Struct2 field47__arg, double field48__arg,  ::cpp2::Struct0 field49__arg, std::vector<std::map<int8_t, int32_t>> field50__arg, std::vector<std::string> field51__arg,  ::cpp2::Struct1 field52__arg, std::set<int32_t> field53__arg, std::vector<bool> field54__arg,  ::cpp2::Struct2 field55__arg, double field56__arg, int64_t field57__arg,  ::cpp2::Struct1 field58__arg, std::vector<int8_t> field59__arg, std::map<int8_t,  ::cpp2::Struct2> field60__arg, int32_t field61__arg, std::set<std::map<double, std::string>> field62__arg, std::string field63__arg, std::set<std::string> field64__arg, std::set<std::string> field65__arg, std::set<std::vector<std::string>> field66__arg, std::map<float, std::string> field67__arg, std::set<int32_t> field68__arg, std::set<std::set<std::string>> field69__arg, std::set<std::set<std::string>> field70__arg, int32_t field71__arg, int64_t field72__arg,  ::cpp2::Struct1 field73__arg, double field74__arg, std::map<std::string, int16_t> field75__arg, std::string field76__arg, std::map<int8_t,  ::cpp2::Struct3> field77__arg, std::set<int16_t> field78__arg,  ::cpp2::Struct2 field79__arg, int16_t field80__arg, std::vector< ::cpp2::Struct0> field81__arg, std::set<int8_t> field82__arg,  ::cpp2::Struct1 field83__arg, std::map<int64_t, int16_t> field84__arg, std::set<int8_t> field85__arg,  ::cpp2::Struct3 field86__arg, std::string field87__arg, std::vector<int8_t> field88__arg, std::string field89__arg,  ::cpp2::Struct1 field90__arg,  ::cpp2::Struct2 field91__arg, bool field92__arg, std::vector<std::vector<std::set<std::string>>> field93__arg, std::string field94__arg, float field95__arg, int16_t field96__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct5(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct5(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }

  Struct5(Struct5&&) = default;

  Struct5(const Struct5&) = default;

  Struct5& operator=(Struct5&&) = default;

  Struct5& operator=(const Struct5&) = default;
  void __clear();

  virtual ~Struct5() {}

  std::set<double> field1;
  std::vector<int16_t> field2;
  int16_t field3;
  int64_t field4;
  float field5;
  bool field6;
  std::vector<std::string> field7;
  int32_t field8;
  std::vector<std::map<double, std::string>> field9;
  int64_t field10;
  std::map<bool, int64_t> field11;
  std::map<std::string, std::set<double>> field12;
  std::string field13;
   ::cpp2::Struct2 field14;
  std::map<std::vector<bool>, int32_t> field15;
  int32_t field16;
  std::string field17;
  int64_t field18;
  int16_t field19;
  std::map<int32_t, std::map<std::vector<int8_t>, float>> field20;
  std::vector<bool> field21;
  int16_t field22;
  float field23;
  int16_t field24;
   ::cpp2::Struct1 field25;
  std::set<std::string> field26;
  std::vector<std::vector<float>> field27;
  std::map<int64_t, int8_t> field28;
  std::vector<int16_t> field29;
  std::set<std::vector<int16_t>> field30;
  std::map<std::set<std::string>, float> field31;
  bool field32;
  std::string field33;
  float field34;
  std::map<std::set<int64_t>, double> field35;
  double field36;
   ::cpp2::Struct2 field37;
  bool field38;
  int32_t field39;
  int64_t field40;
  int8_t field41;
  std::vector<std::vector<int32_t>> field42;
  std::set<std::map<double, int8_t>> field43;
  std::set<std::map<int16_t, bool>> field44;
  int32_t field45;
  int64_t field46;
   ::cpp2::Struct2 field47;
  double field48;
   ::cpp2::Struct0 field49;
  std::vector<std::map<int8_t, int32_t>> field50;
  std::vector<std::string> field51;
   ::cpp2::Struct1 field52;
  std::set<int32_t> field53;
  std::vector<bool> field54;
   ::cpp2::Struct2 field55;
  double field56;
  int64_t field57;
   ::cpp2::Struct1 field58;
  std::vector<int8_t> field59;
  std::map<int8_t,  ::cpp2::Struct2> field60;
  int32_t field61;
  std::set<std::map<double, std::string>> field62;
  std::string field63;
  std::set<std::string> field64;
  std::set<std::string> field65;
  std::set<std::vector<std::string>> field66;
  std::map<float, std::string> field67;
  std::set<int32_t> field68;
  std::set<std::set<std::string>> field69;
  std::set<std::set<std::string>> field70;
  int32_t field71;
  int64_t field72;
   ::cpp2::Struct1 field73;
  double field74;
  std::map<std::string, int16_t> field75;
  std::string field76;
  std::map<int8_t,  ::cpp2::Struct3> field77;
  std::set<int16_t> field78;
   ::cpp2::Struct2 field79;
  int16_t field80;
  std::vector< ::cpp2::Struct0> field81;
  std::set<int8_t> field82;
   ::cpp2::Struct1 field83;
  std::map<int64_t, int16_t> field84;
  std::set<int8_t> field85;
   ::cpp2::Struct3 field86;
  std::string field87;
  std::vector<int8_t> field88;
  std::string field89;
   ::cpp2::Struct1 field90;
   ::cpp2::Struct2 field91;
  bool field92;
  std::vector<std::vector<std::set<std::string>>> field93;
  std::string field94;
  float field95;
  int16_t field96;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
  } __isset;
  bool operator==(const Struct5& rhs) const;

  bool operator < (const Struct5& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    (void)rhs;
    return false;
  }
  const std::set<double>& get_field1() const&;
  std::set<double> get_field1() &&;

  template <typename T_Struct5_field1_struct_setter>
  std::set<double>& set_field1(T_Struct5_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct5_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const std::vector<int16_t>& get_field2() const&;
  std::vector<int16_t> get_field2() &&;

  template <typename T_Struct5_field2_struct_setter>
  std::vector<int16_t>& set_field2(T_Struct5_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct5_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  int16_t get_field3() const {
    return field3;
  }

  int16_t& set_field3(int16_t field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }

  int64_t get_field4() const {
    return field4;
  }

  int64_t& set_field4(int64_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }

  float get_field5() const {
    return field5;
  }

  float& set_field5(float field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }

  bool get_field6() const {
    return field6;
  }

  bool& set_field6(bool field6_) {
    field6 = field6_;
    __isset.field6 = true;
    return field6;
  }
  const std::vector<std::string>& get_field7() const&;
  std::vector<std::string> get_field7() &&;

  template <typename T_Struct5_field7_struct_setter>
  std::vector<std::string>& set_field7(T_Struct5_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct5_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }

  int32_t get_field8() const {
    return field8;
  }

  int32_t& set_field8(int32_t field8_) {
    field8 = field8_;
    __isset.field8 = true;
    return field8;
  }
  const std::vector<std::map<double, std::string>>& get_field9() const&;
  std::vector<std::map<double, std::string>> get_field9() &&;

  template <typename T_Struct5_field9_struct_setter>
  std::vector<std::map<double, std::string>>& set_field9(T_Struct5_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct5_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }

  int64_t get_field10() const {
    return field10;
  }

  int64_t& set_field10(int64_t field10_) {
    field10 = field10_;
    __isset.field10 = true;
    return field10;
  }
  const std::map<bool, int64_t>& get_field11() const&;
  std::map<bool, int64_t> get_field11() &&;

  template <typename T_Struct5_field11_struct_setter>
  std::map<bool, int64_t>& set_field11(T_Struct5_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct5_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }
  const std::map<std::string, std::set<double>>& get_field12() const&;
  std::map<std::string, std::set<double>> get_field12() &&;

  template <typename T_Struct5_field12_struct_setter>
  std::map<std::string, std::set<double>>& set_field12(T_Struct5_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct5_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }

  const std::string& get_field13() const& {
    return field13;
  }

  std::string get_field13() && {
    return std::move(field13);
  }

  template <typename T_Struct5_field13_struct_setter>
  std::string& set_field13(T_Struct5_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct5_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }
  const  ::cpp2::Struct2& get_field14() const&;
   ::cpp2::Struct2 get_field14() &&;

  template <typename T_Struct5_field14_struct_setter>
   ::cpp2::Struct2& set_field14(T_Struct5_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct5_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }
  const std::map<std::vector<bool>, int32_t>& get_field15() const&;
  std::map<std::vector<bool>, int32_t> get_field15() &&;

  template <typename T_Struct5_field15_struct_setter>
  std::map<std::vector<bool>, int32_t>& set_field15(T_Struct5_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct5_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }

  int32_t get_field16() const {
    return field16;
  }

  int32_t& set_field16(int32_t field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }

  const std::string& get_field17() const& {
    return field17;
  }

  std::string get_field17() && {
    return std::move(field17);
  }

  template <typename T_Struct5_field17_struct_setter>
  std::string& set_field17(T_Struct5_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct5_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }

  int64_t get_field18() const {
    return field18;
  }

  int64_t& set_field18(int64_t field18_) {
    field18 = field18_;
    __isset.field18 = true;
    return field18;
  }

  int16_t get_field19() const {
    return field19;
  }

  int16_t& set_field19(int16_t field19_) {
    field19 = field19_;
    __isset.field19 = true;
    return field19;
  }
  const std::map<int32_t, std::map<std::vector<int8_t>, float>>& get_field20() const&;
  std::map<int32_t, std::map<std::vector<int8_t>, float>> get_field20() &&;

  template <typename T_Struct5_field20_struct_setter>
  std::map<int32_t, std::map<std::vector<int8_t>, float>>& set_field20(T_Struct5_field20_struct_setter&& field20_) {
    field20 = std::forward<T_Struct5_field20_struct_setter>(field20_);
    __isset.field20 = true;
    return field20;
  }
  const std::vector<bool>& get_field21() const&;
  std::vector<bool> get_field21() &&;

  template <typename T_Struct5_field21_struct_setter>
  std::vector<bool>& set_field21(T_Struct5_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct5_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }

  int16_t get_field22() const {
    return field22;
  }

  int16_t& set_field22(int16_t field22_) {
    field22 = field22_;
    __isset.field22 = true;
    return field22;
  }

  float get_field23() const {
    return field23;
  }

  float& set_field23(float field23_) {
    field23 = field23_;
    __isset.field23 = true;
    return field23;
  }

  int16_t get_field24() const {
    return field24;
  }

  int16_t& set_field24(int16_t field24_) {
    field24 = field24_;
    __isset.field24 = true;
    return field24;
  }
  const  ::cpp2::Struct1& get_field25() const&;
   ::cpp2::Struct1 get_field25() &&;

  template <typename T_Struct5_field25_struct_setter>
   ::cpp2::Struct1& set_field25(T_Struct5_field25_struct_setter&& field25_) {
    field25 = std::forward<T_Struct5_field25_struct_setter>(field25_);
    __isset.field25 = true;
    return field25;
  }
  const std::set<std::string>& get_field26() const&;
  std::set<std::string> get_field26() &&;

  template <typename T_Struct5_field26_struct_setter>
  std::set<std::string>& set_field26(T_Struct5_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct5_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }
  const std::vector<std::vector<float>>& get_field27() const&;
  std::vector<std::vector<float>> get_field27() &&;

  template <typename T_Struct5_field27_struct_setter>
  std::vector<std::vector<float>>& set_field27(T_Struct5_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct5_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }
  const std::map<int64_t, int8_t>& get_field28() const&;
  std::map<int64_t, int8_t> get_field28() &&;

  template <typename T_Struct5_field28_struct_setter>
  std::map<int64_t, int8_t>& set_field28(T_Struct5_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct5_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }
  const std::vector<int16_t>& get_field29() const&;
  std::vector<int16_t> get_field29() &&;

  template <typename T_Struct5_field29_struct_setter>
  std::vector<int16_t>& set_field29(T_Struct5_field29_struct_setter&& field29_) {
    field29 = std::forward<T_Struct5_field29_struct_setter>(field29_);
    __isset.field29 = true;
    return field29;
  }
  const std::set<std::vector<int16_t>>& get_field30() const&;
  std::set<std::vector<int16_t>> get_field30() &&;

  template <typename T_Struct5_field30_struct_setter>
  std::set<std::vector<int16_t>>& set_field30(T_Struct5_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct5_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }
  const std::map<std::set<std::string>, float>& get_field31() const&;
  std::map<std::set<std::string>, float> get_field31() &&;

  template <typename T_Struct5_field31_struct_setter>
  std::map<std::set<std::string>, float>& set_field31(T_Struct5_field31_struct_setter&& field31_) {
    field31 = std::forward<T_Struct5_field31_struct_setter>(field31_);
    __isset.field31 = true;
    return field31;
  }

  bool get_field32() const {
    return field32;
  }

  bool& set_field32(bool field32_) {
    field32 = field32_;
    __isset.field32 = true;
    return field32;
  }

  const std::string& get_field33() const& {
    return field33;
  }

  std::string get_field33() && {
    return std::move(field33);
  }

  template <typename T_Struct5_field33_struct_setter>
  std::string& set_field33(T_Struct5_field33_struct_setter&& field33_) {
    field33 = std::forward<T_Struct5_field33_struct_setter>(field33_);
    __isset.field33 = true;
    return field33;
  }

  float get_field34() const {
    return field34;
  }

  float& set_field34(float field34_) {
    field34 = field34_;
    __isset.field34 = true;
    return field34;
  }
  const std::map<std::set<int64_t>, double>& get_field35() const&;
  std::map<std::set<int64_t>, double> get_field35() &&;

  template <typename T_Struct5_field35_struct_setter>
  std::map<std::set<int64_t>, double>& set_field35(T_Struct5_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct5_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }

  double get_field36() const {
    return field36;
  }

  double& set_field36(double field36_) {
    field36 = field36_;
    __isset.field36 = true;
    return field36;
  }
  const  ::cpp2::Struct2& get_field37() const&;
   ::cpp2::Struct2 get_field37() &&;

  template <typename T_Struct5_field37_struct_setter>
   ::cpp2::Struct2& set_field37(T_Struct5_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct5_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }

  bool get_field38() const {
    return field38;
  }

  bool& set_field38(bool field38_) {
    field38 = field38_;
    __isset.field38 = true;
    return field38;
  }

  int32_t get_field39() const {
    return field39;
  }

  int32_t& set_field39(int32_t field39_) {
    field39 = field39_;
    __isset.field39 = true;
    return field39;
  }

  int64_t get_field40() const {
    return field40;
  }

  int64_t& set_field40(int64_t field40_) {
    field40 = field40_;
    __isset.field40 = true;
    return field40;
  }

  int8_t get_field41() const {
    return field41;
  }

  int8_t& set_field41(int8_t field41_) {
    field41 = field41_;
    __isset.field41 = true;
    return field41;
  }
  const std::vector<std::vector<int32_t>>& get_field42() const&;
  std::vector<std::vector<int32_t>> get_field42() &&;

  template <typename T_Struct5_field42_struct_setter>
  std::vector<std::vector<int32_t>>& set_field42(T_Struct5_field42_struct_setter&& field42_) {
    field42 = std::forward<T_Struct5_field42_struct_setter>(field42_);
    __isset.field42 = true;
    return field42;
  }
  const std::set<std::map<double, int8_t>>& get_field43() const&;
  std::set<std::map<double, int8_t>> get_field43() &&;

  template <typename T_Struct5_field43_struct_setter>
  std::set<std::map<double, int8_t>>& set_field43(T_Struct5_field43_struct_setter&& field43_) {
    field43 = std::forward<T_Struct5_field43_struct_setter>(field43_);
    __isset.field43 = true;
    return field43;
  }
  const std::set<std::map<int16_t, bool>>& get_field44() const&;
  std::set<std::map<int16_t, bool>> get_field44() &&;

  template <typename T_Struct5_field44_struct_setter>
  std::set<std::map<int16_t, bool>>& set_field44(T_Struct5_field44_struct_setter&& field44_) {
    field44 = std::forward<T_Struct5_field44_struct_setter>(field44_);
    __isset.field44 = true;
    return field44;
  }

  int32_t get_field45() const {
    return field45;
  }

  int32_t& set_field45(int32_t field45_) {
    field45 = field45_;
    __isset.field45 = true;
    return field45;
  }

  int64_t get_field46() const {
    return field46;
  }

  int64_t& set_field46(int64_t field46_) {
    field46 = field46_;
    __isset.field46 = true;
    return field46;
  }
  const  ::cpp2::Struct2& get_field47() const&;
   ::cpp2::Struct2 get_field47() &&;

  template <typename T_Struct5_field47_struct_setter>
   ::cpp2::Struct2& set_field47(T_Struct5_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct5_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }

  double get_field48() const {
    return field48;
  }

  double& set_field48(double field48_) {
    field48 = field48_;
    __isset.field48 = true;
    return field48;
  }
  const  ::cpp2::Struct0& get_field49() const&;
   ::cpp2::Struct0 get_field49() &&;

  template <typename T_Struct5_field49_struct_setter>
   ::cpp2::Struct0& set_field49(T_Struct5_field49_struct_setter&& field49_) {
    field49 = std::forward<T_Struct5_field49_struct_setter>(field49_);
    __isset.field49 = true;
    return field49;
  }
  const std::vector<std::map<int8_t, int32_t>>& get_field50() const&;
  std::vector<std::map<int8_t, int32_t>> get_field50() &&;

  template <typename T_Struct5_field50_struct_setter>
  std::vector<std::map<int8_t, int32_t>>& set_field50(T_Struct5_field50_struct_setter&& field50_) {
    field50 = std::forward<T_Struct5_field50_struct_setter>(field50_);
    __isset.field50 = true;
    return field50;
  }
  const std::vector<std::string>& get_field51() const&;
  std::vector<std::string> get_field51() &&;

  template <typename T_Struct5_field51_struct_setter>
  std::vector<std::string>& set_field51(T_Struct5_field51_struct_setter&& field51_) {
    field51 = std::forward<T_Struct5_field51_struct_setter>(field51_);
    __isset.field51 = true;
    return field51;
  }
  const  ::cpp2::Struct1& get_field52() const&;
   ::cpp2::Struct1 get_field52() &&;

  template <typename T_Struct5_field52_struct_setter>
   ::cpp2::Struct1& set_field52(T_Struct5_field52_struct_setter&& field52_) {
    field52 = std::forward<T_Struct5_field52_struct_setter>(field52_);
    __isset.field52 = true;
    return field52;
  }
  const std::set<int32_t>& get_field53() const&;
  std::set<int32_t> get_field53() &&;

  template <typename T_Struct5_field53_struct_setter>
  std::set<int32_t>& set_field53(T_Struct5_field53_struct_setter&& field53_) {
    field53 = std::forward<T_Struct5_field53_struct_setter>(field53_);
    __isset.field53 = true;
    return field53;
  }
  const std::vector<bool>& get_field54() const&;
  std::vector<bool> get_field54() &&;

  template <typename T_Struct5_field54_struct_setter>
  std::vector<bool>& set_field54(T_Struct5_field54_struct_setter&& field54_) {
    field54 = std::forward<T_Struct5_field54_struct_setter>(field54_);
    __isset.field54 = true;
    return field54;
  }
  const  ::cpp2::Struct2& get_field55() const&;
   ::cpp2::Struct2 get_field55() &&;

  template <typename T_Struct5_field55_struct_setter>
   ::cpp2::Struct2& set_field55(T_Struct5_field55_struct_setter&& field55_) {
    field55 = std::forward<T_Struct5_field55_struct_setter>(field55_);
    __isset.field55 = true;
    return field55;
  }

  double get_field56() const {
    return field56;
  }

  double& set_field56(double field56_) {
    field56 = field56_;
    __isset.field56 = true;
    return field56;
  }

  int64_t get_field57() const {
    return field57;
  }

  int64_t& set_field57(int64_t field57_) {
    field57 = field57_;
    __isset.field57 = true;
    return field57;
  }
  const  ::cpp2::Struct1& get_field58() const&;
   ::cpp2::Struct1 get_field58() &&;

  template <typename T_Struct5_field58_struct_setter>
   ::cpp2::Struct1& set_field58(T_Struct5_field58_struct_setter&& field58_) {
    field58 = std::forward<T_Struct5_field58_struct_setter>(field58_);
    __isset.field58 = true;
    return field58;
  }
  const std::vector<int8_t>& get_field59() const&;
  std::vector<int8_t> get_field59() &&;

  template <typename T_Struct5_field59_struct_setter>
  std::vector<int8_t>& set_field59(T_Struct5_field59_struct_setter&& field59_) {
    field59 = std::forward<T_Struct5_field59_struct_setter>(field59_);
    __isset.field59 = true;
    return field59;
  }
  const std::map<int8_t,  ::cpp2::Struct2>& get_field60() const&;
  std::map<int8_t,  ::cpp2::Struct2> get_field60() &&;

  template <typename T_Struct5_field60_struct_setter>
  std::map<int8_t,  ::cpp2::Struct2>& set_field60(T_Struct5_field60_struct_setter&& field60_) {
    field60 = std::forward<T_Struct5_field60_struct_setter>(field60_);
    __isset.field60 = true;
    return field60;
  }

  int32_t get_field61() const {
    return field61;
  }

  int32_t& set_field61(int32_t field61_) {
    field61 = field61_;
    __isset.field61 = true;
    return field61;
  }
  const std::set<std::map<double, std::string>>& get_field62() const&;
  std::set<std::map<double, std::string>> get_field62() &&;

  template <typename T_Struct5_field62_struct_setter>
  std::set<std::map<double, std::string>>& set_field62(T_Struct5_field62_struct_setter&& field62_) {
    field62 = std::forward<T_Struct5_field62_struct_setter>(field62_);
    __isset.field62 = true;
    return field62;
  }

  const std::string& get_field63() const& {
    return field63;
  }

  std::string get_field63() && {
    return std::move(field63);
  }

  template <typename T_Struct5_field63_struct_setter>
  std::string& set_field63(T_Struct5_field63_struct_setter&& field63_) {
    field63 = std::forward<T_Struct5_field63_struct_setter>(field63_);
    __isset.field63 = true;
    return field63;
  }
  const std::set<std::string>& get_field64() const&;
  std::set<std::string> get_field64() &&;

  template <typename T_Struct5_field64_struct_setter>
  std::set<std::string>& set_field64(T_Struct5_field64_struct_setter&& field64_) {
    field64 = std::forward<T_Struct5_field64_struct_setter>(field64_);
    __isset.field64 = true;
    return field64;
  }
  const std::set<std::string>& get_field65() const&;
  std::set<std::string> get_field65() &&;

  template <typename T_Struct5_field65_struct_setter>
  std::set<std::string>& set_field65(T_Struct5_field65_struct_setter&& field65_) {
    field65 = std::forward<T_Struct5_field65_struct_setter>(field65_);
    __isset.field65 = true;
    return field65;
  }
  const std::set<std::vector<std::string>>& get_field66() const&;
  std::set<std::vector<std::string>> get_field66() &&;

  template <typename T_Struct5_field66_struct_setter>
  std::set<std::vector<std::string>>& set_field66(T_Struct5_field66_struct_setter&& field66_) {
    field66 = std::forward<T_Struct5_field66_struct_setter>(field66_);
    __isset.field66 = true;
    return field66;
  }
  const std::map<float, std::string>& get_field67() const&;
  std::map<float, std::string> get_field67() &&;

  template <typename T_Struct5_field67_struct_setter>
  std::map<float, std::string>& set_field67(T_Struct5_field67_struct_setter&& field67_) {
    field67 = std::forward<T_Struct5_field67_struct_setter>(field67_);
    __isset.field67 = true;
    return field67;
  }
  const std::set<int32_t>& get_field68() const&;
  std::set<int32_t> get_field68() &&;

  template <typename T_Struct5_field68_struct_setter>
  std::set<int32_t>& set_field68(T_Struct5_field68_struct_setter&& field68_) {
    field68 = std::forward<T_Struct5_field68_struct_setter>(field68_);
    __isset.field68 = true;
    return field68;
  }
  const std::set<std::set<std::string>>& get_field69() const&;
  std::set<std::set<std::string>> get_field69() &&;

  template <typename T_Struct5_field69_struct_setter>
  std::set<std::set<std::string>>& set_field69(T_Struct5_field69_struct_setter&& field69_) {
    field69 = std::forward<T_Struct5_field69_struct_setter>(field69_);
    __isset.field69 = true;
    return field69;
  }
  const std::set<std::set<std::string>>& get_field70() const&;
  std::set<std::set<std::string>> get_field70() &&;

  template <typename T_Struct5_field70_struct_setter>
  std::set<std::set<std::string>>& set_field70(T_Struct5_field70_struct_setter&& field70_) {
    field70 = std::forward<T_Struct5_field70_struct_setter>(field70_);
    __isset.field70 = true;
    return field70;
  }

  int32_t get_field71() const {
    return field71;
  }

  int32_t& set_field71(int32_t field71_) {
    field71 = field71_;
    __isset.field71 = true;
    return field71;
  }

  int64_t get_field72() const {
    return field72;
  }

  int64_t& set_field72(int64_t field72_) {
    field72 = field72_;
    __isset.field72 = true;
    return field72;
  }
  const  ::cpp2::Struct1& get_field73() const&;
   ::cpp2::Struct1 get_field73() &&;

  template <typename T_Struct5_field73_struct_setter>
   ::cpp2::Struct1& set_field73(T_Struct5_field73_struct_setter&& field73_) {
    field73 = std::forward<T_Struct5_field73_struct_setter>(field73_);
    __isset.field73 = true;
    return field73;
  }

  double get_field74() const {
    return field74;
  }

  double& set_field74(double field74_) {
    field74 = field74_;
    __isset.field74 = true;
    return field74;
  }
  const std::map<std::string, int16_t>& get_field75() const&;
  std::map<std::string, int16_t> get_field75() &&;

  template <typename T_Struct5_field75_struct_setter>
  std::map<std::string, int16_t>& set_field75(T_Struct5_field75_struct_setter&& field75_) {
    field75 = std::forward<T_Struct5_field75_struct_setter>(field75_);
    __isset.field75 = true;
    return field75;
  }

  const std::string& get_field76() const& {
    return field76;
  }

  std::string get_field76() && {
    return std::move(field76);
  }

  template <typename T_Struct5_field76_struct_setter>
  std::string& set_field76(T_Struct5_field76_struct_setter&& field76_) {
    field76 = std::forward<T_Struct5_field76_struct_setter>(field76_);
    __isset.field76 = true;
    return field76;
  }
  const std::map<int8_t,  ::cpp2::Struct3>& get_field77() const&;
  std::map<int8_t,  ::cpp2::Struct3> get_field77() &&;

  template <typename T_Struct5_field77_struct_setter>
  std::map<int8_t,  ::cpp2::Struct3>& set_field77(T_Struct5_field77_struct_setter&& field77_) {
    field77 = std::forward<T_Struct5_field77_struct_setter>(field77_);
    __isset.field77 = true;
    return field77;
  }
  const std::set<int16_t>& get_field78() const&;
  std::set<int16_t> get_field78() &&;

  template <typename T_Struct5_field78_struct_setter>
  std::set<int16_t>& set_field78(T_Struct5_field78_struct_setter&& field78_) {
    field78 = std::forward<T_Struct5_field78_struct_setter>(field78_);
    __isset.field78 = true;
    return field78;
  }
  const  ::cpp2::Struct2& get_field79() const&;
   ::cpp2::Struct2 get_field79() &&;

  template <typename T_Struct5_field79_struct_setter>
   ::cpp2::Struct2& set_field79(T_Struct5_field79_struct_setter&& field79_) {
    field79 = std::forward<T_Struct5_field79_struct_setter>(field79_);
    __isset.field79 = true;
    return field79;
  }

  int16_t get_field80() const {
    return field80;
  }

  int16_t& set_field80(int16_t field80_) {
    field80 = field80_;
    __isset.field80 = true;
    return field80;
  }
  const std::vector< ::cpp2::Struct0>& get_field81() const&;
  std::vector< ::cpp2::Struct0> get_field81() &&;

  template <typename T_Struct5_field81_struct_setter>
  std::vector< ::cpp2::Struct0>& set_field81(T_Struct5_field81_struct_setter&& field81_) {
    field81 = std::forward<T_Struct5_field81_struct_setter>(field81_);
    __isset.field81 = true;
    return field81;
  }
  const std::set<int8_t>& get_field82() const&;
  std::set<int8_t> get_field82() &&;

  template <typename T_Struct5_field82_struct_setter>
  std::set<int8_t>& set_field82(T_Struct5_field82_struct_setter&& field82_) {
    field82 = std::forward<T_Struct5_field82_struct_setter>(field82_);
    __isset.field82 = true;
    return field82;
  }
  const  ::cpp2::Struct1& get_field83() const&;
   ::cpp2::Struct1 get_field83() &&;

  template <typename T_Struct5_field83_struct_setter>
   ::cpp2::Struct1& set_field83(T_Struct5_field83_struct_setter&& field83_) {
    field83 = std::forward<T_Struct5_field83_struct_setter>(field83_);
    __isset.field83 = true;
    return field83;
  }
  const std::map<int64_t, int16_t>& get_field84() const&;
  std::map<int64_t, int16_t> get_field84() &&;

  template <typename T_Struct5_field84_struct_setter>
  std::map<int64_t, int16_t>& set_field84(T_Struct5_field84_struct_setter&& field84_) {
    field84 = std::forward<T_Struct5_field84_struct_setter>(field84_);
    __isset.field84 = true;
    return field84;
  }
  const std::set<int8_t>& get_field85() const&;
  std::set<int8_t> get_field85() &&;

  template <typename T_Struct5_field85_struct_setter>
  std::set<int8_t>& set_field85(T_Struct5_field85_struct_setter&& field85_) {
    field85 = std::forward<T_Struct5_field85_struct_setter>(field85_);
    __isset.field85 = true;
    return field85;
  }
  const  ::cpp2::Struct3& get_field86() const&;
   ::cpp2::Struct3 get_field86() &&;

  template <typename T_Struct5_field86_struct_setter>
   ::cpp2::Struct3& set_field86(T_Struct5_field86_struct_setter&& field86_) {
    field86 = std::forward<T_Struct5_field86_struct_setter>(field86_);
    __isset.field86 = true;
    return field86;
  }

  const std::string& get_field87() const& {
    return field87;
  }

  std::string get_field87() && {
    return std::move(field87);
  }

  template <typename T_Struct5_field87_struct_setter>
  std::string& set_field87(T_Struct5_field87_struct_setter&& field87_) {
    field87 = std::forward<T_Struct5_field87_struct_setter>(field87_);
    __isset.field87 = true;
    return field87;
  }
  const std::vector<int8_t>& get_field88() const&;
  std::vector<int8_t> get_field88() &&;

  template <typename T_Struct5_field88_struct_setter>
  std::vector<int8_t>& set_field88(T_Struct5_field88_struct_setter&& field88_) {
    field88 = std::forward<T_Struct5_field88_struct_setter>(field88_);
    __isset.field88 = true;
    return field88;
  }

  const std::string& get_field89() const& {
    return field89;
  }

  std::string get_field89() && {
    return std::move(field89);
  }

  template <typename T_Struct5_field89_struct_setter>
  std::string& set_field89(T_Struct5_field89_struct_setter&& field89_) {
    field89 = std::forward<T_Struct5_field89_struct_setter>(field89_);
    __isset.field89 = true;
    return field89;
  }
  const  ::cpp2::Struct1& get_field90() const&;
   ::cpp2::Struct1 get_field90() &&;

  template <typename T_Struct5_field90_struct_setter>
   ::cpp2::Struct1& set_field90(T_Struct5_field90_struct_setter&& field90_) {
    field90 = std::forward<T_Struct5_field90_struct_setter>(field90_);
    __isset.field90 = true;
    return field90;
  }
  const  ::cpp2::Struct2& get_field91() const&;
   ::cpp2::Struct2 get_field91() &&;

  template <typename T_Struct5_field91_struct_setter>
   ::cpp2::Struct2& set_field91(T_Struct5_field91_struct_setter&& field91_) {
    field91 = std::forward<T_Struct5_field91_struct_setter>(field91_);
    __isset.field91 = true;
    return field91;
  }

  bool get_field92() const {
    return field92;
  }

  bool& set_field92(bool field92_) {
    field92 = field92_;
    __isset.field92 = true;
    return field92;
  }
  const std::vector<std::vector<std::set<std::string>>>& get_field93() const&;
  std::vector<std::vector<std::set<std::string>>> get_field93() &&;

  template <typename T_Struct5_field93_struct_setter>
  std::vector<std::vector<std::set<std::string>>>& set_field93(T_Struct5_field93_struct_setter&& field93_) {
    field93 = std::forward<T_Struct5_field93_struct_setter>(field93_);
    __isset.field93 = true;
    return field93;
  }

  const std::string& get_field94() const& {
    return field94;
  }

  std::string get_field94() && {
    return std::move(field94);
  }

  template <typename T_Struct5_field94_struct_setter>
  std::string& set_field94(T_Struct5_field94_struct_setter&& field94_) {
    field94 = std::forward<T_Struct5_field94_struct_setter>(field94_);
    __isset.field94 = true;
    return field94;
  }

  float get_field95() const {
    return field95;
  }

  float& set_field95(float field95_) {
    field95 = field95_;
    __isset.field95 = true;
    return field95;
  }

  int16_t get_field96() const {
    return field96;
  }

  int16_t& set_field96(int16_t field96_) {
    field96 = field96_;
    __isset.field96 = true;
    return field96;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct5& a, Struct5& b);
extern template uint32_t Struct5::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct5::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct5::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct5::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct5::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct5::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct5::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct5::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct5>::clear( ::cpp2::Struct5* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct5>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct5>::write(Protocol* proto,  ::cpp2::Struct5 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct5>::read(Protocol* proto,  ::cpp2::Struct5* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct5>::serializedSize(Protocol const* proto,  ::cpp2::Struct5 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct5>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct5 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct6 : private apache::thrift::detail::st::ComparisonOperators<Struct6> {
 public:

  Struct6() :
      field3(0),
      field4(0),
      field5(0),
      field8(0),
      field9(0),
      field14(0),
      field17(0),
      field18(0),
      field19(0),
      field21(0),
      field24(0),
      field31(0),
      field33(0),
      field35(0),
      field41(0),
      field42(0),
      field44(0),
      field46(0),
      field48(0),
      field51(0),
      field54(0),
      field61(0),
      field62(0),
      field64(0),
      field68(0),
      field70(0),
      field71(0),
      field72(0),
      field75(0),
      field76(0),
      field78(0),
      field79(0),
      field81(0),
      field83(0),
      field85(0),
      field92(0),
      field93(0),
      field94(0),
      field97(0),
      field100(0) {}
  // FragileConstructor for use in initialization lists only

  Struct6(apache::thrift::FragileConstructor, std::set<float> field1__arg, std::set<std::vector< ::cpp2::Struct1>> field2__arg, bool field3__arg, int8_t field4__arg, int64_t field5__arg, std::vector<std::string> field6__arg, std::string field7__arg, int32_t field8__arg, int8_t field9__arg,  ::cpp2::Struct4 field10__arg, std::set<int8_t> field11__arg, std::map<bool, double> field12__arg, std::map<std::string, int16_t> field13__arg, int8_t field14__arg, std::vector< ::cpp2::Struct3> field15__arg, std::vector< ::cpp2::Struct3> field16__arg, float field17__arg, int8_t field18__arg, double field19__arg, std::vector< ::cpp2::Struct0> field20__arg, bool field21__arg, std::map<std::vector<bool>, bool> field22__arg, std::map<int16_t, int32_t> field23__arg, int64_t field24__arg, std::set<std::set<std::string>> field25__arg, std::string field26__arg, std::map<std::string,  ::cpp2::Struct3> field27__arg, std::map<std::vector<std::map<float, int16_t>>, std::string> field28__arg, std::map<int32_t, int64_t> field29__arg, std::set< ::cpp2::Struct3> field30__arg, int8_t field31__arg, std::vector<float> field32__arg, int8_t field33__arg, std::string field34__arg, int32_t field35__arg, std::set<int8_t> field36__arg, std::vector<std::vector<std::map<float, int16_t>>> field37__arg, std::vector<std::string> field38__arg, std::string field39__arg, std::set<int16_t> field40__arg, double field41__arg, double field42__arg, std::map<double, int32_t> field43__arg, double field44__arg, std::map< ::cpp2::Struct5, std::map< ::cpp2::Struct1, float>> field45__arg, bool field46__arg, std::string field47__arg, int32_t field48__arg,  ::cpp2::Struct1 field49__arg, std::set< ::cpp2::Struct0> field50__arg, int8_t field51__arg, std::set<std::string> field52__arg, std::vector< ::cpp2::Struct1> field53__arg, double field54__arg, std::map<std::vector<int64_t>, std::vector<std::string>> field55__arg, std::string field56__arg, std::map<double, int64_t> field57__arg,  ::cpp2::Struct3 field58__arg, std::map<int8_t, int32_t> field59__arg, std::map<double, std::map<std::string, int32_t>> field60__arg, int64_t field61__arg, int8_t field62__arg,  ::cpp2::Struct0 field63__arg, bool field64__arg, std::set<int8_t> field65__arg, std::set<int8_t> field66__arg,  ::cpp2::Struct0 field67__arg, int64_t field68__arg, std::map<int16_t,  ::cpp2::Struct2> field69__arg, bool field70__arg, int64_t field71__arg, int64_t field72__arg,  ::cpp2::Struct3 field73__arg,  ::cpp2::Struct4 field74__arg, int8_t field75__arg, bool field76__arg,  ::cpp2::Struct0 field77__arg, double field78__arg, int32_t field79__arg,  ::cpp2::Struct1 field80__arg, bool field81__arg, std::map<int64_t, int16_t> field82__arg, float field83__arg, std::set<int16_t> field84__arg, double field85__arg, std::string field86__arg, std::set<int32_t> field87__arg, std::vector<int8_t> field88__arg, std::string field89__arg,  ::cpp2::Struct3 field90__arg,  ::cpp2::Struct0 field91__arg, int32_t field92__arg, double field93__arg, int8_t field94__arg, std::set<float> field95__arg,  ::cpp2::Struct3 field96__arg, float field97__arg,  ::cpp2::Struct0 field98__arg, std::vector<int64_t> field99__arg, int16_t field100__arg, std::map<bool, std::string> field101__arg, std::map<int8_t, float> field102__arg,  ::cpp2::Struct1 field103__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)),
      field97(std::move(field97__arg)),
      field98(std::move(field98__arg)),
      field99(std::move(field99__arg)),
      field100(std::move(field100__arg)),
      field101(std::move(field101__arg)),
      field102(std::move(field102__arg)),
      field103(std::move(field103__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
    __isset.field97 = true;
    __isset.field98 = true;
    __isset.field99 = true;
    __isset.field100 = true;
    __isset.field101 = true;
    __isset.field102 = true;
    __isset.field103 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<97, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field97 = arg.move();
    __isset.field97 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<98, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field98 = arg.move();
    __isset.field98 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<99, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field99 = arg.move();
    __isset.field99 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field100 = arg.move();
    __isset.field100 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field101 = arg.move();
    __isset.field101 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<102, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field102 = arg.move();
    __isset.field102 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct6(::apache::thrift::detail::argument_wrapper<103, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct6(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field103 = arg.move();
    __isset.field103 = true;
  }

  Struct6(Struct6&&) = default;

  Struct6(const Struct6&) = default;

  Struct6& operator=(Struct6&&) = default;

  Struct6& operator=(const Struct6&) = default;
  void __clear();

  virtual ~Struct6() {}

  std::set<float> field1;
  std::set<std::vector< ::cpp2::Struct1>> field2;
  bool field3;
  int8_t field4;
  int64_t field5;
  std::vector<std::string> field6;
  std::string field7;
  int32_t field8;
  int8_t field9;
   ::cpp2::Struct4 field10;
  std::set<int8_t> field11;
  std::map<bool, double> field12;
  std::map<std::string, int16_t> field13;
  int8_t field14;
  std::vector< ::cpp2::Struct3> field15;
  std::vector< ::cpp2::Struct3> field16;
  float field17;
  int8_t field18;
  double field19;
  std::vector< ::cpp2::Struct0> field20;
  bool field21;
  std::map<std::vector<bool>, bool> field22;
  std::map<int16_t, int32_t> field23;
  int64_t field24;
  std::set<std::set<std::string>> field25;
  std::string field26;
  std::map<std::string,  ::cpp2::Struct3> field27;
  std::map<std::vector<std::map<float, int16_t>>, std::string> field28;
  std::map<int32_t, int64_t> field29;
  std::set< ::cpp2::Struct3> field30;
  int8_t field31;
  std::vector<float> field32;
  int8_t field33;
  std::string field34;
  int32_t field35;
  std::set<int8_t> field36;
  std::vector<std::vector<std::map<float, int16_t>>> field37;
  std::vector<std::string> field38;
  std::string field39;
  std::set<int16_t> field40;
  double field41;
  double field42;
  std::map<double, int32_t> field43;
  double field44;
  std::map< ::cpp2::Struct5, std::map< ::cpp2::Struct1, float>> field45;
  bool field46;
  std::string field47;
  int32_t field48;
   ::cpp2::Struct1 field49;
  std::set< ::cpp2::Struct0> field50;
  int8_t field51;
  std::set<std::string> field52;
  std::vector< ::cpp2::Struct1> field53;
  double field54;
  std::map<std::vector<int64_t>, std::vector<std::string>> field55;
  std::string field56;
  std::map<double, int64_t> field57;
   ::cpp2::Struct3 field58;
  std::map<int8_t, int32_t> field59;
  std::map<double, std::map<std::string, int32_t>> field60;
  int64_t field61;
  int8_t field62;
   ::cpp2::Struct0 field63;
  bool field64;
  std::set<int8_t> field65;
  std::set<int8_t> field66;
   ::cpp2::Struct0 field67;
  int64_t field68;
  std::map<int16_t,  ::cpp2::Struct2> field69;
  bool field70;
  int64_t field71;
  int64_t field72;
   ::cpp2::Struct3 field73;
   ::cpp2::Struct4 field74;
  int8_t field75;
  bool field76;
   ::cpp2::Struct0 field77;
  double field78;
  int32_t field79;
   ::cpp2::Struct1 field80;
  bool field81;
  std::map<int64_t, int16_t> field82;
  float field83;
  std::set<int16_t> field84;
  double field85;
  std::string field86;
  std::set<int32_t> field87;
  std::vector<int8_t> field88;
  std::string field89;
   ::cpp2::Struct3 field90;
   ::cpp2::Struct0 field91;
  int32_t field92;
  double field93;
  int8_t field94;
  std::set<float> field95;
   ::cpp2::Struct3 field96;
  float field97;
   ::cpp2::Struct0 field98;
  std::vector<int64_t> field99;
  int16_t field100;
  std::map<bool, std::string> field101;
  std::map<int8_t, float> field102;
   ::cpp2::Struct1 field103;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
      field97 = false;
      field98 = false;
      field99 = false;
      field100 = false;
      field101 = false;
      field102 = false;
      field103 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
    bool field97 = false;
    bool field98 = false;
    bool field99 = false;
    bool field100 = false;
    bool field101 = false;
    bool field102 = false;
    bool field103 = false;
  } __isset;
  bool operator==(const Struct6& rhs) const;

  bool operator < (const Struct6& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    if (!(field97 == rhs.field97)) {
      return field97 < rhs.field97;
    }
    if (!(field98 == rhs.field98)) {
      return field98 < rhs.field98;
    }
    if (!(field99 == rhs.field99)) {
      return field99 < rhs.field99;
    }
    if (!(field100 == rhs.field100)) {
      return field100 < rhs.field100;
    }
    if (!(field101 == rhs.field101)) {
      return field101 < rhs.field101;
    }
    if (!(field102 == rhs.field102)) {
      return field102 < rhs.field102;
    }
    if (!(field103 == rhs.field103)) {
      return field103 < rhs.field103;
    }
    (void)rhs;
    return false;
  }
  const std::set<float>& get_field1() const&;
  std::set<float> get_field1() &&;

  template <typename T_Struct6_field1_struct_setter>
  std::set<float>& set_field1(T_Struct6_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct6_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const std::set<std::vector< ::cpp2::Struct1>>& get_field2() const&;
  std::set<std::vector< ::cpp2::Struct1>> get_field2() &&;

  template <typename T_Struct6_field2_struct_setter>
  std::set<std::vector< ::cpp2::Struct1>>& set_field2(T_Struct6_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct6_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  bool get_field3() const {
    return field3;
  }

  bool& set_field3(bool field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }

  int8_t get_field4() const {
    return field4;
  }

  int8_t& set_field4(int8_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }

  int64_t get_field5() const {
    return field5;
  }

  int64_t& set_field5(int64_t field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }
  const std::vector<std::string>& get_field6() const&;
  std::vector<std::string> get_field6() &&;

  template <typename T_Struct6_field6_struct_setter>
  std::vector<std::string>& set_field6(T_Struct6_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct6_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }

  const std::string& get_field7() const& {
    return field7;
  }

  std::string get_field7() && {
    return std::move(field7);
  }

  template <typename T_Struct6_field7_struct_setter>
  std::string& set_field7(T_Struct6_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct6_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }

  int32_t get_field8() const {
    return field8;
  }

  int32_t& set_field8(int32_t field8_) {
    field8 = field8_;
    __isset.field8 = true;
    return field8;
  }

  int8_t get_field9() const {
    return field9;
  }

  int8_t& set_field9(int8_t field9_) {
    field9 = field9_;
    __isset.field9 = true;
    return field9;
  }
  const  ::cpp2::Struct4& get_field10() const&;
   ::cpp2::Struct4 get_field10() &&;

  template <typename T_Struct6_field10_struct_setter>
   ::cpp2::Struct4& set_field10(T_Struct6_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct6_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }
  const std::set<int8_t>& get_field11() const&;
  std::set<int8_t> get_field11() &&;

  template <typename T_Struct6_field11_struct_setter>
  std::set<int8_t>& set_field11(T_Struct6_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct6_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }
  const std::map<bool, double>& get_field12() const&;
  std::map<bool, double> get_field12() &&;

  template <typename T_Struct6_field12_struct_setter>
  std::map<bool, double>& set_field12(T_Struct6_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct6_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }
  const std::map<std::string, int16_t>& get_field13() const&;
  std::map<std::string, int16_t> get_field13() &&;

  template <typename T_Struct6_field13_struct_setter>
  std::map<std::string, int16_t>& set_field13(T_Struct6_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct6_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }

  int8_t get_field14() const {
    return field14;
  }

  int8_t& set_field14(int8_t field14_) {
    field14 = field14_;
    __isset.field14 = true;
    return field14;
  }
  const std::vector< ::cpp2::Struct3>& get_field15() const&;
  std::vector< ::cpp2::Struct3> get_field15() &&;

  template <typename T_Struct6_field15_struct_setter>
  std::vector< ::cpp2::Struct3>& set_field15(T_Struct6_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct6_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }
  const std::vector< ::cpp2::Struct3>& get_field16() const&;
  std::vector< ::cpp2::Struct3> get_field16() &&;

  template <typename T_Struct6_field16_struct_setter>
  std::vector< ::cpp2::Struct3>& set_field16(T_Struct6_field16_struct_setter&& field16_) {
    field16 = std::forward<T_Struct6_field16_struct_setter>(field16_);
    __isset.field16 = true;
    return field16;
  }

  float get_field17() const {
    return field17;
  }

  float& set_field17(float field17_) {
    field17 = field17_;
    __isset.field17 = true;
    return field17;
  }

  int8_t get_field18() const {
    return field18;
  }

  int8_t& set_field18(int8_t field18_) {
    field18 = field18_;
    __isset.field18 = true;
    return field18;
  }

  double get_field19() const {
    return field19;
  }

  double& set_field19(double field19_) {
    field19 = field19_;
    __isset.field19 = true;
    return field19;
  }
  const std::vector< ::cpp2::Struct0>& get_field20() const&;
  std::vector< ::cpp2::Struct0> get_field20() &&;

  template <typename T_Struct6_field20_struct_setter>
  std::vector< ::cpp2::Struct0>& set_field20(T_Struct6_field20_struct_setter&& field20_) {
    field20 = std::forward<T_Struct6_field20_struct_setter>(field20_);
    __isset.field20 = true;
    return field20;
  }

  bool get_field21() const {
    return field21;
  }

  bool& set_field21(bool field21_) {
    field21 = field21_;
    __isset.field21 = true;
    return field21;
  }
  const std::map<std::vector<bool>, bool>& get_field22() const&;
  std::map<std::vector<bool>, bool> get_field22() &&;

  template <typename T_Struct6_field22_struct_setter>
  std::map<std::vector<bool>, bool>& set_field22(T_Struct6_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct6_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }
  const std::map<int16_t, int32_t>& get_field23() const&;
  std::map<int16_t, int32_t> get_field23() &&;

  template <typename T_Struct6_field23_struct_setter>
  std::map<int16_t, int32_t>& set_field23(T_Struct6_field23_struct_setter&& field23_) {
    field23 = std::forward<T_Struct6_field23_struct_setter>(field23_);
    __isset.field23 = true;
    return field23;
  }

  int64_t get_field24() const {
    return field24;
  }

  int64_t& set_field24(int64_t field24_) {
    field24 = field24_;
    __isset.field24 = true;
    return field24;
  }
  const std::set<std::set<std::string>>& get_field25() const&;
  std::set<std::set<std::string>> get_field25() &&;

  template <typename T_Struct6_field25_struct_setter>
  std::set<std::set<std::string>>& set_field25(T_Struct6_field25_struct_setter&& field25_) {
    field25 = std::forward<T_Struct6_field25_struct_setter>(field25_);
    __isset.field25 = true;
    return field25;
  }

  const std::string& get_field26() const& {
    return field26;
  }

  std::string get_field26() && {
    return std::move(field26);
  }

  template <typename T_Struct6_field26_struct_setter>
  std::string& set_field26(T_Struct6_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct6_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }
  const std::map<std::string,  ::cpp2::Struct3>& get_field27() const&;
  std::map<std::string,  ::cpp2::Struct3> get_field27() &&;

  template <typename T_Struct6_field27_struct_setter>
  std::map<std::string,  ::cpp2::Struct3>& set_field27(T_Struct6_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct6_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }
  const std::map<std::vector<std::map<float, int16_t>>, std::string>& get_field28() const&;
  std::map<std::vector<std::map<float, int16_t>>, std::string> get_field28() &&;

  template <typename T_Struct6_field28_struct_setter>
  std::map<std::vector<std::map<float, int16_t>>, std::string>& set_field28(T_Struct6_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct6_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }
  const std::map<int32_t, int64_t>& get_field29() const&;
  std::map<int32_t, int64_t> get_field29() &&;

  template <typename T_Struct6_field29_struct_setter>
  std::map<int32_t, int64_t>& set_field29(T_Struct6_field29_struct_setter&& field29_) {
    field29 = std::forward<T_Struct6_field29_struct_setter>(field29_);
    __isset.field29 = true;
    return field29;
  }
  const std::set< ::cpp2::Struct3>& get_field30() const&;
  std::set< ::cpp2::Struct3> get_field30() &&;

  template <typename T_Struct6_field30_struct_setter>
  std::set< ::cpp2::Struct3>& set_field30(T_Struct6_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct6_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }

  int8_t get_field31() const {
    return field31;
  }

  int8_t& set_field31(int8_t field31_) {
    field31 = field31_;
    __isset.field31 = true;
    return field31;
  }
  const std::vector<float>& get_field32() const&;
  std::vector<float> get_field32() &&;

  template <typename T_Struct6_field32_struct_setter>
  std::vector<float>& set_field32(T_Struct6_field32_struct_setter&& field32_) {
    field32 = std::forward<T_Struct6_field32_struct_setter>(field32_);
    __isset.field32 = true;
    return field32;
  }

  int8_t get_field33() const {
    return field33;
  }

  int8_t& set_field33(int8_t field33_) {
    field33 = field33_;
    __isset.field33 = true;
    return field33;
  }

  const std::string& get_field34() const& {
    return field34;
  }

  std::string get_field34() && {
    return std::move(field34);
  }

  template <typename T_Struct6_field34_struct_setter>
  std::string& set_field34(T_Struct6_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct6_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }

  int32_t get_field35() const {
    return field35;
  }

  int32_t& set_field35(int32_t field35_) {
    field35 = field35_;
    __isset.field35 = true;
    return field35;
  }
  const std::set<int8_t>& get_field36() const&;
  std::set<int8_t> get_field36() &&;

  template <typename T_Struct6_field36_struct_setter>
  std::set<int8_t>& set_field36(T_Struct6_field36_struct_setter&& field36_) {
    field36 = std::forward<T_Struct6_field36_struct_setter>(field36_);
    __isset.field36 = true;
    return field36;
  }
  const std::vector<std::vector<std::map<float, int16_t>>>& get_field37() const&;
  std::vector<std::vector<std::map<float, int16_t>>> get_field37() &&;

  template <typename T_Struct6_field37_struct_setter>
  std::vector<std::vector<std::map<float, int16_t>>>& set_field37(T_Struct6_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct6_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }
  const std::vector<std::string>& get_field38() const&;
  std::vector<std::string> get_field38() &&;

  template <typename T_Struct6_field38_struct_setter>
  std::vector<std::string>& set_field38(T_Struct6_field38_struct_setter&& field38_) {
    field38 = std::forward<T_Struct6_field38_struct_setter>(field38_);
    __isset.field38 = true;
    return field38;
  }

  const std::string& get_field39() const& {
    return field39;
  }

  std::string get_field39() && {
    return std::move(field39);
  }

  template <typename T_Struct6_field39_struct_setter>
  std::string& set_field39(T_Struct6_field39_struct_setter&& field39_) {
    field39 = std::forward<T_Struct6_field39_struct_setter>(field39_);
    __isset.field39 = true;
    return field39;
  }
  const std::set<int16_t>& get_field40() const&;
  std::set<int16_t> get_field40() &&;

  template <typename T_Struct6_field40_struct_setter>
  std::set<int16_t>& set_field40(T_Struct6_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct6_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }

  double get_field41() const {
    return field41;
  }

  double& set_field41(double field41_) {
    field41 = field41_;
    __isset.field41 = true;
    return field41;
  }

  double get_field42() const {
    return field42;
  }

  double& set_field42(double field42_) {
    field42 = field42_;
    __isset.field42 = true;
    return field42;
  }
  const std::map<double, int32_t>& get_field43() const&;
  std::map<double, int32_t> get_field43() &&;

  template <typename T_Struct6_field43_struct_setter>
  std::map<double, int32_t>& set_field43(T_Struct6_field43_struct_setter&& field43_) {
    field43 = std::forward<T_Struct6_field43_struct_setter>(field43_);
    __isset.field43 = true;
    return field43;
  }

  double get_field44() const {
    return field44;
  }

  double& set_field44(double field44_) {
    field44 = field44_;
    __isset.field44 = true;
    return field44;
  }
  const std::map< ::cpp2::Struct5, std::map< ::cpp2::Struct1, float>>& get_field45() const&;
  std::map< ::cpp2::Struct5, std::map< ::cpp2::Struct1, float>> get_field45() &&;

  template <typename T_Struct6_field45_struct_setter>
  std::map< ::cpp2::Struct5, std::map< ::cpp2::Struct1, float>>& set_field45(T_Struct6_field45_struct_setter&& field45_) {
    field45 = std::forward<T_Struct6_field45_struct_setter>(field45_);
    __isset.field45 = true;
    return field45;
  }

  bool get_field46() const {
    return field46;
  }

  bool& set_field46(bool field46_) {
    field46 = field46_;
    __isset.field46 = true;
    return field46;
  }

  const std::string& get_field47() const& {
    return field47;
  }

  std::string get_field47() && {
    return std::move(field47);
  }

  template <typename T_Struct6_field47_struct_setter>
  std::string& set_field47(T_Struct6_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct6_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }

  int32_t get_field48() const {
    return field48;
  }

  int32_t& set_field48(int32_t field48_) {
    field48 = field48_;
    __isset.field48 = true;
    return field48;
  }
  const  ::cpp2::Struct1& get_field49() const&;
   ::cpp2::Struct1 get_field49() &&;

  template <typename T_Struct6_field49_struct_setter>
   ::cpp2::Struct1& set_field49(T_Struct6_field49_struct_setter&& field49_) {
    field49 = std::forward<T_Struct6_field49_struct_setter>(field49_);
    __isset.field49 = true;
    return field49;
  }
  const std::set< ::cpp2::Struct0>& get_field50() const&;
  std::set< ::cpp2::Struct0> get_field50() &&;

  template <typename T_Struct6_field50_struct_setter>
  std::set< ::cpp2::Struct0>& set_field50(T_Struct6_field50_struct_setter&& field50_) {
    field50 = std::forward<T_Struct6_field50_struct_setter>(field50_);
    __isset.field50 = true;
    return field50;
  }

  int8_t get_field51() const {
    return field51;
  }

  int8_t& set_field51(int8_t field51_) {
    field51 = field51_;
    __isset.field51 = true;
    return field51;
  }
  const std::set<std::string>& get_field52() const&;
  std::set<std::string> get_field52() &&;

  template <typename T_Struct6_field52_struct_setter>
  std::set<std::string>& set_field52(T_Struct6_field52_struct_setter&& field52_) {
    field52 = std::forward<T_Struct6_field52_struct_setter>(field52_);
    __isset.field52 = true;
    return field52;
  }
  const std::vector< ::cpp2::Struct1>& get_field53() const&;
  std::vector< ::cpp2::Struct1> get_field53() &&;

  template <typename T_Struct6_field53_struct_setter>
  std::vector< ::cpp2::Struct1>& set_field53(T_Struct6_field53_struct_setter&& field53_) {
    field53 = std::forward<T_Struct6_field53_struct_setter>(field53_);
    __isset.field53 = true;
    return field53;
  }

  double get_field54() const {
    return field54;
  }

  double& set_field54(double field54_) {
    field54 = field54_;
    __isset.field54 = true;
    return field54;
  }
  const std::map<std::vector<int64_t>, std::vector<std::string>>& get_field55() const&;
  std::map<std::vector<int64_t>, std::vector<std::string>> get_field55() &&;

  template <typename T_Struct6_field55_struct_setter>
  std::map<std::vector<int64_t>, std::vector<std::string>>& set_field55(T_Struct6_field55_struct_setter&& field55_) {
    field55 = std::forward<T_Struct6_field55_struct_setter>(field55_);
    __isset.field55 = true;
    return field55;
  }

  const std::string& get_field56() const& {
    return field56;
  }

  std::string get_field56() && {
    return std::move(field56);
  }

  template <typename T_Struct6_field56_struct_setter>
  std::string& set_field56(T_Struct6_field56_struct_setter&& field56_) {
    field56 = std::forward<T_Struct6_field56_struct_setter>(field56_);
    __isset.field56 = true;
    return field56;
  }
  const std::map<double, int64_t>& get_field57() const&;
  std::map<double, int64_t> get_field57() &&;

  template <typename T_Struct6_field57_struct_setter>
  std::map<double, int64_t>& set_field57(T_Struct6_field57_struct_setter&& field57_) {
    field57 = std::forward<T_Struct6_field57_struct_setter>(field57_);
    __isset.field57 = true;
    return field57;
  }
  const  ::cpp2::Struct3& get_field58() const&;
   ::cpp2::Struct3 get_field58() &&;

  template <typename T_Struct6_field58_struct_setter>
   ::cpp2::Struct3& set_field58(T_Struct6_field58_struct_setter&& field58_) {
    field58 = std::forward<T_Struct6_field58_struct_setter>(field58_);
    __isset.field58 = true;
    return field58;
  }
  const std::map<int8_t, int32_t>& get_field59() const&;
  std::map<int8_t, int32_t> get_field59() &&;

  template <typename T_Struct6_field59_struct_setter>
  std::map<int8_t, int32_t>& set_field59(T_Struct6_field59_struct_setter&& field59_) {
    field59 = std::forward<T_Struct6_field59_struct_setter>(field59_);
    __isset.field59 = true;
    return field59;
  }
  const std::map<double, std::map<std::string, int32_t>>& get_field60() const&;
  std::map<double, std::map<std::string, int32_t>> get_field60() &&;

  template <typename T_Struct6_field60_struct_setter>
  std::map<double, std::map<std::string, int32_t>>& set_field60(T_Struct6_field60_struct_setter&& field60_) {
    field60 = std::forward<T_Struct6_field60_struct_setter>(field60_);
    __isset.field60 = true;
    return field60;
  }

  int64_t get_field61() const {
    return field61;
  }

  int64_t& set_field61(int64_t field61_) {
    field61 = field61_;
    __isset.field61 = true;
    return field61;
  }

  int8_t get_field62() const {
    return field62;
  }

  int8_t& set_field62(int8_t field62_) {
    field62 = field62_;
    __isset.field62 = true;
    return field62;
  }
  const  ::cpp2::Struct0& get_field63() const&;
   ::cpp2::Struct0 get_field63() &&;

  template <typename T_Struct6_field63_struct_setter>
   ::cpp2::Struct0& set_field63(T_Struct6_field63_struct_setter&& field63_) {
    field63 = std::forward<T_Struct6_field63_struct_setter>(field63_);
    __isset.field63 = true;
    return field63;
  }

  bool get_field64() const {
    return field64;
  }

  bool& set_field64(bool field64_) {
    field64 = field64_;
    __isset.field64 = true;
    return field64;
  }
  const std::set<int8_t>& get_field65() const&;
  std::set<int8_t> get_field65() &&;

  template <typename T_Struct6_field65_struct_setter>
  std::set<int8_t>& set_field65(T_Struct6_field65_struct_setter&& field65_) {
    field65 = std::forward<T_Struct6_field65_struct_setter>(field65_);
    __isset.field65 = true;
    return field65;
  }
  const std::set<int8_t>& get_field66() const&;
  std::set<int8_t> get_field66() &&;

  template <typename T_Struct6_field66_struct_setter>
  std::set<int8_t>& set_field66(T_Struct6_field66_struct_setter&& field66_) {
    field66 = std::forward<T_Struct6_field66_struct_setter>(field66_);
    __isset.field66 = true;
    return field66;
  }
  const  ::cpp2::Struct0& get_field67() const&;
   ::cpp2::Struct0 get_field67() &&;

  template <typename T_Struct6_field67_struct_setter>
   ::cpp2::Struct0& set_field67(T_Struct6_field67_struct_setter&& field67_) {
    field67 = std::forward<T_Struct6_field67_struct_setter>(field67_);
    __isset.field67 = true;
    return field67;
  }

  int64_t get_field68() const {
    return field68;
  }

  int64_t& set_field68(int64_t field68_) {
    field68 = field68_;
    __isset.field68 = true;
    return field68;
  }
  const std::map<int16_t,  ::cpp2::Struct2>& get_field69() const&;
  std::map<int16_t,  ::cpp2::Struct2> get_field69() &&;

  template <typename T_Struct6_field69_struct_setter>
  std::map<int16_t,  ::cpp2::Struct2>& set_field69(T_Struct6_field69_struct_setter&& field69_) {
    field69 = std::forward<T_Struct6_field69_struct_setter>(field69_);
    __isset.field69 = true;
    return field69;
  }

  bool get_field70() const {
    return field70;
  }

  bool& set_field70(bool field70_) {
    field70 = field70_;
    __isset.field70 = true;
    return field70;
  }

  int64_t get_field71() const {
    return field71;
  }

  int64_t& set_field71(int64_t field71_) {
    field71 = field71_;
    __isset.field71 = true;
    return field71;
  }

  int64_t get_field72() const {
    return field72;
  }

  int64_t& set_field72(int64_t field72_) {
    field72 = field72_;
    __isset.field72 = true;
    return field72;
  }
  const  ::cpp2::Struct3& get_field73() const&;
   ::cpp2::Struct3 get_field73() &&;

  template <typename T_Struct6_field73_struct_setter>
   ::cpp2::Struct3& set_field73(T_Struct6_field73_struct_setter&& field73_) {
    field73 = std::forward<T_Struct6_field73_struct_setter>(field73_);
    __isset.field73 = true;
    return field73;
  }
  const  ::cpp2::Struct4& get_field74() const&;
   ::cpp2::Struct4 get_field74() &&;

  template <typename T_Struct6_field74_struct_setter>
   ::cpp2::Struct4& set_field74(T_Struct6_field74_struct_setter&& field74_) {
    field74 = std::forward<T_Struct6_field74_struct_setter>(field74_);
    __isset.field74 = true;
    return field74;
  }

  int8_t get_field75() const {
    return field75;
  }

  int8_t& set_field75(int8_t field75_) {
    field75 = field75_;
    __isset.field75 = true;
    return field75;
  }

  bool get_field76() const {
    return field76;
  }

  bool& set_field76(bool field76_) {
    field76 = field76_;
    __isset.field76 = true;
    return field76;
  }
  const  ::cpp2::Struct0& get_field77() const&;
   ::cpp2::Struct0 get_field77() &&;

  template <typename T_Struct6_field77_struct_setter>
   ::cpp2::Struct0& set_field77(T_Struct6_field77_struct_setter&& field77_) {
    field77 = std::forward<T_Struct6_field77_struct_setter>(field77_);
    __isset.field77 = true;
    return field77;
  }

  double get_field78() const {
    return field78;
  }

  double& set_field78(double field78_) {
    field78 = field78_;
    __isset.field78 = true;
    return field78;
  }

  int32_t get_field79() const {
    return field79;
  }

  int32_t& set_field79(int32_t field79_) {
    field79 = field79_;
    __isset.field79 = true;
    return field79;
  }
  const  ::cpp2::Struct1& get_field80() const&;
   ::cpp2::Struct1 get_field80() &&;

  template <typename T_Struct6_field80_struct_setter>
   ::cpp2::Struct1& set_field80(T_Struct6_field80_struct_setter&& field80_) {
    field80 = std::forward<T_Struct6_field80_struct_setter>(field80_);
    __isset.field80 = true;
    return field80;
  }

  bool get_field81() const {
    return field81;
  }

  bool& set_field81(bool field81_) {
    field81 = field81_;
    __isset.field81 = true;
    return field81;
  }
  const std::map<int64_t, int16_t>& get_field82() const&;
  std::map<int64_t, int16_t> get_field82() &&;

  template <typename T_Struct6_field82_struct_setter>
  std::map<int64_t, int16_t>& set_field82(T_Struct6_field82_struct_setter&& field82_) {
    field82 = std::forward<T_Struct6_field82_struct_setter>(field82_);
    __isset.field82 = true;
    return field82;
  }

  float get_field83() const {
    return field83;
  }

  float& set_field83(float field83_) {
    field83 = field83_;
    __isset.field83 = true;
    return field83;
  }
  const std::set<int16_t>& get_field84() const&;
  std::set<int16_t> get_field84() &&;

  template <typename T_Struct6_field84_struct_setter>
  std::set<int16_t>& set_field84(T_Struct6_field84_struct_setter&& field84_) {
    field84 = std::forward<T_Struct6_field84_struct_setter>(field84_);
    __isset.field84 = true;
    return field84;
  }

  double get_field85() const {
    return field85;
  }

  double& set_field85(double field85_) {
    field85 = field85_;
    __isset.field85 = true;
    return field85;
  }

  const std::string& get_field86() const& {
    return field86;
  }

  std::string get_field86() && {
    return std::move(field86);
  }

  template <typename T_Struct6_field86_struct_setter>
  std::string& set_field86(T_Struct6_field86_struct_setter&& field86_) {
    field86 = std::forward<T_Struct6_field86_struct_setter>(field86_);
    __isset.field86 = true;
    return field86;
  }
  const std::set<int32_t>& get_field87() const&;
  std::set<int32_t> get_field87() &&;

  template <typename T_Struct6_field87_struct_setter>
  std::set<int32_t>& set_field87(T_Struct6_field87_struct_setter&& field87_) {
    field87 = std::forward<T_Struct6_field87_struct_setter>(field87_);
    __isset.field87 = true;
    return field87;
  }
  const std::vector<int8_t>& get_field88() const&;
  std::vector<int8_t> get_field88() &&;

  template <typename T_Struct6_field88_struct_setter>
  std::vector<int8_t>& set_field88(T_Struct6_field88_struct_setter&& field88_) {
    field88 = std::forward<T_Struct6_field88_struct_setter>(field88_);
    __isset.field88 = true;
    return field88;
  }

  const std::string& get_field89() const& {
    return field89;
  }

  std::string get_field89() && {
    return std::move(field89);
  }

  template <typename T_Struct6_field89_struct_setter>
  std::string& set_field89(T_Struct6_field89_struct_setter&& field89_) {
    field89 = std::forward<T_Struct6_field89_struct_setter>(field89_);
    __isset.field89 = true;
    return field89;
  }
  const  ::cpp2::Struct3& get_field90() const&;
   ::cpp2::Struct3 get_field90() &&;

  template <typename T_Struct6_field90_struct_setter>
   ::cpp2::Struct3& set_field90(T_Struct6_field90_struct_setter&& field90_) {
    field90 = std::forward<T_Struct6_field90_struct_setter>(field90_);
    __isset.field90 = true;
    return field90;
  }
  const  ::cpp2::Struct0& get_field91() const&;
   ::cpp2::Struct0 get_field91() &&;

  template <typename T_Struct6_field91_struct_setter>
   ::cpp2::Struct0& set_field91(T_Struct6_field91_struct_setter&& field91_) {
    field91 = std::forward<T_Struct6_field91_struct_setter>(field91_);
    __isset.field91 = true;
    return field91;
  }

  int32_t get_field92() const {
    return field92;
  }

  int32_t& set_field92(int32_t field92_) {
    field92 = field92_;
    __isset.field92 = true;
    return field92;
  }

  double get_field93() const {
    return field93;
  }

  double& set_field93(double field93_) {
    field93 = field93_;
    __isset.field93 = true;
    return field93;
  }

  int8_t get_field94() const {
    return field94;
  }

  int8_t& set_field94(int8_t field94_) {
    field94 = field94_;
    __isset.field94 = true;
    return field94;
  }
  const std::set<float>& get_field95() const&;
  std::set<float> get_field95() &&;

  template <typename T_Struct6_field95_struct_setter>
  std::set<float>& set_field95(T_Struct6_field95_struct_setter&& field95_) {
    field95 = std::forward<T_Struct6_field95_struct_setter>(field95_);
    __isset.field95 = true;
    return field95;
  }
  const  ::cpp2::Struct3& get_field96() const&;
   ::cpp2::Struct3 get_field96() &&;

  template <typename T_Struct6_field96_struct_setter>
   ::cpp2::Struct3& set_field96(T_Struct6_field96_struct_setter&& field96_) {
    field96 = std::forward<T_Struct6_field96_struct_setter>(field96_);
    __isset.field96 = true;
    return field96;
  }

  float get_field97() const {
    return field97;
  }

  float& set_field97(float field97_) {
    field97 = field97_;
    __isset.field97 = true;
    return field97;
  }
  const  ::cpp2::Struct0& get_field98() const&;
   ::cpp2::Struct0 get_field98() &&;

  template <typename T_Struct6_field98_struct_setter>
   ::cpp2::Struct0& set_field98(T_Struct6_field98_struct_setter&& field98_) {
    field98 = std::forward<T_Struct6_field98_struct_setter>(field98_);
    __isset.field98 = true;
    return field98;
  }
  const std::vector<int64_t>& get_field99() const&;
  std::vector<int64_t> get_field99() &&;

  template <typename T_Struct6_field99_struct_setter>
  std::vector<int64_t>& set_field99(T_Struct6_field99_struct_setter&& field99_) {
    field99 = std::forward<T_Struct6_field99_struct_setter>(field99_);
    __isset.field99 = true;
    return field99;
  }

  int16_t get_field100() const {
    return field100;
  }

  int16_t& set_field100(int16_t field100_) {
    field100 = field100_;
    __isset.field100 = true;
    return field100;
  }
  const std::map<bool, std::string>& get_field101() const&;
  std::map<bool, std::string> get_field101() &&;

  template <typename T_Struct6_field101_struct_setter>
  std::map<bool, std::string>& set_field101(T_Struct6_field101_struct_setter&& field101_) {
    field101 = std::forward<T_Struct6_field101_struct_setter>(field101_);
    __isset.field101 = true;
    return field101;
  }
  const std::map<int8_t, float>& get_field102() const&;
  std::map<int8_t, float> get_field102() &&;

  template <typename T_Struct6_field102_struct_setter>
  std::map<int8_t, float>& set_field102(T_Struct6_field102_struct_setter&& field102_) {
    field102 = std::forward<T_Struct6_field102_struct_setter>(field102_);
    __isset.field102 = true;
    return field102;
  }
  const  ::cpp2::Struct1& get_field103() const&;
   ::cpp2::Struct1 get_field103() &&;

  template <typename T_Struct6_field103_struct_setter>
   ::cpp2::Struct1& set_field103(T_Struct6_field103_struct_setter&& field103_) {
    field103 = std::forward<T_Struct6_field103_struct_setter>(field103_);
    __isset.field103 = true;
    return field103;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct6& a, Struct6& b);
extern template uint32_t Struct6::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct6::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct6::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct6::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct6::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct6::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct6::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct6::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct6>::clear( ::cpp2::Struct6* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct6>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct6>::write(Protocol* proto,  ::cpp2::Struct6 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct6>::read(Protocol* proto,  ::cpp2::Struct6* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct6>::serializedSize(Protocol const* proto,  ::cpp2::Struct6 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct6>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct6 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct7 : private apache::thrift::detail::st::ComparisonOperators<Struct7> {
 public:

  Struct7() :
      field1(0),
      field4(0),
      field5(0),
      field6(0),
      field7(0),
      field9(0),
      field12(0),
      field13(0),
      field17(0),
      field20(0),
      field21(0),
      field22(0),
      field25(0),
      field27(0),
      field31(0),
      field33(0),
      field36(0),
      field40(0),
      field41(0),
      field42(0),
      field43(0),
      field45(0),
      field51(0),
      field52(0),
      field53(0),
      field59(0),
      field61(0),
      field62(0),
      field63(0),
      field64(0),
      field66(0),
      field67(0),
      field68(0),
      field77(0),
      field79(0),
      field80(0),
      field81(0),
      field82(0),
      field83(0),
      field88(0),
      field94(0),
      field95(0),
      field98(0),
      field101(0),
      field103(0),
      field106(0),
      field107(0),
      field108(0) {}
  // FragileConstructor for use in initialization lists only

  Struct7(apache::thrift::FragileConstructor, double field1__arg, std::string field2__arg, std::vector<float> field3__arg, int32_t field4__arg, int32_t field5__arg, bool field6__arg, int8_t field7__arg, std::string field8__arg, int64_t field9__arg, std::map<float, std::string> field10__arg, std::string field11__arg, double field12__arg, float field13__arg, std::string field14__arg, std::vector<int16_t> field15__arg, std::set<float> field16__arg, int16_t field17__arg, std::map<int16_t, int32_t> field18__arg, std::string field19__arg, int8_t field20__arg, int8_t field21__arg, int32_t field22__arg, std::string field23__arg,  ::cpp2::Struct1 field24__arg, float field25__arg, std::set<std::set<int8_t>> field26__arg, bool field27__arg, std::string field28__arg, std::map<int32_t, std::map<std::set<double>, std::map<int16_t, int32_t>>> field29__arg,  ::cpp2::Struct0 field30__arg, double field31__arg, std::map<std::string, std::set<int8_t>> field32__arg, int8_t field33__arg, std::string field34__arg, std::map<std::vector<int64_t>, std::string> field35__arg, int32_t field36__arg, std::map<std::map<int64_t, int8_t>, int32_t> field37__arg, std::string field38__arg, std::map<std::set<std::vector<int32_t>>, int32_t> field39__arg, double field40__arg, bool field41__arg, bool field42__arg, float field43__arg,  ::cpp2::Struct1 field44__arg, int64_t field45__arg, std::map<int32_t, int32_t> field46__arg,  ::cpp2::Struct0 field47__arg, std::map<int8_t, int64_t> field48__arg, std::set<bool> field49__arg, std::string field50__arg, bool field51__arg, int64_t field52__arg, float field53__arg,  ::cpp2::Struct1 field54__arg, std::set<int16_t> field55__arg, std::vector<double> field56__arg, std::set<int64_t> field57__arg, std::string field58__arg, float field59__arg,  ::cpp2::Struct0 field60__arg, float field61__arg, int64_t field62__arg, int16_t field63__arg, int32_t field64__arg, std::vector<double> field65__arg, double field66__arg, int64_t field67__arg, int8_t field68__arg, std::vector<std::string> field69__arg, std::set<bool> field70__arg,  ::cpp2::Struct1 field71__arg, std::string field72__arg, std::set<std::set<std::string>> field73__arg,  ::cpp2::Struct0 field74__arg, std::string field75__arg,  ::cpp2::Struct2 field76__arg, int8_t field77__arg, std::set<std::string> field78__arg, bool field79__arg, int8_t field80__arg, int16_t field81__arg, double field82__arg, int16_t field83__arg, std::string field84__arg,  ::cpp2::Struct3 field85__arg, std::vector<std::string> field86__arg, std::map< ::cpp2::Struct0, int64_t> field87__arg, int8_t field88__arg, std::string field89__arg, std::string field90__arg, std::vector<float> field91__arg, std::vector<bool> field92__arg, std::string field93__arg, float field94__arg, bool field95__arg, std::string field96__arg, std::vector<int16_t> field97__arg, double field98__arg, std::string field99__arg, std::map<int64_t, std::map<std::string, double>> field100__arg, float field101__arg,  ::cpp2::Struct1 field102__arg, int64_t field103__arg, std::map<std::string, int16_t> field104__arg, std::map<bool, double> field105__arg, int8_t field106__arg, int32_t field107__arg, bool field108__arg,  ::cpp2::Struct2 field109__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)),
      field97(std::move(field97__arg)),
      field98(std::move(field98__arg)),
      field99(std::move(field99__arg)),
      field100(std::move(field100__arg)),
      field101(std::move(field101__arg)),
      field102(std::move(field102__arg)),
      field103(std::move(field103__arg)),
      field104(std::move(field104__arg)),
      field105(std::move(field105__arg)),
      field106(std::move(field106__arg)),
      field107(std::move(field107__arg)),
      field108(std::move(field108__arg)),
      field109(std::move(field109__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
    __isset.field97 = true;
    __isset.field98 = true;
    __isset.field99 = true;
    __isset.field100 = true;
    __isset.field101 = true;
    __isset.field102 = true;
    __isset.field103 = true;
    __isset.field104 = true;
    __isset.field105 = true;
    __isset.field106 = true;
    __isset.field107 = true;
    __isset.field108 = true;
    __isset.field109 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<97, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field97 = arg.move();
    __isset.field97 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<98, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field98 = arg.move();
    __isset.field98 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<99, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field99 = arg.move();
    __isset.field99 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field100 = arg.move();
    __isset.field100 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field101 = arg.move();
    __isset.field101 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<102, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field102 = arg.move();
    __isset.field102 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<103, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field103 = arg.move();
    __isset.field103 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<104, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field104 = arg.move();
    __isset.field104 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<105, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field105 = arg.move();
    __isset.field105 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<106, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field106 = arg.move();
    __isset.field106 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<107, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field107 = arg.move();
    __isset.field107 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<108, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field108 = arg.move();
    __isset.field108 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct7(::apache::thrift::detail::argument_wrapper<109, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct7(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field109 = arg.move();
    __isset.field109 = true;
  }

  Struct7(Struct7&&) = default;

  Struct7(const Struct7&) = default;

  Struct7& operator=(Struct7&&) = default;

  Struct7& operator=(const Struct7&) = default;
  void __clear();

  virtual ~Struct7() {}

  double field1;
  std::string field2;
  std::vector<float> field3;
  int32_t field4;
  int32_t field5;
  bool field6;
  int8_t field7;
  std::string field8;
  int64_t field9;
  std::map<float, std::string> field10;
  std::string field11;
  double field12;
  float field13;
  std::string field14;
  std::vector<int16_t> field15;
  std::set<float> field16;
  int16_t field17;
  std::map<int16_t, int32_t> field18;
  std::string field19;
  int8_t field20;
  int8_t field21;
  int32_t field22;
  std::string field23;
   ::cpp2::Struct1 field24;
  float field25;
  std::set<std::set<int8_t>> field26;
  bool field27;
  std::string field28;
  std::map<int32_t, std::map<std::set<double>, std::map<int16_t, int32_t>>> field29;
   ::cpp2::Struct0 field30;
  double field31;
  std::map<std::string, std::set<int8_t>> field32;
  int8_t field33;
  std::string field34;
  std::map<std::vector<int64_t>, std::string> field35;
  int32_t field36;
  std::map<std::map<int64_t, int8_t>, int32_t> field37;
  std::string field38;
  std::map<std::set<std::vector<int32_t>>, int32_t> field39;
  double field40;
  bool field41;
  bool field42;
  float field43;
   ::cpp2::Struct1 field44;
  int64_t field45;
  std::map<int32_t, int32_t> field46;
   ::cpp2::Struct0 field47;
  std::map<int8_t, int64_t> field48;
  std::set<bool> field49;
  std::string field50;
  bool field51;
  int64_t field52;
  float field53;
   ::cpp2::Struct1 field54;
  std::set<int16_t> field55;
  std::vector<double> field56;
  std::set<int64_t> field57;
  std::string field58;
  float field59;
   ::cpp2::Struct0 field60;
  float field61;
  int64_t field62;
  int16_t field63;
  int32_t field64;
  std::vector<double> field65;
  double field66;
  int64_t field67;
  int8_t field68;
  std::vector<std::string> field69;
  std::set<bool> field70;
   ::cpp2::Struct1 field71;
  std::string field72;
  std::set<std::set<std::string>> field73;
   ::cpp2::Struct0 field74;
  std::string field75;
   ::cpp2::Struct2 field76;
  int8_t field77;
  std::set<std::string> field78;
  bool field79;
  int8_t field80;
  int16_t field81;
  double field82;
  int16_t field83;
  std::string field84;
   ::cpp2::Struct3 field85;
  std::vector<std::string> field86;
  std::map< ::cpp2::Struct0, int64_t> field87;
  int8_t field88;
  std::string field89;
  std::string field90;
  std::vector<float> field91;
  std::vector<bool> field92;
  std::string field93;
  float field94;
  bool field95;
  std::string field96;
  std::vector<int16_t> field97;
  double field98;
  std::string field99;
  std::map<int64_t, std::map<std::string, double>> field100;
  float field101;
   ::cpp2::Struct1 field102;
  int64_t field103;
  std::map<std::string, int16_t> field104;
  std::map<bool, double> field105;
  int8_t field106;
  int32_t field107;
  bool field108;
   ::cpp2::Struct2 field109;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
      field97 = false;
      field98 = false;
      field99 = false;
      field100 = false;
      field101 = false;
      field102 = false;
      field103 = false;
      field104 = false;
      field105 = false;
      field106 = false;
      field107 = false;
      field108 = false;
      field109 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
    bool field97 = false;
    bool field98 = false;
    bool field99 = false;
    bool field100 = false;
    bool field101 = false;
    bool field102 = false;
    bool field103 = false;
    bool field104 = false;
    bool field105 = false;
    bool field106 = false;
    bool field107 = false;
    bool field108 = false;
    bool field109 = false;
  } __isset;
  bool operator==(const Struct7& rhs) const;

  bool operator < (const Struct7& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    if (!(field97 == rhs.field97)) {
      return field97 < rhs.field97;
    }
    if (!(field98 == rhs.field98)) {
      return field98 < rhs.field98;
    }
    if (!(field99 == rhs.field99)) {
      return field99 < rhs.field99;
    }
    if (!(field100 == rhs.field100)) {
      return field100 < rhs.field100;
    }
    if (!(field101 == rhs.field101)) {
      return field101 < rhs.field101;
    }
    if (!(field102 == rhs.field102)) {
      return field102 < rhs.field102;
    }
    if (!(field103 == rhs.field103)) {
      return field103 < rhs.field103;
    }
    if (!(field104 == rhs.field104)) {
      return field104 < rhs.field104;
    }
    if (!(field105 == rhs.field105)) {
      return field105 < rhs.field105;
    }
    if (!(field106 == rhs.field106)) {
      return field106 < rhs.field106;
    }
    if (!(field107 == rhs.field107)) {
      return field107 < rhs.field107;
    }
    if (!(field108 == rhs.field108)) {
      return field108 < rhs.field108;
    }
    if (!(field109 == rhs.field109)) {
      return field109 < rhs.field109;
    }
    (void)rhs;
    return false;
  }

  double get_field1() const {
    return field1;
  }

  double& set_field1(double field1_) {
    field1 = field1_;
    __isset.field1 = true;
    return field1;
  }

  const std::string& get_field2() const& {
    return field2;
  }

  std::string get_field2() && {
    return std::move(field2);
  }

  template <typename T_Struct7_field2_struct_setter>
  std::string& set_field2(T_Struct7_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct7_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const std::vector<float>& get_field3() const&;
  std::vector<float> get_field3() &&;

  template <typename T_Struct7_field3_struct_setter>
  std::vector<float>& set_field3(T_Struct7_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct7_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  int32_t get_field4() const {
    return field4;
  }

  int32_t& set_field4(int32_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }

  int32_t get_field5() const {
    return field5;
  }

  int32_t& set_field5(int32_t field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }

  bool get_field6() const {
    return field6;
  }

  bool& set_field6(bool field6_) {
    field6 = field6_;
    __isset.field6 = true;
    return field6;
  }

  int8_t get_field7() const {
    return field7;
  }

  int8_t& set_field7(int8_t field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }

  const std::string& get_field8() const& {
    return field8;
  }

  std::string get_field8() && {
    return std::move(field8);
  }

  template <typename T_Struct7_field8_struct_setter>
  std::string& set_field8(T_Struct7_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct7_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }

  int64_t get_field9() const {
    return field9;
  }

  int64_t& set_field9(int64_t field9_) {
    field9 = field9_;
    __isset.field9 = true;
    return field9;
  }
  const std::map<float, std::string>& get_field10() const&;
  std::map<float, std::string> get_field10() &&;

  template <typename T_Struct7_field10_struct_setter>
  std::map<float, std::string>& set_field10(T_Struct7_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct7_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }

  const std::string& get_field11() const& {
    return field11;
  }

  std::string get_field11() && {
    return std::move(field11);
  }

  template <typename T_Struct7_field11_struct_setter>
  std::string& set_field11(T_Struct7_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct7_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }

  double get_field12() const {
    return field12;
  }

  double& set_field12(double field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }

  float get_field13() const {
    return field13;
  }

  float& set_field13(float field13_) {
    field13 = field13_;
    __isset.field13 = true;
    return field13;
  }

  const std::string& get_field14() const& {
    return field14;
  }

  std::string get_field14() && {
    return std::move(field14);
  }

  template <typename T_Struct7_field14_struct_setter>
  std::string& set_field14(T_Struct7_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct7_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }
  const std::vector<int16_t>& get_field15() const&;
  std::vector<int16_t> get_field15() &&;

  template <typename T_Struct7_field15_struct_setter>
  std::vector<int16_t>& set_field15(T_Struct7_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct7_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }
  const std::set<float>& get_field16() const&;
  std::set<float> get_field16() &&;

  template <typename T_Struct7_field16_struct_setter>
  std::set<float>& set_field16(T_Struct7_field16_struct_setter&& field16_) {
    field16 = std::forward<T_Struct7_field16_struct_setter>(field16_);
    __isset.field16 = true;
    return field16;
  }

  int16_t get_field17() const {
    return field17;
  }

  int16_t& set_field17(int16_t field17_) {
    field17 = field17_;
    __isset.field17 = true;
    return field17;
  }
  const std::map<int16_t, int32_t>& get_field18() const&;
  std::map<int16_t, int32_t> get_field18() &&;

  template <typename T_Struct7_field18_struct_setter>
  std::map<int16_t, int32_t>& set_field18(T_Struct7_field18_struct_setter&& field18_) {
    field18 = std::forward<T_Struct7_field18_struct_setter>(field18_);
    __isset.field18 = true;
    return field18;
  }

  const std::string& get_field19() const& {
    return field19;
  }

  std::string get_field19() && {
    return std::move(field19);
  }

  template <typename T_Struct7_field19_struct_setter>
  std::string& set_field19(T_Struct7_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct7_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }

  int8_t get_field20() const {
    return field20;
  }

  int8_t& set_field20(int8_t field20_) {
    field20 = field20_;
    __isset.field20 = true;
    return field20;
  }

  int8_t get_field21() const {
    return field21;
  }

  int8_t& set_field21(int8_t field21_) {
    field21 = field21_;
    __isset.field21 = true;
    return field21;
  }

  int32_t get_field22() const {
    return field22;
  }

  int32_t& set_field22(int32_t field22_) {
    field22 = field22_;
    __isset.field22 = true;
    return field22;
  }

  const std::string& get_field23() const& {
    return field23;
  }

  std::string get_field23() && {
    return std::move(field23);
  }

  template <typename T_Struct7_field23_struct_setter>
  std::string& set_field23(T_Struct7_field23_struct_setter&& field23_) {
    field23 = std::forward<T_Struct7_field23_struct_setter>(field23_);
    __isset.field23 = true;
    return field23;
  }
  const  ::cpp2::Struct1& get_field24() const&;
   ::cpp2::Struct1 get_field24() &&;

  template <typename T_Struct7_field24_struct_setter>
   ::cpp2::Struct1& set_field24(T_Struct7_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct7_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }

  float get_field25() const {
    return field25;
  }

  float& set_field25(float field25_) {
    field25 = field25_;
    __isset.field25 = true;
    return field25;
  }
  const std::set<std::set<int8_t>>& get_field26() const&;
  std::set<std::set<int8_t>> get_field26() &&;

  template <typename T_Struct7_field26_struct_setter>
  std::set<std::set<int8_t>>& set_field26(T_Struct7_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct7_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }

  bool get_field27() const {
    return field27;
  }

  bool& set_field27(bool field27_) {
    field27 = field27_;
    __isset.field27 = true;
    return field27;
  }

  const std::string& get_field28() const& {
    return field28;
  }

  std::string get_field28() && {
    return std::move(field28);
  }

  template <typename T_Struct7_field28_struct_setter>
  std::string& set_field28(T_Struct7_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct7_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }
  const std::map<int32_t, std::map<std::set<double>, std::map<int16_t, int32_t>>>& get_field29() const&;
  std::map<int32_t, std::map<std::set<double>, std::map<int16_t, int32_t>>> get_field29() &&;

  template <typename T_Struct7_field29_struct_setter>
  std::map<int32_t, std::map<std::set<double>, std::map<int16_t, int32_t>>>& set_field29(T_Struct7_field29_struct_setter&& field29_) {
    field29 = std::forward<T_Struct7_field29_struct_setter>(field29_);
    __isset.field29 = true;
    return field29;
  }
  const  ::cpp2::Struct0& get_field30() const&;
   ::cpp2::Struct0 get_field30() &&;

  template <typename T_Struct7_field30_struct_setter>
   ::cpp2::Struct0& set_field30(T_Struct7_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct7_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }

  double get_field31() const {
    return field31;
  }

  double& set_field31(double field31_) {
    field31 = field31_;
    __isset.field31 = true;
    return field31;
  }
  const std::map<std::string, std::set<int8_t>>& get_field32() const&;
  std::map<std::string, std::set<int8_t>> get_field32() &&;

  template <typename T_Struct7_field32_struct_setter>
  std::map<std::string, std::set<int8_t>>& set_field32(T_Struct7_field32_struct_setter&& field32_) {
    field32 = std::forward<T_Struct7_field32_struct_setter>(field32_);
    __isset.field32 = true;
    return field32;
  }

  int8_t get_field33() const {
    return field33;
  }

  int8_t& set_field33(int8_t field33_) {
    field33 = field33_;
    __isset.field33 = true;
    return field33;
  }

  const std::string& get_field34() const& {
    return field34;
  }

  std::string get_field34() && {
    return std::move(field34);
  }

  template <typename T_Struct7_field34_struct_setter>
  std::string& set_field34(T_Struct7_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct7_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }
  const std::map<std::vector<int64_t>, std::string>& get_field35() const&;
  std::map<std::vector<int64_t>, std::string> get_field35() &&;

  template <typename T_Struct7_field35_struct_setter>
  std::map<std::vector<int64_t>, std::string>& set_field35(T_Struct7_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct7_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }

  int32_t get_field36() const {
    return field36;
  }

  int32_t& set_field36(int32_t field36_) {
    field36 = field36_;
    __isset.field36 = true;
    return field36;
  }
  const std::map<std::map<int64_t, int8_t>, int32_t>& get_field37() const&;
  std::map<std::map<int64_t, int8_t>, int32_t> get_field37() &&;

  template <typename T_Struct7_field37_struct_setter>
  std::map<std::map<int64_t, int8_t>, int32_t>& set_field37(T_Struct7_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct7_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }

  const std::string& get_field38() const& {
    return field38;
  }

  std::string get_field38() && {
    return std::move(field38);
  }

  template <typename T_Struct7_field38_struct_setter>
  std::string& set_field38(T_Struct7_field38_struct_setter&& field38_) {
    field38 = std::forward<T_Struct7_field38_struct_setter>(field38_);
    __isset.field38 = true;
    return field38;
  }
  const std::map<std::set<std::vector<int32_t>>, int32_t>& get_field39() const&;
  std::map<std::set<std::vector<int32_t>>, int32_t> get_field39() &&;

  template <typename T_Struct7_field39_struct_setter>
  std::map<std::set<std::vector<int32_t>>, int32_t>& set_field39(T_Struct7_field39_struct_setter&& field39_) {
    field39 = std::forward<T_Struct7_field39_struct_setter>(field39_);
    __isset.field39 = true;
    return field39;
  }

  double get_field40() const {
    return field40;
  }

  double& set_field40(double field40_) {
    field40 = field40_;
    __isset.field40 = true;
    return field40;
  }

  bool get_field41() const {
    return field41;
  }

  bool& set_field41(bool field41_) {
    field41 = field41_;
    __isset.field41 = true;
    return field41;
  }

  bool get_field42() const {
    return field42;
  }

  bool& set_field42(bool field42_) {
    field42 = field42_;
    __isset.field42 = true;
    return field42;
  }

  float get_field43() const {
    return field43;
  }

  float& set_field43(float field43_) {
    field43 = field43_;
    __isset.field43 = true;
    return field43;
  }
  const  ::cpp2::Struct1& get_field44() const&;
   ::cpp2::Struct1 get_field44() &&;

  template <typename T_Struct7_field44_struct_setter>
   ::cpp2::Struct1& set_field44(T_Struct7_field44_struct_setter&& field44_) {
    field44 = std::forward<T_Struct7_field44_struct_setter>(field44_);
    __isset.field44 = true;
    return field44;
  }

  int64_t get_field45() const {
    return field45;
  }

  int64_t& set_field45(int64_t field45_) {
    field45 = field45_;
    __isset.field45 = true;
    return field45;
  }
  const std::map<int32_t, int32_t>& get_field46() const&;
  std::map<int32_t, int32_t> get_field46() &&;

  template <typename T_Struct7_field46_struct_setter>
  std::map<int32_t, int32_t>& set_field46(T_Struct7_field46_struct_setter&& field46_) {
    field46 = std::forward<T_Struct7_field46_struct_setter>(field46_);
    __isset.field46 = true;
    return field46;
  }
  const  ::cpp2::Struct0& get_field47() const&;
   ::cpp2::Struct0 get_field47() &&;

  template <typename T_Struct7_field47_struct_setter>
   ::cpp2::Struct0& set_field47(T_Struct7_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct7_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }
  const std::map<int8_t, int64_t>& get_field48() const&;
  std::map<int8_t, int64_t> get_field48() &&;

  template <typename T_Struct7_field48_struct_setter>
  std::map<int8_t, int64_t>& set_field48(T_Struct7_field48_struct_setter&& field48_) {
    field48 = std::forward<T_Struct7_field48_struct_setter>(field48_);
    __isset.field48 = true;
    return field48;
  }
  const std::set<bool>& get_field49() const&;
  std::set<bool> get_field49() &&;

  template <typename T_Struct7_field49_struct_setter>
  std::set<bool>& set_field49(T_Struct7_field49_struct_setter&& field49_) {
    field49 = std::forward<T_Struct7_field49_struct_setter>(field49_);
    __isset.field49 = true;
    return field49;
  }

  const std::string& get_field50() const& {
    return field50;
  }

  std::string get_field50() && {
    return std::move(field50);
  }

  template <typename T_Struct7_field50_struct_setter>
  std::string& set_field50(T_Struct7_field50_struct_setter&& field50_) {
    field50 = std::forward<T_Struct7_field50_struct_setter>(field50_);
    __isset.field50 = true;
    return field50;
  }

  bool get_field51() const {
    return field51;
  }

  bool& set_field51(bool field51_) {
    field51 = field51_;
    __isset.field51 = true;
    return field51;
  }

  int64_t get_field52() const {
    return field52;
  }

  int64_t& set_field52(int64_t field52_) {
    field52 = field52_;
    __isset.field52 = true;
    return field52;
  }

  float get_field53() const {
    return field53;
  }

  float& set_field53(float field53_) {
    field53 = field53_;
    __isset.field53 = true;
    return field53;
  }
  const  ::cpp2::Struct1& get_field54() const&;
   ::cpp2::Struct1 get_field54() &&;

  template <typename T_Struct7_field54_struct_setter>
   ::cpp2::Struct1& set_field54(T_Struct7_field54_struct_setter&& field54_) {
    field54 = std::forward<T_Struct7_field54_struct_setter>(field54_);
    __isset.field54 = true;
    return field54;
  }
  const std::set<int16_t>& get_field55() const&;
  std::set<int16_t> get_field55() &&;

  template <typename T_Struct7_field55_struct_setter>
  std::set<int16_t>& set_field55(T_Struct7_field55_struct_setter&& field55_) {
    field55 = std::forward<T_Struct7_field55_struct_setter>(field55_);
    __isset.field55 = true;
    return field55;
  }
  const std::vector<double>& get_field56() const&;
  std::vector<double> get_field56() &&;

  template <typename T_Struct7_field56_struct_setter>
  std::vector<double>& set_field56(T_Struct7_field56_struct_setter&& field56_) {
    field56 = std::forward<T_Struct7_field56_struct_setter>(field56_);
    __isset.field56 = true;
    return field56;
  }
  const std::set<int64_t>& get_field57() const&;
  std::set<int64_t> get_field57() &&;

  template <typename T_Struct7_field57_struct_setter>
  std::set<int64_t>& set_field57(T_Struct7_field57_struct_setter&& field57_) {
    field57 = std::forward<T_Struct7_field57_struct_setter>(field57_);
    __isset.field57 = true;
    return field57;
  }

  const std::string& get_field58() const& {
    return field58;
  }

  std::string get_field58() && {
    return std::move(field58);
  }

  template <typename T_Struct7_field58_struct_setter>
  std::string& set_field58(T_Struct7_field58_struct_setter&& field58_) {
    field58 = std::forward<T_Struct7_field58_struct_setter>(field58_);
    __isset.field58 = true;
    return field58;
  }

  float get_field59() const {
    return field59;
  }

  float& set_field59(float field59_) {
    field59 = field59_;
    __isset.field59 = true;
    return field59;
  }
  const  ::cpp2::Struct0& get_field60() const&;
   ::cpp2::Struct0 get_field60() &&;

  template <typename T_Struct7_field60_struct_setter>
   ::cpp2::Struct0& set_field60(T_Struct7_field60_struct_setter&& field60_) {
    field60 = std::forward<T_Struct7_field60_struct_setter>(field60_);
    __isset.field60 = true;
    return field60;
  }

  float get_field61() const {
    return field61;
  }

  float& set_field61(float field61_) {
    field61 = field61_;
    __isset.field61 = true;
    return field61;
  }

  int64_t get_field62() const {
    return field62;
  }

  int64_t& set_field62(int64_t field62_) {
    field62 = field62_;
    __isset.field62 = true;
    return field62;
  }

  int16_t get_field63() const {
    return field63;
  }

  int16_t& set_field63(int16_t field63_) {
    field63 = field63_;
    __isset.field63 = true;
    return field63;
  }

  int32_t get_field64() const {
    return field64;
  }

  int32_t& set_field64(int32_t field64_) {
    field64 = field64_;
    __isset.field64 = true;
    return field64;
  }
  const std::vector<double>& get_field65() const&;
  std::vector<double> get_field65() &&;

  template <typename T_Struct7_field65_struct_setter>
  std::vector<double>& set_field65(T_Struct7_field65_struct_setter&& field65_) {
    field65 = std::forward<T_Struct7_field65_struct_setter>(field65_);
    __isset.field65 = true;
    return field65;
  }

  double get_field66() const {
    return field66;
  }

  double& set_field66(double field66_) {
    field66 = field66_;
    __isset.field66 = true;
    return field66;
  }

  int64_t get_field67() const {
    return field67;
  }

  int64_t& set_field67(int64_t field67_) {
    field67 = field67_;
    __isset.field67 = true;
    return field67;
  }

  int8_t get_field68() const {
    return field68;
  }

  int8_t& set_field68(int8_t field68_) {
    field68 = field68_;
    __isset.field68 = true;
    return field68;
  }
  const std::vector<std::string>& get_field69() const&;
  std::vector<std::string> get_field69() &&;

  template <typename T_Struct7_field69_struct_setter>
  std::vector<std::string>& set_field69(T_Struct7_field69_struct_setter&& field69_) {
    field69 = std::forward<T_Struct7_field69_struct_setter>(field69_);
    __isset.field69 = true;
    return field69;
  }
  const std::set<bool>& get_field70() const&;
  std::set<bool> get_field70() &&;

  template <typename T_Struct7_field70_struct_setter>
  std::set<bool>& set_field70(T_Struct7_field70_struct_setter&& field70_) {
    field70 = std::forward<T_Struct7_field70_struct_setter>(field70_);
    __isset.field70 = true;
    return field70;
  }
  const  ::cpp2::Struct1& get_field71() const&;
   ::cpp2::Struct1 get_field71() &&;

  template <typename T_Struct7_field71_struct_setter>
   ::cpp2::Struct1& set_field71(T_Struct7_field71_struct_setter&& field71_) {
    field71 = std::forward<T_Struct7_field71_struct_setter>(field71_);
    __isset.field71 = true;
    return field71;
  }

  const std::string& get_field72() const& {
    return field72;
  }

  std::string get_field72() && {
    return std::move(field72);
  }

  template <typename T_Struct7_field72_struct_setter>
  std::string& set_field72(T_Struct7_field72_struct_setter&& field72_) {
    field72 = std::forward<T_Struct7_field72_struct_setter>(field72_);
    __isset.field72 = true;
    return field72;
  }
  const std::set<std::set<std::string>>& get_field73() const&;
  std::set<std::set<std::string>> get_field73() &&;

  template <typename T_Struct7_field73_struct_setter>
  std::set<std::set<std::string>>& set_field73(T_Struct7_field73_struct_setter&& field73_) {
    field73 = std::forward<T_Struct7_field73_struct_setter>(field73_);
    __isset.field73 = true;
    return field73;
  }
  const  ::cpp2::Struct0& get_field74() const&;
   ::cpp2::Struct0 get_field74() &&;

  template <typename T_Struct7_field74_struct_setter>
   ::cpp2::Struct0& set_field74(T_Struct7_field74_struct_setter&& field74_) {
    field74 = std::forward<T_Struct7_field74_struct_setter>(field74_);
    __isset.field74 = true;
    return field74;
  }

  const std::string& get_field75() const& {
    return field75;
  }

  std::string get_field75() && {
    return std::move(field75);
  }

  template <typename T_Struct7_field75_struct_setter>
  std::string& set_field75(T_Struct7_field75_struct_setter&& field75_) {
    field75 = std::forward<T_Struct7_field75_struct_setter>(field75_);
    __isset.field75 = true;
    return field75;
  }
  const  ::cpp2::Struct2& get_field76() const&;
   ::cpp2::Struct2 get_field76() &&;

  template <typename T_Struct7_field76_struct_setter>
   ::cpp2::Struct2& set_field76(T_Struct7_field76_struct_setter&& field76_) {
    field76 = std::forward<T_Struct7_field76_struct_setter>(field76_);
    __isset.field76 = true;
    return field76;
  }

  int8_t get_field77() const {
    return field77;
  }

  int8_t& set_field77(int8_t field77_) {
    field77 = field77_;
    __isset.field77 = true;
    return field77;
  }
  const std::set<std::string>& get_field78() const&;
  std::set<std::string> get_field78() &&;

  template <typename T_Struct7_field78_struct_setter>
  std::set<std::string>& set_field78(T_Struct7_field78_struct_setter&& field78_) {
    field78 = std::forward<T_Struct7_field78_struct_setter>(field78_);
    __isset.field78 = true;
    return field78;
  }

  bool get_field79() const {
    return field79;
  }

  bool& set_field79(bool field79_) {
    field79 = field79_;
    __isset.field79 = true;
    return field79;
  }

  int8_t get_field80() const {
    return field80;
  }

  int8_t& set_field80(int8_t field80_) {
    field80 = field80_;
    __isset.field80 = true;
    return field80;
  }

  int16_t get_field81() const {
    return field81;
  }

  int16_t& set_field81(int16_t field81_) {
    field81 = field81_;
    __isset.field81 = true;
    return field81;
  }

  double get_field82() const {
    return field82;
  }

  double& set_field82(double field82_) {
    field82 = field82_;
    __isset.field82 = true;
    return field82;
  }

  int16_t get_field83() const {
    return field83;
  }

  int16_t& set_field83(int16_t field83_) {
    field83 = field83_;
    __isset.field83 = true;
    return field83;
  }

  const std::string& get_field84() const& {
    return field84;
  }

  std::string get_field84() && {
    return std::move(field84);
  }

  template <typename T_Struct7_field84_struct_setter>
  std::string& set_field84(T_Struct7_field84_struct_setter&& field84_) {
    field84 = std::forward<T_Struct7_field84_struct_setter>(field84_);
    __isset.field84 = true;
    return field84;
  }
  const  ::cpp2::Struct3& get_field85() const&;
   ::cpp2::Struct3 get_field85() &&;

  template <typename T_Struct7_field85_struct_setter>
   ::cpp2::Struct3& set_field85(T_Struct7_field85_struct_setter&& field85_) {
    field85 = std::forward<T_Struct7_field85_struct_setter>(field85_);
    __isset.field85 = true;
    return field85;
  }
  const std::vector<std::string>& get_field86() const&;
  std::vector<std::string> get_field86() &&;

  template <typename T_Struct7_field86_struct_setter>
  std::vector<std::string>& set_field86(T_Struct7_field86_struct_setter&& field86_) {
    field86 = std::forward<T_Struct7_field86_struct_setter>(field86_);
    __isset.field86 = true;
    return field86;
  }
  const std::map< ::cpp2::Struct0, int64_t>& get_field87() const&;
  std::map< ::cpp2::Struct0, int64_t> get_field87() &&;

  template <typename T_Struct7_field87_struct_setter>
  std::map< ::cpp2::Struct0, int64_t>& set_field87(T_Struct7_field87_struct_setter&& field87_) {
    field87 = std::forward<T_Struct7_field87_struct_setter>(field87_);
    __isset.field87 = true;
    return field87;
  }

  int8_t get_field88() const {
    return field88;
  }

  int8_t& set_field88(int8_t field88_) {
    field88 = field88_;
    __isset.field88 = true;
    return field88;
  }

  const std::string& get_field89() const& {
    return field89;
  }

  std::string get_field89() && {
    return std::move(field89);
  }

  template <typename T_Struct7_field89_struct_setter>
  std::string& set_field89(T_Struct7_field89_struct_setter&& field89_) {
    field89 = std::forward<T_Struct7_field89_struct_setter>(field89_);
    __isset.field89 = true;
    return field89;
  }

  const std::string& get_field90() const& {
    return field90;
  }

  std::string get_field90() && {
    return std::move(field90);
  }

  template <typename T_Struct7_field90_struct_setter>
  std::string& set_field90(T_Struct7_field90_struct_setter&& field90_) {
    field90 = std::forward<T_Struct7_field90_struct_setter>(field90_);
    __isset.field90 = true;
    return field90;
  }
  const std::vector<float>& get_field91() const&;
  std::vector<float> get_field91() &&;

  template <typename T_Struct7_field91_struct_setter>
  std::vector<float>& set_field91(T_Struct7_field91_struct_setter&& field91_) {
    field91 = std::forward<T_Struct7_field91_struct_setter>(field91_);
    __isset.field91 = true;
    return field91;
  }
  const std::vector<bool>& get_field92() const&;
  std::vector<bool> get_field92() &&;

  template <typename T_Struct7_field92_struct_setter>
  std::vector<bool>& set_field92(T_Struct7_field92_struct_setter&& field92_) {
    field92 = std::forward<T_Struct7_field92_struct_setter>(field92_);
    __isset.field92 = true;
    return field92;
  }

  const std::string& get_field93() const& {
    return field93;
  }

  std::string get_field93() && {
    return std::move(field93);
  }

  template <typename T_Struct7_field93_struct_setter>
  std::string& set_field93(T_Struct7_field93_struct_setter&& field93_) {
    field93 = std::forward<T_Struct7_field93_struct_setter>(field93_);
    __isset.field93 = true;
    return field93;
  }

  float get_field94() const {
    return field94;
  }

  float& set_field94(float field94_) {
    field94 = field94_;
    __isset.field94 = true;
    return field94;
  }

  bool get_field95() const {
    return field95;
  }

  bool& set_field95(bool field95_) {
    field95 = field95_;
    __isset.field95 = true;
    return field95;
  }

  const std::string& get_field96() const& {
    return field96;
  }

  std::string get_field96() && {
    return std::move(field96);
  }

  template <typename T_Struct7_field96_struct_setter>
  std::string& set_field96(T_Struct7_field96_struct_setter&& field96_) {
    field96 = std::forward<T_Struct7_field96_struct_setter>(field96_);
    __isset.field96 = true;
    return field96;
  }
  const std::vector<int16_t>& get_field97() const&;
  std::vector<int16_t> get_field97() &&;

  template <typename T_Struct7_field97_struct_setter>
  std::vector<int16_t>& set_field97(T_Struct7_field97_struct_setter&& field97_) {
    field97 = std::forward<T_Struct7_field97_struct_setter>(field97_);
    __isset.field97 = true;
    return field97;
  }

  double get_field98() const {
    return field98;
  }

  double& set_field98(double field98_) {
    field98 = field98_;
    __isset.field98 = true;
    return field98;
  }

  const std::string& get_field99() const& {
    return field99;
  }

  std::string get_field99() && {
    return std::move(field99);
  }

  template <typename T_Struct7_field99_struct_setter>
  std::string& set_field99(T_Struct7_field99_struct_setter&& field99_) {
    field99 = std::forward<T_Struct7_field99_struct_setter>(field99_);
    __isset.field99 = true;
    return field99;
  }
  const std::map<int64_t, std::map<std::string, double>>& get_field100() const&;
  std::map<int64_t, std::map<std::string, double>> get_field100() &&;

  template <typename T_Struct7_field100_struct_setter>
  std::map<int64_t, std::map<std::string, double>>& set_field100(T_Struct7_field100_struct_setter&& field100_) {
    field100 = std::forward<T_Struct7_field100_struct_setter>(field100_);
    __isset.field100 = true;
    return field100;
  }

  float get_field101() const {
    return field101;
  }

  float& set_field101(float field101_) {
    field101 = field101_;
    __isset.field101 = true;
    return field101;
  }
  const  ::cpp2::Struct1& get_field102() const&;
   ::cpp2::Struct1 get_field102() &&;

  template <typename T_Struct7_field102_struct_setter>
   ::cpp2::Struct1& set_field102(T_Struct7_field102_struct_setter&& field102_) {
    field102 = std::forward<T_Struct7_field102_struct_setter>(field102_);
    __isset.field102 = true;
    return field102;
  }

  int64_t get_field103() const {
    return field103;
  }

  int64_t& set_field103(int64_t field103_) {
    field103 = field103_;
    __isset.field103 = true;
    return field103;
  }
  const std::map<std::string, int16_t>& get_field104() const&;
  std::map<std::string, int16_t> get_field104() &&;

  template <typename T_Struct7_field104_struct_setter>
  std::map<std::string, int16_t>& set_field104(T_Struct7_field104_struct_setter&& field104_) {
    field104 = std::forward<T_Struct7_field104_struct_setter>(field104_);
    __isset.field104 = true;
    return field104;
  }
  const std::map<bool, double>& get_field105() const&;
  std::map<bool, double> get_field105() &&;

  template <typename T_Struct7_field105_struct_setter>
  std::map<bool, double>& set_field105(T_Struct7_field105_struct_setter&& field105_) {
    field105 = std::forward<T_Struct7_field105_struct_setter>(field105_);
    __isset.field105 = true;
    return field105;
  }

  int8_t get_field106() const {
    return field106;
  }

  int8_t& set_field106(int8_t field106_) {
    field106 = field106_;
    __isset.field106 = true;
    return field106;
  }

  int32_t get_field107() const {
    return field107;
  }

  int32_t& set_field107(int32_t field107_) {
    field107 = field107_;
    __isset.field107 = true;
    return field107;
  }

  bool get_field108() const {
    return field108;
  }

  bool& set_field108(bool field108_) {
    field108 = field108_;
    __isset.field108 = true;
    return field108;
  }
  const  ::cpp2::Struct2& get_field109() const&;
   ::cpp2::Struct2 get_field109() &&;

  template <typename T_Struct7_field109_struct_setter>
   ::cpp2::Struct2& set_field109(T_Struct7_field109_struct_setter&& field109_) {
    field109 = std::forward<T_Struct7_field109_struct_setter>(field109_);
    __isset.field109 = true;
    return field109;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct7& a, Struct7& b);
extern template uint32_t Struct7::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct7::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct7::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct7::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct7::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct7::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct7::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct7::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct7>::clear( ::cpp2::Struct7* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct7>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct7>::write(Protocol* proto,  ::cpp2::Struct7 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct7>::read(Protocol* proto,  ::cpp2::Struct7* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct7>::serializedSize(Protocol const* proto,  ::cpp2::Struct7 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct7>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct7 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct8 : private apache::thrift::detail::st::ComparisonOperators<Struct8> {
 public:

  Struct8() :
      field6(0),
      field9(0),
      field12(0),
      field14(0),
      field15(0) {}
  // FragileConstructor for use in initialization lists only

  Struct8(apache::thrift::FragileConstructor, std::vector<float> field1__arg,  ::cpp2::Struct3 field2__arg, std::vector<std::string> field3__arg,  ::cpp2::Struct1 field4__arg, std::set<bool> field5__arg, int64_t field6__arg, std::map<float, std::map<int16_t, int64_t>> field7__arg, std::vector<int16_t> field8__arg, float field9__arg, std::vector<bool> field10__arg, std::vector< ::cpp2::Struct1> field11__arg, int8_t field12__arg,  ::cpp2::Struct1 field13__arg, int16_t field14__arg, int64_t field15__arg, std::string field16__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct8(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct8(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }

  Struct8(Struct8&&) = default;

  Struct8(const Struct8&) = default;

  Struct8& operator=(Struct8&&) = default;

  Struct8& operator=(const Struct8&) = default;
  void __clear();

  virtual ~Struct8() {}

  std::vector<float> field1;
   ::cpp2::Struct3 field2;
  std::vector<std::string> field3;
   ::cpp2::Struct1 field4;
  std::set<bool> field5;
  int64_t field6;
  std::map<float, std::map<int16_t, int64_t>> field7;
  std::vector<int16_t> field8;
  float field9;
  std::vector<bool> field10;
  std::vector< ::cpp2::Struct1> field11;
  int8_t field12;
   ::cpp2::Struct1 field13;
  int16_t field14;
  int64_t field15;
  std::string field16;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
  } __isset;
  bool operator==(const Struct8& rhs) const;

  bool operator < (const Struct8& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    (void)rhs;
    return false;
  }
  const std::vector<float>& get_field1() const&;
  std::vector<float> get_field1() &&;

  template <typename T_Struct8_field1_struct_setter>
  std::vector<float>& set_field1(T_Struct8_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct8_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const  ::cpp2::Struct3& get_field2() const&;
   ::cpp2::Struct3 get_field2() &&;

  template <typename T_Struct8_field2_struct_setter>
   ::cpp2::Struct3& set_field2(T_Struct8_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct8_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const std::vector<std::string>& get_field3() const&;
  std::vector<std::string> get_field3() &&;

  template <typename T_Struct8_field3_struct_setter>
  std::vector<std::string>& set_field3(T_Struct8_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct8_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }
  const  ::cpp2::Struct1& get_field4() const&;
   ::cpp2::Struct1 get_field4() &&;

  template <typename T_Struct8_field4_struct_setter>
   ::cpp2::Struct1& set_field4(T_Struct8_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct8_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }
  const std::set<bool>& get_field5() const&;
  std::set<bool> get_field5() &&;

  template <typename T_Struct8_field5_struct_setter>
  std::set<bool>& set_field5(T_Struct8_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct8_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }

  int64_t get_field6() const {
    return field6;
  }

  int64_t& set_field6(int64_t field6_) {
    field6 = field6_;
    __isset.field6 = true;
    return field6;
  }
  const std::map<float, std::map<int16_t, int64_t>>& get_field7() const&;
  std::map<float, std::map<int16_t, int64_t>> get_field7() &&;

  template <typename T_Struct8_field7_struct_setter>
  std::map<float, std::map<int16_t, int64_t>>& set_field7(T_Struct8_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct8_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }
  const std::vector<int16_t>& get_field8() const&;
  std::vector<int16_t> get_field8() &&;

  template <typename T_Struct8_field8_struct_setter>
  std::vector<int16_t>& set_field8(T_Struct8_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct8_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }

  float get_field9() const {
    return field9;
  }

  float& set_field9(float field9_) {
    field9 = field9_;
    __isset.field9 = true;
    return field9;
  }
  const std::vector<bool>& get_field10() const&;
  std::vector<bool> get_field10() &&;

  template <typename T_Struct8_field10_struct_setter>
  std::vector<bool>& set_field10(T_Struct8_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct8_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }
  const std::vector< ::cpp2::Struct1>& get_field11() const&;
  std::vector< ::cpp2::Struct1> get_field11() &&;

  template <typename T_Struct8_field11_struct_setter>
  std::vector< ::cpp2::Struct1>& set_field11(T_Struct8_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct8_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }

  int8_t get_field12() const {
    return field12;
  }

  int8_t& set_field12(int8_t field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }
  const  ::cpp2::Struct1& get_field13() const&;
   ::cpp2::Struct1 get_field13() &&;

  template <typename T_Struct8_field13_struct_setter>
   ::cpp2::Struct1& set_field13(T_Struct8_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct8_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }

  int16_t get_field14() const {
    return field14;
  }

  int16_t& set_field14(int16_t field14_) {
    field14 = field14_;
    __isset.field14 = true;
    return field14;
  }

  int64_t get_field15() const {
    return field15;
  }

  int64_t& set_field15(int64_t field15_) {
    field15 = field15_;
    __isset.field15 = true;
    return field15;
  }

  const std::string& get_field16() const& {
    return field16;
  }

  std::string get_field16() && {
    return std::move(field16);
  }

  template <typename T_Struct8_field16_struct_setter>
  std::string& set_field16(T_Struct8_field16_struct_setter&& field16_) {
    field16 = std::forward<T_Struct8_field16_struct_setter>(field16_);
    __isset.field16 = true;
    return field16;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct8& a, Struct8& b);
extern template uint32_t Struct8::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct8::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct8::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct8::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct8::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct8::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct8::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct8::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct8>::clear( ::cpp2::Struct8* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct8>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct8>::write(Protocol* proto,  ::cpp2::Struct8 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct8>::read(Protocol* proto,  ::cpp2::Struct8* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct8>::serializedSize(Protocol const* proto,  ::cpp2::Struct8 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct8>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct8 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct9 : private apache::thrift::detail::st::ComparisonOperators<Struct9> {
 public:

  Struct9() :
      field2(0),
      field3(0),
      field5(0),
      field10(0),
      field11(0),
      field14(0),
      field17(0),
      field18(0),
      field20(0),
      field21(0),
      field25(0),
      field30(0),
      field32(0),
      field33(0),
      field35(0),
      field37(0),
      field38(0),
      field39(0),
      field42(0),
      field44(0),
      field46(0),
      field47(0),
      field50(0),
      field51(0),
      field53(0),
      field61(0),
      field66(0) {}
  // FragileConstructor for use in initialization lists only

  Struct9(apache::thrift::FragileConstructor, std::string field1__arg, float field2__arg, float field3__arg, std::string field4__arg, int8_t field5__arg, std::vector<bool> field6__arg, std::set<double> field7__arg, std::set<int64_t> field8__arg,  ::cpp2::Struct0 field9__arg, int64_t field10__arg, float field11__arg, std::map<int16_t,  ::cpp2::Struct3> field12__arg,  ::cpp2::Struct0 field13__arg, int64_t field14__arg,  ::cpp2::Struct2 field15__arg,  ::cpp2::Struct2 field16__arg, int32_t field17__arg, int32_t field18__arg, std::vector<std::set<std::vector<double>>> field19__arg, double field20__arg, bool field21__arg, std::vector<int32_t> field22__arg,  ::cpp2::Struct2 field23__arg, std::string field24__arg, double field25__arg,  ::cpp2::Struct4 field26__arg, std::vector<std::string> field27__arg, std::set<int8_t> field28__arg, std::set<int32_t> field29__arg, double field30__arg, std::map<double, std::set<int16_t>> field31__arg, int64_t field32__arg, int8_t field33__arg, std::map<bool, int32_t> field34__arg, bool field35__arg, std::map<int64_t, std::string> field36__arg, bool field37__arg, float field38__arg, int8_t field39__arg, std::set<std::map<bool, int32_t>> field40__arg, std::map< ::cpp2::Struct2, std::vector<int8_t>> field41__arg, int32_t field42__arg, std::string field43__arg, int64_t field44__arg, std::map<std::string, float> field45__arg, int32_t field46__arg, double field47__arg, std::map<int64_t, std::string> field48__arg,  ::cpp2::Struct2 field49__arg, int64_t field50__arg, int8_t field51__arg, std::set<std::set<int16_t>> field52__arg, int16_t field53__arg,  ::cpp2::Struct1 field54__arg, std::vector<int32_t> field55__arg, std::string field56__arg,  ::cpp2::Struct1 field57__arg, std::map<std::map<int64_t, int8_t>, std::map<bool, std::string>> field58__arg, std::string field59__arg, std::set<bool> field60__arg, int64_t field61__arg, std::map<int16_t, float> field62__arg, std::set<std::vector<int16_t>> field63__arg, std::vector<int64_t> field64__arg, std::map<int64_t,  ::cpp2::Struct1> field65__arg, int64_t field66__arg, std::string field67__arg, std::set<float> field68__arg, std::map<std::set< ::cpp2::Struct4>,  ::cpp2::Struct2> field69__arg, std::set<int32_t> field70__arg, std::set<std::set<double>> field71__arg, std::vector<float> field72__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct9(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct9(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }

  Struct9(Struct9&&) = default;

  Struct9(const Struct9&) = default;

  Struct9& operator=(Struct9&&) = default;

  Struct9& operator=(const Struct9&) = default;
  void __clear();

  virtual ~Struct9() {}

  std::string field1;
  float field2;
  float field3;
  std::string field4;
  int8_t field5;
  std::vector<bool> field6;
  std::set<double> field7;
  std::set<int64_t> field8;
   ::cpp2::Struct0 field9;
  int64_t field10;
  float field11;
  std::map<int16_t,  ::cpp2::Struct3> field12;
   ::cpp2::Struct0 field13;
  int64_t field14;
   ::cpp2::Struct2 field15;
   ::cpp2::Struct2 field16;
  int32_t field17;
  int32_t field18;
  std::vector<std::set<std::vector<double>>> field19;
  double field20;
  bool field21;
  std::vector<int32_t> field22;
   ::cpp2::Struct2 field23;
  std::string field24;
  double field25;
   ::cpp2::Struct4 field26;
  std::vector<std::string> field27;
  std::set<int8_t> field28;
  std::set<int32_t> field29;
  double field30;
  std::map<double, std::set<int16_t>> field31;
  int64_t field32;
  int8_t field33;
  std::map<bool, int32_t> field34;
  bool field35;
  std::map<int64_t, std::string> field36;
  bool field37;
  float field38;
  int8_t field39;
  std::set<std::map<bool, int32_t>> field40;
  std::map< ::cpp2::Struct2, std::vector<int8_t>> field41;
  int32_t field42;
  std::string field43;
  int64_t field44;
  std::map<std::string, float> field45;
  int32_t field46;
  double field47;
  std::map<int64_t, std::string> field48;
   ::cpp2::Struct2 field49;
  int64_t field50;
  int8_t field51;
  std::set<std::set<int16_t>> field52;
  int16_t field53;
   ::cpp2::Struct1 field54;
  std::vector<int32_t> field55;
  std::string field56;
   ::cpp2::Struct1 field57;
  std::map<std::map<int64_t, int8_t>, std::map<bool, std::string>> field58;
  std::string field59;
  std::set<bool> field60;
  int64_t field61;
  std::map<int16_t, float> field62;
  std::set<std::vector<int16_t>> field63;
  std::vector<int64_t> field64;
  std::map<int64_t,  ::cpp2::Struct1> field65;
  int64_t field66;
  std::string field67;
  std::set<float> field68;
  std::map<std::set< ::cpp2::Struct4>,  ::cpp2::Struct2> field69;
  std::set<int32_t> field70;
  std::set<std::set<double>> field71;
  std::vector<float> field72;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
  } __isset;
  bool operator==(const Struct9& rhs) const;

  bool operator < (const Struct9& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    (void)rhs;
    return false;
  }

  const std::string& get_field1() const& {
    return field1;
  }

  std::string get_field1() && {
    return std::move(field1);
  }

  template <typename T_Struct9_field1_struct_setter>
  std::string& set_field1(T_Struct9_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct9_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  float get_field2() const {
    return field2;
  }

  float& set_field2(float field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }

  float get_field3() const {
    return field3;
  }

  float& set_field3(float field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }

  const std::string& get_field4() const& {
    return field4;
  }

  std::string get_field4() && {
    return std::move(field4);
  }

  template <typename T_Struct9_field4_struct_setter>
  std::string& set_field4(T_Struct9_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct9_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }

  int8_t get_field5() const {
    return field5;
  }

  int8_t& set_field5(int8_t field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }
  const std::vector<bool>& get_field6() const&;
  std::vector<bool> get_field6() &&;

  template <typename T_Struct9_field6_struct_setter>
  std::vector<bool>& set_field6(T_Struct9_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct9_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }
  const std::set<double>& get_field7() const&;
  std::set<double> get_field7() &&;

  template <typename T_Struct9_field7_struct_setter>
  std::set<double>& set_field7(T_Struct9_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct9_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }
  const std::set<int64_t>& get_field8() const&;
  std::set<int64_t> get_field8() &&;

  template <typename T_Struct9_field8_struct_setter>
  std::set<int64_t>& set_field8(T_Struct9_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct9_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }
  const  ::cpp2::Struct0& get_field9() const&;
   ::cpp2::Struct0 get_field9() &&;

  template <typename T_Struct9_field9_struct_setter>
   ::cpp2::Struct0& set_field9(T_Struct9_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct9_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }

  int64_t get_field10() const {
    return field10;
  }

  int64_t& set_field10(int64_t field10_) {
    field10 = field10_;
    __isset.field10 = true;
    return field10;
  }

  float get_field11() const {
    return field11;
  }

  float& set_field11(float field11_) {
    field11 = field11_;
    __isset.field11 = true;
    return field11;
  }
  const std::map<int16_t,  ::cpp2::Struct3>& get_field12() const&;
  std::map<int16_t,  ::cpp2::Struct3> get_field12() &&;

  template <typename T_Struct9_field12_struct_setter>
  std::map<int16_t,  ::cpp2::Struct3>& set_field12(T_Struct9_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct9_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }
  const  ::cpp2::Struct0& get_field13() const&;
   ::cpp2::Struct0 get_field13() &&;

  template <typename T_Struct9_field13_struct_setter>
   ::cpp2::Struct0& set_field13(T_Struct9_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct9_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }

  int64_t get_field14() const {
    return field14;
  }

  int64_t& set_field14(int64_t field14_) {
    field14 = field14_;
    __isset.field14 = true;
    return field14;
  }
  const  ::cpp2::Struct2& get_field15() const&;
   ::cpp2::Struct2 get_field15() &&;

  template <typename T_Struct9_field15_struct_setter>
   ::cpp2::Struct2& set_field15(T_Struct9_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct9_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }
  const  ::cpp2::Struct2& get_field16() const&;
   ::cpp2::Struct2 get_field16() &&;

  template <typename T_Struct9_field16_struct_setter>
   ::cpp2::Struct2& set_field16(T_Struct9_field16_struct_setter&& field16_) {
    field16 = std::forward<T_Struct9_field16_struct_setter>(field16_);
    __isset.field16 = true;
    return field16;
  }

  int32_t get_field17() const {
    return field17;
  }

  int32_t& set_field17(int32_t field17_) {
    field17 = field17_;
    __isset.field17 = true;
    return field17;
  }

  int32_t get_field18() const {
    return field18;
  }

  int32_t& set_field18(int32_t field18_) {
    field18 = field18_;
    __isset.field18 = true;
    return field18;
  }
  const std::vector<std::set<std::vector<double>>>& get_field19() const&;
  std::vector<std::set<std::vector<double>>> get_field19() &&;

  template <typename T_Struct9_field19_struct_setter>
  std::vector<std::set<std::vector<double>>>& set_field19(T_Struct9_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct9_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }

  double get_field20() const {
    return field20;
  }

  double& set_field20(double field20_) {
    field20 = field20_;
    __isset.field20 = true;
    return field20;
  }

  bool get_field21() const {
    return field21;
  }

  bool& set_field21(bool field21_) {
    field21 = field21_;
    __isset.field21 = true;
    return field21;
  }
  const std::vector<int32_t>& get_field22() const&;
  std::vector<int32_t> get_field22() &&;

  template <typename T_Struct9_field22_struct_setter>
  std::vector<int32_t>& set_field22(T_Struct9_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct9_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }
  const  ::cpp2::Struct2& get_field23() const&;
   ::cpp2::Struct2 get_field23() &&;

  template <typename T_Struct9_field23_struct_setter>
   ::cpp2::Struct2& set_field23(T_Struct9_field23_struct_setter&& field23_) {
    field23 = std::forward<T_Struct9_field23_struct_setter>(field23_);
    __isset.field23 = true;
    return field23;
  }

  const std::string& get_field24() const& {
    return field24;
  }

  std::string get_field24() && {
    return std::move(field24);
  }

  template <typename T_Struct9_field24_struct_setter>
  std::string& set_field24(T_Struct9_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct9_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }

  double get_field25() const {
    return field25;
  }

  double& set_field25(double field25_) {
    field25 = field25_;
    __isset.field25 = true;
    return field25;
  }
  const  ::cpp2::Struct4& get_field26() const&;
   ::cpp2::Struct4 get_field26() &&;

  template <typename T_Struct9_field26_struct_setter>
   ::cpp2::Struct4& set_field26(T_Struct9_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct9_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }
  const std::vector<std::string>& get_field27() const&;
  std::vector<std::string> get_field27() &&;

  template <typename T_Struct9_field27_struct_setter>
  std::vector<std::string>& set_field27(T_Struct9_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct9_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }
  const std::set<int8_t>& get_field28() const&;
  std::set<int8_t> get_field28() &&;

  template <typename T_Struct9_field28_struct_setter>
  std::set<int8_t>& set_field28(T_Struct9_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct9_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }
  const std::set<int32_t>& get_field29() const&;
  std::set<int32_t> get_field29() &&;

  template <typename T_Struct9_field29_struct_setter>
  std::set<int32_t>& set_field29(T_Struct9_field29_struct_setter&& field29_) {
    field29 = std::forward<T_Struct9_field29_struct_setter>(field29_);
    __isset.field29 = true;
    return field29;
  }

  double get_field30() const {
    return field30;
  }

  double& set_field30(double field30_) {
    field30 = field30_;
    __isset.field30 = true;
    return field30;
  }
  const std::map<double, std::set<int16_t>>& get_field31() const&;
  std::map<double, std::set<int16_t>> get_field31() &&;

  template <typename T_Struct9_field31_struct_setter>
  std::map<double, std::set<int16_t>>& set_field31(T_Struct9_field31_struct_setter&& field31_) {
    field31 = std::forward<T_Struct9_field31_struct_setter>(field31_);
    __isset.field31 = true;
    return field31;
  }

  int64_t get_field32() const {
    return field32;
  }

  int64_t& set_field32(int64_t field32_) {
    field32 = field32_;
    __isset.field32 = true;
    return field32;
  }

  int8_t get_field33() const {
    return field33;
  }

  int8_t& set_field33(int8_t field33_) {
    field33 = field33_;
    __isset.field33 = true;
    return field33;
  }
  const std::map<bool, int32_t>& get_field34() const&;
  std::map<bool, int32_t> get_field34() &&;

  template <typename T_Struct9_field34_struct_setter>
  std::map<bool, int32_t>& set_field34(T_Struct9_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct9_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }

  bool get_field35() const {
    return field35;
  }

  bool& set_field35(bool field35_) {
    field35 = field35_;
    __isset.field35 = true;
    return field35;
  }
  const std::map<int64_t, std::string>& get_field36() const&;
  std::map<int64_t, std::string> get_field36() &&;

  template <typename T_Struct9_field36_struct_setter>
  std::map<int64_t, std::string>& set_field36(T_Struct9_field36_struct_setter&& field36_) {
    field36 = std::forward<T_Struct9_field36_struct_setter>(field36_);
    __isset.field36 = true;
    return field36;
  }

  bool get_field37() const {
    return field37;
  }

  bool& set_field37(bool field37_) {
    field37 = field37_;
    __isset.field37 = true;
    return field37;
  }

  float get_field38() const {
    return field38;
  }

  float& set_field38(float field38_) {
    field38 = field38_;
    __isset.field38 = true;
    return field38;
  }

  int8_t get_field39() const {
    return field39;
  }

  int8_t& set_field39(int8_t field39_) {
    field39 = field39_;
    __isset.field39 = true;
    return field39;
  }
  const std::set<std::map<bool, int32_t>>& get_field40() const&;
  std::set<std::map<bool, int32_t>> get_field40() &&;

  template <typename T_Struct9_field40_struct_setter>
  std::set<std::map<bool, int32_t>>& set_field40(T_Struct9_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct9_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }
  const std::map< ::cpp2::Struct2, std::vector<int8_t>>& get_field41() const&;
  std::map< ::cpp2::Struct2, std::vector<int8_t>> get_field41() &&;

  template <typename T_Struct9_field41_struct_setter>
  std::map< ::cpp2::Struct2, std::vector<int8_t>>& set_field41(T_Struct9_field41_struct_setter&& field41_) {
    field41 = std::forward<T_Struct9_field41_struct_setter>(field41_);
    __isset.field41 = true;
    return field41;
  }

  int32_t get_field42() const {
    return field42;
  }

  int32_t& set_field42(int32_t field42_) {
    field42 = field42_;
    __isset.field42 = true;
    return field42;
  }

  const std::string& get_field43() const& {
    return field43;
  }

  std::string get_field43() && {
    return std::move(field43);
  }

  template <typename T_Struct9_field43_struct_setter>
  std::string& set_field43(T_Struct9_field43_struct_setter&& field43_) {
    field43 = std::forward<T_Struct9_field43_struct_setter>(field43_);
    __isset.field43 = true;
    return field43;
  }

  int64_t get_field44() const {
    return field44;
  }

  int64_t& set_field44(int64_t field44_) {
    field44 = field44_;
    __isset.field44 = true;
    return field44;
  }
  const std::map<std::string, float>& get_field45() const&;
  std::map<std::string, float> get_field45() &&;

  template <typename T_Struct9_field45_struct_setter>
  std::map<std::string, float>& set_field45(T_Struct9_field45_struct_setter&& field45_) {
    field45 = std::forward<T_Struct9_field45_struct_setter>(field45_);
    __isset.field45 = true;
    return field45;
  }

  int32_t get_field46() const {
    return field46;
  }

  int32_t& set_field46(int32_t field46_) {
    field46 = field46_;
    __isset.field46 = true;
    return field46;
  }

  double get_field47() const {
    return field47;
  }

  double& set_field47(double field47_) {
    field47 = field47_;
    __isset.field47 = true;
    return field47;
  }
  const std::map<int64_t, std::string>& get_field48() const&;
  std::map<int64_t, std::string> get_field48() &&;

  template <typename T_Struct9_field48_struct_setter>
  std::map<int64_t, std::string>& set_field48(T_Struct9_field48_struct_setter&& field48_) {
    field48 = std::forward<T_Struct9_field48_struct_setter>(field48_);
    __isset.field48 = true;
    return field48;
  }
  const  ::cpp2::Struct2& get_field49() const&;
   ::cpp2::Struct2 get_field49() &&;

  template <typename T_Struct9_field49_struct_setter>
   ::cpp2::Struct2& set_field49(T_Struct9_field49_struct_setter&& field49_) {
    field49 = std::forward<T_Struct9_field49_struct_setter>(field49_);
    __isset.field49 = true;
    return field49;
  }

  int64_t get_field50() const {
    return field50;
  }

  int64_t& set_field50(int64_t field50_) {
    field50 = field50_;
    __isset.field50 = true;
    return field50;
  }

  int8_t get_field51() const {
    return field51;
  }

  int8_t& set_field51(int8_t field51_) {
    field51 = field51_;
    __isset.field51 = true;
    return field51;
  }
  const std::set<std::set<int16_t>>& get_field52() const&;
  std::set<std::set<int16_t>> get_field52() &&;

  template <typename T_Struct9_field52_struct_setter>
  std::set<std::set<int16_t>>& set_field52(T_Struct9_field52_struct_setter&& field52_) {
    field52 = std::forward<T_Struct9_field52_struct_setter>(field52_);
    __isset.field52 = true;
    return field52;
  }

  int16_t get_field53() const {
    return field53;
  }

  int16_t& set_field53(int16_t field53_) {
    field53 = field53_;
    __isset.field53 = true;
    return field53;
  }
  const  ::cpp2::Struct1& get_field54() const&;
   ::cpp2::Struct1 get_field54() &&;

  template <typename T_Struct9_field54_struct_setter>
   ::cpp2::Struct1& set_field54(T_Struct9_field54_struct_setter&& field54_) {
    field54 = std::forward<T_Struct9_field54_struct_setter>(field54_);
    __isset.field54 = true;
    return field54;
  }
  const std::vector<int32_t>& get_field55() const&;
  std::vector<int32_t> get_field55() &&;

  template <typename T_Struct9_field55_struct_setter>
  std::vector<int32_t>& set_field55(T_Struct9_field55_struct_setter&& field55_) {
    field55 = std::forward<T_Struct9_field55_struct_setter>(field55_);
    __isset.field55 = true;
    return field55;
  }

  const std::string& get_field56() const& {
    return field56;
  }

  std::string get_field56() && {
    return std::move(field56);
  }

  template <typename T_Struct9_field56_struct_setter>
  std::string& set_field56(T_Struct9_field56_struct_setter&& field56_) {
    field56 = std::forward<T_Struct9_field56_struct_setter>(field56_);
    __isset.field56 = true;
    return field56;
  }
  const  ::cpp2::Struct1& get_field57() const&;
   ::cpp2::Struct1 get_field57() &&;

  template <typename T_Struct9_field57_struct_setter>
   ::cpp2::Struct1& set_field57(T_Struct9_field57_struct_setter&& field57_) {
    field57 = std::forward<T_Struct9_field57_struct_setter>(field57_);
    __isset.field57 = true;
    return field57;
  }
  const std::map<std::map<int64_t, int8_t>, std::map<bool, std::string>>& get_field58() const&;
  std::map<std::map<int64_t, int8_t>, std::map<bool, std::string>> get_field58() &&;

  template <typename T_Struct9_field58_struct_setter>
  std::map<std::map<int64_t, int8_t>, std::map<bool, std::string>>& set_field58(T_Struct9_field58_struct_setter&& field58_) {
    field58 = std::forward<T_Struct9_field58_struct_setter>(field58_);
    __isset.field58 = true;
    return field58;
  }

  const std::string& get_field59() const& {
    return field59;
  }

  std::string get_field59() && {
    return std::move(field59);
  }

  template <typename T_Struct9_field59_struct_setter>
  std::string& set_field59(T_Struct9_field59_struct_setter&& field59_) {
    field59 = std::forward<T_Struct9_field59_struct_setter>(field59_);
    __isset.field59 = true;
    return field59;
  }
  const std::set<bool>& get_field60() const&;
  std::set<bool> get_field60() &&;

  template <typename T_Struct9_field60_struct_setter>
  std::set<bool>& set_field60(T_Struct9_field60_struct_setter&& field60_) {
    field60 = std::forward<T_Struct9_field60_struct_setter>(field60_);
    __isset.field60 = true;
    return field60;
  }

  int64_t get_field61() const {
    return field61;
  }

  int64_t& set_field61(int64_t field61_) {
    field61 = field61_;
    __isset.field61 = true;
    return field61;
  }
  const std::map<int16_t, float>& get_field62() const&;
  std::map<int16_t, float> get_field62() &&;

  template <typename T_Struct9_field62_struct_setter>
  std::map<int16_t, float>& set_field62(T_Struct9_field62_struct_setter&& field62_) {
    field62 = std::forward<T_Struct9_field62_struct_setter>(field62_);
    __isset.field62 = true;
    return field62;
  }
  const std::set<std::vector<int16_t>>& get_field63() const&;
  std::set<std::vector<int16_t>> get_field63() &&;

  template <typename T_Struct9_field63_struct_setter>
  std::set<std::vector<int16_t>>& set_field63(T_Struct9_field63_struct_setter&& field63_) {
    field63 = std::forward<T_Struct9_field63_struct_setter>(field63_);
    __isset.field63 = true;
    return field63;
  }
  const std::vector<int64_t>& get_field64() const&;
  std::vector<int64_t> get_field64() &&;

  template <typename T_Struct9_field64_struct_setter>
  std::vector<int64_t>& set_field64(T_Struct9_field64_struct_setter&& field64_) {
    field64 = std::forward<T_Struct9_field64_struct_setter>(field64_);
    __isset.field64 = true;
    return field64;
  }
  const std::map<int64_t,  ::cpp2::Struct1>& get_field65() const&;
  std::map<int64_t,  ::cpp2::Struct1> get_field65() &&;

  template <typename T_Struct9_field65_struct_setter>
  std::map<int64_t,  ::cpp2::Struct1>& set_field65(T_Struct9_field65_struct_setter&& field65_) {
    field65 = std::forward<T_Struct9_field65_struct_setter>(field65_);
    __isset.field65 = true;
    return field65;
  }

  int64_t get_field66() const {
    return field66;
  }

  int64_t& set_field66(int64_t field66_) {
    field66 = field66_;
    __isset.field66 = true;
    return field66;
  }

  const std::string& get_field67() const& {
    return field67;
  }

  std::string get_field67() && {
    return std::move(field67);
  }

  template <typename T_Struct9_field67_struct_setter>
  std::string& set_field67(T_Struct9_field67_struct_setter&& field67_) {
    field67 = std::forward<T_Struct9_field67_struct_setter>(field67_);
    __isset.field67 = true;
    return field67;
  }
  const std::set<float>& get_field68() const&;
  std::set<float> get_field68() &&;

  template <typename T_Struct9_field68_struct_setter>
  std::set<float>& set_field68(T_Struct9_field68_struct_setter&& field68_) {
    field68 = std::forward<T_Struct9_field68_struct_setter>(field68_);
    __isset.field68 = true;
    return field68;
  }
  const std::map<std::set< ::cpp2::Struct4>,  ::cpp2::Struct2>& get_field69() const&;
  std::map<std::set< ::cpp2::Struct4>,  ::cpp2::Struct2> get_field69() &&;

  template <typename T_Struct9_field69_struct_setter>
  std::map<std::set< ::cpp2::Struct4>,  ::cpp2::Struct2>& set_field69(T_Struct9_field69_struct_setter&& field69_) {
    field69 = std::forward<T_Struct9_field69_struct_setter>(field69_);
    __isset.field69 = true;
    return field69;
  }
  const std::set<int32_t>& get_field70() const&;
  std::set<int32_t> get_field70() &&;

  template <typename T_Struct9_field70_struct_setter>
  std::set<int32_t>& set_field70(T_Struct9_field70_struct_setter&& field70_) {
    field70 = std::forward<T_Struct9_field70_struct_setter>(field70_);
    __isset.field70 = true;
    return field70;
  }
  const std::set<std::set<double>>& get_field71() const&;
  std::set<std::set<double>> get_field71() &&;

  template <typename T_Struct9_field71_struct_setter>
  std::set<std::set<double>>& set_field71(T_Struct9_field71_struct_setter&& field71_) {
    field71 = std::forward<T_Struct9_field71_struct_setter>(field71_);
    __isset.field71 = true;
    return field71;
  }
  const std::vector<float>& get_field72() const&;
  std::vector<float> get_field72() &&;

  template <typename T_Struct9_field72_struct_setter>
  std::vector<float>& set_field72(T_Struct9_field72_struct_setter&& field72_) {
    field72 = std::forward<T_Struct9_field72_struct_setter>(field72_);
    __isset.field72 = true;
    return field72;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct9& a, Struct9& b);
extern template uint32_t Struct9::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct9::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct9::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct9::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct9::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct9::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct9::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct9::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct9>::clear( ::cpp2::Struct9* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct9>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct9>::write(Protocol* proto,  ::cpp2::Struct9 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct9>::read(Protocol* proto,  ::cpp2::Struct9* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct9>::serializedSize(Protocol const* proto,  ::cpp2::Struct9 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct9>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct9 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct10 : private apache::thrift::detail::st::ComparisonOperators<Struct10> {
 public:

  Struct10() :
      field2(0),
      field3(0),
      field7(0),
      field11(0),
      field13(0),
      field14(0),
      field20(0),
      field23(0),
      field25(0),
      field26(0),
      field29(0),
      field33(0),
      field34(0),
      field36(0),
      field39(0),
      field41(0),
      field42(0),
      field43(0),
      field44(0),
      field46(0),
      field54(0),
      field55(0),
      field56(0),
      field58(0),
      field59(0),
      field61(0),
      field66(0),
      field71(0),
      field75(0),
      field82(0),
      field85(0),
      field87(0),
      field91(0),
      field97(0) {}
  // FragileConstructor for use in initialization lists only

  Struct10(apache::thrift::FragileConstructor, std::string field1__arg, double field2__arg, float field3__arg, std::set<std::string> field4__arg, std::map<int8_t, std::map<double, bool>> field5__arg, std::string field6__arg, double field7__arg, std::vector<float> field8__arg,  ::cpp2::Struct0 field9__arg, std::string field10__arg, int32_t field11__arg,  ::cpp2::Struct1 field12__arg, double field13__arg, int16_t field14__arg,  ::cpp2::Struct3 field15__arg, std::set<std::vector<bool>> field16__arg, std::map< ::cpp2::Struct1, int64_t> field17__arg,  ::cpp2::Struct6 field18__arg, std::vector<std::string> field19__arg, double field20__arg, std::vector<std::map<int32_t, std::string>> field21__arg, std::string field22__arg, float field23__arg, std::map<int64_t, bool> field24__arg, int64_t field25__arg, int16_t field26__arg, std::vector<bool> field27__arg, std::map<std::string, std::string> field28__arg, int16_t field29__arg, std::set<int16_t> field30__arg,  ::cpp2::Struct4 field31__arg, std::set<int32_t> field32__arg, int8_t field33__arg, int64_t field34__arg, std::vector<int32_t> field35__arg, double field36__arg, std::map<std::string, std::map<int32_t, std::map<double, std::string>>> field37__arg, std::set<int32_t> field38__arg, bool field39__arg, std::set<std::string> field40__arg, bool field41__arg, double field42__arg, double field43__arg, double field44__arg, std::string field45__arg, int16_t field46__arg, std::vector<std::map<double, std::string>> field47__arg,  ::cpp2::Struct2 field48__arg, std::vector<std::string> field49__arg, std::set<std::string> field50__arg,  ::cpp2::Struct6 field51__arg,  ::cpp2::Struct1 field52__arg,  ::cpp2::Struct0 field53__arg, double field54__arg, int8_t field55__arg, int64_t field56__arg, std::map<int32_t,  ::cpp2::Struct0> field57__arg, int64_t field58__arg, int16_t field59__arg, std::set<double> field60__arg, double field61__arg,  ::cpp2::Struct0 field62__arg, std::map<float, float> field63__arg, std::map<float, int8_t> field64__arg, std::vector<float> field65__arg, bool field66__arg, std::vector<std::string> field67__arg, std::vector< ::cpp2::Struct0> field68__arg, std::set< ::cpp2::Struct1> field69__arg, std::vector<bool> field70__arg, int16_t field71__arg,  ::cpp2::Struct7 field72__arg,  ::cpp2::Struct6 field73__arg, std::map< ::cpp2::Struct2, std::string> field74__arg, int64_t field75__arg, std::string field76__arg, std::map<int16_t, std::string> field77__arg, std::set<int64_t> field78__arg, std::map<bool, int64_t> field79__arg, std::map< ::cpp2::Struct3, bool> field80__arg,  ::cpp2::Struct4 field81__arg, bool field82__arg,  ::cpp2::Struct5 field83__arg, std::vector<std::string> field84__arg, bool field85__arg,  ::cpp2::Struct3 field86__arg, int16_t field87__arg, std::set<bool> field88__arg,  ::cpp2::Struct0 field89__arg, std::map< ::cpp2::Struct1, int16_t> field90__arg, bool field91__arg, std::set<std::string> field92__arg, std::map<float, int64_t> field93__arg, std::vector<int8_t> field94__arg, std::set<bool> field95__arg, std::string field96__arg, int16_t field97__arg,  ::cpp2::Struct4 field98__arg, std::set<double> field99__arg, std::string field100__arg, std::set<int8_t> field101__arg, std::map<std::string, std::set<double>> field102__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)),
      field97(std::move(field97__arg)),
      field98(std::move(field98__arg)),
      field99(std::move(field99__arg)),
      field100(std::move(field100__arg)),
      field101(std::move(field101__arg)),
      field102(std::move(field102__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
    __isset.field97 = true;
    __isset.field98 = true;
    __isset.field99 = true;
    __isset.field100 = true;
    __isset.field101 = true;
    __isset.field102 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<97, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field97 = arg.move();
    __isset.field97 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<98, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field98 = arg.move();
    __isset.field98 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<99, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field99 = arg.move();
    __isset.field99 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field100 = arg.move();
    __isset.field100 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field101 = arg.move();
    __isset.field101 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct10(::apache::thrift::detail::argument_wrapper<102, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct10(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field102 = arg.move();
    __isset.field102 = true;
  }

  Struct10(Struct10&&) = default;

  Struct10(const Struct10&) = default;

  Struct10& operator=(Struct10&&) = default;

  Struct10& operator=(const Struct10&) = default;
  void __clear();

  virtual ~Struct10() {}

  std::string field1;
  double field2;
  float field3;
  std::set<std::string> field4;
  std::map<int8_t, std::map<double, bool>> field5;
  std::string field6;
  double field7;
  std::vector<float> field8;
   ::cpp2::Struct0 field9;
  std::string field10;
  int32_t field11;
   ::cpp2::Struct1 field12;
  double field13;
  int16_t field14;
   ::cpp2::Struct3 field15;
  std::set<std::vector<bool>> field16;
  std::map< ::cpp2::Struct1, int64_t> field17;
   ::cpp2::Struct6 field18;
  std::vector<std::string> field19;
  double field20;
  std::vector<std::map<int32_t, std::string>> field21;
  std::string field22;
  float field23;
  std::map<int64_t, bool> field24;
  int64_t field25;
  int16_t field26;
  std::vector<bool> field27;
  std::map<std::string, std::string> field28;
  int16_t field29;
  std::set<int16_t> field30;
   ::cpp2::Struct4 field31;
  std::set<int32_t> field32;
  int8_t field33;
  int64_t field34;
  std::vector<int32_t> field35;
  double field36;
  std::map<std::string, std::map<int32_t, std::map<double, std::string>>> field37;
  std::set<int32_t> field38;
  bool field39;
  std::set<std::string> field40;
  bool field41;
  double field42;
  double field43;
  double field44;
  std::string field45;
  int16_t field46;
  std::vector<std::map<double, std::string>> field47;
   ::cpp2::Struct2 field48;
  std::vector<std::string> field49;
  std::set<std::string> field50;
   ::cpp2::Struct6 field51;
   ::cpp2::Struct1 field52;
   ::cpp2::Struct0 field53;
  double field54;
  int8_t field55;
  int64_t field56;
  std::map<int32_t,  ::cpp2::Struct0> field57;
  int64_t field58;
  int16_t field59;
  std::set<double> field60;
  double field61;
   ::cpp2::Struct0 field62;
  std::map<float, float> field63;
  std::map<float, int8_t> field64;
  std::vector<float> field65;
  bool field66;
  std::vector<std::string> field67;
  std::vector< ::cpp2::Struct0> field68;
  std::set< ::cpp2::Struct1> field69;
  std::vector<bool> field70;
  int16_t field71;
   ::cpp2::Struct7 field72;
   ::cpp2::Struct6 field73;
  std::map< ::cpp2::Struct2, std::string> field74;
  int64_t field75;
  std::string field76;
  std::map<int16_t, std::string> field77;
  std::set<int64_t> field78;
  std::map<bool, int64_t> field79;
  std::map< ::cpp2::Struct3, bool> field80;
   ::cpp2::Struct4 field81;
  bool field82;
   ::cpp2::Struct5 field83;
  std::vector<std::string> field84;
  bool field85;
   ::cpp2::Struct3 field86;
  int16_t field87;
  std::set<bool> field88;
   ::cpp2::Struct0 field89;
  std::map< ::cpp2::Struct1, int16_t> field90;
  bool field91;
  std::set<std::string> field92;
  std::map<float, int64_t> field93;
  std::vector<int8_t> field94;
  std::set<bool> field95;
  std::string field96;
  int16_t field97;
   ::cpp2::Struct4 field98;
  std::set<double> field99;
  std::string field100;
  std::set<int8_t> field101;
  std::map<std::string, std::set<double>> field102;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
      field97 = false;
      field98 = false;
      field99 = false;
      field100 = false;
      field101 = false;
      field102 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
    bool field97 = false;
    bool field98 = false;
    bool field99 = false;
    bool field100 = false;
    bool field101 = false;
    bool field102 = false;
  } __isset;
  bool operator==(const Struct10& rhs) const;

  bool operator < (const Struct10& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    if (!(field97 == rhs.field97)) {
      return field97 < rhs.field97;
    }
    if (!(field98 == rhs.field98)) {
      return field98 < rhs.field98;
    }
    if (!(field99 == rhs.field99)) {
      return field99 < rhs.field99;
    }
    if (!(field100 == rhs.field100)) {
      return field100 < rhs.field100;
    }
    if (!(field101 == rhs.field101)) {
      return field101 < rhs.field101;
    }
    if (!(field102 == rhs.field102)) {
      return field102 < rhs.field102;
    }
    (void)rhs;
    return false;
  }

  const std::string& get_field1() const& {
    return field1;
  }

  std::string get_field1() && {
    return std::move(field1);
  }

  template <typename T_Struct10_field1_struct_setter>
  std::string& set_field1(T_Struct10_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct10_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  double get_field2() const {
    return field2;
  }

  double& set_field2(double field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }

  float get_field3() const {
    return field3;
  }

  float& set_field3(float field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }
  const std::set<std::string>& get_field4() const&;
  std::set<std::string> get_field4() &&;

  template <typename T_Struct10_field4_struct_setter>
  std::set<std::string>& set_field4(T_Struct10_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct10_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }
  const std::map<int8_t, std::map<double, bool>>& get_field5() const&;
  std::map<int8_t, std::map<double, bool>> get_field5() &&;

  template <typename T_Struct10_field5_struct_setter>
  std::map<int8_t, std::map<double, bool>>& set_field5(T_Struct10_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct10_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }

  const std::string& get_field6() const& {
    return field6;
  }

  std::string get_field6() && {
    return std::move(field6);
  }

  template <typename T_Struct10_field6_struct_setter>
  std::string& set_field6(T_Struct10_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct10_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }

  double get_field7() const {
    return field7;
  }

  double& set_field7(double field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }
  const std::vector<float>& get_field8() const&;
  std::vector<float> get_field8() &&;

  template <typename T_Struct10_field8_struct_setter>
  std::vector<float>& set_field8(T_Struct10_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct10_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }
  const  ::cpp2::Struct0& get_field9() const&;
   ::cpp2::Struct0 get_field9() &&;

  template <typename T_Struct10_field9_struct_setter>
   ::cpp2::Struct0& set_field9(T_Struct10_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct10_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }

  const std::string& get_field10() const& {
    return field10;
  }

  std::string get_field10() && {
    return std::move(field10);
  }

  template <typename T_Struct10_field10_struct_setter>
  std::string& set_field10(T_Struct10_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct10_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }

  int32_t get_field11() const {
    return field11;
  }

  int32_t& set_field11(int32_t field11_) {
    field11 = field11_;
    __isset.field11 = true;
    return field11;
  }
  const  ::cpp2::Struct1& get_field12() const&;
   ::cpp2::Struct1 get_field12() &&;

  template <typename T_Struct10_field12_struct_setter>
   ::cpp2::Struct1& set_field12(T_Struct10_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct10_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }

  double get_field13() const {
    return field13;
  }

  double& set_field13(double field13_) {
    field13 = field13_;
    __isset.field13 = true;
    return field13;
  }

  int16_t get_field14() const {
    return field14;
  }

  int16_t& set_field14(int16_t field14_) {
    field14 = field14_;
    __isset.field14 = true;
    return field14;
  }
  const  ::cpp2::Struct3& get_field15() const&;
   ::cpp2::Struct3 get_field15() &&;

  template <typename T_Struct10_field15_struct_setter>
   ::cpp2::Struct3& set_field15(T_Struct10_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct10_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }
  const std::set<std::vector<bool>>& get_field16() const&;
  std::set<std::vector<bool>> get_field16() &&;

  template <typename T_Struct10_field16_struct_setter>
  std::set<std::vector<bool>>& set_field16(T_Struct10_field16_struct_setter&& field16_) {
    field16 = std::forward<T_Struct10_field16_struct_setter>(field16_);
    __isset.field16 = true;
    return field16;
  }
  const std::map< ::cpp2::Struct1, int64_t>& get_field17() const&;
  std::map< ::cpp2::Struct1, int64_t> get_field17() &&;

  template <typename T_Struct10_field17_struct_setter>
  std::map< ::cpp2::Struct1, int64_t>& set_field17(T_Struct10_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct10_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }
  const  ::cpp2::Struct6& get_field18() const&;
   ::cpp2::Struct6 get_field18() &&;

  template <typename T_Struct10_field18_struct_setter>
   ::cpp2::Struct6& set_field18(T_Struct10_field18_struct_setter&& field18_) {
    field18 = std::forward<T_Struct10_field18_struct_setter>(field18_);
    __isset.field18 = true;
    return field18;
  }
  const std::vector<std::string>& get_field19() const&;
  std::vector<std::string> get_field19() &&;

  template <typename T_Struct10_field19_struct_setter>
  std::vector<std::string>& set_field19(T_Struct10_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct10_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }

  double get_field20() const {
    return field20;
  }

  double& set_field20(double field20_) {
    field20 = field20_;
    __isset.field20 = true;
    return field20;
  }
  const std::vector<std::map<int32_t, std::string>>& get_field21() const&;
  std::vector<std::map<int32_t, std::string>> get_field21() &&;

  template <typename T_Struct10_field21_struct_setter>
  std::vector<std::map<int32_t, std::string>>& set_field21(T_Struct10_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct10_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }

  const std::string& get_field22() const& {
    return field22;
  }

  std::string get_field22() && {
    return std::move(field22);
  }

  template <typename T_Struct10_field22_struct_setter>
  std::string& set_field22(T_Struct10_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct10_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }

  float get_field23() const {
    return field23;
  }

  float& set_field23(float field23_) {
    field23 = field23_;
    __isset.field23 = true;
    return field23;
  }
  const std::map<int64_t, bool>& get_field24() const&;
  std::map<int64_t, bool> get_field24() &&;

  template <typename T_Struct10_field24_struct_setter>
  std::map<int64_t, bool>& set_field24(T_Struct10_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct10_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }

  int64_t get_field25() const {
    return field25;
  }

  int64_t& set_field25(int64_t field25_) {
    field25 = field25_;
    __isset.field25 = true;
    return field25;
  }

  int16_t get_field26() const {
    return field26;
  }

  int16_t& set_field26(int16_t field26_) {
    field26 = field26_;
    __isset.field26 = true;
    return field26;
  }
  const std::vector<bool>& get_field27() const&;
  std::vector<bool> get_field27() &&;

  template <typename T_Struct10_field27_struct_setter>
  std::vector<bool>& set_field27(T_Struct10_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct10_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }
  const std::map<std::string, std::string>& get_field28() const&;
  std::map<std::string, std::string> get_field28() &&;

  template <typename T_Struct10_field28_struct_setter>
  std::map<std::string, std::string>& set_field28(T_Struct10_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct10_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }

  int16_t get_field29() const {
    return field29;
  }

  int16_t& set_field29(int16_t field29_) {
    field29 = field29_;
    __isset.field29 = true;
    return field29;
  }
  const std::set<int16_t>& get_field30() const&;
  std::set<int16_t> get_field30() &&;

  template <typename T_Struct10_field30_struct_setter>
  std::set<int16_t>& set_field30(T_Struct10_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct10_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }
  const  ::cpp2::Struct4& get_field31() const&;
   ::cpp2::Struct4 get_field31() &&;

  template <typename T_Struct10_field31_struct_setter>
   ::cpp2::Struct4& set_field31(T_Struct10_field31_struct_setter&& field31_) {
    field31 = std::forward<T_Struct10_field31_struct_setter>(field31_);
    __isset.field31 = true;
    return field31;
  }
  const std::set<int32_t>& get_field32() const&;
  std::set<int32_t> get_field32() &&;

  template <typename T_Struct10_field32_struct_setter>
  std::set<int32_t>& set_field32(T_Struct10_field32_struct_setter&& field32_) {
    field32 = std::forward<T_Struct10_field32_struct_setter>(field32_);
    __isset.field32 = true;
    return field32;
  }

  int8_t get_field33() const {
    return field33;
  }

  int8_t& set_field33(int8_t field33_) {
    field33 = field33_;
    __isset.field33 = true;
    return field33;
  }

  int64_t get_field34() const {
    return field34;
  }

  int64_t& set_field34(int64_t field34_) {
    field34 = field34_;
    __isset.field34 = true;
    return field34;
  }
  const std::vector<int32_t>& get_field35() const&;
  std::vector<int32_t> get_field35() &&;

  template <typename T_Struct10_field35_struct_setter>
  std::vector<int32_t>& set_field35(T_Struct10_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct10_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }

  double get_field36() const {
    return field36;
  }

  double& set_field36(double field36_) {
    field36 = field36_;
    __isset.field36 = true;
    return field36;
  }
  const std::map<std::string, std::map<int32_t, std::map<double, std::string>>>& get_field37() const&;
  std::map<std::string, std::map<int32_t, std::map<double, std::string>>> get_field37() &&;

  template <typename T_Struct10_field37_struct_setter>
  std::map<std::string, std::map<int32_t, std::map<double, std::string>>>& set_field37(T_Struct10_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct10_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }
  const std::set<int32_t>& get_field38() const&;
  std::set<int32_t> get_field38() &&;

  template <typename T_Struct10_field38_struct_setter>
  std::set<int32_t>& set_field38(T_Struct10_field38_struct_setter&& field38_) {
    field38 = std::forward<T_Struct10_field38_struct_setter>(field38_);
    __isset.field38 = true;
    return field38;
  }

  bool get_field39() const {
    return field39;
  }

  bool& set_field39(bool field39_) {
    field39 = field39_;
    __isset.field39 = true;
    return field39;
  }
  const std::set<std::string>& get_field40() const&;
  std::set<std::string> get_field40() &&;

  template <typename T_Struct10_field40_struct_setter>
  std::set<std::string>& set_field40(T_Struct10_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct10_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }

  bool get_field41() const {
    return field41;
  }

  bool& set_field41(bool field41_) {
    field41 = field41_;
    __isset.field41 = true;
    return field41;
  }

  double get_field42() const {
    return field42;
  }

  double& set_field42(double field42_) {
    field42 = field42_;
    __isset.field42 = true;
    return field42;
  }

  double get_field43() const {
    return field43;
  }

  double& set_field43(double field43_) {
    field43 = field43_;
    __isset.field43 = true;
    return field43;
  }

  double get_field44() const {
    return field44;
  }

  double& set_field44(double field44_) {
    field44 = field44_;
    __isset.field44 = true;
    return field44;
  }

  const std::string& get_field45() const& {
    return field45;
  }

  std::string get_field45() && {
    return std::move(field45);
  }

  template <typename T_Struct10_field45_struct_setter>
  std::string& set_field45(T_Struct10_field45_struct_setter&& field45_) {
    field45 = std::forward<T_Struct10_field45_struct_setter>(field45_);
    __isset.field45 = true;
    return field45;
  }

  int16_t get_field46() const {
    return field46;
  }

  int16_t& set_field46(int16_t field46_) {
    field46 = field46_;
    __isset.field46 = true;
    return field46;
  }
  const std::vector<std::map<double, std::string>>& get_field47() const&;
  std::vector<std::map<double, std::string>> get_field47() &&;

  template <typename T_Struct10_field47_struct_setter>
  std::vector<std::map<double, std::string>>& set_field47(T_Struct10_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct10_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }
  const  ::cpp2::Struct2& get_field48() const&;
   ::cpp2::Struct2 get_field48() &&;

  template <typename T_Struct10_field48_struct_setter>
   ::cpp2::Struct2& set_field48(T_Struct10_field48_struct_setter&& field48_) {
    field48 = std::forward<T_Struct10_field48_struct_setter>(field48_);
    __isset.field48 = true;
    return field48;
  }
  const std::vector<std::string>& get_field49() const&;
  std::vector<std::string> get_field49() &&;

  template <typename T_Struct10_field49_struct_setter>
  std::vector<std::string>& set_field49(T_Struct10_field49_struct_setter&& field49_) {
    field49 = std::forward<T_Struct10_field49_struct_setter>(field49_);
    __isset.field49 = true;
    return field49;
  }
  const std::set<std::string>& get_field50() const&;
  std::set<std::string> get_field50() &&;

  template <typename T_Struct10_field50_struct_setter>
  std::set<std::string>& set_field50(T_Struct10_field50_struct_setter&& field50_) {
    field50 = std::forward<T_Struct10_field50_struct_setter>(field50_);
    __isset.field50 = true;
    return field50;
  }
  const  ::cpp2::Struct6& get_field51() const&;
   ::cpp2::Struct6 get_field51() &&;

  template <typename T_Struct10_field51_struct_setter>
   ::cpp2::Struct6& set_field51(T_Struct10_field51_struct_setter&& field51_) {
    field51 = std::forward<T_Struct10_field51_struct_setter>(field51_);
    __isset.field51 = true;
    return field51;
  }
  const  ::cpp2::Struct1& get_field52() const&;
   ::cpp2::Struct1 get_field52() &&;

  template <typename T_Struct10_field52_struct_setter>
   ::cpp2::Struct1& set_field52(T_Struct10_field52_struct_setter&& field52_) {
    field52 = std::forward<T_Struct10_field52_struct_setter>(field52_);
    __isset.field52 = true;
    return field52;
  }
  const  ::cpp2::Struct0& get_field53() const&;
   ::cpp2::Struct0 get_field53() &&;

  template <typename T_Struct10_field53_struct_setter>
   ::cpp2::Struct0& set_field53(T_Struct10_field53_struct_setter&& field53_) {
    field53 = std::forward<T_Struct10_field53_struct_setter>(field53_);
    __isset.field53 = true;
    return field53;
  }

  double get_field54() const {
    return field54;
  }

  double& set_field54(double field54_) {
    field54 = field54_;
    __isset.field54 = true;
    return field54;
  }

  int8_t get_field55() const {
    return field55;
  }

  int8_t& set_field55(int8_t field55_) {
    field55 = field55_;
    __isset.field55 = true;
    return field55;
  }

  int64_t get_field56() const {
    return field56;
  }

  int64_t& set_field56(int64_t field56_) {
    field56 = field56_;
    __isset.field56 = true;
    return field56;
  }
  const std::map<int32_t,  ::cpp2::Struct0>& get_field57() const&;
  std::map<int32_t,  ::cpp2::Struct0> get_field57() &&;

  template <typename T_Struct10_field57_struct_setter>
  std::map<int32_t,  ::cpp2::Struct0>& set_field57(T_Struct10_field57_struct_setter&& field57_) {
    field57 = std::forward<T_Struct10_field57_struct_setter>(field57_);
    __isset.field57 = true;
    return field57;
  }

  int64_t get_field58() const {
    return field58;
  }

  int64_t& set_field58(int64_t field58_) {
    field58 = field58_;
    __isset.field58 = true;
    return field58;
  }

  int16_t get_field59() const {
    return field59;
  }

  int16_t& set_field59(int16_t field59_) {
    field59 = field59_;
    __isset.field59 = true;
    return field59;
  }
  const std::set<double>& get_field60() const&;
  std::set<double> get_field60() &&;

  template <typename T_Struct10_field60_struct_setter>
  std::set<double>& set_field60(T_Struct10_field60_struct_setter&& field60_) {
    field60 = std::forward<T_Struct10_field60_struct_setter>(field60_);
    __isset.field60 = true;
    return field60;
  }

  double get_field61() const {
    return field61;
  }

  double& set_field61(double field61_) {
    field61 = field61_;
    __isset.field61 = true;
    return field61;
  }
  const  ::cpp2::Struct0& get_field62() const&;
   ::cpp2::Struct0 get_field62() &&;

  template <typename T_Struct10_field62_struct_setter>
   ::cpp2::Struct0& set_field62(T_Struct10_field62_struct_setter&& field62_) {
    field62 = std::forward<T_Struct10_field62_struct_setter>(field62_);
    __isset.field62 = true;
    return field62;
  }
  const std::map<float, float>& get_field63() const&;
  std::map<float, float> get_field63() &&;

  template <typename T_Struct10_field63_struct_setter>
  std::map<float, float>& set_field63(T_Struct10_field63_struct_setter&& field63_) {
    field63 = std::forward<T_Struct10_field63_struct_setter>(field63_);
    __isset.field63 = true;
    return field63;
  }
  const std::map<float, int8_t>& get_field64() const&;
  std::map<float, int8_t> get_field64() &&;

  template <typename T_Struct10_field64_struct_setter>
  std::map<float, int8_t>& set_field64(T_Struct10_field64_struct_setter&& field64_) {
    field64 = std::forward<T_Struct10_field64_struct_setter>(field64_);
    __isset.field64 = true;
    return field64;
  }
  const std::vector<float>& get_field65() const&;
  std::vector<float> get_field65() &&;

  template <typename T_Struct10_field65_struct_setter>
  std::vector<float>& set_field65(T_Struct10_field65_struct_setter&& field65_) {
    field65 = std::forward<T_Struct10_field65_struct_setter>(field65_);
    __isset.field65 = true;
    return field65;
  }

  bool get_field66() const {
    return field66;
  }

  bool& set_field66(bool field66_) {
    field66 = field66_;
    __isset.field66 = true;
    return field66;
  }
  const std::vector<std::string>& get_field67() const&;
  std::vector<std::string> get_field67() &&;

  template <typename T_Struct10_field67_struct_setter>
  std::vector<std::string>& set_field67(T_Struct10_field67_struct_setter&& field67_) {
    field67 = std::forward<T_Struct10_field67_struct_setter>(field67_);
    __isset.field67 = true;
    return field67;
  }
  const std::vector< ::cpp2::Struct0>& get_field68() const&;
  std::vector< ::cpp2::Struct0> get_field68() &&;

  template <typename T_Struct10_field68_struct_setter>
  std::vector< ::cpp2::Struct0>& set_field68(T_Struct10_field68_struct_setter&& field68_) {
    field68 = std::forward<T_Struct10_field68_struct_setter>(field68_);
    __isset.field68 = true;
    return field68;
  }
  const std::set< ::cpp2::Struct1>& get_field69() const&;
  std::set< ::cpp2::Struct1> get_field69() &&;

  template <typename T_Struct10_field69_struct_setter>
  std::set< ::cpp2::Struct1>& set_field69(T_Struct10_field69_struct_setter&& field69_) {
    field69 = std::forward<T_Struct10_field69_struct_setter>(field69_);
    __isset.field69 = true;
    return field69;
  }
  const std::vector<bool>& get_field70() const&;
  std::vector<bool> get_field70() &&;

  template <typename T_Struct10_field70_struct_setter>
  std::vector<bool>& set_field70(T_Struct10_field70_struct_setter&& field70_) {
    field70 = std::forward<T_Struct10_field70_struct_setter>(field70_);
    __isset.field70 = true;
    return field70;
  }

  int16_t get_field71() const {
    return field71;
  }

  int16_t& set_field71(int16_t field71_) {
    field71 = field71_;
    __isset.field71 = true;
    return field71;
  }
  const  ::cpp2::Struct7& get_field72() const&;
   ::cpp2::Struct7 get_field72() &&;

  template <typename T_Struct10_field72_struct_setter>
   ::cpp2::Struct7& set_field72(T_Struct10_field72_struct_setter&& field72_) {
    field72 = std::forward<T_Struct10_field72_struct_setter>(field72_);
    __isset.field72 = true;
    return field72;
  }
  const  ::cpp2::Struct6& get_field73() const&;
   ::cpp2::Struct6 get_field73() &&;

  template <typename T_Struct10_field73_struct_setter>
   ::cpp2::Struct6& set_field73(T_Struct10_field73_struct_setter&& field73_) {
    field73 = std::forward<T_Struct10_field73_struct_setter>(field73_);
    __isset.field73 = true;
    return field73;
  }
  const std::map< ::cpp2::Struct2, std::string>& get_field74() const&;
  std::map< ::cpp2::Struct2, std::string> get_field74() &&;

  template <typename T_Struct10_field74_struct_setter>
  std::map< ::cpp2::Struct2, std::string>& set_field74(T_Struct10_field74_struct_setter&& field74_) {
    field74 = std::forward<T_Struct10_field74_struct_setter>(field74_);
    __isset.field74 = true;
    return field74;
  }

  int64_t get_field75() const {
    return field75;
  }

  int64_t& set_field75(int64_t field75_) {
    field75 = field75_;
    __isset.field75 = true;
    return field75;
  }

  const std::string& get_field76() const& {
    return field76;
  }

  std::string get_field76() && {
    return std::move(field76);
  }

  template <typename T_Struct10_field76_struct_setter>
  std::string& set_field76(T_Struct10_field76_struct_setter&& field76_) {
    field76 = std::forward<T_Struct10_field76_struct_setter>(field76_);
    __isset.field76 = true;
    return field76;
  }
  const std::map<int16_t, std::string>& get_field77() const&;
  std::map<int16_t, std::string> get_field77() &&;

  template <typename T_Struct10_field77_struct_setter>
  std::map<int16_t, std::string>& set_field77(T_Struct10_field77_struct_setter&& field77_) {
    field77 = std::forward<T_Struct10_field77_struct_setter>(field77_);
    __isset.field77 = true;
    return field77;
  }
  const std::set<int64_t>& get_field78() const&;
  std::set<int64_t> get_field78() &&;

  template <typename T_Struct10_field78_struct_setter>
  std::set<int64_t>& set_field78(T_Struct10_field78_struct_setter&& field78_) {
    field78 = std::forward<T_Struct10_field78_struct_setter>(field78_);
    __isset.field78 = true;
    return field78;
  }
  const std::map<bool, int64_t>& get_field79() const&;
  std::map<bool, int64_t> get_field79() &&;

  template <typename T_Struct10_field79_struct_setter>
  std::map<bool, int64_t>& set_field79(T_Struct10_field79_struct_setter&& field79_) {
    field79 = std::forward<T_Struct10_field79_struct_setter>(field79_);
    __isset.field79 = true;
    return field79;
  }
  const std::map< ::cpp2::Struct3, bool>& get_field80() const&;
  std::map< ::cpp2::Struct3, bool> get_field80() &&;

  template <typename T_Struct10_field80_struct_setter>
  std::map< ::cpp2::Struct3, bool>& set_field80(T_Struct10_field80_struct_setter&& field80_) {
    field80 = std::forward<T_Struct10_field80_struct_setter>(field80_);
    __isset.field80 = true;
    return field80;
  }
  const  ::cpp2::Struct4& get_field81() const&;
   ::cpp2::Struct4 get_field81() &&;

  template <typename T_Struct10_field81_struct_setter>
   ::cpp2::Struct4& set_field81(T_Struct10_field81_struct_setter&& field81_) {
    field81 = std::forward<T_Struct10_field81_struct_setter>(field81_);
    __isset.field81 = true;
    return field81;
  }

  bool get_field82() const {
    return field82;
  }

  bool& set_field82(bool field82_) {
    field82 = field82_;
    __isset.field82 = true;
    return field82;
  }
  const  ::cpp2::Struct5& get_field83() const&;
   ::cpp2::Struct5 get_field83() &&;

  template <typename T_Struct10_field83_struct_setter>
   ::cpp2::Struct5& set_field83(T_Struct10_field83_struct_setter&& field83_) {
    field83 = std::forward<T_Struct10_field83_struct_setter>(field83_);
    __isset.field83 = true;
    return field83;
  }
  const std::vector<std::string>& get_field84() const&;
  std::vector<std::string> get_field84() &&;

  template <typename T_Struct10_field84_struct_setter>
  std::vector<std::string>& set_field84(T_Struct10_field84_struct_setter&& field84_) {
    field84 = std::forward<T_Struct10_field84_struct_setter>(field84_);
    __isset.field84 = true;
    return field84;
  }

  bool get_field85() const {
    return field85;
  }

  bool& set_field85(bool field85_) {
    field85 = field85_;
    __isset.field85 = true;
    return field85;
  }
  const  ::cpp2::Struct3& get_field86() const&;
   ::cpp2::Struct3 get_field86() &&;

  template <typename T_Struct10_field86_struct_setter>
   ::cpp2::Struct3& set_field86(T_Struct10_field86_struct_setter&& field86_) {
    field86 = std::forward<T_Struct10_field86_struct_setter>(field86_);
    __isset.field86 = true;
    return field86;
  }

  int16_t get_field87() const {
    return field87;
  }

  int16_t& set_field87(int16_t field87_) {
    field87 = field87_;
    __isset.field87 = true;
    return field87;
  }
  const std::set<bool>& get_field88() const&;
  std::set<bool> get_field88() &&;

  template <typename T_Struct10_field88_struct_setter>
  std::set<bool>& set_field88(T_Struct10_field88_struct_setter&& field88_) {
    field88 = std::forward<T_Struct10_field88_struct_setter>(field88_);
    __isset.field88 = true;
    return field88;
  }
  const  ::cpp2::Struct0& get_field89() const&;
   ::cpp2::Struct0 get_field89() &&;

  template <typename T_Struct10_field89_struct_setter>
   ::cpp2::Struct0& set_field89(T_Struct10_field89_struct_setter&& field89_) {
    field89 = std::forward<T_Struct10_field89_struct_setter>(field89_);
    __isset.field89 = true;
    return field89;
  }
  const std::map< ::cpp2::Struct1, int16_t>& get_field90() const&;
  std::map< ::cpp2::Struct1, int16_t> get_field90() &&;

  template <typename T_Struct10_field90_struct_setter>
  std::map< ::cpp2::Struct1, int16_t>& set_field90(T_Struct10_field90_struct_setter&& field90_) {
    field90 = std::forward<T_Struct10_field90_struct_setter>(field90_);
    __isset.field90 = true;
    return field90;
  }

  bool get_field91() const {
    return field91;
  }

  bool& set_field91(bool field91_) {
    field91 = field91_;
    __isset.field91 = true;
    return field91;
  }
  const std::set<std::string>& get_field92() const&;
  std::set<std::string> get_field92() &&;

  template <typename T_Struct10_field92_struct_setter>
  std::set<std::string>& set_field92(T_Struct10_field92_struct_setter&& field92_) {
    field92 = std::forward<T_Struct10_field92_struct_setter>(field92_);
    __isset.field92 = true;
    return field92;
  }
  const std::map<float, int64_t>& get_field93() const&;
  std::map<float, int64_t> get_field93() &&;

  template <typename T_Struct10_field93_struct_setter>
  std::map<float, int64_t>& set_field93(T_Struct10_field93_struct_setter&& field93_) {
    field93 = std::forward<T_Struct10_field93_struct_setter>(field93_);
    __isset.field93 = true;
    return field93;
  }
  const std::vector<int8_t>& get_field94() const&;
  std::vector<int8_t> get_field94() &&;

  template <typename T_Struct10_field94_struct_setter>
  std::vector<int8_t>& set_field94(T_Struct10_field94_struct_setter&& field94_) {
    field94 = std::forward<T_Struct10_field94_struct_setter>(field94_);
    __isset.field94 = true;
    return field94;
  }
  const std::set<bool>& get_field95() const&;
  std::set<bool> get_field95() &&;

  template <typename T_Struct10_field95_struct_setter>
  std::set<bool>& set_field95(T_Struct10_field95_struct_setter&& field95_) {
    field95 = std::forward<T_Struct10_field95_struct_setter>(field95_);
    __isset.field95 = true;
    return field95;
  }

  const std::string& get_field96() const& {
    return field96;
  }

  std::string get_field96() && {
    return std::move(field96);
  }

  template <typename T_Struct10_field96_struct_setter>
  std::string& set_field96(T_Struct10_field96_struct_setter&& field96_) {
    field96 = std::forward<T_Struct10_field96_struct_setter>(field96_);
    __isset.field96 = true;
    return field96;
  }

  int16_t get_field97() const {
    return field97;
  }

  int16_t& set_field97(int16_t field97_) {
    field97 = field97_;
    __isset.field97 = true;
    return field97;
  }
  const  ::cpp2::Struct4& get_field98() const&;
   ::cpp2::Struct4 get_field98() &&;

  template <typename T_Struct10_field98_struct_setter>
   ::cpp2::Struct4& set_field98(T_Struct10_field98_struct_setter&& field98_) {
    field98 = std::forward<T_Struct10_field98_struct_setter>(field98_);
    __isset.field98 = true;
    return field98;
  }
  const std::set<double>& get_field99() const&;
  std::set<double> get_field99() &&;

  template <typename T_Struct10_field99_struct_setter>
  std::set<double>& set_field99(T_Struct10_field99_struct_setter&& field99_) {
    field99 = std::forward<T_Struct10_field99_struct_setter>(field99_);
    __isset.field99 = true;
    return field99;
  }

  const std::string& get_field100() const& {
    return field100;
  }

  std::string get_field100() && {
    return std::move(field100);
  }

  template <typename T_Struct10_field100_struct_setter>
  std::string& set_field100(T_Struct10_field100_struct_setter&& field100_) {
    field100 = std::forward<T_Struct10_field100_struct_setter>(field100_);
    __isset.field100 = true;
    return field100;
  }
  const std::set<int8_t>& get_field101() const&;
  std::set<int8_t> get_field101() &&;

  template <typename T_Struct10_field101_struct_setter>
  std::set<int8_t>& set_field101(T_Struct10_field101_struct_setter&& field101_) {
    field101 = std::forward<T_Struct10_field101_struct_setter>(field101_);
    __isset.field101 = true;
    return field101;
  }
  const std::map<std::string, std::set<double>>& get_field102() const&;
  std::map<std::string, std::set<double>> get_field102() &&;

  template <typename T_Struct10_field102_struct_setter>
  std::map<std::string, std::set<double>>& set_field102(T_Struct10_field102_struct_setter&& field102_) {
    field102 = std::forward<T_Struct10_field102_struct_setter>(field102_);
    __isset.field102 = true;
    return field102;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct10& a, Struct10& b);
extern template uint32_t Struct10::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct10::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct10::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct10::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct10::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct10::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct10::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct10::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct10>::clear( ::cpp2::Struct10* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct10>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct10>::write(Protocol* proto,  ::cpp2::Struct10 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct10>::read(Protocol* proto,  ::cpp2::Struct10* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct10>::serializedSize(Protocol const* proto,  ::cpp2::Struct10 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct10>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct10 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct11 : private apache::thrift::detail::st::ComparisonOperators<Struct11> {
 public:

  Struct11() :
      field4(0),
      field12(0),
      field13(0),
      field16(0),
      field19(0),
      field20(0),
      field21(0),
      field23(0),
      field24(0),
      field28(0),
      field29(0),
      field34(0),
      field35(0),
      field36(0),
      field39(0),
      field41(0),
      field42(0),
      field43(0),
      field44(0),
      field45(0),
      field46(0),
      field55(0),
      field58(0),
      field59(0),
      field60(0),
      field66(0),
      field67(0),
      field69(0),
      field75(0),
      field76(0),
      field77(0),
      field81(0),
      field83(0),
      field84(0),
      field87(0),
      field90(0),
      field92(0),
      field95(0),
      field96(0),
      field99(0),
      field101(0),
      field107(0),
      field109(0),
      field111(0),
      field116(0),
      field117(0),
      field119(0),
      field124(0),
      field125(0),
      field129(0),
      field130(0),
      field135(0),
      field140(0),
      field150(0),
      field152(0),
      field155(0),
      field157(0),
      field159(0),
      field162(0),
      field165(0),
      field166(0),
      field172(0),
      field173(0),
      field182(0),
      field184(0),
      field187(0),
      field190(0) {}
  // FragileConstructor for use in initialization lists only

  Struct11(apache::thrift::FragileConstructor, std::vector<float> field1__arg,  ::cpp2::Struct5 field2__arg,  ::cpp2::Struct8 field3__arg, int8_t field4__arg, std::set< ::cpp2::Struct2> field5__arg, std::map<int16_t, int8_t> field6__arg, std::map< ::cpp2::Struct2, std::vector<int64_t>> field7__arg, std::map< ::cpp2::Struct1, int32_t> field8__arg, std::vector<std::string> field9__arg, std::map<int16_t, std::map<int64_t, float>> field10__arg,  ::cpp2::Struct5 field11__arg, bool field12__arg, float field13__arg,  ::cpp2::Struct4 field14__arg, std::string field15__arg, int8_t field16__arg, std::vector<bool> field17__arg,  ::cpp2::Struct5 field18__arg, int8_t field19__arg, int32_t field20__arg, int8_t field21__arg, std::map<std::vector<int32_t>, std::set<int32_t>> field22__arg, int8_t field23__arg, float field24__arg,  ::cpp2::Struct6 field25__arg, std::set<bool> field26__arg, std::string field27__arg, bool field28__arg, int8_t field29__arg, std::map<int8_t, double> field30__arg, std::map<std::map<float, float>, double> field31__arg,  ::cpp2::Struct6 field32__arg, std::set<int8_t> field33__arg, int64_t field34__arg, int8_t field35__arg, int16_t field36__arg, std::string field37__arg, std::set<bool> field38__arg, int16_t field39__arg, std::map<int32_t,  ::cpp2::Struct2> field40__arg, int8_t field41__arg, bool field42__arg, float field43__arg, int16_t field44__arg, int32_t field45__arg, bool field46__arg, std::map<int16_t, int16_t> field47__arg, std::map<int8_t, std::string> field48__arg, std::map<int64_t, int16_t> field49__arg, std::vector<std::string> field50__arg, std::vector<bool> field51__arg,  ::cpp2::Struct3 field52__arg, std::string field53__arg, std::set<float> field54__arg, float field55__arg, std::map<int32_t, int16_t> field56__arg, std::string field57__arg, double field58__arg, int8_t field59__arg, int8_t field60__arg, std::map<int32_t, bool> field61__arg, std::string field62__arg, std::map<int32_t, std::vector<int64_t>> field63__arg, std::map<std::set<int32_t>, int8_t> field64__arg, std::set<int8_t> field65__arg, bool field66__arg, double field67__arg,  ::cpp2::Struct10 field68__arg, bool field69__arg, std::vector<std::set< ::cpp2::Struct7>> field70__arg, std::vector<std::vector<double>> field71__arg, std::string field72__arg, std::map<float, int8_t> field73__arg, std::string field74__arg, int32_t field75__arg, bool field76__arg, int8_t field77__arg, std::map<int64_t, int16_t> field78__arg, std::string field79__arg, std::vector<int16_t> field80__arg, int8_t field81__arg, std::vector<int16_t> field82__arg, int8_t field83__arg, int32_t field84__arg, std::map<std::set<int16_t>, std::string> field85__arg, std::map<std::string, std::map<bool, int64_t>> field86__arg, double field87__arg, std::vector<int16_t> field88__arg,  ::cpp2::Struct2 field89__arg, int16_t field90__arg, std::set<int8_t> field91__arg, int64_t field92__arg, std::map<std::vector<int64_t>, int8_t> field93__arg, std::vector<std::set<int8_t>> field94__arg, int8_t field95__arg, float field96__arg, std::vector< ::cpp2::Struct1> field97__arg, std::set<bool> field98__arg, int32_t field99__arg, std::vector<std::map<bool, bool>> field100__arg, float field101__arg, std::vector<std::string> field102__arg, std::string field103__arg, std::set<int8_t> field104__arg,  ::cpp2::Struct2 field105__arg, std::string field106__arg, float field107__arg, std::string field108__arg, bool field109__arg, std::map< ::cpp2::Struct4, std::string> field110__arg, bool field111__arg, std::vector<bool> field112__arg,  ::cpp2::Struct4 field113__arg, std::string field114__arg, std::set<int16_t> field115__arg, int8_t field116__arg, int32_t field117__arg, std::map<double, int8_t> field118__arg, bool field119__arg, std::string field120__arg, std::vector< ::cpp2::Struct0> field121__arg, std::set<std::set<double>> field122__arg,  ::cpp2::Struct5 field123__arg, int8_t field124__arg, float field125__arg, std::map<float, float> field126__arg,  ::cpp2::Struct6 field127__arg, std::map<float, std::string> field128__arg, int8_t field129__arg, int8_t field130__arg, std::map< ::cpp2::Struct0, int8_t> field131__arg, std::vector<double> field132__arg, std::string field133__arg, std::map<int16_t, std::string> field134__arg, double field135__arg, std::vector<std::vector<int64_t>> field136__arg, std::vector<double> field137__arg, std::set<double> field138__arg, std::set<double> field139__arg, int32_t field140__arg,  ::cpp2::Struct1 field141__arg,  ::cpp2::Struct2 field142__arg, std::map<int32_t, std::string> field143__arg, std::map<double, int32_t> field144__arg,  ::cpp2::Struct5 field145__arg, std::vector<int16_t> field146__arg,  ::cpp2::Struct2 field147__arg, std::string field148__arg, std::set<std::string> field149__arg, double field150__arg,  ::cpp2::Struct0 field151__arg, int32_t field152__arg, std::vector<bool> field153__arg, std::string field154__arg, bool field155__arg,  ::cpp2::Struct1 field156__arg, float field157__arg, std::string field158__arg, int8_t field159__arg, std::vector<int32_t> field160__arg,  ::cpp2::Struct0 field161__arg, int64_t field162__arg, std::string field163__arg,  ::cpp2::Struct7 field164__arg, double field165__arg, int32_t field166__arg,  ::cpp2::Struct7 field167__arg,  ::cpp2::Struct0 field168__arg, std::string field169__arg, std::string field170__arg,  ::cpp2::Struct1 field171__arg, float field172__arg, double field173__arg, std::set<int64_t> field174__arg, std::map<float, int16_t> field175__arg, std::vector<std::map<int64_t, bool>> field176__arg, std::set<int16_t> field177__arg,  ::cpp2::Struct1 field178__arg, std::map<int32_t,  ::cpp2::Struct1> field179__arg,  ::cpp2::Struct7 field180__arg, std::map<bool, int16_t> field181__arg, float field182__arg, std::vector<std::string> field183__arg, int16_t field184__arg,  ::cpp2::Struct3 field185__arg, std::set< ::cpp2::Struct3> field186__arg, bool field187__arg,  ::cpp2::Struct8 field188__arg,  ::cpp2::Struct0 field189__arg, float field190__arg, std::vector<int32_t> field191__arg, std::map<std::vector<std::string>, std::vector<std::map<double, int8_t>>> field192__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)),
      field97(std::move(field97__arg)),
      field98(std::move(field98__arg)),
      field99(std::move(field99__arg)),
      field100(std::move(field100__arg)),
      field101(std::move(field101__arg)),
      field102(std::move(field102__arg)),
      field103(std::move(field103__arg)),
      field104(std::move(field104__arg)),
      field105(std::move(field105__arg)),
      field106(std::move(field106__arg)),
      field107(std::move(field107__arg)),
      field108(std::move(field108__arg)),
      field109(std::move(field109__arg)),
      field110(std::move(field110__arg)),
      field111(std::move(field111__arg)),
      field112(std::move(field112__arg)),
      field113(std::move(field113__arg)),
      field114(std::move(field114__arg)),
      field115(std::move(field115__arg)),
      field116(std::move(field116__arg)),
      field117(std::move(field117__arg)),
      field118(std::move(field118__arg)),
      field119(std::move(field119__arg)),
      field120(std::move(field120__arg)),
      field121(std::move(field121__arg)),
      field122(std::move(field122__arg)),
      field123(std::move(field123__arg)),
      field124(std::move(field124__arg)),
      field125(std::move(field125__arg)),
      field126(std::move(field126__arg)),
      field127(std::move(field127__arg)),
      field128(std::move(field128__arg)),
      field129(std::move(field129__arg)),
      field130(std::move(field130__arg)),
      field131(std::move(field131__arg)),
      field132(std::move(field132__arg)),
      field133(std::move(field133__arg)),
      field134(std::move(field134__arg)),
      field135(std::move(field135__arg)),
      field136(std::move(field136__arg)),
      field137(std::move(field137__arg)),
      field138(std::move(field138__arg)),
      field139(std::move(field139__arg)),
      field140(std::move(field140__arg)),
      field141(std::move(field141__arg)),
      field142(std::move(field142__arg)),
      field143(std::move(field143__arg)),
      field144(std::move(field144__arg)),
      field145(std::move(field145__arg)),
      field146(std::move(field146__arg)),
      field147(std::move(field147__arg)),
      field148(std::move(field148__arg)),
      field149(std::move(field149__arg)),
      field150(std::move(field150__arg)),
      field151(std::move(field151__arg)),
      field152(std::move(field152__arg)),
      field153(std::move(field153__arg)),
      field154(std::move(field154__arg)),
      field155(std::move(field155__arg)),
      field156(std::move(field156__arg)),
      field157(std::move(field157__arg)),
      field158(std::move(field158__arg)),
      field159(std::move(field159__arg)),
      field160(std::move(field160__arg)),
      field161(std::move(field161__arg)),
      field162(std::move(field162__arg)),
      field163(std::move(field163__arg)),
      field164(std::move(field164__arg)),
      field165(std::move(field165__arg)),
      field166(std::move(field166__arg)),
      field167(std::move(field167__arg)),
      field168(std::move(field168__arg)),
      field169(std::move(field169__arg)),
      field170(std::move(field170__arg)),
      field171(std::move(field171__arg)),
      field172(std::move(field172__arg)),
      field173(std::move(field173__arg)),
      field174(std::move(field174__arg)),
      field175(std::move(field175__arg)),
      field176(std::move(field176__arg)),
      field177(std::move(field177__arg)),
      field178(std::move(field178__arg)),
      field179(std::move(field179__arg)),
      field180(std::move(field180__arg)),
      field181(std::move(field181__arg)),
      field182(std::move(field182__arg)),
      field183(std::move(field183__arg)),
      field184(std::move(field184__arg)),
      field185(std::move(field185__arg)),
      field186(std::move(field186__arg)),
      field187(std::move(field187__arg)),
      field188(std::move(field188__arg)),
      field189(std::move(field189__arg)),
      field190(std::move(field190__arg)),
      field191(std::move(field191__arg)),
      field192(std::move(field192__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
    __isset.field97 = true;
    __isset.field98 = true;
    __isset.field99 = true;
    __isset.field100 = true;
    __isset.field101 = true;
    __isset.field102 = true;
    __isset.field103 = true;
    __isset.field104 = true;
    __isset.field105 = true;
    __isset.field106 = true;
    __isset.field107 = true;
    __isset.field108 = true;
    __isset.field109 = true;
    __isset.field110 = true;
    __isset.field111 = true;
    __isset.field112 = true;
    __isset.field113 = true;
    __isset.field114 = true;
    __isset.field115 = true;
    __isset.field116 = true;
    __isset.field117 = true;
    __isset.field118 = true;
    __isset.field119 = true;
    __isset.field120 = true;
    __isset.field121 = true;
    __isset.field122 = true;
    __isset.field123 = true;
    __isset.field124 = true;
    __isset.field125 = true;
    __isset.field126 = true;
    __isset.field127 = true;
    __isset.field128 = true;
    __isset.field129 = true;
    __isset.field130 = true;
    __isset.field131 = true;
    __isset.field132 = true;
    __isset.field133 = true;
    __isset.field134 = true;
    __isset.field135 = true;
    __isset.field136 = true;
    __isset.field137 = true;
    __isset.field138 = true;
    __isset.field139 = true;
    __isset.field140 = true;
    __isset.field141 = true;
    __isset.field142 = true;
    __isset.field143 = true;
    __isset.field144 = true;
    __isset.field145 = true;
    __isset.field146 = true;
    __isset.field147 = true;
    __isset.field148 = true;
    __isset.field149 = true;
    __isset.field150 = true;
    __isset.field151 = true;
    __isset.field152 = true;
    __isset.field153 = true;
    __isset.field154 = true;
    __isset.field155 = true;
    __isset.field156 = true;
    __isset.field157 = true;
    __isset.field158 = true;
    __isset.field159 = true;
    __isset.field160 = true;
    __isset.field161 = true;
    __isset.field162 = true;
    __isset.field163 = true;
    __isset.field164 = true;
    __isset.field165 = true;
    __isset.field166 = true;
    __isset.field167 = true;
    __isset.field168 = true;
    __isset.field169 = true;
    __isset.field170 = true;
    __isset.field171 = true;
    __isset.field172 = true;
    __isset.field173 = true;
    __isset.field174 = true;
    __isset.field175 = true;
    __isset.field176 = true;
    __isset.field177 = true;
    __isset.field178 = true;
    __isset.field179 = true;
    __isset.field180 = true;
    __isset.field181 = true;
    __isset.field182 = true;
    __isset.field183 = true;
    __isset.field184 = true;
    __isset.field185 = true;
    __isset.field186 = true;
    __isset.field187 = true;
    __isset.field188 = true;
    __isset.field189 = true;
    __isset.field190 = true;
    __isset.field191 = true;
    __isset.field192 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<97, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field97 = arg.move();
    __isset.field97 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<98, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field98 = arg.move();
    __isset.field98 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<99, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field99 = arg.move();
    __isset.field99 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field100 = arg.move();
    __isset.field100 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field101 = arg.move();
    __isset.field101 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<102, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field102 = arg.move();
    __isset.field102 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<103, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field103 = arg.move();
    __isset.field103 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<104, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field104 = arg.move();
    __isset.field104 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<105, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field105 = arg.move();
    __isset.field105 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<106, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field106 = arg.move();
    __isset.field106 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<107, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field107 = arg.move();
    __isset.field107 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<108, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field108 = arg.move();
    __isset.field108 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<109, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field109 = arg.move();
    __isset.field109 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<110, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field110 = arg.move();
    __isset.field110 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<111, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field111 = arg.move();
    __isset.field111 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<112, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field112 = arg.move();
    __isset.field112 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<113, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field113 = arg.move();
    __isset.field113 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<114, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field114 = arg.move();
    __isset.field114 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<115, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field115 = arg.move();
    __isset.field115 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<116, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field116 = arg.move();
    __isset.field116 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<117, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field117 = arg.move();
    __isset.field117 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<118, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field118 = arg.move();
    __isset.field118 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<119, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field119 = arg.move();
    __isset.field119 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<120, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field120 = arg.move();
    __isset.field120 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<121, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field121 = arg.move();
    __isset.field121 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<122, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field122 = arg.move();
    __isset.field122 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<123, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field123 = arg.move();
    __isset.field123 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<124, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field124 = arg.move();
    __isset.field124 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<125, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field125 = arg.move();
    __isset.field125 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<126, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field126 = arg.move();
    __isset.field126 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<127, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field127 = arg.move();
    __isset.field127 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<128, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field128 = arg.move();
    __isset.field128 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<129, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field129 = arg.move();
    __isset.field129 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<130, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field130 = arg.move();
    __isset.field130 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<131, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field131 = arg.move();
    __isset.field131 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<132, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field132 = arg.move();
    __isset.field132 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<133, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field133 = arg.move();
    __isset.field133 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<134, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field134 = arg.move();
    __isset.field134 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<135, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field135 = arg.move();
    __isset.field135 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<136, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field136 = arg.move();
    __isset.field136 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<137, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field137 = arg.move();
    __isset.field137 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<138, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field138 = arg.move();
    __isset.field138 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<139, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field139 = arg.move();
    __isset.field139 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<140, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field140 = arg.move();
    __isset.field140 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<141, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field141 = arg.move();
    __isset.field141 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<142, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field142 = arg.move();
    __isset.field142 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<143, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field143 = arg.move();
    __isset.field143 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<144, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field144 = arg.move();
    __isset.field144 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<145, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field145 = arg.move();
    __isset.field145 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<146, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field146 = arg.move();
    __isset.field146 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<147, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field147 = arg.move();
    __isset.field147 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<148, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field148 = arg.move();
    __isset.field148 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<149, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field149 = arg.move();
    __isset.field149 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<150, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field150 = arg.move();
    __isset.field150 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<151, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field151 = arg.move();
    __isset.field151 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<152, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field152 = arg.move();
    __isset.field152 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<153, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field153 = arg.move();
    __isset.field153 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<154, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field154 = arg.move();
    __isset.field154 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<155, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field155 = arg.move();
    __isset.field155 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<156, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field156 = arg.move();
    __isset.field156 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<157, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field157 = arg.move();
    __isset.field157 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<158, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field158 = arg.move();
    __isset.field158 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<159, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field159 = arg.move();
    __isset.field159 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<160, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field160 = arg.move();
    __isset.field160 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<161, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field161 = arg.move();
    __isset.field161 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<162, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field162 = arg.move();
    __isset.field162 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<163, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field163 = arg.move();
    __isset.field163 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<164, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field164 = arg.move();
    __isset.field164 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<165, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field165 = arg.move();
    __isset.field165 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<166, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field166 = arg.move();
    __isset.field166 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<167, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field167 = arg.move();
    __isset.field167 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<168, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field168 = arg.move();
    __isset.field168 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<169, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field169 = arg.move();
    __isset.field169 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<170, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field170 = arg.move();
    __isset.field170 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<171, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field171 = arg.move();
    __isset.field171 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<172, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field172 = arg.move();
    __isset.field172 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<173, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field173 = arg.move();
    __isset.field173 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<174, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field174 = arg.move();
    __isset.field174 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<175, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field175 = arg.move();
    __isset.field175 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<176, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field176 = arg.move();
    __isset.field176 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<177, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field177 = arg.move();
    __isset.field177 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<178, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field178 = arg.move();
    __isset.field178 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<179, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field179 = arg.move();
    __isset.field179 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<180, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field180 = arg.move();
    __isset.field180 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<181, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field181 = arg.move();
    __isset.field181 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<182, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field182 = arg.move();
    __isset.field182 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<183, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field183 = arg.move();
    __isset.field183 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<184, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field184 = arg.move();
    __isset.field184 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<185, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field185 = arg.move();
    __isset.field185 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<186, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field186 = arg.move();
    __isset.field186 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<187, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field187 = arg.move();
    __isset.field187 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<188, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field188 = arg.move();
    __isset.field188 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<189, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field189 = arg.move();
    __isset.field189 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<190, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field190 = arg.move();
    __isset.field190 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<191, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field191 = arg.move();
    __isset.field191 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct11(::apache::thrift::detail::argument_wrapper<192, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct11(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field192 = arg.move();
    __isset.field192 = true;
  }

  Struct11(Struct11&&) = default;

  Struct11(const Struct11&) = default;

  Struct11& operator=(Struct11&&) = default;

  Struct11& operator=(const Struct11&) = default;
  void __clear();

  virtual ~Struct11() {}

  std::vector<float> field1;
   ::cpp2::Struct5 field2;
   ::cpp2::Struct8 field3;
  int8_t field4;
  std::set< ::cpp2::Struct2> field5;
  std::map<int16_t, int8_t> field6;
  std::map< ::cpp2::Struct2, std::vector<int64_t>> field7;
  std::map< ::cpp2::Struct1, int32_t> field8;
  std::vector<std::string> field9;
  std::map<int16_t, std::map<int64_t, float>> field10;
   ::cpp2::Struct5 field11;
  bool field12;
  float field13;
   ::cpp2::Struct4 field14;
  std::string field15;
  int8_t field16;
  std::vector<bool> field17;
   ::cpp2::Struct5 field18;
  int8_t field19;
  int32_t field20;
  int8_t field21;
  std::map<std::vector<int32_t>, std::set<int32_t>> field22;
  int8_t field23;
  float field24;
   ::cpp2::Struct6 field25;
  std::set<bool> field26;
  std::string field27;
  bool field28;
  int8_t field29;
  std::map<int8_t, double> field30;
  std::map<std::map<float, float>, double> field31;
   ::cpp2::Struct6 field32;
  std::set<int8_t> field33;
  int64_t field34;
  int8_t field35;
  int16_t field36;
  std::string field37;
  std::set<bool> field38;
  int16_t field39;
  std::map<int32_t,  ::cpp2::Struct2> field40;
  int8_t field41;
  bool field42;
  float field43;
  int16_t field44;
  int32_t field45;
  bool field46;
  std::map<int16_t, int16_t> field47;
  std::map<int8_t, std::string> field48;
  std::map<int64_t, int16_t> field49;
  std::vector<std::string> field50;
  std::vector<bool> field51;
   ::cpp2::Struct3 field52;
  std::string field53;
  std::set<float> field54;
  float field55;
  std::map<int32_t, int16_t> field56;
  std::string field57;
  double field58;
  int8_t field59;
  int8_t field60;
  std::map<int32_t, bool> field61;
  std::string field62;
  std::map<int32_t, std::vector<int64_t>> field63;
  std::map<std::set<int32_t>, int8_t> field64;
  std::set<int8_t> field65;
  bool field66;
  double field67;
   ::cpp2::Struct10 field68;
  bool field69;
  std::vector<std::set< ::cpp2::Struct7>> field70;
  std::vector<std::vector<double>> field71;
  std::string field72;
  std::map<float, int8_t> field73;
  std::string field74;
  int32_t field75;
  bool field76;
  int8_t field77;
  std::map<int64_t, int16_t> field78;
  std::string field79;
  std::vector<int16_t> field80;
  int8_t field81;
  std::vector<int16_t> field82;
  int8_t field83;
  int32_t field84;
  std::map<std::set<int16_t>, std::string> field85;
  std::map<std::string, std::map<bool, int64_t>> field86;
  double field87;
  std::vector<int16_t> field88;
   ::cpp2::Struct2 field89;
  int16_t field90;
  std::set<int8_t> field91;
  int64_t field92;
  std::map<std::vector<int64_t>, int8_t> field93;
  std::vector<std::set<int8_t>> field94;
  int8_t field95;
  float field96;
  std::vector< ::cpp2::Struct1> field97;
  std::set<bool> field98;
  int32_t field99;
  std::vector<std::map<bool, bool>> field100;
  float field101;
  std::vector<std::string> field102;
  std::string field103;
  std::set<int8_t> field104;
   ::cpp2::Struct2 field105;
  std::string field106;
  float field107;
  std::string field108;
  bool field109;
  std::map< ::cpp2::Struct4, std::string> field110;
  bool field111;
  std::vector<bool> field112;
   ::cpp2::Struct4 field113;
  std::string field114;
  std::set<int16_t> field115;
  int8_t field116;
  int32_t field117;
  std::map<double, int8_t> field118;
  bool field119;
  std::string field120;
  std::vector< ::cpp2::Struct0> field121;
  std::set<std::set<double>> field122;
   ::cpp2::Struct5 field123;
  int8_t field124;
  float field125;
  std::map<float, float> field126;
   ::cpp2::Struct6 field127;
  std::map<float, std::string> field128;
  int8_t field129;
  int8_t field130;
  std::map< ::cpp2::Struct0, int8_t> field131;
  std::vector<double> field132;
  std::string field133;
  std::map<int16_t, std::string> field134;
  double field135;
  std::vector<std::vector<int64_t>> field136;
  std::vector<double> field137;
  std::set<double> field138;
  std::set<double> field139;
  int32_t field140;
   ::cpp2::Struct1 field141;
   ::cpp2::Struct2 field142;
  std::map<int32_t, std::string> field143;
  std::map<double, int32_t> field144;
   ::cpp2::Struct5 field145;
  std::vector<int16_t> field146;
   ::cpp2::Struct2 field147;
  std::string field148;
  std::set<std::string> field149;
  double field150;
   ::cpp2::Struct0 field151;
  int32_t field152;
  std::vector<bool> field153;
  std::string field154;
  bool field155;
   ::cpp2::Struct1 field156;
  float field157;
  std::string field158;
  int8_t field159;
  std::vector<int32_t> field160;
   ::cpp2::Struct0 field161;
  int64_t field162;
  std::string field163;
   ::cpp2::Struct7 field164;
  double field165;
  int32_t field166;
   ::cpp2::Struct7 field167;
   ::cpp2::Struct0 field168;
  std::string field169;
  std::string field170;
   ::cpp2::Struct1 field171;
  float field172;
  double field173;
  std::set<int64_t> field174;
  std::map<float, int16_t> field175;
  std::vector<std::map<int64_t, bool>> field176;
  std::set<int16_t> field177;
   ::cpp2::Struct1 field178;
  std::map<int32_t,  ::cpp2::Struct1> field179;
   ::cpp2::Struct7 field180;
  std::map<bool, int16_t> field181;
  float field182;
  std::vector<std::string> field183;
  int16_t field184;
   ::cpp2::Struct3 field185;
  std::set< ::cpp2::Struct3> field186;
  bool field187;
   ::cpp2::Struct8 field188;
   ::cpp2::Struct0 field189;
  float field190;
  std::vector<int32_t> field191;
  std::map<std::vector<std::string>, std::vector<std::map<double, int8_t>>> field192;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
      field97 = false;
      field98 = false;
      field99 = false;
      field100 = false;
      field101 = false;
      field102 = false;
      field103 = false;
      field104 = false;
      field105 = false;
      field106 = false;
      field107 = false;
      field108 = false;
      field109 = false;
      field110 = false;
      field111 = false;
      field112 = false;
      field113 = false;
      field114 = false;
      field115 = false;
      field116 = false;
      field117 = false;
      field118 = false;
      field119 = false;
      field120 = false;
      field121 = false;
      field122 = false;
      field123 = false;
      field124 = false;
      field125 = false;
      field126 = false;
      field127 = false;
      field128 = false;
      field129 = false;
      field130 = false;
      field131 = false;
      field132 = false;
      field133 = false;
      field134 = false;
      field135 = false;
      field136 = false;
      field137 = false;
      field138 = false;
      field139 = false;
      field140 = false;
      field141 = false;
      field142 = false;
      field143 = false;
      field144 = false;
      field145 = false;
      field146 = false;
      field147 = false;
      field148 = false;
      field149 = false;
      field150 = false;
      field151 = false;
      field152 = false;
      field153 = false;
      field154 = false;
      field155 = false;
      field156 = false;
      field157 = false;
      field158 = false;
      field159 = false;
      field160 = false;
      field161 = false;
      field162 = false;
      field163 = false;
      field164 = false;
      field165 = false;
      field166 = false;
      field167 = false;
      field168 = false;
      field169 = false;
      field170 = false;
      field171 = false;
      field172 = false;
      field173 = false;
      field174 = false;
      field175 = false;
      field176 = false;
      field177 = false;
      field178 = false;
      field179 = false;
      field180 = false;
      field181 = false;
      field182 = false;
      field183 = false;
      field184 = false;
      field185 = false;
      field186 = false;
      field187 = false;
      field188 = false;
      field189 = false;
      field190 = false;
      field191 = false;
      field192 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
    bool field97 = false;
    bool field98 = false;
    bool field99 = false;
    bool field100 = false;
    bool field101 = false;
    bool field102 = false;
    bool field103 = false;
    bool field104 = false;
    bool field105 = false;
    bool field106 = false;
    bool field107 = false;
    bool field108 = false;
    bool field109 = false;
    bool field110 = false;
    bool field111 = false;
    bool field112 = false;
    bool field113 = false;
    bool field114 = false;
    bool field115 = false;
    bool field116 = false;
    bool field117 = false;
    bool field118 = false;
    bool field119 = false;
    bool field120 = false;
    bool field121 = false;
    bool field122 = false;
    bool field123 = false;
    bool field124 = false;
    bool field125 = false;
    bool field126 = false;
    bool field127 = false;
    bool field128 = false;
    bool field129 = false;
    bool field130 = false;
    bool field131 = false;
    bool field132 = false;
    bool field133 = false;
    bool field134 = false;
    bool field135 = false;
    bool field136 = false;
    bool field137 = false;
    bool field138 = false;
    bool field139 = false;
    bool field140 = false;
    bool field141 = false;
    bool field142 = false;
    bool field143 = false;
    bool field144 = false;
    bool field145 = false;
    bool field146 = false;
    bool field147 = false;
    bool field148 = false;
    bool field149 = false;
    bool field150 = false;
    bool field151 = false;
    bool field152 = false;
    bool field153 = false;
    bool field154 = false;
    bool field155 = false;
    bool field156 = false;
    bool field157 = false;
    bool field158 = false;
    bool field159 = false;
    bool field160 = false;
    bool field161 = false;
    bool field162 = false;
    bool field163 = false;
    bool field164 = false;
    bool field165 = false;
    bool field166 = false;
    bool field167 = false;
    bool field168 = false;
    bool field169 = false;
    bool field170 = false;
    bool field171 = false;
    bool field172 = false;
    bool field173 = false;
    bool field174 = false;
    bool field175 = false;
    bool field176 = false;
    bool field177 = false;
    bool field178 = false;
    bool field179 = false;
    bool field180 = false;
    bool field181 = false;
    bool field182 = false;
    bool field183 = false;
    bool field184 = false;
    bool field185 = false;
    bool field186 = false;
    bool field187 = false;
    bool field188 = false;
    bool field189 = false;
    bool field190 = false;
    bool field191 = false;
    bool field192 = false;
  } __isset;
  bool operator==(const Struct11& rhs) const;

  bool operator < (const Struct11& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    if (!(field97 == rhs.field97)) {
      return field97 < rhs.field97;
    }
    if (!(field98 == rhs.field98)) {
      return field98 < rhs.field98;
    }
    if (!(field99 == rhs.field99)) {
      return field99 < rhs.field99;
    }
    if (!(field100 == rhs.field100)) {
      return field100 < rhs.field100;
    }
    if (!(field101 == rhs.field101)) {
      return field101 < rhs.field101;
    }
    if (!(field102 == rhs.field102)) {
      return field102 < rhs.field102;
    }
    if (!(field103 == rhs.field103)) {
      return field103 < rhs.field103;
    }
    if (!(field104 == rhs.field104)) {
      return field104 < rhs.field104;
    }
    if (!(field105 == rhs.field105)) {
      return field105 < rhs.field105;
    }
    if (!(field106 == rhs.field106)) {
      return field106 < rhs.field106;
    }
    if (!(field107 == rhs.field107)) {
      return field107 < rhs.field107;
    }
    if (!(field108 == rhs.field108)) {
      return field108 < rhs.field108;
    }
    if (!(field109 == rhs.field109)) {
      return field109 < rhs.field109;
    }
    if (!(field110 == rhs.field110)) {
      return field110 < rhs.field110;
    }
    if (!(field111 == rhs.field111)) {
      return field111 < rhs.field111;
    }
    if (!(field112 == rhs.field112)) {
      return field112 < rhs.field112;
    }
    if (!(field113 == rhs.field113)) {
      return field113 < rhs.field113;
    }
    if (!(field114 == rhs.field114)) {
      return field114 < rhs.field114;
    }
    if (!(field115 == rhs.field115)) {
      return field115 < rhs.field115;
    }
    if (!(field116 == rhs.field116)) {
      return field116 < rhs.field116;
    }
    if (!(field117 == rhs.field117)) {
      return field117 < rhs.field117;
    }
    if (!(field118 == rhs.field118)) {
      return field118 < rhs.field118;
    }
    if (!(field119 == rhs.field119)) {
      return field119 < rhs.field119;
    }
    if (!(field120 == rhs.field120)) {
      return field120 < rhs.field120;
    }
    if (!(field121 == rhs.field121)) {
      return field121 < rhs.field121;
    }
    if (!(field122 == rhs.field122)) {
      return field122 < rhs.field122;
    }
    if (!(field123 == rhs.field123)) {
      return field123 < rhs.field123;
    }
    if (!(field124 == rhs.field124)) {
      return field124 < rhs.field124;
    }
    if (!(field125 == rhs.field125)) {
      return field125 < rhs.field125;
    }
    if (!(field126 == rhs.field126)) {
      return field126 < rhs.field126;
    }
    if (!(field127 == rhs.field127)) {
      return field127 < rhs.field127;
    }
    if (!(field128 == rhs.field128)) {
      return field128 < rhs.field128;
    }
    if (!(field129 == rhs.field129)) {
      return field129 < rhs.field129;
    }
    if (!(field130 == rhs.field130)) {
      return field130 < rhs.field130;
    }
    if (!(field131 == rhs.field131)) {
      return field131 < rhs.field131;
    }
    if (!(field132 == rhs.field132)) {
      return field132 < rhs.field132;
    }
    if (!(field133 == rhs.field133)) {
      return field133 < rhs.field133;
    }
    if (!(field134 == rhs.field134)) {
      return field134 < rhs.field134;
    }
    if (!(field135 == rhs.field135)) {
      return field135 < rhs.field135;
    }
    if (!(field136 == rhs.field136)) {
      return field136 < rhs.field136;
    }
    if (!(field137 == rhs.field137)) {
      return field137 < rhs.field137;
    }
    if (!(field138 == rhs.field138)) {
      return field138 < rhs.field138;
    }
    if (!(field139 == rhs.field139)) {
      return field139 < rhs.field139;
    }
    if (!(field140 == rhs.field140)) {
      return field140 < rhs.field140;
    }
    if (!(field141 == rhs.field141)) {
      return field141 < rhs.field141;
    }
    if (!(field142 == rhs.field142)) {
      return field142 < rhs.field142;
    }
    if (!(field143 == rhs.field143)) {
      return field143 < rhs.field143;
    }
    if (!(field144 == rhs.field144)) {
      return field144 < rhs.field144;
    }
    if (!(field145 == rhs.field145)) {
      return field145 < rhs.field145;
    }
    if (!(field146 == rhs.field146)) {
      return field146 < rhs.field146;
    }
    if (!(field147 == rhs.field147)) {
      return field147 < rhs.field147;
    }
    if (!(field148 == rhs.field148)) {
      return field148 < rhs.field148;
    }
    if (!(field149 == rhs.field149)) {
      return field149 < rhs.field149;
    }
    if (!(field150 == rhs.field150)) {
      return field150 < rhs.field150;
    }
    if (!(field151 == rhs.field151)) {
      return field151 < rhs.field151;
    }
    if (!(field152 == rhs.field152)) {
      return field152 < rhs.field152;
    }
    if (!(field153 == rhs.field153)) {
      return field153 < rhs.field153;
    }
    if (!(field154 == rhs.field154)) {
      return field154 < rhs.field154;
    }
    if (!(field155 == rhs.field155)) {
      return field155 < rhs.field155;
    }
    if (!(field156 == rhs.field156)) {
      return field156 < rhs.field156;
    }
    if (!(field157 == rhs.field157)) {
      return field157 < rhs.field157;
    }
    if (!(field158 == rhs.field158)) {
      return field158 < rhs.field158;
    }
    if (!(field159 == rhs.field159)) {
      return field159 < rhs.field159;
    }
    if (!(field160 == rhs.field160)) {
      return field160 < rhs.field160;
    }
    if (!(field161 == rhs.field161)) {
      return field161 < rhs.field161;
    }
    if (!(field162 == rhs.field162)) {
      return field162 < rhs.field162;
    }
    if (!(field163 == rhs.field163)) {
      return field163 < rhs.field163;
    }
    if (!(field164 == rhs.field164)) {
      return field164 < rhs.field164;
    }
    if (!(field165 == rhs.field165)) {
      return field165 < rhs.field165;
    }
    if (!(field166 == rhs.field166)) {
      return field166 < rhs.field166;
    }
    if (!(field167 == rhs.field167)) {
      return field167 < rhs.field167;
    }
    if (!(field168 == rhs.field168)) {
      return field168 < rhs.field168;
    }
    if (!(field169 == rhs.field169)) {
      return field169 < rhs.field169;
    }
    if (!(field170 == rhs.field170)) {
      return field170 < rhs.field170;
    }
    if (!(field171 == rhs.field171)) {
      return field171 < rhs.field171;
    }
    if (!(field172 == rhs.field172)) {
      return field172 < rhs.field172;
    }
    if (!(field173 == rhs.field173)) {
      return field173 < rhs.field173;
    }
    if (!(field174 == rhs.field174)) {
      return field174 < rhs.field174;
    }
    if (!(field175 == rhs.field175)) {
      return field175 < rhs.field175;
    }
    if (!(field176 == rhs.field176)) {
      return field176 < rhs.field176;
    }
    if (!(field177 == rhs.field177)) {
      return field177 < rhs.field177;
    }
    if (!(field178 == rhs.field178)) {
      return field178 < rhs.field178;
    }
    if (!(field179 == rhs.field179)) {
      return field179 < rhs.field179;
    }
    if (!(field180 == rhs.field180)) {
      return field180 < rhs.field180;
    }
    if (!(field181 == rhs.field181)) {
      return field181 < rhs.field181;
    }
    if (!(field182 == rhs.field182)) {
      return field182 < rhs.field182;
    }
    if (!(field183 == rhs.field183)) {
      return field183 < rhs.field183;
    }
    if (!(field184 == rhs.field184)) {
      return field184 < rhs.field184;
    }
    if (!(field185 == rhs.field185)) {
      return field185 < rhs.field185;
    }
    if (!(field186 == rhs.field186)) {
      return field186 < rhs.field186;
    }
    if (!(field187 == rhs.field187)) {
      return field187 < rhs.field187;
    }
    if (!(field188 == rhs.field188)) {
      return field188 < rhs.field188;
    }
    if (!(field189 == rhs.field189)) {
      return field189 < rhs.field189;
    }
    if (!(field190 == rhs.field190)) {
      return field190 < rhs.field190;
    }
    if (!(field191 == rhs.field191)) {
      return field191 < rhs.field191;
    }
    if (!(field192 == rhs.field192)) {
      return field192 < rhs.field192;
    }
    (void)rhs;
    return false;
  }
  const std::vector<float>& get_field1() const&;
  std::vector<float> get_field1() &&;

  template <typename T_Struct11_field1_struct_setter>
  std::vector<float>& set_field1(T_Struct11_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct11_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const  ::cpp2::Struct5& get_field2() const&;
   ::cpp2::Struct5 get_field2() &&;

  template <typename T_Struct11_field2_struct_setter>
   ::cpp2::Struct5& set_field2(T_Struct11_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct11_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const  ::cpp2::Struct8& get_field3() const&;
   ::cpp2::Struct8 get_field3() &&;

  template <typename T_Struct11_field3_struct_setter>
   ::cpp2::Struct8& set_field3(T_Struct11_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct11_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  int8_t get_field4() const {
    return field4;
  }

  int8_t& set_field4(int8_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }
  const std::set< ::cpp2::Struct2>& get_field5() const&;
  std::set< ::cpp2::Struct2> get_field5() &&;

  template <typename T_Struct11_field5_struct_setter>
  std::set< ::cpp2::Struct2>& set_field5(T_Struct11_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct11_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }
  const std::map<int16_t, int8_t>& get_field6() const&;
  std::map<int16_t, int8_t> get_field6() &&;

  template <typename T_Struct11_field6_struct_setter>
  std::map<int16_t, int8_t>& set_field6(T_Struct11_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct11_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }
  const std::map< ::cpp2::Struct2, std::vector<int64_t>>& get_field7() const&;
  std::map< ::cpp2::Struct2, std::vector<int64_t>> get_field7() &&;

  template <typename T_Struct11_field7_struct_setter>
  std::map< ::cpp2::Struct2, std::vector<int64_t>>& set_field7(T_Struct11_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct11_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }
  const std::map< ::cpp2::Struct1, int32_t>& get_field8() const&;
  std::map< ::cpp2::Struct1, int32_t> get_field8() &&;

  template <typename T_Struct11_field8_struct_setter>
  std::map< ::cpp2::Struct1, int32_t>& set_field8(T_Struct11_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct11_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }
  const std::vector<std::string>& get_field9() const&;
  std::vector<std::string> get_field9() &&;

  template <typename T_Struct11_field9_struct_setter>
  std::vector<std::string>& set_field9(T_Struct11_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct11_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }
  const std::map<int16_t, std::map<int64_t, float>>& get_field10() const&;
  std::map<int16_t, std::map<int64_t, float>> get_field10() &&;

  template <typename T_Struct11_field10_struct_setter>
  std::map<int16_t, std::map<int64_t, float>>& set_field10(T_Struct11_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct11_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }
  const  ::cpp2::Struct5& get_field11() const&;
   ::cpp2::Struct5 get_field11() &&;

  template <typename T_Struct11_field11_struct_setter>
   ::cpp2::Struct5& set_field11(T_Struct11_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct11_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }

  bool get_field12() const {
    return field12;
  }

  bool& set_field12(bool field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }

  float get_field13() const {
    return field13;
  }

  float& set_field13(float field13_) {
    field13 = field13_;
    __isset.field13 = true;
    return field13;
  }
  const  ::cpp2::Struct4& get_field14() const&;
   ::cpp2::Struct4 get_field14() &&;

  template <typename T_Struct11_field14_struct_setter>
   ::cpp2::Struct4& set_field14(T_Struct11_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct11_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }

  const std::string& get_field15() const& {
    return field15;
  }

  std::string get_field15() && {
    return std::move(field15);
  }

  template <typename T_Struct11_field15_struct_setter>
  std::string& set_field15(T_Struct11_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct11_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }

  int8_t get_field16() const {
    return field16;
  }

  int8_t& set_field16(int8_t field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }
  const std::vector<bool>& get_field17() const&;
  std::vector<bool> get_field17() &&;

  template <typename T_Struct11_field17_struct_setter>
  std::vector<bool>& set_field17(T_Struct11_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct11_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }
  const  ::cpp2::Struct5& get_field18() const&;
   ::cpp2::Struct5 get_field18() &&;

  template <typename T_Struct11_field18_struct_setter>
   ::cpp2::Struct5& set_field18(T_Struct11_field18_struct_setter&& field18_) {
    field18 = std::forward<T_Struct11_field18_struct_setter>(field18_);
    __isset.field18 = true;
    return field18;
  }

  int8_t get_field19() const {
    return field19;
  }

  int8_t& set_field19(int8_t field19_) {
    field19 = field19_;
    __isset.field19 = true;
    return field19;
  }

  int32_t get_field20() const {
    return field20;
  }

  int32_t& set_field20(int32_t field20_) {
    field20 = field20_;
    __isset.field20 = true;
    return field20;
  }

  int8_t get_field21() const {
    return field21;
  }

  int8_t& set_field21(int8_t field21_) {
    field21 = field21_;
    __isset.field21 = true;
    return field21;
  }
  const std::map<std::vector<int32_t>, std::set<int32_t>>& get_field22() const&;
  std::map<std::vector<int32_t>, std::set<int32_t>> get_field22() &&;

  template <typename T_Struct11_field22_struct_setter>
  std::map<std::vector<int32_t>, std::set<int32_t>>& set_field22(T_Struct11_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct11_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }

  int8_t get_field23() const {
    return field23;
  }

  int8_t& set_field23(int8_t field23_) {
    field23 = field23_;
    __isset.field23 = true;
    return field23;
  }

  float get_field24() const {
    return field24;
  }

  float& set_field24(float field24_) {
    field24 = field24_;
    __isset.field24 = true;
    return field24;
  }
  const  ::cpp2::Struct6& get_field25() const&;
   ::cpp2::Struct6 get_field25() &&;

  template <typename T_Struct11_field25_struct_setter>
   ::cpp2::Struct6& set_field25(T_Struct11_field25_struct_setter&& field25_) {
    field25 = std::forward<T_Struct11_field25_struct_setter>(field25_);
    __isset.field25 = true;
    return field25;
  }
  const std::set<bool>& get_field26() const&;
  std::set<bool> get_field26() &&;

  template <typename T_Struct11_field26_struct_setter>
  std::set<bool>& set_field26(T_Struct11_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct11_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }

  const std::string& get_field27() const& {
    return field27;
  }

  std::string get_field27() && {
    return std::move(field27);
  }

  template <typename T_Struct11_field27_struct_setter>
  std::string& set_field27(T_Struct11_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct11_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }

  bool get_field28() const {
    return field28;
  }

  bool& set_field28(bool field28_) {
    field28 = field28_;
    __isset.field28 = true;
    return field28;
  }

  int8_t get_field29() const {
    return field29;
  }

  int8_t& set_field29(int8_t field29_) {
    field29 = field29_;
    __isset.field29 = true;
    return field29;
  }
  const std::map<int8_t, double>& get_field30() const&;
  std::map<int8_t, double> get_field30() &&;

  template <typename T_Struct11_field30_struct_setter>
  std::map<int8_t, double>& set_field30(T_Struct11_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct11_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }
  const std::map<std::map<float, float>, double>& get_field31() const&;
  std::map<std::map<float, float>, double> get_field31() &&;

  template <typename T_Struct11_field31_struct_setter>
  std::map<std::map<float, float>, double>& set_field31(T_Struct11_field31_struct_setter&& field31_) {
    field31 = std::forward<T_Struct11_field31_struct_setter>(field31_);
    __isset.field31 = true;
    return field31;
  }
  const  ::cpp2::Struct6& get_field32() const&;
   ::cpp2::Struct6 get_field32() &&;

  template <typename T_Struct11_field32_struct_setter>
   ::cpp2::Struct6& set_field32(T_Struct11_field32_struct_setter&& field32_) {
    field32 = std::forward<T_Struct11_field32_struct_setter>(field32_);
    __isset.field32 = true;
    return field32;
  }
  const std::set<int8_t>& get_field33() const&;
  std::set<int8_t> get_field33() &&;

  template <typename T_Struct11_field33_struct_setter>
  std::set<int8_t>& set_field33(T_Struct11_field33_struct_setter&& field33_) {
    field33 = std::forward<T_Struct11_field33_struct_setter>(field33_);
    __isset.field33 = true;
    return field33;
  }

  int64_t get_field34() const {
    return field34;
  }

  int64_t& set_field34(int64_t field34_) {
    field34 = field34_;
    __isset.field34 = true;
    return field34;
  }

  int8_t get_field35() const {
    return field35;
  }

  int8_t& set_field35(int8_t field35_) {
    field35 = field35_;
    __isset.field35 = true;
    return field35;
  }

  int16_t get_field36() const {
    return field36;
  }

  int16_t& set_field36(int16_t field36_) {
    field36 = field36_;
    __isset.field36 = true;
    return field36;
  }

  const std::string& get_field37() const& {
    return field37;
  }

  std::string get_field37() && {
    return std::move(field37);
  }

  template <typename T_Struct11_field37_struct_setter>
  std::string& set_field37(T_Struct11_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct11_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }
  const std::set<bool>& get_field38() const&;
  std::set<bool> get_field38() &&;

  template <typename T_Struct11_field38_struct_setter>
  std::set<bool>& set_field38(T_Struct11_field38_struct_setter&& field38_) {
    field38 = std::forward<T_Struct11_field38_struct_setter>(field38_);
    __isset.field38 = true;
    return field38;
  }

  int16_t get_field39() const {
    return field39;
  }

  int16_t& set_field39(int16_t field39_) {
    field39 = field39_;
    __isset.field39 = true;
    return field39;
  }
  const std::map<int32_t,  ::cpp2::Struct2>& get_field40() const&;
  std::map<int32_t,  ::cpp2::Struct2> get_field40() &&;

  template <typename T_Struct11_field40_struct_setter>
  std::map<int32_t,  ::cpp2::Struct2>& set_field40(T_Struct11_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct11_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }

  int8_t get_field41() const {
    return field41;
  }

  int8_t& set_field41(int8_t field41_) {
    field41 = field41_;
    __isset.field41 = true;
    return field41;
  }

  bool get_field42() const {
    return field42;
  }

  bool& set_field42(bool field42_) {
    field42 = field42_;
    __isset.field42 = true;
    return field42;
  }

  float get_field43() const {
    return field43;
  }

  float& set_field43(float field43_) {
    field43 = field43_;
    __isset.field43 = true;
    return field43;
  }

  int16_t get_field44() const {
    return field44;
  }

  int16_t& set_field44(int16_t field44_) {
    field44 = field44_;
    __isset.field44 = true;
    return field44;
  }

  int32_t get_field45() const {
    return field45;
  }

  int32_t& set_field45(int32_t field45_) {
    field45 = field45_;
    __isset.field45 = true;
    return field45;
  }

  bool get_field46() const {
    return field46;
  }

  bool& set_field46(bool field46_) {
    field46 = field46_;
    __isset.field46 = true;
    return field46;
  }
  const std::map<int16_t, int16_t>& get_field47() const&;
  std::map<int16_t, int16_t> get_field47() &&;

  template <typename T_Struct11_field47_struct_setter>
  std::map<int16_t, int16_t>& set_field47(T_Struct11_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct11_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }
  const std::map<int8_t, std::string>& get_field48() const&;
  std::map<int8_t, std::string> get_field48() &&;

  template <typename T_Struct11_field48_struct_setter>
  std::map<int8_t, std::string>& set_field48(T_Struct11_field48_struct_setter&& field48_) {
    field48 = std::forward<T_Struct11_field48_struct_setter>(field48_);
    __isset.field48 = true;
    return field48;
  }
  const std::map<int64_t, int16_t>& get_field49() const&;
  std::map<int64_t, int16_t> get_field49() &&;

  template <typename T_Struct11_field49_struct_setter>
  std::map<int64_t, int16_t>& set_field49(T_Struct11_field49_struct_setter&& field49_) {
    field49 = std::forward<T_Struct11_field49_struct_setter>(field49_);
    __isset.field49 = true;
    return field49;
  }
  const std::vector<std::string>& get_field50() const&;
  std::vector<std::string> get_field50() &&;

  template <typename T_Struct11_field50_struct_setter>
  std::vector<std::string>& set_field50(T_Struct11_field50_struct_setter&& field50_) {
    field50 = std::forward<T_Struct11_field50_struct_setter>(field50_);
    __isset.field50 = true;
    return field50;
  }
  const std::vector<bool>& get_field51() const&;
  std::vector<bool> get_field51() &&;

  template <typename T_Struct11_field51_struct_setter>
  std::vector<bool>& set_field51(T_Struct11_field51_struct_setter&& field51_) {
    field51 = std::forward<T_Struct11_field51_struct_setter>(field51_);
    __isset.field51 = true;
    return field51;
  }
  const  ::cpp2::Struct3& get_field52() const&;
   ::cpp2::Struct3 get_field52() &&;

  template <typename T_Struct11_field52_struct_setter>
   ::cpp2::Struct3& set_field52(T_Struct11_field52_struct_setter&& field52_) {
    field52 = std::forward<T_Struct11_field52_struct_setter>(field52_);
    __isset.field52 = true;
    return field52;
  }

  const std::string& get_field53() const& {
    return field53;
  }

  std::string get_field53() && {
    return std::move(field53);
  }

  template <typename T_Struct11_field53_struct_setter>
  std::string& set_field53(T_Struct11_field53_struct_setter&& field53_) {
    field53 = std::forward<T_Struct11_field53_struct_setter>(field53_);
    __isset.field53 = true;
    return field53;
  }
  const std::set<float>& get_field54() const&;
  std::set<float> get_field54() &&;

  template <typename T_Struct11_field54_struct_setter>
  std::set<float>& set_field54(T_Struct11_field54_struct_setter&& field54_) {
    field54 = std::forward<T_Struct11_field54_struct_setter>(field54_);
    __isset.field54 = true;
    return field54;
  }

  float get_field55() const {
    return field55;
  }

  float& set_field55(float field55_) {
    field55 = field55_;
    __isset.field55 = true;
    return field55;
  }
  const std::map<int32_t, int16_t>& get_field56() const&;
  std::map<int32_t, int16_t> get_field56() &&;

  template <typename T_Struct11_field56_struct_setter>
  std::map<int32_t, int16_t>& set_field56(T_Struct11_field56_struct_setter&& field56_) {
    field56 = std::forward<T_Struct11_field56_struct_setter>(field56_);
    __isset.field56 = true;
    return field56;
  }

  const std::string& get_field57() const& {
    return field57;
  }

  std::string get_field57() && {
    return std::move(field57);
  }

  template <typename T_Struct11_field57_struct_setter>
  std::string& set_field57(T_Struct11_field57_struct_setter&& field57_) {
    field57 = std::forward<T_Struct11_field57_struct_setter>(field57_);
    __isset.field57 = true;
    return field57;
  }

  double get_field58() const {
    return field58;
  }

  double& set_field58(double field58_) {
    field58 = field58_;
    __isset.field58 = true;
    return field58;
  }

  int8_t get_field59() const {
    return field59;
  }

  int8_t& set_field59(int8_t field59_) {
    field59 = field59_;
    __isset.field59 = true;
    return field59;
  }

  int8_t get_field60() const {
    return field60;
  }

  int8_t& set_field60(int8_t field60_) {
    field60 = field60_;
    __isset.field60 = true;
    return field60;
  }
  const std::map<int32_t, bool>& get_field61() const&;
  std::map<int32_t, bool> get_field61() &&;

  template <typename T_Struct11_field61_struct_setter>
  std::map<int32_t, bool>& set_field61(T_Struct11_field61_struct_setter&& field61_) {
    field61 = std::forward<T_Struct11_field61_struct_setter>(field61_);
    __isset.field61 = true;
    return field61;
  }

  const std::string& get_field62() const& {
    return field62;
  }

  std::string get_field62() && {
    return std::move(field62);
  }

  template <typename T_Struct11_field62_struct_setter>
  std::string& set_field62(T_Struct11_field62_struct_setter&& field62_) {
    field62 = std::forward<T_Struct11_field62_struct_setter>(field62_);
    __isset.field62 = true;
    return field62;
  }
  const std::map<int32_t, std::vector<int64_t>>& get_field63() const&;
  std::map<int32_t, std::vector<int64_t>> get_field63() &&;

  template <typename T_Struct11_field63_struct_setter>
  std::map<int32_t, std::vector<int64_t>>& set_field63(T_Struct11_field63_struct_setter&& field63_) {
    field63 = std::forward<T_Struct11_field63_struct_setter>(field63_);
    __isset.field63 = true;
    return field63;
  }
  const std::map<std::set<int32_t>, int8_t>& get_field64() const&;
  std::map<std::set<int32_t>, int8_t> get_field64() &&;

  template <typename T_Struct11_field64_struct_setter>
  std::map<std::set<int32_t>, int8_t>& set_field64(T_Struct11_field64_struct_setter&& field64_) {
    field64 = std::forward<T_Struct11_field64_struct_setter>(field64_);
    __isset.field64 = true;
    return field64;
  }
  const std::set<int8_t>& get_field65() const&;
  std::set<int8_t> get_field65() &&;

  template <typename T_Struct11_field65_struct_setter>
  std::set<int8_t>& set_field65(T_Struct11_field65_struct_setter&& field65_) {
    field65 = std::forward<T_Struct11_field65_struct_setter>(field65_);
    __isset.field65 = true;
    return field65;
  }

  bool get_field66() const {
    return field66;
  }

  bool& set_field66(bool field66_) {
    field66 = field66_;
    __isset.field66 = true;
    return field66;
  }

  double get_field67() const {
    return field67;
  }

  double& set_field67(double field67_) {
    field67 = field67_;
    __isset.field67 = true;
    return field67;
  }
  const  ::cpp2::Struct10& get_field68() const&;
   ::cpp2::Struct10 get_field68() &&;

  template <typename T_Struct11_field68_struct_setter>
   ::cpp2::Struct10& set_field68(T_Struct11_field68_struct_setter&& field68_) {
    field68 = std::forward<T_Struct11_field68_struct_setter>(field68_);
    __isset.field68 = true;
    return field68;
  }

  bool get_field69() const {
    return field69;
  }

  bool& set_field69(bool field69_) {
    field69 = field69_;
    __isset.field69 = true;
    return field69;
  }
  const std::vector<std::set< ::cpp2::Struct7>>& get_field70() const&;
  std::vector<std::set< ::cpp2::Struct7>> get_field70() &&;

  template <typename T_Struct11_field70_struct_setter>
  std::vector<std::set< ::cpp2::Struct7>>& set_field70(T_Struct11_field70_struct_setter&& field70_) {
    field70 = std::forward<T_Struct11_field70_struct_setter>(field70_);
    __isset.field70 = true;
    return field70;
  }
  const std::vector<std::vector<double>>& get_field71() const&;
  std::vector<std::vector<double>> get_field71() &&;

  template <typename T_Struct11_field71_struct_setter>
  std::vector<std::vector<double>>& set_field71(T_Struct11_field71_struct_setter&& field71_) {
    field71 = std::forward<T_Struct11_field71_struct_setter>(field71_);
    __isset.field71 = true;
    return field71;
  }

  const std::string& get_field72() const& {
    return field72;
  }

  std::string get_field72() && {
    return std::move(field72);
  }

  template <typename T_Struct11_field72_struct_setter>
  std::string& set_field72(T_Struct11_field72_struct_setter&& field72_) {
    field72 = std::forward<T_Struct11_field72_struct_setter>(field72_);
    __isset.field72 = true;
    return field72;
  }
  const std::map<float, int8_t>& get_field73() const&;
  std::map<float, int8_t> get_field73() &&;

  template <typename T_Struct11_field73_struct_setter>
  std::map<float, int8_t>& set_field73(T_Struct11_field73_struct_setter&& field73_) {
    field73 = std::forward<T_Struct11_field73_struct_setter>(field73_);
    __isset.field73 = true;
    return field73;
  }

  const std::string& get_field74() const& {
    return field74;
  }

  std::string get_field74() && {
    return std::move(field74);
  }

  template <typename T_Struct11_field74_struct_setter>
  std::string& set_field74(T_Struct11_field74_struct_setter&& field74_) {
    field74 = std::forward<T_Struct11_field74_struct_setter>(field74_);
    __isset.field74 = true;
    return field74;
  }

  int32_t get_field75() const {
    return field75;
  }

  int32_t& set_field75(int32_t field75_) {
    field75 = field75_;
    __isset.field75 = true;
    return field75;
  }

  bool get_field76() const {
    return field76;
  }

  bool& set_field76(bool field76_) {
    field76 = field76_;
    __isset.field76 = true;
    return field76;
  }

  int8_t get_field77() const {
    return field77;
  }

  int8_t& set_field77(int8_t field77_) {
    field77 = field77_;
    __isset.field77 = true;
    return field77;
  }
  const std::map<int64_t, int16_t>& get_field78() const&;
  std::map<int64_t, int16_t> get_field78() &&;

  template <typename T_Struct11_field78_struct_setter>
  std::map<int64_t, int16_t>& set_field78(T_Struct11_field78_struct_setter&& field78_) {
    field78 = std::forward<T_Struct11_field78_struct_setter>(field78_);
    __isset.field78 = true;
    return field78;
  }

  const std::string& get_field79() const& {
    return field79;
  }

  std::string get_field79() && {
    return std::move(field79);
  }

  template <typename T_Struct11_field79_struct_setter>
  std::string& set_field79(T_Struct11_field79_struct_setter&& field79_) {
    field79 = std::forward<T_Struct11_field79_struct_setter>(field79_);
    __isset.field79 = true;
    return field79;
  }
  const std::vector<int16_t>& get_field80() const&;
  std::vector<int16_t> get_field80() &&;

  template <typename T_Struct11_field80_struct_setter>
  std::vector<int16_t>& set_field80(T_Struct11_field80_struct_setter&& field80_) {
    field80 = std::forward<T_Struct11_field80_struct_setter>(field80_);
    __isset.field80 = true;
    return field80;
  }

  int8_t get_field81() const {
    return field81;
  }

  int8_t& set_field81(int8_t field81_) {
    field81 = field81_;
    __isset.field81 = true;
    return field81;
  }
  const std::vector<int16_t>& get_field82() const&;
  std::vector<int16_t> get_field82() &&;

  template <typename T_Struct11_field82_struct_setter>
  std::vector<int16_t>& set_field82(T_Struct11_field82_struct_setter&& field82_) {
    field82 = std::forward<T_Struct11_field82_struct_setter>(field82_);
    __isset.field82 = true;
    return field82;
  }

  int8_t get_field83() const {
    return field83;
  }

  int8_t& set_field83(int8_t field83_) {
    field83 = field83_;
    __isset.field83 = true;
    return field83;
  }

  int32_t get_field84() const {
    return field84;
  }

  int32_t& set_field84(int32_t field84_) {
    field84 = field84_;
    __isset.field84 = true;
    return field84;
  }
  const std::map<std::set<int16_t>, std::string>& get_field85() const&;
  std::map<std::set<int16_t>, std::string> get_field85() &&;

  template <typename T_Struct11_field85_struct_setter>
  std::map<std::set<int16_t>, std::string>& set_field85(T_Struct11_field85_struct_setter&& field85_) {
    field85 = std::forward<T_Struct11_field85_struct_setter>(field85_);
    __isset.field85 = true;
    return field85;
  }
  const std::map<std::string, std::map<bool, int64_t>>& get_field86() const&;
  std::map<std::string, std::map<bool, int64_t>> get_field86() &&;

  template <typename T_Struct11_field86_struct_setter>
  std::map<std::string, std::map<bool, int64_t>>& set_field86(T_Struct11_field86_struct_setter&& field86_) {
    field86 = std::forward<T_Struct11_field86_struct_setter>(field86_);
    __isset.field86 = true;
    return field86;
  }

  double get_field87() const {
    return field87;
  }

  double& set_field87(double field87_) {
    field87 = field87_;
    __isset.field87 = true;
    return field87;
  }
  const std::vector<int16_t>& get_field88() const&;
  std::vector<int16_t> get_field88() &&;

  template <typename T_Struct11_field88_struct_setter>
  std::vector<int16_t>& set_field88(T_Struct11_field88_struct_setter&& field88_) {
    field88 = std::forward<T_Struct11_field88_struct_setter>(field88_);
    __isset.field88 = true;
    return field88;
  }
  const  ::cpp2::Struct2& get_field89() const&;
   ::cpp2::Struct2 get_field89() &&;

  template <typename T_Struct11_field89_struct_setter>
   ::cpp2::Struct2& set_field89(T_Struct11_field89_struct_setter&& field89_) {
    field89 = std::forward<T_Struct11_field89_struct_setter>(field89_);
    __isset.field89 = true;
    return field89;
  }

  int16_t get_field90() const {
    return field90;
  }

  int16_t& set_field90(int16_t field90_) {
    field90 = field90_;
    __isset.field90 = true;
    return field90;
  }
  const std::set<int8_t>& get_field91() const&;
  std::set<int8_t> get_field91() &&;

  template <typename T_Struct11_field91_struct_setter>
  std::set<int8_t>& set_field91(T_Struct11_field91_struct_setter&& field91_) {
    field91 = std::forward<T_Struct11_field91_struct_setter>(field91_);
    __isset.field91 = true;
    return field91;
  }

  int64_t get_field92() const {
    return field92;
  }

  int64_t& set_field92(int64_t field92_) {
    field92 = field92_;
    __isset.field92 = true;
    return field92;
  }
  const std::map<std::vector<int64_t>, int8_t>& get_field93() const&;
  std::map<std::vector<int64_t>, int8_t> get_field93() &&;

  template <typename T_Struct11_field93_struct_setter>
  std::map<std::vector<int64_t>, int8_t>& set_field93(T_Struct11_field93_struct_setter&& field93_) {
    field93 = std::forward<T_Struct11_field93_struct_setter>(field93_);
    __isset.field93 = true;
    return field93;
  }
  const std::vector<std::set<int8_t>>& get_field94() const&;
  std::vector<std::set<int8_t>> get_field94() &&;

  template <typename T_Struct11_field94_struct_setter>
  std::vector<std::set<int8_t>>& set_field94(T_Struct11_field94_struct_setter&& field94_) {
    field94 = std::forward<T_Struct11_field94_struct_setter>(field94_);
    __isset.field94 = true;
    return field94;
  }

  int8_t get_field95() const {
    return field95;
  }

  int8_t& set_field95(int8_t field95_) {
    field95 = field95_;
    __isset.field95 = true;
    return field95;
  }

  float get_field96() const {
    return field96;
  }

  float& set_field96(float field96_) {
    field96 = field96_;
    __isset.field96 = true;
    return field96;
  }
  const std::vector< ::cpp2::Struct1>& get_field97() const&;
  std::vector< ::cpp2::Struct1> get_field97() &&;

  template <typename T_Struct11_field97_struct_setter>
  std::vector< ::cpp2::Struct1>& set_field97(T_Struct11_field97_struct_setter&& field97_) {
    field97 = std::forward<T_Struct11_field97_struct_setter>(field97_);
    __isset.field97 = true;
    return field97;
  }
  const std::set<bool>& get_field98() const&;
  std::set<bool> get_field98() &&;

  template <typename T_Struct11_field98_struct_setter>
  std::set<bool>& set_field98(T_Struct11_field98_struct_setter&& field98_) {
    field98 = std::forward<T_Struct11_field98_struct_setter>(field98_);
    __isset.field98 = true;
    return field98;
  }

  int32_t get_field99() const {
    return field99;
  }

  int32_t& set_field99(int32_t field99_) {
    field99 = field99_;
    __isset.field99 = true;
    return field99;
  }
  const std::vector<std::map<bool, bool>>& get_field100() const&;
  std::vector<std::map<bool, bool>> get_field100() &&;

  template <typename T_Struct11_field100_struct_setter>
  std::vector<std::map<bool, bool>>& set_field100(T_Struct11_field100_struct_setter&& field100_) {
    field100 = std::forward<T_Struct11_field100_struct_setter>(field100_);
    __isset.field100 = true;
    return field100;
  }

  float get_field101() const {
    return field101;
  }

  float& set_field101(float field101_) {
    field101 = field101_;
    __isset.field101 = true;
    return field101;
  }
  const std::vector<std::string>& get_field102() const&;
  std::vector<std::string> get_field102() &&;

  template <typename T_Struct11_field102_struct_setter>
  std::vector<std::string>& set_field102(T_Struct11_field102_struct_setter&& field102_) {
    field102 = std::forward<T_Struct11_field102_struct_setter>(field102_);
    __isset.field102 = true;
    return field102;
  }

  const std::string& get_field103() const& {
    return field103;
  }

  std::string get_field103() && {
    return std::move(field103);
  }

  template <typename T_Struct11_field103_struct_setter>
  std::string& set_field103(T_Struct11_field103_struct_setter&& field103_) {
    field103 = std::forward<T_Struct11_field103_struct_setter>(field103_);
    __isset.field103 = true;
    return field103;
  }
  const std::set<int8_t>& get_field104() const&;
  std::set<int8_t> get_field104() &&;

  template <typename T_Struct11_field104_struct_setter>
  std::set<int8_t>& set_field104(T_Struct11_field104_struct_setter&& field104_) {
    field104 = std::forward<T_Struct11_field104_struct_setter>(field104_);
    __isset.field104 = true;
    return field104;
  }
  const  ::cpp2::Struct2& get_field105() const&;
   ::cpp2::Struct2 get_field105() &&;

  template <typename T_Struct11_field105_struct_setter>
   ::cpp2::Struct2& set_field105(T_Struct11_field105_struct_setter&& field105_) {
    field105 = std::forward<T_Struct11_field105_struct_setter>(field105_);
    __isset.field105 = true;
    return field105;
  }

  const std::string& get_field106() const& {
    return field106;
  }

  std::string get_field106() && {
    return std::move(field106);
  }

  template <typename T_Struct11_field106_struct_setter>
  std::string& set_field106(T_Struct11_field106_struct_setter&& field106_) {
    field106 = std::forward<T_Struct11_field106_struct_setter>(field106_);
    __isset.field106 = true;
    return field106;
  }

  float get_field107() const {
    return field107;
  }

  float& set_field107(float field107_) {
    field107 = field107_;
    __isset.field107 = true;
    return field107;
  }

  const std::string& get_field108() const& {
    return field108;
  }

  std::string get_field108() && {
    return std::move(field108);
  }

  template <typename T_Struct11_field108_struct_setter>
  std::string& set_field108(T_Struct11_field108_struct_setter&& field108_) {
    field108 = std::forward<T_Struct11_field108_struct_setter>(field108_);
    __isset.field108 = true;
    return field108;
  }

  bool get_field109() const {
    return field109;
  }

  bool& set_field109(bool field109_) {
    field109 = field109_;
    __isset.field109 = true;
    return field109;
  }
  const std::map< ::cpp2::Struct4, std::string>& get_field110() const&;
  std::map< ::cpp2::Struct4, std::string> get_field110() &&;

  template <typename T_Struct11_field110_struct_setter>
  std::map< ::cpp2::Struct4, std::string>& set_field110(T_Struct11_field110_struct_setter&& field110_) {
    field110 = std::forward<T_Struct11_field110_struct_setter>(field110_);
    __isset.field110 = true;
    return field110;
  }

  bool get_field111() const {
    return field111;
  }

  bool& set_field111(bool field111_) {
    field111 = field111_;
    __isset.field111 = true;
    return field111;
  }
  const std::vector<bool>& get_field112() const&;
  std::vector<bool> get_field112() &&;

  template <typename T_Struct11_field112_struct_setter>
  std::vector<bool>& set_field112(T_Struct11_field112_struct_setter&& field112_) {
    field112 = std::forward<T_Struct11_field112_struct_setter>(field112_);
    __isset.field112 = true;
    return field112;
  }
  const  ::cpp2::Struct4& get_field113() const&;
   ::cpp2::Struct4 get_field113() &&;

  template <typename T_Struct11_field113_struct_setter>
   ::cpp2::Struct4& set_field113(T_Struct11_field113_struct_setter&& field113_) {
    field113 = std::forward<T_Struct11_field113_struct_setter>(field113_);
    __isset.field113 = true;
    return field113;
  }

  const std::string& get_field114() const& {
    return field114;
  }

  std::string get_field114() && {
    return std::move(field114);
  }

  template <typename T_Struct11_field114_struct_setter>
  std::string& set_field114(T_Struct11_field114_struct_setter&& field114_) {
    field114 = std::forward<T_Struct11_field114_struct_setter>(field114_);
    __isset.field114 = true;
    return field114;
  }
  const std::set<int16_t>& get_field115() const&;
  std::set<int16_t> get_field115() &&;

  template <typename T_Struct11_field115_struct_setter>
  std::set<int16_t>& set_field115(T_Struct11_field115_struct_setter&& field115_) {
    field115 = std::forward<T_Struct11_field115_struct_setter>(field115_);
    __isset.field115 = true;
    return field115;
  }

  int8_t get_field116() const {
    return field116;
  }

  int8_t& set_field116(int8_t field116_) {
    field116 = field116_;
    __isset.field116 = true;
    return field116;
  }

  int32_t get_field117() const {
    return field117;
  }

  int32_t& set_field117(int32_t field117_) {
    field117 = field117_;
    __isset.field117 = true;
    return field117;
  }
  const std::map<double, int8_t>& get_field118() const&;
  std::map<double, int8_t> get_field118() &&;

  template <typename T_Struct11_field118_struct_setter>
  std::map<double, int8_t>& set_field118(T_Struct11_field118_struct_setter&& field118_) {
    field118 = std::forward<T_Struct11_field118_struct_setter>(field118_);
    __isset.field118 = true;
    return field118;
  }

  bool get_field119() const {
    return field119;
  }

  bool& set_field119(bool field119_) {
    field119 = field119_;
    __isset.field119 = true;
    return field119;
  }

  const std::string& get_field120() const& {
    return field120;
  }

  std::string get_field120() && {
    return std::move(field120);
  }

  template <typename T_Struct11_field120_struct_setter>
  std::string& set_field120(T_Struct11_field120_struct_setter&& field120_) {
    field120 = std::forward<T_Struct11_field120_struct_setter>(field120_);
    __isset.field120 = true;
    return field120;
  }
  const std::vector< ::cpp2::Struct0>& get_field121() const&;
  std::vector< ::cpp2::Struct0> get_field121() &&;

  template <typename T_Struct11_field121_struct_setter>
  std::vector< ::cpp2::Struct0>& set_field121(T_Struct11_field121_struct_setter&& field121_) {
    field121 = std::forward<T_Struct11_field121_struct_setter>(field121_);
    __isset.field121 = true;
    return field121;
  }
  const std::set<std::set<double>>& get_field122() const&;
  std::set<std::set<double>> get_field122() &&;

  template <typename T_Struct11_field122_struct_setter>
  std::set<std::set<double>>& set_field122(T_Struct11_field122_struct_setter&& field122_) {
    field122 = std::forward<T_Struct11_field122_struct_setter>(field122_);
    __isset.field122 = true;
    return field122;
  }
  const  ::cpp2::Struct5& get_field123() const&;
   ::cpp2::Struct5 get_field123() &&;

  template <typename T_Struct11_field123_struct_setter>
   ::cpp2::Struct5& set_field123(T_Struct11_field123_struct_setter&& field123_) {
    field123 = std::forward<T_Struct11_field123_struct_setter>(field123_);
    __isset.field123 = true;
    return field123;
  }

  int8_t get_field124() const {
    return field124;
  }

  int8_t& set_field124(int8_t field124_) {
    field124 = field124_;
    __isset.field124 = true;
    return field124;
  }

  float get_field125() const {
    return field125;
  }

  float& set_field125(float field125_) {
    field125 = field125_;
    __isset.field125 = true;
    return field125;
  }
  const std::map<float, float>& get_field126() const&;
  std::map<float, float> get_field126() &&;

  template <typename T_Struct11_field126_struct_setter>
  std::map<float, float>& set_field126(T_Struct11_field126_struct_setter&& field126_) {
    field126 = std::forward<T_Struct11_field126_struct_setter>(field126_);
    __isset.field126 = true;
    return field126;
  }
  const  ::cpp2::Struct6& get_field127() const&;
   ::cpp2::Struct6 get_field127() &&;

  template <typename T_Struct11_field127_struct_setter>
   ::cpp2::Struct6& set_field127(T_Struct11_field127_struct_setter&& field127_) {
    field127 = std::forward<T_Struct11_field127_struct_setter>(field127_);
    __isset.field127 = true;
    return field127;
  }
  const std::map<float, std::string>& get_field128() const&;
  std::map<float, std::string> get_field128() &&;

  template <typename T_Struct11_field128_struct_setter>
  std::map<float, std::string>& set_field128(T_Struct11_field128_struct_setter&& field128_) {
    field128 = std::forward<T_Struct11_field128_struct_setter>(field128_);
    __isset.field128 = true;
    return field128;
  }

  int8_t get_field129() const {
    return field129;
  }

  int8_t& set_field129(int8_t field129_) {
    field129 = field129_;
    __isset.field129 = true;
    return field129;
  }

  int8_t get_field130() const {
    return field130;
  }

  int8_t& set_field130(int8_t field130_) {
    field130 = field130_;
    __isset.field130 = true;
    return field130;
  }
  const std::map< ::cpp2::Struct0, int8_t>& get_field131() const&;
  std::map< ::cpp2::Struct0, int8_t> get_field131() &&;

  template <typename T_Struct11_field131_struct_setter>
  std::map< ::cpp2::Struct0, int8_t>& set_field131(T_Struct11_field131_struct_setter&& field131_) {
    field131 = std::forward<T_Struct11_field131_struct_setter>(field131_);
    __isset.field131 = true;
    return field131;
  }
  const std::vector<double>& get_field132() const&;
  std::vector<double> get_field132() &&;

  template <typename T_Struct11_field132_struct_setter>
  std::vector<double>& set_field132(T_Struct11_field132_struct_setter&& field132_) {
    field132 = std::forward<T_Struct11_field132_struct_setter>(field132_);
    __isset.field132 = true;
    return field132;
  }

  const std::string& get_field133() const& {
    return field133;
  }

  std::string get_field133() && {
    return std::move(field133);
  }

  template <typename T_Struct11_field133_struct_setter>
  std::string& set_field133(T_Struct11_field133_struct_setter&& field133_) {
    field133 = std::forward<T_Struct11_field133_struct_setter>(field133_);
    __isset.field133 = true;
    return field133;
  }
  const std::map<int16_t, std::string>& get_field134() const&;
  std::map<int16_t, std::string> get_field134() &&;

  template <typename T_Struct11_field134_struct_setter>
  std::map<int16_t, std::string>& set_field134(T_Struct11_field134_struct_setter&& field134_) {
    field134 = std::forward<T_Struct11_field134_struct_setter>(field134_);
    __isset.field134 = true;
    return field134;
  }

  double get_field135() const {
    return field135;
  }

  double& set_field135(double field135_) {
    field135 = field135_;
    __isset.field135 = true;
    return field135;
  }
  const std::vector<std::vector<int64_t>>& get_field136() const&;
  std::vector<std::vector<int64_t>> get_field136() &&;

  template <typename T_Struct11_field136_struct_setter>
  std::vector<std::vector<int64_t>>& set_field136(T_Struct11_field136_struct_setter&& field136_) {
    field136 = std::forward<T_Struct11_field136_struct_setter>(field136_);
    __isset.field136 = true;
    return field136;
  }
  const std::vector<double>& get_field137() const&;
  std::vector<double> get_field137() &&;

  template <typename T_Struct11_field137_struct_setter>
  std::vector<double>& set_field137(T_Struct11_field137_struct_setter&& field137_) {
    field137 = std::forward<T_Struct11_field137_struct_setter>(field137_);
    __isset.field137 = true;
    return field137;
  }
  const std::set<double>& get_field138() const&;
  std::set<double> get_field138() &&;

  template <typename T_Struct11_field138_struct_setter>
  std::set<double>& set_field138(T_Struct11_field138_struct_setter&& field138_) {
    field138 = std::forward<T_Struct11_field138_struct_setter>(field138_);
    __isset.field138 = true;
    return field138;
  }
  const std::set<double>& get_field139() const&;
  std::set<double> get_field139() &&;

  template <typename T_Struct11_field139_struct_setter>
  std::set<double>& set_field139(T_Struct11_field139_struct_setter&& field139_) {
    field139 = std::forward<T_Struct11_field139_struct_setter>(field139_);
    __isset.field139 = true;
    return field139;
  }

  int32_t get_field140() const {
    return field140;
  }

  int32_t& set_field140(int32_t field140_) {
    field140 = field140_;
    __isset.field140 = true;
    return field140;
  }
  const  ::cpp2::Struct1& get_field141() const&;
   ::cpp2::Struct1 get_field141() &&;

  template <typename T_Struct11_field141_struct_setter>
   ::cpp2::Struct1& set_field141(T_Struct11_field141_struct_setter&& field141_) {
    field141 = std::forward<T_Struct11_field141_struct_setter>(field141_);
    __isset.field141 = true;
    return field141;
  }
  const  ::cpp2::Struct2& get_field142() const&;
   ::cpp2::Struct2 get_field142() &&;

  template <typename T_Struct11_field142_struct_setter>
   ::cpp2::Struct2& set_field142(T_Struct11_field142_struct_setter&& field142_) {
    field142 = std::forward<T_Struct11_field142_struct_setter>(field142_);
    __isset.field142 = true;
    return field142;
  }
  const std::map<int32_t, std::string>& get_field143() const&;
  std::map<int32_t, std::string> get_field143() &&;

  template <typename T_Struct11_field143_struct_setter>
  std::map<int32_t, std::string>& set_field143(T_Struct11_field143_struct_setter&& field143_) {
    field143 = std::forward<T_Struct11_field143_struct_setter>(field143_);
    __isset.field143 = true;
    return field143;
  }
  const std::map<double, int32_t>& get_field144() const&;
  std::map<double, int32_t> get_field144() &&;

  template <typename T_Struct11_field144_struct_setter>
  std::map<double, int32_t>& set_field144(T_Struct11_field144_struct_setter&& field144_) {
    field144 = std::forward<T_Struct11_field144_struct_setter>(field144_);
    __isset.field144 = true;
    return field144;
  }
  const  ::cpp2::Struct5& get_field145() const&;
   ::cpp2::Struct5 get_field145() &&;

  template <typename T_Struct11_field145_struct_setter>
   ::cpp2::Struct5& set_field145(T_Struct11_field145_struct_setter&& field145_) {
    field145 = std::forward<T_Struct11_field145_struct_setter>(field145_);
    __isset.field145 = true;
    return field145;
  }
  const std::vector<int16_t>& get_field146() const&;
  std::vector<int16_t> get_field146() &&;

  template <typename T_Struct11_field146_struct_setter>
  std::vector<int16_t>& set_field146(T_Struct11_field146_struct_setter&& field146_) {
    field146 = std::forward<T_Struct11_field146_struct_setter>(field146_);
    __isset.field146 = true;
    return field146;
  }
  const  ::cpp2::Struct2& get_field147() const&;
   ::cpp2::Struct2 get_field147() &&;

  template <typename T_Struct11_field147_struct_setter>
   ::cpp2::Struct2& set_field147(T_Struct11_field147_struct_setter&& field147_) {
    field147 = std::forward<T_Struct11_field147_struct_setter>(field147_);
    __isset.field147 = true;
    return field147;
  }

  const std::string& get_field148() const& {
    return field148;
  }

  std::string get_field148() && {
    return std::move(field148);
  }

  template <typename T_Struct11_field148_struct_setter>
  std::string& set_field148(T_Struct11_field148_struct_setter&& field148_) {
    field148 = std::forward<T_Struct11_field148_struct_setter>(field148_);
    __isset.field148 = true;
    return field148;
  }
  const std::set<std::string>& get_field149() const&;
  std::set<std::string> get_field149() &&;

  template <typename T_Struct11_field149_struct_setter>
  std::set<std::string>& set_field149(T_Struct11_field149_struct_setter&& field149_) {
    field149 = std::forward<T_Struct11_field149_struct_setter>(field149_);
    __isset.field149 = true;
    return field149;
  }

  double get_field150() const {
    return field150;
  }

  double& set_field150(double field150_) {
    field150 = field150_;
    __isset.field150 = true;
    return field150;
  }
  const  ::cpp2::Struct0& get_field151() const&;
   ::cpp2::Struct0 get_field151() &&;

  template <typename T_Struct11_field151_struct_setter>
   ::cpp2::Struct0& set_field151(T_Struct11_field151_struct_setter&& field151_) {
    field151 = std::forward<T_Struct11_field151_struct_setter>(field151_);
    __isset.field151 = true;
    return field151;
  }

  int32_t get_field152() const {
    return field152;
  }

  int32_t& set_field152(int32_t field152_) {
    field152 = field152_;
    __isset.field152 = true;
    return field152;
  }
  const std::vector<bool>& get_field153() const&;
  std::vector<bool> get_field153() &&;

  template <typename T_Struct11_field153_struct_setter>
  std::vector<bool>& set_field153(T_Struct11_field153_struct_setter&& field153_) {
    field153 = std::forward<T_Struct11_field153_struct_setter>(field153_);
    __isset.field153 = true;
    return field153;
  }

  const std::string& get_field154() const& {
    return field154;
  }

  std::string get_field154() && {
    return std::move(field154);
  }

  template <typename T_Struct11_field154_struct_setter>
  std::string& set_field154(T_Struct11_field154_struct_setter&& field154_) {
    field154 = std::forward<T_Struct11_field154_struct_setter>(field154_);
    __isset.field154 = true;
    return field154;
  }

  bool get_field155() const {
    return field155;
  }

  bool& set_field155(bool field155_) {
    field155 = field155_;
    __isset.field155 = true;
    return field155;
  }
  const  ::cpp2::Struct1& get_field156() const&;
   ::cpp2::Struct1 get_field156() &&;

  template <typename T_Struct11_field156_struct_setter>
   ::cpp2::Struct1& set_field156(T_Struct11_field156_struct_setter&& field156_) {
    field156 = std::forward<T_Struct11_field156_struct_setter>(field156_);
    __isset.field156 = true;
    return field156;
  }

  float get_field157() const {
    return field157;
  }

  float& set_field157(float field157_) {
    field157 = field157_;
    __isset.field157 = true;
    return field157;
  }

  const std::string& get_field158() const& {
    return field158;
  }

  std::string get_field158() && {
    return std::move(field158);
  }

  template <typename T_Struct11_field158_struct_setter>
  std::string& set_field158(T_Struct11_field158_struct_setter&& field158_) {
    field158 = std::forward<T_Struct11_field158_struct_setter>(field158_);
    __isset.field158 = true;
    return field158;
  }

  int8_t get_field159() const {
    return field159;
  }

  int8_t& set_field159(int8_t field159_) {
    field159 = field159_;
    __isset.field159 = true;
    return field159;
  }
  const std::vector<int32_t>& get_field160() const&;
  std::vector<int32_t> get_field160() &&;

  template <typename T_Struct11_field160_struct_setter>
  std::vector<int32_t>& set_field160(T_Struct11_field160_struct_setter&& field160_) {
    field160 = std::forward<T_Struct11_field160_struct_setter>(field160_);
    __isset.field160 = true;
    return field160;
  }
  const  ::cpp2::Struct0& get_field161() const&;
   ::cpp2::Struct0 get_field161() &&;

  template <typename T_Struct11_field161_struct_setter>
   ::cpp2::Struct0& set_field161(T_Struct11_field161_struct_setter&& field161_) {
    field161 = std::forward<T_Struct11_field161_struct_setter>(field161_);
    __isset.field161 = true;
    return field161;
  }

  int64_t get_field162() const {
    return field162;
  }

  int64_t& set_field162(int64_t field162_) {
    field162 = field162_;
    __isset.field162 = true;
    return field162;
  }

  const std::string& get_field163() const& {
    return field163;
  }

  std::string get_field163() && {
    return std::move(field163);
  }

  template <typename T_Struct11_field163_struct_setter>
  std::string& set_field163(T_Struct11_field163_struct_setter&& field163_) {
    field163 = std::forward<T_Struct11_field163_struct_setter>(field163_);
    __isset.field163 = true;
    return field163;
  }
  const  ::cpp2::Struct7& get_field164() const&;
   ::cpp2::Struct7 get_field164() &&;

  template <typename T_Struct11_field164_struct_setter>
   ::cpp2::Struct7& set_field164(T_Struct11_field164_struct_setter&& field164_) {
    field164 = std::forward<T_Struct11_field164_struct_setter>(field164_);
    __isset.field164 = true;
    return field164;
  }

  double get_field165() const {
    return field165;
  }

  double& set_field165(double field165_) {
    field165 = field165_;
    __isset.field165 = true;
    return field165;
  }

  int32_t get_field166() const {
    return field166;
  }

  int32_t& set_field166(int32_t field166_) {
    field166 = field166_;
    __isset.field166 = true;
    return field166;
  }
  const  ::cpp2::Struct7& get_field167() const&;
   ::cpp2::Struct7 get_field167() &&;

  template <typename T_Struct11_field167_struct_setter>
   ::cpp2::Struct7& set_field167(T_Struct11_field167_struct_setter&& field167_) {
    field167 = std::forward<T_Struct11_field167_struct_setter>(field167_);
    __isset.field167 = true;
    return field167;
  }
  const  ::cpp2::Struct0& get_field168() const&;
   ::cpp2::Struct0 get_field168() &&;

  template <typename T_Struct11_field168_struct_setter>
   ::cpp2::Struct0& set_field168(T_Struct11_field168_struct_setter&& field168_) {
    field168 = std::forward<T_Struct11_field168_struct_setter>(field168_);
    __isset.field168 = true;
    return field168;
  }

  const std::string& get_field169() const& {
    return field169;
  }

  std::string get_field169() && {
    return std::move(field169);
  }

  template <typename T_Struct11_field169_struct_setter>
  std::string& set_field169(T_Struct11_field169_struct_setter&& field169_) {
    field169 = std::forward<T_Struct11_field169_struct_setter>(field169_);
    __isset.field169 = true;
    return field169;
  }

  const std::string& get_field170() const& {
    return field170;
  }

  std::string get_field170() && {
    return std::move(field170);
  }

  template <typename T_Struct11_field170_struct_setter>
  std::string& set_field170(T_Struct11_field170_struct_setter&& field170_) {
    field170 = std::forward<T_Struct11_field170_struct_setter>(field170_);
    __isset.field170 = true;
    return field170;
  }
  const  ::cpp2::Struct1& get_field171() const&;
   ::cpp2::Struct1 get_field171() &&;

  template <typename T_Struct11_field171_struct_setter>
   ::cpp2::Struct1& set_field171(T_Struct11_field171_struct_setter&& field171_) {
    field171 = std::forward<T_Struct11_field171_struct_setter>(field171_);
    __isset.field171 = true;
    return field171;
  }

  float get_field172() const {
    return field172;
  }

  float& set_field172(float field172_) {
    field172 = field172_;
    __isset.field172 = true;
    return field172;
  }

  double get_field173() const {
    return field173;
  }

  double& set_field173(double field173_) {
    field173 = field173_;
    __isset.field173 = true;
    return field173;
  }
  const std::set<int64_t>& get_field174() const&;
  std::set<int64_t> get_field174() &&;

  template <typename T_Struct11_field174_struct_setter>
  std::set<int64_t>& set_field174(T_Struct11_field174_struct_setter&& field174_) {
    field174 = std::forward<T_Struct11_field174_struct_setter>(field174_);
    __isset.field174 = true;
    return field174;
  }
  const std::map<float, int16_t>& get_field175() const&;
  std::map<float, int16_t> get_field175() &&;

  template <typename T_Struct11_field175_struct_setter>
  std::map<float, int16_t>& set_field175(T_Struct11_field175_struct_setter&& field175_) {
    field175 = std::forward<T_Struct11_field175_struct_setter>(field175_);
    __isset.field175 = true;
    return field175;
  }
  const std::vector<std::map<int64_t, bool>>& get_field176() const&;
  std::vector<std::map<int64_t, bool>> get_field176() &&;

  template <typename T_Struct11_field176_struct_setter>
  std::vector<std::map<int64_t, bool>>& set_field176(T_Struct11_field176_struct_setter&& field176_) {
    field176 = std::forward<T_Struct11_field176_struct_setter>(field176_);
    __isset.field176 = true;
    return field176;
  }
  const std::set<int16_t>& get_field177() const&;
  std::set<int16_t> get_field177() &&;

  template <typename T_Struct11_field177_struct_setter>
  std::set<int16_t>& set_field177(T_Struct11_field177_struct_setter&& field177_) {
    field177 = std::forward<T_Struct11_field177_struct_setter>(field177_);
    __isset.field177 = true;
    return field177;
  }
  const  ::cpp2::Struct1& get_field178() const&;
   ::cpp2::Struct1 get_field178() &&;

  template <typename T_Struct11_field178_struct_setter>
   ::cpp2::Struct1& set_field178(T_Struct11_field178_struct_setter&& field178_) {
    field178 = std::forward<T_Struct11_field178_struct_setter>(field178_);
    __isset.field178 = true;
    return field178;
  }
  const std::map<int32_t,  ::cpp2::Struct1>& get_field179() const&;
  std::map<int32_t,  ::cpp2::Struct1> get_field179() &&;

  template <typename T_Struct11_field179_struct_setter>
  std::map<int32_t,  ::cpp2::Struct1>& set_field179(T_Struct11_field179_struct_setter&& field179_) {
    field179 = std::forward<T_Struct11_field179_struct_setter>(field179_);
    __isset.field179 = true;
    return field179;
  }
  const  ::cpp2::Struct7& get_field180() const&;
   ::cpp2::Struct7 get_field180() &&;

  template <typename T_Struct11_field180_struct_setter>
   ::cpp2::Struct7& set_field180(T_Struct11_field180_struct_setter&& field180_) {
    field180 = std::forward<T_Struct11_field180_struct_setter>(field180_);
    __isset.field180 = true;
    return field180;
  }
  const std::map<bool, int16_t>& get_field181() const&;
  std::map<bool, int16_t> get_field181() &&;

  template <typename T_Struct11_field181_struct_setter>
  std::map<bool, int16_t>& set_field181(T_Struct11_field181_struct_setter&& field181_) {
    field181 = std::forward<T_Struct11_field181_struct_setter>(field181_);
    __isset.field181 = true;
    return field181;
  }

  float get_field182() const {
    return field182;
  }

  float& set_field182(float field182_) {
    field182 = field182_;
    __isset.field182 = true;
    return field182;
  }
  const std::vector<std::string>& get_field183() const&;
  std::vector<std::string> get_field183() &&;

  template <typename T_Struct11_field183_struct_setter>
  std::vector<std::string>& set_field183(T_Struct11_field183_struct_setter&& field183_) {
    field183 = std::forward<T_Struct11_field183_struct_setter>(field183_);
    __isset.field183 = true;
    return field183;
  }

  int16_t get_field184() const {
    return field184;
  }

  int16_t& set_field184(int16_t field184_) {
    field184 = field184_;
    __isset.field184 = true;
    return field184;
  }
  const  ::cpp2::Struct3& get_field185() const&;
   ::cpp2::Struct3 get_field185() &&;

  template <typename T_Struct11_field185_struct_setter>
   ::cpp2::Struct3& set_field185(T_Struct11_field185_struct_setter&& field185_) {
    field185 = std::forward<T_Struct11_field185_struct_setter>(field185_);
    __isset.field185 = true;
    return field185;
  }
  const std::set< ::cpp2::Struct3>& get_field186() const&;
  std::set< ::cpp2::Struct3> get_field186() &&;

  template <typename T_Struct11_field186_struct_setter>
  std::set< ::cpp2::Struct3>& set_field186(T_Struct11_field186_struct_setter&& field186_) {
    field186 = std::forward<T_Struct11_field186_struct_setter>(field186_);
    __isset.field186 = true;
    return field186;
  }

  bool get_field187() const {
    return field187;
  }

  bool& set_field187(bool field187_) {
    field187 = field187_;
    __isset.field187 = true;
    return field187;
  }
  const  ::cpp2::Struct8& get_field188() const&;
   ::cpp2::Struct8 get_field188() &&;

  template <typename T_Struct11_field188_struct_setter>
   ::cpp2::Struct8& set_field188(T_Struct11_field188_struct_setter&& field188_) {
    field188 = std::forward<T_Struct11_field188_struct_setter>(field188_);
    __isset.field188 = true;
    return field188;
  }
  const  ::cpp2::Struct0& get_field189() const&;
   ::cpp2::Struct0 get_field189() &&;

  template <typename T_Struct11_field189_struct_setter>
   ::cpp2::Struct0& set_field189(T_Struct11_field189_struct_setter&& field189_) {
    field189 = std::forward<T_Struct11_field189_struct_setter>(field189_);
    __isset.field189 = true;
    return field189;
  }

  float get_field190() const {
    return field190;
  }

  float& set_field190(float field190_) {
    field190 = field190_;
    __isset.field190 = true;
    return field190;
  }
  const std::vector<int32_t>& get_field191() const&;
  std::vector<int32_t> get_field191() &&;

  template <typename T_Struct11_field191_struct_setter>
  std::vector<int32_t>& set_field191(T_Struct11_field191_struct_setter&& field191_) {
    field191 = std::forward<T_Struct11_field191_struct_setter>(field191_);
    __isset.field191 = true;
    return field191;
  }
  const std::map<std::vector<std::string>, std::vector<std::map<double, int8_t>>>& get_field192() const&;
  std::map<std::vector<std::string>, std::vector<std::map<double, int8_t>>> get_field192() &&;

  template <typename T_Struct11_field192_struct_setter>
  std::map<std::vector<std::string>, std::vector<std::map<double, int8_t>>>& set_field192(T_Struct11_field192_struct_setter&& field192_) {
    field192 = std::forward<T_Struct11_field192_struct_setter>(field192_);
    __isset.field192 = true;
    return field192;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct11& a, Struct11& b);
extern template uint32_t Struct11::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct11::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct11::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct11::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct11::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct11::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct11::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct11::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct11>::clear( ::cpp2::Struct11* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct11>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct11>::write(Protocol* proto,  ::cpp2::Struct11 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct11>::read(Protocol* proto,  ::cpp2::Struct11* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct11>::serializedSize(Protocol const* proto,  ::cpp2::Struct11 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct11>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct11 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct12 : private apache::thrift::detail::st::ComparisonOperators<Struct12> {
 public:

  Struct12() :
      field1(0),
      field3(0),
      field4(0),
      field5(0),
      field7(0),
      field8(0),
      field12(0),
      field15(0),
      field16(0),
      field17(0),
      field23(0),
      field30(0),
      field32(0),
      field38(0),
      field39(0),
      field40(0),
      field42(0),
      field45(0),
      field51(0),
      field55(0),
      field57(0),
      field58(0),
      field60(0),
      field68(0),
      field75(0),
      field77(0),
      field78(0),
      field79(0),
      field80(0),
      field81(0),
      field82(0),
      field83(0),
      field84(0),
      field86(0),
      field91(0),
      field95(0),
      field99(0),
      field100(0) {}
  // FragileConstructor for use in initialization lists only

  Struct12(apache::thrift::FragileConstructor, bool field1__arg, std::set<std::set<double>> field2__arg, float field3__arg, int8_t field4__arg, int8_t field5__arg, std::map<double, double> field6__arg, int8_t field7__arg, double field8__arg,  ::cpp2::Struct10 field9__arg, std::map<std::string, std::string> field10__arg,  ::cpp2::Struct0 field11__arg, int8_t field12__arg, std::set<std::map<int16_t, int64_t>> field13__arg, std::map<int16_t, std::vector<int16_t>> field14__arg, float field15__arg, int8_t field16__arg, bool field17__arg, std::map<int64_t, int32_t> field18__arg, std::map<int64_t, int8_t> field19__arg,  ::cpp2::Struct6 field20__arg, std::map<std::vector<int32_t>, std::vector<float>> field21__arg,  ::cpp2::Struct1 field22__arg, int32_t field23__arg,  ::cpp2::Struct4 field24__arg, std::vector<std::set<int64_t>> field25__arg,  ::cpp2::Struct3 field26__arg, std::map<int8_t, std::string> field27__arg,  ::cpp2::Struct1 field28__arg, std::string field29__arg, double field30__arg, std::map<std::string, int16_t> field31__arg, int32_t field32__arg, std::string field33__arg, std::string field34__arg, std::vector<int64_t> field35__arg, std::string field36__arg, std::string field37__arg, int32_t field38__arg, int8_t field39__arg, int8_t field40__arg, std::string field41__arg, int8_t field42__arg,  ::cpp2::Struct10 field43__arg, std::map<int8_t, int32_t> field44__arg, int8_t field45__arg,  ::cpp2::Struct4 field46__arg, std::map<double, std::vector<std::map<double, float>>> field47__arg, std::vector<bool> field48__arg,  ::cpp2::Struct2 field49__arg, std::map<int16_t,  ::cpp2::Struct5> field50__arg, bool field51__arg,  ::cpp2::Struct0 field52__arg, std::map<int32_t, int16_t> field53__arg, std::vector<int32_t> field54__arg, int64_t field55__arg, std::vector<std::string> field56__arg, bool field57__arg, int8_t field58__arg,  ::cpp2::Struct9 field59__arg, int16_t field60__arg,  ::cpp2::Struct7 field61__arg, std::set<double> field62__arg, std::set<double> field63__arg, std::vector<std::string> field64__arg, std::string field65__arg, std::vector<int16_t> field66__arg, std::vector<int8_t> field67__arg, int64_t field68__arg, std::vector<int8_t> field69__arg, std::set<int32_t> field70__arg,  ::cpp2::Struct9 field71__arg, std::map<std::vector<int16_t>, std::vector<bool>> field72__arg,  ::cpp2::Struct1 field73__arg,  ::cpp2::Struct1 field74__arg, int64_t field75__arg, std::set<int32_t> field76__arg, int64_t field77__arg, int8_t field78__arg, int64_t field79__arg, double field80__arg, int16_t field81__arg, int64_t field82__arg, int8_t field83__arg, int32_t field84__arg, std::map<int64_t, std::string> field85__arg, float field86__arg, std::set<int64_t> field87__arg, std::string field88__arg, std::map<bool, std::map<double, int8_t>> field89__arg, std::string field90__arg, bool field91__arg, std::vector<int64_t> field92__arg, std::set<std::string> field93__arg, std::set<std::map<std::string, float>> field94__arg, float field95__arg, std::vector<float> field96__arg, std::string field97__arg, std::string field98__arg, int32_t field99__arg, double field100__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)),
      field97(std::move(field97__arg)),
      field98(std::move(field98__arg)),
      field99(std::move(field99__arg)),
      field100(std::move(field100__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
    __isset.field97 = true;
    __isset.field98 = true;
    __isset.field99 = true;
    __isset.field100 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<97, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field97 = arg.move();
    __isset.field97 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<98, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field98 = arg.move();
    __isset.field98 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<99, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field99 = arg.move();
    __isset.field99 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct12(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct12(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field100 = arg.move();
    __isset.field100 = true;
  }

  Struct12(Struct12&&) = default;

  Struct12(const Struct12&) = default;

  Struct12& operator=(Struct12&&) = default;

  Struct12& operator=(const Struct12&) = default;
  void __clear();

  virtual ~Struct12() {}

  bool field1;
  std::set<std::set<double>> field2;
  float field3;
  int8_t field4;
  int8_t field5;
  std::map<double, double> field6;
  int8_t field7;
  double field8;
   ::cpp2::Struct10 field9;
  std::map<std::string, std::string> field10;
   ::cpp2::Struct0 field11;
  int8_t field12;
  std::set<std::map<int16_t, int64_t>> field13;
  std::map<int16_t, std::vector<int16_t>> field14;
  float field15;
  int8_t field16;
  bool field17;
  std::map<int64_t, int32_t> field18;
  std::map<int64_t, int8_t> field19;
   ::cpp2::Struct6 field20;
  std::map<std::vector<int32_t>, std::vector<float>> field21;
   ::cpp2::Struct1 field22;
  int32_t field23;
   ::cpp2::Struct4 field24;
  std::vector<std::set<int64_t>> field25;
   ::cpp2::Struct3 field26;
  std::map<int8_t, std::string> field27;
   ::cpp2::Struct1 field28;
  std::string field29;
  double field30;
  std::map<std::string, int16_t> field31;
  int32_t field32;
  std::string field33;
  std::string field34;
  std::vector<int64_t> field35;
  std::string field36;
  std::string field37;
  int32_t field38;
  int8_t field39;
  int8_t field40;
  std::string field41;
  int8_t field42;
   ::cpp2::Struct10 field43;
  std::map<int8_t, int32_t> field44;
  int8_t field45;
   ::cpp2::Struct4 field46;
  std::map<double, std::vector<std::map<double, float>>> field47;
  std::vector<bool> field48;
   ::cpp2::Struct2 field49;
  std::map<int16_t,  ::cpp2::Struct5> field50;
  bool field51;
   ::cpp2::Struct0 field52;
  std::map<int32_t, int16_t> field53;
  std::vector<int32_t> field54;
  int64_t field55;
  std::vector<std::string> field56;
  bool field57;
  int8_t field58;
   ::cpp2::Struct9 field59;
  int16_t field60;
   ::cpp2::Struct7 field61;
  std::set<double> field62;
  std::set<double> field63;
  std::vector<std::string> field64;
  std::string field65;
  std::vector<int16_t> field66;
  std::vector<int8_t> field67;
  int64_t field68;
  std::vector<int8_t> field69;
  std::set<int32_t> field70;
   ::cpp2::Struct9 field71;
  std::map<std::vector<int16_t>, std::vector<bool>> field72;
   ::cpp2::Struct1 field73;
   ::cpp2::Struct1 field74;
  int64_t field75;
  std::set<int32_t> field76;
  int64_t field77;
  int8_t field78;
  int64_t field79;
  double field80;
  int16_t field81;
  int64_t field82;
  int8_t field83;
  int32_t field84;
  std::map<int64_t, std::string> field85;
  float field86;
  std::set<int64_t> field87;
  std::string field88;
  std::map<bool, std::map<double, int8_t>> field89;
  std::string field90;
  bool field91;
  std::vector<int64_t> field92;
  std::set<std::string> field93;
  std::set<std::map<std::string, float>> field94;
  float field95;
  std::vector<float> field96;
  std::string field97;
  std::string field98;
  int32_t field99;
  double field100;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
      field97 = false;
      field98 = false;
      field99 = false;
      field100 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
    bool field97 = false;
    bool field98 = false;
    bool field99 = false;
    bool field100 = false;
  } __isset;
  bool operator==(const Struct12& rhs) const;

  bool operator < (const Struct12& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    if (!(field97 == rhs.field97)) {
      return field97 < rhs.field97;
    }
    if (!(field98 == rhs.field98)) {
      return field98 < rhs.field98;
    }
    if (!(field99 == rhs.field99)) {
      return field99 < rhs.field99;
    }
    if (!(field100 == rhs.field100)) {
      return field100 < rhs.field100;
    }
    (void)rhs;
    return false;
  }

  bool get_field1() const {
    return field1;
  }

  bool& set_field1(bool field1_) {
    field1 = field1_;
    __isset.field1 = true;
    return field1;
  }
  const std::set<std::set<double>>& get_field2() const&;
  std::set<std::set<double>> get_field2() &&;

  template <typename T_Struct12_field2_struct_setter>
  std::set<std::set<double>>& set_field2(T_Struct12_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct12_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  float get_field3() const {
    return field3;
  }

  float& set_field3(float field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }

  int8_t get_field4() const {
    return field4;
  }

  int8_t& set_field4(int8_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }

  int8_t get_field5() const {
    return field5;
  }

  int8_t& set_field5(int8_t field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }
  const std::map<double, double>& get_field6() const&;
  std::map<double, double> get_field6() &&;

  template <typename T_Struct12_field6_struct_setter>
  std::map<double, double>& set_field6(T_Struct12_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct12_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }

  int8_t get_field7() const {
    return field7;
  }

  int8_t& set_field7(int8_t field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }

  double get_field8() const {
    return field8;
  }

  double& set_field8(double field8_) {
    field8 = field8_;
    __isset.field8 = true;
    return field8;
  }
  const  ::cpp2::Struct10& get_field9() const&;
   ::cpp2::Struct10 get_field9() &&;

  template <typename T_Struct12_field9_struct_setter>
   ::cpp2::Struct10& set_field9(T_Struct12_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct12_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }
  const std::map<std::string, std::string>& get_field10() const&;
  std::map<std::string, std::string> get_field10() &&;

  template <typename T_Struct12_field10_struct_setter>
  std::map<std::string, std::string>& set_field10(T_Struct12_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct12_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }
  const  ::cpp2::Struct0& get_field11() const&;
   ::cpp2::Struct0 get_field11() &&;

  template <typename T_Struct12_field11_struct_setter>
   ::cpp2::Struct0& set_field11(T_Struct12_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct12_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }

  int8_t get_field12() const {
    return field12;
  }

  int8_t& set_field12(int8_t field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }
  const std::set<std::map<int16_t, int64_t>>& get_field13() const&;
  std::set<std::map<int16_t, int64_t>> get_field13() &&;

  template <typename T_Struct12_field13_struct_setter>
  std::set<std::map<int16_t, int64_t>>& set_field13(T_Struct12_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct12_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }
  const std::map<int16_t, std::vector<int16_t>>& get_field14() const&;
  std::map<int16_t, std::vector<int16_t>> get_field14() &&;

  template <typename T_Struct12_field14_struct_setter>
  std::map<int16_t, std::vector<int16_t>>& set_field14(T_Struct12_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct12_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }

  float get_field15() const {
    return field15;
  }

  float& set_field15(float field15_) {
    field15 = field15_;
    __isset.field15 = true;
    return field15;
  }

  int8_t get_field16() const {
    return field16;
  }

  int8_t& set_field16(int8_t field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }

  bool get_field17() const {
    return field17;
  }

  bool& set_field17(bool field17_) {
    field17 = field17_;
    __isset.field17 = true;
    return field17;
  }
  const std::map<int64_t, int32_t>& get_field18() const&;
  std::map<int64_t, int32_t> get_field18() &&;

  template <typename T_Struct12_field18_struct_setter>
  std::map<int64_t, int32_t>& set_field18(T_Struct12_field18_struct_setter&& field18_) {
    field18 = std::forward<T_Struct12_field18_struct_setter>(field18_);
    __isset.field18 = true;
    return field18;
  }
  const std::map<int64_t, int8_t>& get_field19() const&;
  std::map<int64_t, int8_t> get_field19() &&;

  template <typename T_Struct12_field19_struct_setter>
  std::map<int64_t, int8_t>& set_field19(T_Struct12_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct12_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }
  const  ::cpp2::Struct6& get_field20() const&;
   ::cpp2::Struct6 get_field20() &&;

  template <typename T_Struct12_field20_struct_setter>
   ::cpp2::Struct6& set_field20(T_Struct12_field20_struct_setter&& field20_) {
    field20 = std::forward<T_Struct12_field20_struct_setter>(field20_);
    __isset.field20 = true;
    return field20;
  }
  const std::map<std::vector<int32_t>, std::vector<float>>& get_field21() const&;
  std::map<std::vector<int32_t>, std::vector<float>> get_field21() &&;

  template <typename T_Struct12_field21_struct_setter>
  std::map<std::vector<int32_t>, std::vector<float>>& set_field21(T_Struct12_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct12_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }
  const  ::cpp2::Struct1& get_field22() const&;
   ::cpp2::Struct1 get_field22() &&;

  template <typename T_Struct12_field22_struct_setter>
   ::cpp2::Struct1& set_field22(T_Struct12_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct12_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }

  int32_t get_field23() const {
    return field23;
  }

  int32_t& set_field23(int32_t field23_) {
    field23 = field23_;
    __isset.field23 = true;
    return field23;
  }
  const  ::cpp2::Struct4& get_field24() const&;
   ::cpp2::Struct4 get_field24() &&;

  template <typename T_Struct12_field24_struct_setter>
   ::cpp2::Struct4& set_field24(T_Struct12_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct12_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }
  const std::vector<std::set<int64_t>>& get_field25() const&;
  std::vector<std::set<int64_t>> get_field25() &&;

  template <typename T_Struct12_field25_struct_setter>
  std::vector<std::set<int64_t>>& set_field25(T_Struct12_field25_struct_setter&& field25_) {
    field25 = std::forward<T_Struct12_field25_struct_setter>(field25_);
    __isset.field25 = true;
    return field25;
  }
  const  ::cpp2::Struct3& get_field26() const&;
   ::cpp2::Struct3 get_field26() &&;

  template <typename T_Struct12_field26_struct_setter>
   ::cpp2::Struct3& set_field26(T_Struct12_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct12_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }
  const std::map<int8_t, std::string>& get_field27() const&;
  std::map<int8_t, std::string> get_field27() &&;

  template <typename T_Struct12_field27_struct_setter>
  std::map<int8_t, std::string>& set_field27(T_Struct12_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct12_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }
  const  ::cpp2::Struct1& get_field28() const&;
   ::cpp2::Struct1 get_field28() &&;

  template <typename T_Struct12_field28_struct_setter>
   ::cpp2::Struct1& set_field28(T_Struct12_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct12_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }

  const std::string& get_field29() const& {
    return field29;
  }

  std::string get_field29() && {
    return std::move(field29);
  }

  template <typename T_Struct12_field29_struct_setter>
  std::string& set_field29(T_Struct12_field29_struct_setter&& field29_) {
    field29 = std::forward<T_Struct12_field29_struct_setter>(field29_);
    __isset.field29 = true;
    return field29;
  }

  double get_field30() const {
    return field30;
  }

  double& set_field30(double field30_) {
    field30 = field30_;
    __isset.field30 = true;
    return field30;
  }
  const std::map<std::string, int16_t>& get_field31() const&;
  std::map<std::string, int16_t> get_field31() &&;

  template <typename T_Struct12_field31_struct_setter>
  std::map<std::string, int16_t>& set_field31(T_Struct12_field31_struct_setter&& field31_) {
    field31 = std::forward<T_Struct12_field31_struct_setter>(field31_);
    __isset.field31 = true;
    return field31;
  }

  int32_t get_field32() const {
    return field32;
  }

  int32_t& set_field32(int32_t field32_) {
    field32 = field32_;
    __isset.field32 = true;
    return field32;
  }

  const std::string& get_field33() const& {
    return field33;
  }

  std::string get_field33() && {
    return std::move(field33);
  }

  template <typename T_Struct12_field33_struct_setter>
  std::string& set_field33(T_Struct12_field33_struct_setter&& field33_) {
    field33 = std::forward<T_Struct12_field33_struct_setter>(field33_);
    __isset.field33 = true;
    return field33;
  }

  const std::string& get_field34() const& {
    return field34;
  }

  std::string get_field34() && {
    return std::move(field34);
  }

  template <typename T_Struct12_field34_struct_setter>
  std::string& set_field34(T_Struct12_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct12_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }
  const std::vector<int64_t>& get_field35() const&;
  std::vector<int64_t> get_field35() &&;

  template <typename T_Struct12_field35_struct_setter>
  std::vector<int64_t>& set_field35(T_Struct12_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct12_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }

  const std::string& get_field36() const& {
    return field36;
  }

  std::string get_field36() && {
    return std::move(field36);
  }

  template <typename T_Struct12_field36_struct_setter>
  std::string& set_field36(T_Struct12_field36_struct_setter&& field36_) {
    field36 = std::forward<T_Struct12_field36_struct_setter>(field36_);
    __isset.field36 = true;
    return field36;
  }

  const std::string& get_field37() const& {
    return field37;
  }

  std::string get_field37() && {
    return std::move(field37);
  }

  template <typename T_Struct12_field37_struct_setter>
  std::string& set_field37(T_Struct12_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct12_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }

  int32_t get_field38() const {
    return field38;
  }

  int32_t& set_field38(int32_t field38_) {
    field38 = field38_;
    __isset.field38 = true;
    return field38;
  }

  int8_t get_field39() const {
    return field39;
  }

  int8_t& set_field39(int8_t field39_) {
    field39 = field39_;
    __isset.field39 = true;
    return field39;
  }

  int8_t get_field40() const {
    return field40;
  }

  int8_t& set_field40(int8_t field40_) {
    field40 = field40_;
    __isset.field40 = true;
    return field40;
  }

  const std::string& get_field41() const& {
    return field41;
  }

  std::string get_field41() && {
    return std::move(field41);
  }

  template <typename T_Struct12_field41_struct_setter>
  std::string& set_field41(T_Struct12_field41_struct_setter&& field41_) {
    field41 = std::forward<T_Struct12_field41_struct_setter>(field41_);
    __isset.field41 = true;
    return field41;
  }

  int8_t get_field42() const {
    return field42;
  }

  int8_t& set_field42(int8_t field42_) {
    field42 = field42_;
    __isset.field42 = true;
    return field42;
  }
  const  ::cpp2::Struct10& get_field43() const&;
   ::cpp2::Struct10 get_field43() &&;

  template <typename T_Struct12_field43_struct_setter>
   ::cpp2::Struct10& set_field43(T_Struct12_field43_struct_setter&& field43_) {
    field43 = std::forward<T_Struct12_field43_struct_setter>(field43_);
    __isset.field43 = true;
    return field43;
  }
  const std::map<int8_t, int32_t>& get_field44() const&;
  std::map<int8_t, int32_t> get_field44() &&;

  template <typename T_Struct12_field44_struct_setter>
  std::map<int8_t, int32_t>& set_field44(T_Struct12_field44_struct_setter&& field44_) {
    field44 = std::forward<T_Struct12_field44_struct_setter>(field44_);
    __isset.field44 = true;
    return field44;
  }

  int8_t get_field45() const {
    return field45;
  }

  int8_t& set_field45(int8_t field45_) {
    field45 = field45_;
    __isset.field45 = true;
    return field45;
  }
  const  ::cpp2::Struct4& get_field46() const&;
   ::cpp2::Struct4 get_field46() &&;

  template <typename T_Struct12_field46_struct_setter>
   ::cpp2::Struct4& set_field46(T_Struct12_field46_struct_setter&& field46_) {
    field46 = std::forward<T_Struct12_field46_struct_setter>(field46_);
    __isset.field46 = true;
    return field46;
  }
  const std::map<double, std::vector<std::map<double, float>>>& get_field47() const&;
  std::map<double, std::vector<std::map<double, float>>> get_field47() &&;

  template <typename T_Struct12_field47_struct_setter>
  std::map<double, std::vector<std::map<double, float>>>& set_field47(T_Struct12_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct12_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }
  const std::vector<bool>& get_field48() const&;
  std::vector<bool> get_field48() &&;

  template <typename T_Struct12_field48_struct_setter>
  std::vector<bool>& set_field48(T_Struct12_field48_struct_setter&& field48_) {
    field48 = std::forward<T_Struct12_field48_struct_setter>(field48_);
    __isset.field48 = true;
    return field48;
  }
  const  ::cpp2::Struct2& get_field49() const&;
   ::cpp2::Struct2 get_field49() &&;

  template <typename T_Struct12_field49_struct_setter>
   ::cpp2::Struct2& set_field49(T_Struct12_field49_struct_setter&& field49_) {
    field49 = std::forward<T_Struct12_field49_struct_setter>(field49_);
    __isset.field49 = true;
    return field49;
  }
  const std::map<int16_t,  ::cpp2::Struct5>& get_field50() const&;
  std::map<int16_t,  ::cpp2::Struct5> get_field50() &&;

  template <typename T_Struct12_field50_struct_setter>
  std::map<int16_t,  ::cpp2::Struct5>& set_field50(T_Struct12_field50_struct_setter&& field50_) {
    field50 = std::forward<T_Struct12_field50_struct_setter>(field50_);
    __isset.field50 = true;
    return field50;
  }

  bool get_field51() const {
    return field51;
  }

  bool& set_field51(bool field51_) {
    field51 = field51_;
    __isset.field51 = true;
    return field51;
  }
  const  ::cpp2::Struct0& get_field52() const&;
   ::cpp2::Struct0 get_field52() &&;

  template <typename T_Struct12_field52_struct_setter>
   ::cpp2::Struct0& set_field52(T_Struct12_field52_struct_setter&& field52_) {
    field52 = std::forward<T_Struct12_field52_struct_setter>(field52_);
    __isset.field52 = true;
    return field52;
  }
  const std::map<int32_t, int16_t>& get_field53() const&;
  std::map<int32_t, int16_t> get_field53() &&;

  template <typename T_Struct12_field53_struct_setter>
  std::map<int32_t, int16_t>& set_field53(T_Struct12_field53_struct_setter&& field53_) {
    field53 = std::forward<T_Struct12_field53_struct_setter>(field53_);
    __isset.field53 = true;
    return field53;
  }
  const std::vector<int32_t>& get_field54() const&;
  std::vector<int32_t> get_field54() &&;

  template <typename T_Struct12_field54_struct_setter>
  std::vector<int32_t>& set_field54(T_Struct12_field54_struct_setter&& field54_) {
    field54 = std::forward<T_Struct12_field54_struct_setter>(field54_);
    __isset.field54 = true;
    return field54;
  }

  int64_t get_field55() const {
    return field55;
  }

  int64_t& set_field55(int64_t field55_) {
    field55 = field55_;
    __isset.field55 = true;
    return field55;
  }
  const std::vector<std::string>& get_field56() const&;
  std::vector<std::string> get_field56() &&;

  template <typename T_Struct12_field56_struct_setter>
  std::vector<std::string>& set_field56(T_Struct12_field56_struct_setter&& field56_) {
    field56 = std::forward<T_Struct12_field56_struct_setter>(field56_);
    __isset.field56 = true;
    return field56;
  }

  bool get_field57() const {
    return field57;
  }

  bool& set_field57(bool field57_) {
    field57 = field57_;
    __isset.field57 = true;
    return field57;
  }

  int8_t get_field58() const {
    return field58;
  }

  int8_t& set_field58(int8_t field58_) {
    field58 = field58_;
    __isset.field58 = true;
    return field58;
  }
  const  ::cpp2::Struct9& get_field59() const&;
   ::cpp2::Struct9 get_field59() &&;

  template <typename T_Struct12_field59_struct_setter>
   ::cpp2::Struct9& set_field59(T_Struct12_field59_struct_setter&& field59_) {
    field59 = std::forward<T_Struct12_field59_struct_setter>(field59_);
    __isset.field59 = true;
    return field59;
  }

  int16_t get_field60() const {
    return field60;
  }

  int16_t& set_field60(int16_t field60_) {
    field60 = field60_;
    __isset.field60 = true;
    return field60;
  }
  const  ::cpp2::Struct7& get_field61() const&;
   ::cpp2::Struct7 get_field61() &&;

  template <typename T_Struct12_field61_struct_setter>
   ::cpp2::Struct7& set_field61(T_Struct12_field61_struct_setter&& field61_) {
    field61 = std::forward<T_Struct12_field61_struct_setter>(field61_);
    __isset.field61 = true;
    return field61;
  }
  const std::set<double>& get_field62() const&;
  std::set<double> get_field62() &&;

  template <typename T_Struct12_field62_struct_setter>
  std::set<double>& set_field62(T_Struct12_field62_struct_setter&& field62_) {
    field62 = std::forward<T_Struct12_field62_struct_setter>(field62_);
    __isset.field62 = true;
    return field62;
  }
  const std::set<double>& get_field63() const&;
  std::set<double> get_field63() &&;

  template <typename T_Struct12_field63_struct_setter>
  std::set<double>& set_field63(T_Struct12_field63_struct_setter&& field63_) {
    field63 = std::forward<T_Struct12_field63_struct_setter>(field63_);
    __isset.field63 = true;
    return field63;
  }
  const std::vector<std::string>& get_field64() const&;
  std::vector<std::string> get_field64() &&;

  template <typename T_Struct12_field64_struct_setter>
  std::vector<std::string>& set_field64(T_Struct12_field64_struct_setter&& field64_) {
    field64 = std::forward<T_Struct12_field64_struct_setter>(field64_);
    __isset.field64 = true;
    return field64;
  }

  const std::string& get_field65() const& {
    return field65;
  }

  std::string get_field65() && {
    return std::move(field65);
  }

  template <typename T_Struct12_field65_struct_setter>
  std::string& set_field65(T_Struct12_field65_struct_setter&& field65_) {
    field65 = std::forward<T_Struct12_field65_struct_setter>(field65_);
    __isset.field65 = true;
    return field65;
  }
  const std::vector<int16_t>& get_field66() const&;
  std::vector<int16_t> get_field66() &&;

  template <typename T_Struct12_field66_struct_setter>
  std::vector<int16_t>& set_field66(T_Struct12_field66_struct_setter&& field66_) {
    field66 = std::forward<T_Struct12_field66_struct_setter>(field66_);
    __isset.field66 = true;
    return field66;
  }
  const std::vector<int8_t>& get_field67() const&;
  std::vector<int8_t> get_field67() &&;

  template <typename T_Struct12_field67_struct_setter>
  std::vector<int8_t>& set_field67(T_Struct12_field67_struct_setter&& field67_) {
    field67 = std::forward<T_Struct12_field67_struct_setter>(field67_);
    __isset.field67 = true;
    return field67;
  }

  int64_t get_field68() const {
    return field68;
  }

  int64_t& set_field68(int64_t field68_) {
    field68 = field68_;
    __isset.field68 = true;
    return field68;
  }
  const std::vector<int8_t>& get_field69() const&;
  std::vector<int8_t> get_field69() &&;

  template <typename T_Struct12_field69_struct_setter>
  std::vector<int8_t>& set_field69(T_Struct12_field69_struct_setter&& field69_) {
    field69 = std::forward<T_Struct12_field69_struct_setter>(field69_);
    __isset.field69 = true;
    return field69;
  }
  const std::set<int32_t>& get_field70() const&;
  std::set<int32_t> get_field70() &&;

  template <typename T_Struct12_field70_struct_setter>
  std::set<int32_t>& set_field70(T_Struct12_field70_struct_setter&& field70_) {
    field70 = std::forward<T_Struct12_field70_struct_setter>(field70_);
    __isset.field70 = true;
    return field70;
  }
  const  ::cpp2::Struct9& get_field71() const&;
   ::cpp2::Struct9 get_field71() &&;

  template <typename T_Struct12_field71_struct_setter>
   ::cpp2::Struct9& set_field71(T_Struct12_field71_struct_setter&& field71_) {
    field71 = std::forward<T_Struct12_field71_struct_setter>(field71_);
    __isset.field71 = true;
    return field71;
  }
  const std::map<std::vector<int16_t>, std::vector<bool>>& get_field72() const&;
  std::map<std::vector<int16_t>, std::vector<bool>> get_field72() &&;

  template <typename T_Struct12_field72_struct_setter>
  std::map<std::vector<int16_t>, std::vector<bool>>& set_field72(T_Struct12_field72_struct_setter&& field72_) {
    field72 = std::forward<T_Struct12_field72_struct_setter>(field72_);
    __isset.field72 = true;
    return field72;
  }
  const  ::cpp2::Struct1& get_field73() const&;
   ::cpp2::Struct1 get_field73() &&;

  template <typename T_Struct12_field73_struct_setter>
   ::cpp2::Struct1& set_field73(T_Struct12_field73_struct_setter&& field73_) {
    field73 = std::forward<T_Struct12_field73_struct_setter>(field73_);
    __isset.field73 = true;
    return field73;
  }
  const  ::cpp2::Struct1& get_field74() const&;
   ::cpp2::Struct1 get_field74() &&;

  template <typename T_Struct12_field74_struct_setter>
   ::cpp2::Struct1& set_field74(T_Struct12_field74_struct_setter&& field74_) {
    field74 = std::forward<T_Struct12_field74_struct_setter>(field74_);
    __isset.field74 = true;
    return field74;
  }

  int64_t get_field75() const {
    return field75;
  }

  int64_t& set_field75(int64_t field75_) {
    field75 = field75_;
    __isset.field75 = true;
    return field75;
  }
  const std::set<int32_t>& get_field76() const&;
  std::set<int32_t> get_field76() &&;

  template <typename T_Struct12_field76_struct_setter>
  std::set<int32_t>& set_field76(T_Struct12_field76_struct_setter&& field76_) {
    field76 = std::forward<T_Struct12_field76_struct_setter>(field76_);
    __isset.field76 = true;
    return field76;
  }

  int64_t get_field77() const {
    return field77;
  }

  int64_t& set_field77(int64_t field77_) {
    field77 = field77_;
    __isset.field77 = true;
    return field77;
  }

  int8_t get_field78() const {
    return field78;
  }

  int8_t& set_field78(int8_t field78_) {
    field78 = field78_;
    __isset.field78 = true;
    return field78;
  }

  int64_t get_field79() const {
    return field79;
  }

  int64_t& set_field79(int64_t field79_) {
    field79 = field79_;
    __isset.field79 = true;
    return field79;
  }

  double get_field80() const {
    return field80;
  }

  double& set_field80(double field80_) {
    field80 = field80_;
    __isset.field80 = true;
    return field80;
  }

  int16_t get_field81() const {
    return field81;
  }

  int16_t& set_field81(int16_t field81_) {
    field81 = field81_;
    __isset.field81 = true;
    return field81;
  }

  int64_t get_field82() const {
    return field82;
  }

  int64_t& set_field82(int64_t field82_) {
    field82 = field82_;
    __isset.field82 = true;
    return field82;
  }

  int8_t get_field83() const {
    return field83;
  }

  int8_t& set_field83(int8_t field83_) {
    field83 = field83_;
    __isset.field83 = true;
    return field83;
  }

  int32_t get_field84() const {
    return field84;
  }

  int32_t& set_field84(int32_t field84_) {
    field84 = field84_;
    __isset.field84 = true;
    return field84;
  }
  const std::map<int64_t, std::string>& get_field85() const&;
  std::map<int64_t, std::string> get_field85() &&;

  template <typename T_Struct12_field85_struct_setter>
  std::map<int64_t, std::string>& set_field85(T_Struct12_field85_struct_setter&& field85_) {
    field85 = std::forward<T_Struct12_field85_struct_setter>(field85_);
    __isset.field85 = true;
    return field85;
  }

  float get_field86() const {
    return field86;
  }

  float& set_field86(float field86_) {
    field86 = field86_;
    __isset.field86 = true;
    return field86;
  }
  const std::set<int64_t>& get_field87() const&;
  std::set<int64_t> get_field87() &&;

  template <typename T_Struct12_field87_struct_setter>
  std::set<int64_t>& set_field87(T_Struct12_field87_struct_setter&& field87_) {
    field87 = std::forward<T_Struct12_field87_struct_setter>(field87_);
    __isset.field87 = true;
    return field87;
  }

  const std::string& get_field88() const& {
    return field88;
  }

  std::string get_field88() && {
    return std::move(field88);
  }

  template <typename T_Struct12_field88_struct_setter>
  std::string& set_field88(T_Struct12_field88_struct_setter&& field88_) {
    field88 = std::forward<T_Struct12_field88_struct_setter>(field88_);
    __isset.field88 = true;
    return field88;
  }
  const std::map<bool, std::map<double, int8_t>>& get_field89() const&;
  std::map<bool, std::map<double, int8_t>> get_field89() &&;

  template <typename T_Struct12_field89_struct_setter>
  std::map<bool, std::map<double, int8_t>>& set_field89(T_Struct12_field89_struct_setter&& field89_) {
    field89 = std::forward<T_Struct12_field89_struct_setter>(field89_);
    __isset.field89 = true;
    return field89;
  }

  const std::string& get_field90() const& {
    return field90;
  }

  std::string get_field90() && {
    return std::move(field90);
  }

  template <typename T_Struct12_field90_struct_setter>
  std::string& set_field90(T_Struct12_field90_struct_setter&& field90_) {
    field90 = std::forward<T_Struct12_field90_struct_setter>(field90_);
    __isset.field90 = true;
    return field90;
  }

  bool get_field91() const {
    return field91;
  }

  bool& set_field91(bool field91_) {
    field91 = field91_;
    __isset.field91 = true;
    return field91;
  }
  const std::vector<int64_t>& get_field92() const&;
  std::vector<int64_t> get_field92() &&;

  template <typename T_Struct12_field92_struct_setter>
  std::vector<int64_t>& set_field92(T_Struct12_field92_struct_setter&& field92_) {
    field92 = std::forward<T_Struct12_field92_struct_setter>(field92_);
    __isset.field92 = true;
    return field92;
  }
  const std::set<std::string>& get_field93() const&;
  std::set<std::string> get_field93() &&;

  template <typename T_Struct12_field93_struct_setter>
  std::set<std::string>& set_field93(T_Struct12_field93_struct_setter&& field93_) {
    field93 = std::forward<T_Struct12_field93_struct_setter>(field93_);
    __isset.field93 = true;
    return field93;
  }
  const std::set<std::map<std::string, float>>& get_field94() const&;
  std::set<std::map<std::string, float>> get_field94() &&;

  template <typename T_Struct12_field94_struct_setter>
  std::set<std::map<std::string, float>>& set_field94(T_Struct12_field94_struct_setter&& field94_) {
    field94 = std::forward<T_Struct12_field94_struct_setter>(field94_);
    __isset.field94 = true;
    return field94;
  }

  float get_field95() const {
    return field95;
  }

  float& set_field95(float field95_) {
    field95 = field95_;
    __isset.field95 = true;
    return field95;
  }
  const std::vector<float>& get_field96() const&;
  std::vector<float> get_field96() &&;

  template <typename T_Struct12_field96_struct_setter>
  std::vector<float>& set_field96(T_Struct12_field96_struct_setter&& field96_) {
    field96 = std::forward<T_Struct12_field96_struct_setter>(field96_);
    __isset.field96 = true;
    return field96;
  }

  const std::string& get_field97() const& {
    return field97;
  }

  std::string get_field97() && {
    return std::move(field97);
  }

  template <typename T_Struct12_field97_struct_setter>
  std::string& set_field97(T_Struct12_field97_struct_setter&& field97_) {
    field97 = std::forward<T_Struct12_field97_struct_setter>(field97_);
    __isset.field97 = true;
    return field97;
  }

  const std::string& get_field98() const& {
    return field98;
  }

  std::string get_field98() && {
    return std::move(field98);
  }

  template <typename T_Struct12_field98_struct_setter>
  std::string& set_field98(T_Struct12_field98_struct_setter&& field98_) {
    field98 = std::forward<T_Struct12_field98_struct_setter>(field98_);
    __isset.field98 = true;
    return field98;
  }

  int32_t get_field99() const {
    return field99;
  }

  int32_t& set_field99(int32_t field99_) {
    field99 = field99_;
    __isset.field99 = true;
    return field99;
  }

  double get_field100() const {
    return field100;
  }

  double& set_field100(double field100_) {
    field100 = field100_;
    __isset.field100 = true;
    return field100;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct12& a, Struct12& b);
extern template uint32_t Struct12::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct12::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct12::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct12::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct12::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct12::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct12::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct12::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct12>::clear( ::cpp2::Struct12* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct12>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct12>::write(Protocol* proto,  ::cpp2::Struct12 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct12>::read(Protocol* proto,  ::cpp2::Struct12* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct12>::serializedSize(Protocol const* proto,  ::cpp2::Struct12 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct12>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct12 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct13 : private apache::thrift::detail::st::ComparisonOperators<Struct13> {
 public:

  Struct13() :
      field9(0),
      field14(0),
      field17(0),
      field18(0),
      field21(0),
      field23(0),
      field24(0),
      field25(0),
      field27(0),
      field30(0),
      field32(0),
      field34(0),
      field35(0),
      field37(0),
      field38(0),
      field39(0),
      field45(0),
      field48(0),
      field49(0),
      field51(0),
      field53(0),
      field55(0),
      field57(0),
      field64(0),
      field69(0),
      field71(0),
      field72(0),
      field74(0),
      field75(0),
      field77(0),
      field82(0),
      field83(0),
      field85(0),
      field86(0),
      field89(0),
      field90(0),
      field92(0),
      field95(0),
      field96(0),
      field97(0),
      field98(0),
      field102(0),
      field104(0),
      field106(0),
      field110(0),
      field113(0),
      field114(0),
      field119(0),
      field120(0),
      field121(0),
      field122(0),
      field123(0),
      field125(0),
      field130(0),
      field137(0),
      field138(0),
      field140(0),
      field144(0),
      field146(0),
      field147(0),
      field151(0),
      field156(0),
      field157(0),
      field159(0),
      field160(0),
      field161(0),
      field164(0),
      field169(0),
      field173(0),
      field175(0),
      field176(0),
      field178(0),
      field183(0),
      field186(0),
      field187(0),
      field189(0),
      field190(0),
      field194(0),
      field196(0),
      field202(0),
      field203(0),
      field206(0),
      field216(0) {}
  // FragileConstructor for use in initialization lists only

  Struct13(apache::thrift::FragileConstructor, std::map<double, float> field1__arg, std::vector<double> field2__arg, std::set<std::map<int8_t, int32_t>> field3__arg, std::string field4__arg,  ::cpp2::Struct0 field5__arg, std::set<int16_t> field6__arg, std::map<std::string, int64_t> field7__arg, std::vector<double> field8__arg, double field9__arg, std::map<double, int64_t> field10__arg, std::string field11__arg, std::set<int32_t> field12__arg,  ::cpp2::Struct0 field13__arg, double field14__arg, std::set<bool> field15__arg,  ::cpp2::Struct5 field16__arg, double field17__arg, int16_t field18__arg, std::string field19__arg, std::vector<float> field20__arg, int64_t field21__arg, std::string field22__arg, bool field23__arg, float field24__arg, int32_t field25__arg, std::vector<float> field26__arg, int32_t field27__arg, std::map<std::vector<std::set<bool>>, bool> field28__arg, std::vector<std::vector<int16_t>> field29__arg, bool field30__arg, std::vector<std::vector<float>> field31__arg, int8_t field32__arg, std::set<int32_t> field33__arg, float field34__arg, int8_t field35__arg, std::map<std::vector<std::string>, std::map<std::string, int64_t>> field36__arg, float field37__arg, double field38__arg, float field39__arg,  ::cpp2::Struct6 field40__arg, std::set<std::vector<int32_t>> field41__arg, std::vector<bool> field42__arg, std::string field43__arg, std::vector< ::cpp2::Struct8> field44__arg, float field45__arg, std::vector<std::set<std::string>> field46__arg, std::set<std::set<std::string>> field47__arg, int64_t field48__arg, int8_t field49__arg,  ::cpp2::Struct5 field50__arg, int64_t field51__arg, std::set<bool> field52__arg, int16_t field53__arg, std::vector<std::string> field54__arg, int64_t field55__arg, std::vector< ::cpp2::Struct0> field56__arg, int32_t field57__arg,  ::cpp2::Struct2 field58__arg, std::vector<std::string> field59__arg, std::set<int8_t> field60__arg, std::vector<float> field61__arg, std::vector<bool> field62__arg, std::set<int32_t> field63__arg, int32_t field64__arg, std::string field65__arg, std::string field66__arg, std::set<int16_t> field67__arg, std::string field68__arg, float field69__arg,  ::cpp2::Struct1 field70__arg, float field71__arg, int32_t field72__arg,  ::cpp2::Struct2 field73__arg, int64_t field74__arg, int32_t field75__arg, std::map<bool, int64_t> field76__arg, int32_t field77__arg, std::vector<std::map<bool, std::vector<float>>> field78__arg, std::vector<int32_t> field79__arg, std::string field80__arg, std::map< ::cpp2::Struct8,  ::cpp2::Struct7> field81__arg, bool field82__arg, bool field83__arg, std::map<int16_t,  ::cpp2::Struct2> field84__arg, int16_t field85__arg, int8_t field86__arg, std::vector<std::string> field87__arg,  ::cpp2::Struct2 field88__arg, float field89__arg, float field90__arg, std::vector<std::map<bool, int8_t>> field91__arg, bool field92__arg, std::set<double> field93__arg,  ::cpp2::Struct4 field94__arg, bool field95__arg, bool field96__arg, int16_t field97__arg, bool field98__arg,  ::cpp2::Struct4 field99__arg, std::set<std::map<int16_t, float>> field100__arg, std::string field101__arg, int16_t field102__arg, std::map<int16_t, std::map<bool,  ::cpp2::Struct1>> field103__arg, int64_t field104__arg, std::set<int16_t> field105__arg, double field106__arg, std::set<float> field107__arg, std::set<bool> field108__arg, std::vector<std::map<float, int8_t>> field109__arg, int16_t field110__arg,  ::cpp2::Struct1 field111__arg, std::string field112__arg, double field113__arg, int16_t field114__arg, std::map<std::vector<int8_t>, int64_t> field115__arg, std::vector<bool> field116__arg, std::string field117__arg, std::vector<std::string> field118__arg, int8_t field119__arg, double field120__arg, int64_t field121__arg, double field122__arg, int32_t field123__arg, std::string field124__arg, bool field125__arg, std::vector<int8_t> field126__arg, std::string field127__arg, std::string field128__arg,  ::cpp2::Struct4 field129__arg, int64_t field130__arg, std::string field131__arg,  ::cpp2::Struct2 field132__arg, std::string field133__arg, std::set<std::map< ::cpp2::Struct11, int16_t>> field134__arg, std::string field135__arg, std::set<std::string> field136__arg, float field137__arg, double field138__arg, std::set<std::set<double>> field139__arg, int64_t field140__arg, std::map<bool, float> field141__arg, std::set<std::vector<double>> field142__arg,  ::cpp2::Struct0 field143__arg, int8_t field144__arg, std::set<int64_t> field145__arg, int32_t field146__arg, double field147__arg,  ::cpp2::Struct4 field148__arg, std::vector<int8_t> field149__arg, std::vector<double> field150__arg, double field151__arg, std::vector<std::set<int32_t>> field152__arg, std::string field153__arg, std::set<bool> field154__arg, std::map<int32_t, std::set<bool>> field155__arg, int64_t field156__arg, double field157__arg, std::vector<std::vector<int8_t>> field158__arg, bool field159__arg, double field160__arg, double field161__arg, std::set<double> field162__arg, std::string field163__arg, int64_t field164__arg, std::string field165__arg, std::set<float> field166__arg, std::vector<int32_t> field167__arg, std::map<bool,  ::cpp2::Struct1> field168__arg, int8_t field169__arg, std::string field170__arg, std::string field171__arg, std::set<bool> field172__arg, bool field173__arg, std::map<int16_t, std::vector<int64_t>> field174__arg, int32_t field175__arg, float field176__arg, std::vector<float> field177__arg, float field178__arg, std::string field179__arg, std::set<std::set<float>> field180__arg, std::set<std::vector<float>> field181__arg, std::string field182__arg, float field183__arg,  ::cpp2::Struct6 field184__arg, std::set<int64_t> field185__arg, int32_t field186__arg, double field187__arg, std::vector<std::string> field188__arg, float field189__arg, double field190__arg,  ::cpp2::Struct0 field191__arg, std::vector<int8_t> field192__arg, std::string field193__arg, bool field194__arg, std::vector<int8_t> field195__arg, float field196__arg,  ::cpp2::Struct2 field197__arg, std::vector< ::cpp2::Struct3> field198__arg, std::map< ::cpp2::Struct5, std::string> field199__arg, std::vector<double> field200__arg, std::vector<std::string> field201__arg, float field202__arg, int16_t field203__arg, std::map<int16_t, std::set<float>> field204__arg,  ::cpp2::Struct7 field205__arg, double field206__arg, std::map<std::set<int8_t>, std::vector<float>> field207__arg, std::set<int16_t> field208__arg, std::set<std::string> field209__arg,  ::cpp2::Struct7 field210__arg, std::vector<float> field211__arg, std::vector<int8_t> field212__arg, std::set<std::set<std::set<int64_t>>> field213__arg, std::vector<int32_t> field214__arg, std::string field215__arg, int32_t field216__arg, std::set<std::map<std::string, bool>> field217__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)),
      field97(std::move(field97__arg)),
      field98(std::move(field98__arg)),
      field99(std::move(field99__arg)),
      field100(std::move(field100__arg)),
      field101(std::move(field101__arg)),
      field102(std::move(field102__arg)),
      field103(std::move(field103__arg)),
      field104(std::move(field104__arg)),
      field105(std::move(field105__arg)),
      field106(std::move(field106__arg)),
      field107(std::move(field107__arg)),
      field108(std::move(field108__arg)),
      field109(std::move(field109__arg)),
      field110(std::move(field110__arg)),
      field111(std::move(field111__arg)),
      field112(std::move(field112__arg)),
      field113(std::move(field113__arg)),
      field114(std::move(field114__arg)),
      field115(std::move(field115__arg)),
      field116(std::move(field116__arg)),
      field117(std::move(field117__arg)),
      field118(std::move(field118__arg)),
      field119(std::move(field119__arg)),
      field120(std::move(field120__arg)),
      field121(std::move(field121__arg)),
      field122(std::move(field122__arg)),
      field123(std::move(field123__arg)),
      field124(std::move(field124__arg)),
      field125(std::move(field125__arg)),
      field126(std::move(field126__arg)),
      field127(std::move(field127__arg)),
      field128(std::move(field128__arg)),
      field129(std::move(field129__arg)),
      field130(std::move(field130__arg)),
      field131(std::move(field131__arg)),
      field132(std::move(field132__arg)),
      field133(std::move(field133__arg)),
      field134(std::move(field134__arg)),
      field135(std::move(field135__arg)),
      field136(std::move(field136__arg)),
      field137(std::move(field137__arg)),
      field138(std::move(field138__arg)),
      field139(std::move(field139__arg)),
      field140(std::move(field140__arg)),
      field141(std::move(field141__arg)),
      field142(std::move(field142__arg)),
      field143(std::move(field143__arg)),
      field144(std::move(field144__arg)),
      field145(std::move(field145__arg)),
      field146(std::move(field146__arg)),
      field147(std::move(field147__arg)),
      field148(std::move(field148__arg)),
      field149(std::move(field149__arg)),
      field150(std::move(field150__arg)),
      field151(std::move(field151__arg)),
      field152(std::move(field152__arg)),
      field153(std::move(field153__arg)),
      field154(std::move(field154__arg)),
      field155(std::move(field155__arg)),
      field156(std::move(field156__arg)),
      field157(std::move(field157__arg)),
      field158(std::move(field158__arg)),
      field159(std::move(field159__arg)),
      field160(std::move(field160__arg)),
      field161(std::move(field161__arg)),
      field162(std::move(field162__arg)),
      field163(std::move(field163__arg)),
      field164(std::move(field164__arg)),
      field165(std::move(field165__arg)),
      field166(std::move(field166__arg)),
      field167(std::move(field167__arg)),
      field168(std::move(field168__arg)),
      field169(std::move(field169__arg)),
      field170(std::move(field170__arg)),
      field171(std::move(field171__arg)),
      field172(std::move(field172__arg)),
      field173(std::move(field173__arg)),
      field174(std::move(field174__arg)),
      field175(std::move(field175__arg)),
      field176(std::move(field176__arg)),
      field177(std::move(field177__arg)),
      field178(std::move(field178__arg)),
      field179(std::move(field179__arg)),
      field180(std::move(field180__arg)),
      field181(std::move(field181__arg)),
      field182(std::move(field182__arg)),
      field183(std::move(field183__arg)),
      field184(std::move(field184__arg)),
      field185(std::move(field185__arg)),
      field186(std::move(field186__arg)),
      field187(std::move(field187__arg)),
      field188(std::move(field188__arg)),
      field189(std::move(field189__arg)),
      field190(std::move(field190__arg)),
      field191(std::move(field191__arg)),
      field192(std::move(field192__arg)),
      field193(std::move(field193__arg)),
      field194(std::move(field194__arg)),
      field195(std::move(field195__arg)),
      field196(std::move(field196__arg)),
      field197(std::move(field197__arg)),
      field198(std::move(field198__arg)),
      field199(std::move(field199__arg)),
      field200(std::move(field200__arg)),
      field201(std::move(field201__arg)),
      field202(std::move(field202__arg)),
      field203(std::move(field203__arg)),
      field204(std::move(field204__arg)),
      field205(std::move(field205__arg)),
      field206(std::move(field206__arg)),
      field207(std::move(field207__arg)),
      field208(std::move(field208__arg)),
      field209(std::move(field209__arg)),
      field210(std::move(field210__arg)),
      field211(std::move(field211__arg)),
      field212(std::move(field212__arg)),
      field213(std::move(field213__arg)),
      field214(std::move(field214__arg)),
      field215(std::move(field215__arg)),
      field216(std::move(field216__arg)),
      field217(std::move(field217__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
    __isset.field97 = true;
    __isset.field98 = true;
    __isset.field99 = true;
    __isset.field100 = true;
    __isset.field101 = true;
    __isset.field102 = true;
    __isset.field103 = true;
    __isset.field104 = true;
    __isset.field105 = true;
    __isset.field106 = true;
    __isset.field107 = true;
    __isset.field108 = true;
    __isset.field109 = true;
    __isset.field110 = true;
    __isset.field111 = true;
    __isset.field112 = true;
    __isset.field113 = true;
    __isset.field114 = true;
    __isset.field115 = true;
    __isset.field116 = true;
    __isset.field117 = true;
    __isset.field118 = true;
    __isset.field119 = true;
    __isset.field120 = true;
    __isset.field121 = true;
    __isset.field122 = true;
    __isset.field123 = true;
    __isset.field124 = true;
    __isset.field125 = true;
    __isset.field126 = true;
    __isset.field127 = true;
    __isset.field128 = true;
    __isset.field129 = true;
    __isset.field130 = true;
    __isset.field131 = true;
    __isset.field132 = true;
    __isset.field133 = true;
    __isset.field134 = true;
    __isset.field135 = true;
    __isset.field136 = true;
    __isset.field137 = true;
    __isset.field138 = true;
    __isset.field139 = true;
    __isset.field140 = true;
    __isset.field141 = true;
    __isset.field142 = true;
    __isset.field143 = true;
    __isset.field144 = true;
    __isset.field145 = true;
    __isset.field146 = true;
    __isset.field147 = true;
    __isset.field148 = true;
    __isset.field149 = true;
    __isset.field150 = true;
    __isset.field151 = true;
    __isset.field152 = true;
    __isset.field153 = true;
    __isset.field154 = true;
    __isset.field155 = true;
    __isset.field156 = true;
    __isset.field157 = true;
    __isset.field158 = true;
    __isset.field159 = true;
    __isset.field160 = true;
    __isset.field161 = true;
    __isset.field162 = true;
    __isset.field163 = true;
    __isset.field164 = true;
    __isset.field165 = true;
    __isset.field166 = true;
    __isset.field167 = true;
    __isset.field168 = true;
    __isset.field169 = true;
    __isset.field170 = true;
    __isset.field171 = true;
    __isset.field172 = true;
    __isset.field173 = true;
    __isset.field174 = true;
    __isset.field175 = true;
    __isset.field176 = true;
    __isset.field177 = true;
    __isset.field178 = true;
    __isset.field179 = true;
    __isset.field180 = true;
    __isset.field181 = true;
    __isset.field182 = true;
    __isset.field183 = true;
    __isset.field184 = true;
    __isset.field185 = true;
    __isset.field186 = true;
    __isset.field187 = true;
    __isset.field188 = true;
    __isset.field189 = true;
    __isset.field190 = true;
    __isset.field191 = true;
    __isset.field192 = true;
    __isset.field193 = true;
    __isset.field194 = true;
    __isset.field195 = true;
    __isset.field196 = true;
    __isset.field197 = true;
    __isset.field198 = true;
    __isset.field199 = true;
    __isset.field200 = true;
    __isset.field201 = true;
    __isset.field202 = true;
    __isset.field203 = true;
    __isset.field204 = true;
    __isset.field205 = true;
    __isset.field206 = true;
    __isset.field207 = true;
    __isset.field208 = true;
    __isset.field209 = true;
    __isset.field210 = true;
    __isset.field211 = true;
    __isset.field212 = true;
    __isset.field213 = true;
    __isset.field214 = true;
    __isset.field215 = true;
    __isset.field216 = true;
    __isset.field217 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<97, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field97 = arg.move();
    __isset.field97 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<98, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field98 = arg.move();
    __isset.field98 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<99, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field99 = arg.move();
    __isset.field99 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field100 = arg.move();
    __isset.field100 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field101 = arg.move();
    __isset.field101 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<102, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field102 = arg.move();
    __isset.field102 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<103, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field103 = arg.move();
    __isset.field103 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<104, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field104 = arg.move();
    __isset.field104 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<105, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field105 = arg.move();
    __isset.field105 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<106, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field106 = arg.move();
    __isset.field106 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<107, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field107 = arg.move();
    __isset.field107 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<108, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field108 = arg.move();
    __isset.field108 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<109, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field109 = arg.move();
    __isset.field109 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<110, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field110 = arg.move();
    __isset.field110 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<111, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field111 = arg.move();
    __isset.field111 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<112, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field112 = arg.move();
    __isset.field112 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<113, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field113 = arg.move();
    __isset.field113 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<114, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field114 = arg.move();
    __isset.field114 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<115, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field115 = arg.move();
    __isset.field115 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<116, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field116 = arg.move();
    __isset.field116 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<117, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field117 = arg.move();
    __isset.field117 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<118, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field118 = arg.move();
    __isset.field118 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<119, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field119 = arg.move();
    __isset.field119 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<120, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field120 = arg.move();
    __isset.field120 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<121, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field121 = arg.move();
    __isset.field121 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<122, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field122 = arg.move();
    __isset.field122 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<123, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field123 = arg.move();
    __isset.field123 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<124, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field124 = arg.move();
    __isset.field124 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<125, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field125 = arg.move();
    __isset.field125 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<126, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field126 = arg.move();
    __isset.field126 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<127, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field127 = arg.move();
    __isset.field127 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<128, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field128 = arg.move();
    __isset.field128 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<129, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field129 = arg.move();
    __isset.field129 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<130, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field130 = arg.move();
    __isset.field130 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<131, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field131 = arg.move();
    __isset.field131 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<132, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field132 = arg.move();
    __isset.field132 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<133, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field133 = arg.move();
    __isset.field133 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<134, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field134 = arg.move();
    __isset.field134 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<135, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field135 = arg.move();
    __isset.field135 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<136, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field136 = arg.move();
    __isset.field136 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<137, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field137 = arg.move();
    __isset.field137 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<138, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field138 = arg.move();
    __isset.field138 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<139, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field139 = arg.move();
    __isset.field139 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<140, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field140 = arg.move();
    __isset.field140 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<141, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field141 = arg.move();
    __isset.field141 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<142, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field142 = arg.move();
    __isset.field142 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<143, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field143 = arg.move();
    __isset.field143 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<144, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field144 = arg.move();
    __isset.field144 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<145, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field145 = arg.move();
    __isset.field145 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<146, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field146 = arg.move();
    __isset.field146 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<147, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field147 = arg.move();
    __isset.field147 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<148, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field148 = arg.move();
    __isset.field148 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<149, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field149 = arg.move();
    __isset.field149 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<150, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field150 = arg.move();
    __isset.field150 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<151, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field151 = arg.move();
    __isset.field151 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<152, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field152 = arg.move();
    __isset.field152 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<153, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field153 = arg.move();
    __isset.field153 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<154, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field154 = arg.move();
    __isset.field154 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<155, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field155 = arg.move();
    __isset.field155 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<156, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field156 = arg.move();
    __isset.field156 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<157, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field157 = arg.move();
    __isset.field157 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<158, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field158 = arg.move();
    __isset.field158 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<159, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field159 = arg.move();
    __isset.field159 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<160, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field160 = arg.move();
    __isset.field160 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<161, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field161 = arg.move();
    __isset.field161 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<162, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field162 = arg.move();
    __isset.field162 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<163, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field163 = arg.move();
    __isset.field163 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<164, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field164 = arg.move();
    __isset.field164 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<165, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field165 = arg.move();
    __isset.field165 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<166, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field166 = arg.move();
    __isset.field166 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<167, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field167 = arg.move();
    __isset.field167 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<168, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field168 = arg.move();
    __isset.field168 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<169, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field169 = arg.move();
    __isset.field169 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<170, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field170 = arg.move();
    __isset.field170 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<171, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field171 = arg.move();
    __isset.field171 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<172, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field172 = arg.move();
    __isset.field172 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<173, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field173 = arg.move();
    __isset.field173 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<174, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field174 = arg.move();
    __isset.field174 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<175, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field175 = arg.move();
    __isset.field175 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<176, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field176 = arg.move();
    __isset.field176 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<177, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field177 = arg.move();
    __isset.field177 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<178, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field178 = arg.move();
    __isset.field178 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<179, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field179 = arg.move();
    __isset.field179 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<180, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field180 = arg.move();
    __isset.field180 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<181, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field181 = arg.move();
    __isset.field181 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<182, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field182 = arg.move();
    __isset.field182 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<183, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field183 = arg.move();
    __isset.field183 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<184, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field184 = arg.move();
    __isset.field184 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<185, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field185 = arg.move();
    __isset.field185 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<186, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field186 = arg.move();
    __isset.field186 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<187, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field187 = arg.move();
    __isset.field187 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<188, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field188 = arg.move();
    __isset.field188 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<189, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field189 = arg.move();
    __isset.field189 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<190, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field190 = arg.move();
    __isset.field190 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<191, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field191 = arg.move();
    __isset.field191 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<192, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field192 = arg.move();
    __isset.field192 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<193, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field193 = arg.move();
    __isset.field193 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<194, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field194 = arg.move();
    __isset.field194 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<195, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field195 = arg.move();
    __isset.field195 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<196, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field196 = arg.move();
    __isset.field196 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<197, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field197 = arg.move();
    __isset.field197 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<198, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field198 = arg.move();
    __isset.field198 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<199, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field199 = arg.move();
    __isset.field199 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<200, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field200 = arg.move();
    __isset.field200 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<201, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field201 = arg.move();
    __isset.field201 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<202, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field202 = arg.move();
    __isset.field202 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<203, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field203 = arg.move();
    __isset.field203 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<204, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field204 = arg.move();
    __isset.field204 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<205, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field205 = arg.move();
    __isset.field205 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<206, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field206 = arg.move();
    __isset.field206 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<207, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field207 = arg.move();
    __isset.field207 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<208, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field208 = arg.move();
    __isset.field208 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<209, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field209 = arg.move();
    __isset.field209 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<210, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field210 = arg.move();
    __isset.field210 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<211, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field211 = arg.move();
    __isset.field211 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<212, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field212 = arg.move();
    __isset.field212 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<213, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field213 = arg.move();
    __isset.field213 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<214, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field214 = arg.move();
    __isset.field214 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<215, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field215 = arg.move();
    __isset.field215 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<216, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field216 = arg.move();
    __isset.field216 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct13(::apache::thrift::detail::argument_wrapper<217, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct13(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field217 = arg.move();
    __isset.field217 = true;
  }

  Struct13(Struct13&&) = default;

  Struct13(const Struct13&) = default;

  Struct13& operator=(Struct13&&) = default;

  Struct13& operator=(const Struct13&) = default;
  void __clear();

  virtual ~Struct13() {}

  std::map<double, float> field1;
  std::vector<double> field2;
  std::set<std::map<int8_t, int32_t>> field3;
  std::string field4;
   ::cpp2::Struct0 field5;
  std::set<int16_t> field6;
  std::map<std::string, int64_t> field7;
  std::vector<double> field8;
  double field9;
  std::map<double, int64_t> field10;
  std::string field11;
  std::set<int32_t> field12;
   ::cpp2::Struct0 field13;
  double field14;
  std::set<bool> field15;
   ::cpp2::Struct5 field16;
  double field17;
  int16_t field18;
  std::string field19;
  std::vector<float> field20;
  int64_t field21;
  std::string field22;
  bool field23;
  float field24;
  int32_t field25;
  std::vector<float> field26;
  int32_t field27;
  std::map<std::vector<std::set<bool>>, bool> field28;
  std::vector<std::vector<int16_t>> field29;
  bool field30;
  std::vector<std::vector<float>> field31;
  int8_t field32;
  std::set<int32_t> field33;
  float field34;
  int8_t field35;
  std::map<std::vector<std::string>, std::map<std::string, int64_t>> field36;
  float field37;
  double field38;
  float field39;
   ::cpp2::Struct6 field40;
  std::set<std::vector<int32_t>> field41;
  std::vector<bool> field42;
  std::string field43;
  std::vector< ::cpp2::Struct8> field44;
  float field45;
  std::vector<std::set<std::string>> field46;
  std::set<std::set<std::string>> field47;
  int64_t field48;
  int8_t field49;
   ::cpp2::Struct5 field50;
  int64_t field51;
  std::set<bool> field52;
  int16_t field53;
  std::vector<std::string> field54;
  int64_t field55;
  std::vector< ::cpp2::Struct0> field56;
  int32_t field57;
   ::cpp2::Struct2 field58;
  std::vector<std::string> field59;
  std::set<int8_t> field60;
  std::vector<float> field61;
  std::vector<bool> field62;
  std::set<int32_t> field63;
  int32_t field64;
  std::string field65;
  std::string field66;
  std::set<int16_t> field67;
  std::string field68;
  float field69;
   ::cpp2::Struct1 field70;
  float field71;
  int32_t field72;
   ::cpp2::Struct2 field73;
  int64_t field74;
  int32_t field75;
  std::map<bool, int64_t> field76;
  int32_t field77;
  std::vector<std::map<bool, std::vector<float>>> field78;
  std::vector<int32_t> field79;
  std::string field80;
  std::map< ::cpp2::Struct8,  ::cpp2::Struct7> field81;
  bool field82;
  bool field83;
  std::map<int16_t,  ::cpp2::Struct2> field84;
  int16_t field85;
  int8_t field86;
  std::vector<std::string> field87;
   ::cpp2::Struct2 field88;
  float field89;
  float field90;
  std::vector<std::map<bool, int8_t>> field91;
  bool field92;
  std::set<double> field93;
   ::cpp2::Struct4 field94;
  bool field95;
  bool field96;
  int16_t field97;
  bool field98;
   ::cpp2::Struct4 field99;
  std::set<std::map<int16_t, float>> field100;
  std::string field101;
  int16_t field102;
  std::map<int16_t, std::map<bool,  ::cpp2::Struct1>> field103;
  int64_t field104;
  std::set<int16_t> field105;
  double field106;
  std::set<float> field107;
  std::set<bool> field108;
  std::vector<std::map<float, int8_t>> field109;
  int16_t field110;
   ::cpp2::Struct1 field111;
  std::string field112;
  double field113;
  int16_t field114;
  std::map<std::vector<int8_t>, int64_t> field115;
  std::vector<bool> field116;
  std::string field117;
  std::vector<std::string> field118;
  int8_t field119;
  double field120;
  int64_t field121;
  double field122;
  int32_t field123;
  std::string field124;
  bool field125;
  std::vector<int8_t> field126;
  std::string field127;
  std::string field128;
   ::cpp2::Struct4 field129;
  int64_t field130;
  std::string field131;
   ::cpp2::Struct2 field132;
  std::string field133;
  std::set<std::map< ::cpp2::Struct11, int16_t>> field134;
  std::string field135;
  std::set<std::string> field136;
  float field137;
  double field138;
  std::set<std::set<double>> field139;
  int64_t field140;
  std::map<bool, float> field141;
  std::set<std::vector<double>> field142;
   ::cpp2::Struct0 field143;
  int8_t field144;
  std::set<int64_t> field145;
  int32_t field146;
  double field147;
   ::cpp2::Struct4 field148;
  std::vector<int8_t> field149;
  std::vector<double> field150;
  double field151;
  std::vector<std::set<int32_t>> field152;
  std::string field153;
  std::set<bool> field154;
  std::map<int32_t, std::set<bool>> field155;
  int64_t field156;
  double field157;
  std::vector<std::vector<int8_t>> field158;
  bool field159;
  double field160;
  double field161;
  std::set<double> field162;
  std::string field163;
  int64_t field164;
  std::string field165;
  std::set<float> field166;
  std::vector<int32_t> field167;
  std::map<bool,  ::cpp2::Struct1> field168;
  int8_t field169;
  std::string field170;
  std::string field171;
  std::set<bool> field172;
  bool field173;
  std::map<int16_t, std::vector<int64_t>> field174;
  int32_t field175;
  float field176;
  std::vector<float> field177;
  float field178;
  std::string field179;
  std::set<std::set<float>> field180;
  std::set<std::vector<float>> field181;
  std::string field182;
  float field183;
   ::cpp2::Struct6 field184;
  std::set<int64_t> field185;
  int32_t field186;
  double field187;
  std::vector<std::string> field188;
  float field189;
  double field190;
   ::cpp2::Struct0 field191;
  std::vector<int8_t> field192;
  std::string field193;
  bool field194;
  std::vector<int8_t> field195;
  float field196;
   ::cpp2::Struct2 field197;
  std::vector< ::cpp2::Struct3> field198;
  std::map< ::cpp2::Struct5, std::string> field199;
  std::vector<double> field200;
  std::vector<std::string> field201;
  float field202;
  int16_t field203;
  std::map<int16_t, std::set<float>> field204;
   ::cpp2::Struct7 field205;
  double field206;
  std::map<std::set<int8_t>, std::vector<float>> field207;
  std::set<int16_t> field208;
  std::set<std::string> field209;
   ::cpp2::Struct7 field210;
  std::vector<float> field211;
  std::vector<int8_t> field212;
  std::set<std::set<std::set<int64_t>>> field213;
  std::vector<int32_t> field214;
  std::string field215;
  int32_t field216;
  std::set<std::map<std::string, bool>> field217;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
      field97 = false;
      field98 = false;
      field99 = false;
      field100 = false;
      field101 = false;
      field102 = false;
      field103 = false;
      field104 = false;
      field105 = false;
      field106 = false;
      field107 = false;
      field108 = false;
      field109 = false;
      field110 = false;
      field111 = false;
      field112 = false;
      field113 = false;
      field114 = false;
      field115 = false;
      field116 = false;
      field117 = false;
      field118 = false;
      field119 = false;
      field120 = false;
      field121 = false;
      field122 = false;
      field123 = false;
      field124 = false;
      field125 = false;
      field126 = false;
      field127 = false;
      field128 = false;
      field129 = false;
      field130 = false;
      field131 = false;
      field132 = false;
      field133 = false;
      field134 = false;
      field135 = false;
      field136 = false;
      field137 = false;
      field138 = false;
      field139 = false;
      field140 = false;
      field141 = false;
      field142 = false;
      field143 = false;
      field144 = false;
      field145 = false;
      field146 = false;
      field147 = false;
      field148 = false;
      field149 = false;
      field150 = false;
      field151 = false;
      field152 = false;
      field153 = false;
      field154 = false;
      field155 = false;
      field156 = false;
      field157 = false;
      field158 = false;
      field159 = false;
      field160 = false;
      field161 = false;
      field162 = false;
      field163 = false;
      field164 = false;
      field165 = false;
      field166 = false;
      field167 = false;
      field168 = false;
      field169 = false;
      field170 = false;
      field171 = false;
      field172 = false;
      field173 = false;
      field174 = false;
      field175 = false;
      field176 = false;
      field177 = false;
      field178 = false;
      field179 = false;
      field180 = false;
      field181 = false;
      field182 = false;
      field183 = false;
      field184 = false;
      field185 = false;
      field186 = false;
      field187 = false;
      field188 = false;
      field189 = false;
      field190 = false;
      field191 = false;
      field192 = false;
      field193 = false;
      field194 = false;
      field195 = false;
      field196 = false;
      field197 = false;
      field198 = false;
      field199 = false;
      field200 = false;
      field201 = false;
      field202 = false;
      field203 = false;
      field204 = false;
      field205 = false;
      field206 = false;
      field207 = false;
      field208 = false;
      field209 = false;
      field210 = false;
      field211 = false;
      field212 = false;
      field213 = false;
      field214 = false;
      field215 = false;
      field216 = false;
      field217 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
    bool field97 = false;
    bool field98 = false;
    bool field99 = false;
    bool field100 = false;
    bool field101 = false;
    bool field102 = false;
    bool field103 = false;
    bool field104 = false;
    bool field105 = false;
    bool field106 = false;
    bool field107 = false;
    bool field108 = false;
    bool field109 = false;
    bool field110 = false;
    bool field111 = false;
    bool field112 = false;
    bool field113 = false;
    bool field114 = false;
    bool field115 = false;
    bool field116 = false;
    bool field117 = false;
    bool field118 = false;
    bool field119 = false;
    bool field120 = false;
    bool field121 = false;
    bool field122 = false;
    bool field123 = false;
    bool field124 = false;
    bool field125 = false;
    bool field126 = false;
    bool field127 = false;
    bool field128 = false;
    bool field129 = false;
    bool field130 = false;
    bool field131 = false;
    bool field132 = false;
    bool field133 = false;
    bool field134 = false;
    bool field135 = false;
    bool field136 = false;
    bool field137 = false;
    bool field138 = false;
    bool field139 = false;
    bool field140 = false;
    bool field141 = false;
    bool field142 = false;
    bool field143 = false;
    bool field144 = false;
    bool field145 = false;
    bool field146 = false;
    bool field147 = false;
    bool field148 = false;
    bool field149 = false;
    bool field150 = false;
    bool field151 = false;
    bool field152 = false;
    bool field153 = false;
    bool field154 = false;
    bool field155 = false;
    bool field156 = false;
    bool field157 = false;
    bool field158 = false;
    bool field159 = false;
    bool field160 = false;
    bool field161 = false;
    bool field162 = false;
    bool field163 = false;
    bool field164 = false;
    bool field165 = false;
    bool field166 = false;
    bool field167 = false;
    bool field168 = false;
    bool field169 = false;
    bool field170 = false;
    bool field171 = false;
    bool field172 = false;
    bool field173 = false;
    bool field174 = false;
    bool field175 = false;
    bool field176 = false;
    bool field177 = false;
    bool field178 = false;
    bool field179 = false;
    bool field180 = false;
    bool field181 = false;
    bool field182 = false;
    bool field183 = false;
    bool field184 = false;
    bool field185 = false;
    bool field186 = false;
    bool field187 = false;
    bool field188 = false;
    bool field189 = false;
    bool field190 = false;
    bool field191 = false;
    bool field192 = false;
    bool field193 = false;
    bool field194 = false;
    bool field195 = false;
    bool field196 = false;
    bool field197 = false;
    bool field198 = false;
    bool field199 = false;
    bool field200 = false;
    bool field201 = false;
    bool field202 = false;
    bool field203 = false;
    bool field204 = false;
    bool field205 = false;
    bool field206 = false;
    bool field207 = false;
    bool field208 = false;
    bool field209 = false;
    bool field210 = false;
    bool field211 = false;
    bool field212 = false;
    bool field213 = false;
    bool field214 = false;
    bool field215 = false;
    bool field216 = false;
    bool field217 = false;
  } __isset;
  bool operator==(const Struct13& rhs) const;

  bool operator < (const Struct13& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    if (!(field97 == rhs.field97)) {
      return field97 < rhs.field97;
    }
    if (!(field98 == rhs.field98)) {
      return field98 < rhs.field98;
    }
    if (!(field99 == rhs.field99)) {
      return field99 < rhs.field99;
    }
    if (!(field100 == rhs.field100)) {
      return field100 < rhs.field100;
    }
    if (!(field101 == rhs.field101)) {
      return field101 < rhs.field101;
    }
    if (!(field102 == rhs.field102)) {
      return field102 < rhs.field102;
    }
    if (!(field103 == rhs.field103)) {
      return field103 < rhs.field103;
    }
    if (!(field104 == rhs.field104)) {
      return field104 < rhs.field104;
    }
    if (!(field105 == rhs.field105)) {
      return field105 < rhs.field105;
    }
    if (!(field106 == rhs.field106)) {
      return field106 < rhs.field106;
    }
    if (!(field107 == rhs.field107)) {
      return field107 < rhs.field107;
    }
    if (!(field108 == rhs.field108)) {
      return field108 < rhs.field108;
    }
    if (!(field109 == rhs.field109)) {
      return field109 < rhs.field109;
    }
    if (!(field110 == rhs.field110)) {
      return field110 < rhs.field110;
    }
    if (!(field111 == rhs.field111)) {
      return field111 < rhs.field111;
    }
    if (!(field112 == rhs.field112)) {
      return field112 < rhs.field112;
    }
    if (!(field113 == rhs.field113)) {
      return field113 < rhs.field113;
    }
    if (!(field114 == rhs.field114)) {
      return field114 < rhs.field114;
    }
    if (!(field115 == rhs.field115)) {
      return field115 < rhs.field115;
    }
    if (!(field116 == rhs.field116)) {
      return field116 < rhs.field116;
    }
    if (!(field117 == rhs.field117)) {
      return field117 < rhs.field117;
    }
    if (!(field118 == rhs.field118)) {
      return field118 < rhs.field118;
    }
    if (!(field119 == rhs.field119)) {
      return field119 < rhs.field119;
    }
    if (!(field120 == rhs.field120)) {
      return field120 < rhs.field120;
    }
    if (!(field121 == rhs.field121)) {
      return field121 < rhs.field121;
    }
    if (!(field122 == rhs.field122)) {
      return field122 < rhs.field122;
    }
    if (!(field123 == rhs.field123)) {
      return field123 < rhs.field123;
    }
    if (!(field124 == rhs.field124)) {
      return field124 < rhs.field124;
    }
    if (!(field125 == rhs.field125)) {
      return field125 < rhs.field125;
    }
    if (!(field126 == rhs.field126)) {
      return field126 < rhs.field126;
    }
    if (!(field127 == rhs.field127)) {
      return field127 < rhs.field127;
    }
    if (!(field128 == rhs.field128)) {
      return field128 < rhs.field128;
    }
    if (!(field129 == rhs.field129)) {
      return field129 < rhs.field129;
    }
    if (!(field130 == rhs.field130)) {
      return field130 < rhs.field130;
    }
    if (!(field131 == rhs.field131)) {
      return field131 < rhs.field131;
    }
    if (!(field132 == rhs.field132)) {
      return field132 < rhs.field132;
    }
    if (!(field133 == rhs.field133)) {
      return field133 < rhs.field133;
    }
    if (!(field134 == rhs.field134)) {
      return field134 < rhs.field134;
    }
    if (!(field135 == rhs.field135)) {
      return field135 < rhs.field135;
    }
    if (!(field136 == rhs.field136)) {
      return field136 < rhs.field136;
    }
    if (!(field137 == rhs.field137)) {
      return field137 < rhs.field137;
    }
    if (!(field138 == rhs.field138)) {
      return field138 < rhs.field138;
    }
    if (!(field139 == rhs.field139)) {
      return field139 < rhs.field139;
    }
    if (!(field140 == rhs.field140)) {
      return field140 < rhs.field140;
    }
    if (!(field141 == rhs.field141)) {
      return field141 < rhs.field141;
    }
    if (!(field142 == rhs.field142)) {
      return field142 < rhs.field142;
    }
    if (!(field143 == rhs.field143)) {
      return field143 < rhs.field143;
    }
    if (!(field144 == rhs.field144)) {
      return field144 < rhs.field144;
    }
    if (!(field145 == rhs.field145)) {
      return field145 < rhs.field145;
    }
    if (!(field146 == rhs.field146)) {
      return field146 < rhs.field146;
    }
    if (!(field147 == rhs.field147)) {
      return field147 < rhs.field147;
    }
    if (!(field148 == rhs.field148)) {
      return field148 < rhs.field148;
    }
    if (!(field149 == rhs.field149)) {
      return field149 < rhs.field149;
    }
    if (!(field150 == rhs.field150)) {
      return field150 < rhs.field150;
    }
    if (!(field151 == rhs.field151)) {
      return field151 < rhs.field151;
    }
    if (!(field152 == rhs.field152)) {
      return field152 < rhs.field152;
    }
    if (!(field153 == rhs.field153)) {
      return field153 < rhs.field153;
    }
    if (!(field154 == rhs.field154)) {
      return field154 < rhs.field154;
    }
    if (!(field155 == rhs.field155)) {
      return field155 < rhs.field155;
    }
    if (!(field156 == rhs.field156)) {
      return field156 < rhs.field156;
    }
    if (!(field157 == rhs.field157)) {
      return field157 < rhs.field157;
    }
    if (!(field158 == rhs.field158)) {
      return field158 < rhs.field158;
    }
    if (!(field159 == rhs.field159)) {
      return field159 < rhs.field159;
    }
    if (!(field160 == rhs.field160)) {
      return field160 < rhs.field160;
    }
    if (!(field161 == rhs.field161)) {
      return field161 < rhs.field161;
    }
    if (!(field162 == rhs.field162)) {
      return field162 < rhs.field162;
    }
    if (!(field163 == rhs.field163)) {
      return field163 < rhs.field163;
    }
    if (!(field164 == rhs.field164)) {
      return field164 < rhs.field164;
    }
    if (!(field165 == rhs.field165)) {
      return field165 < rhs.field165;
    }
    if (!(field166 == rhs.field166)) {
      return field166 < rhs.field166;
    }
    if (!(field167 == rhs.field167)) {
      return field167 < rhs.field167;
    }
    if (!(field168 == rhs.field168)) {
      return field168 < rhs.field168;
    }
    if (!(field169 == rhs.field169)) {
      return field169 < rhs.field169;
    }
    if (!(field170 == rhs.field170)) {
      return field170 < rhs.field170;
    }
    if (!(field171 == rhs.field171)) {
      return field171 < rhs.field171;
    }
    if (!(field172 == rhs.field172)) {
      return field172 < rhs.field172;
    }
    if (!(field173 == rhs.field173)) {
      return field173 < rhs.field173;
    }
    if (!(field174 == rhs.field174)) {
      return field174 < rhs.field174;
    }
    if (!(field175 == rhs.field175)) {
      return field175 < rhs.field175;
    }
    if (!(field176 == rhs.field176)) {
      return field176 < rhs.field176;
    }
    if (!(field177 == rhs.field177)) {
      return field177 < rhs.field177;
    }
    if (!(field178 == rhs.field178)) {
      return field178 < rhs.field178;
    }
    if (!(field179 == rhs.field179)) {
      return field179 < rhs.field179;
    }
    if (!(field180 == rhs.field180)) {
      return field180 < rhs.field180;
    }
    if (!(field181 == rhs.field181)) {
      return field181 < rhs.field181;
    }
    if (!(field182 == rhs.field182)) {
      return field182 < rhs.field182;
    }
    if (!(field183 == rhs.field183)) {
      return field183 < rhs.field183;
    }
    if (!(field184 == rhs.field184)) {
      return field184 < rhs.field184;
    }
    if (!(field185 == rhs.field185)) {
      return field185 < rhs.field185;
    }
    if (!(field186 == rhs.field186)) {
      return field186 < rhs.field186;
    }
    if (!(field187 == rhs.field187)) {
      return field187 < rhs.field187;
    }
    if (!(field188 == rhs.field188)) {
      return field188 < rhs.field188;
    }
    if (!(field189 == rhs.field189)) {
      return field189 < rhs.field189;
    }
    if (!(field190 == rhs.field190)) {
      return field190 < rhs.field190;
    }
    if (!(field191 == rhs.field191)) {
      return field191 < rhs.field191;
    }
    if (!(field192 == rhs.field192)) {
      return field192 < rhs.field192;
    }
    if (!(field193 == rhs.field193)) {
      return field193 < rhs.field193;
    }
    if (!(field194 == rhs.field194)) {
      return field194 < rhs.field194;
    }
    if (!(field195 == rhs.field195)) {
      return field195 < rhs.field195;
    }
    if (!(field196 == rhs.field196)) {
      return field196 < rhs.field196;
    }
    if (!(field197 == rhs.field197)) {
      return field197 < rhs.field197;
    }
    if (!(field198 == rhs.field198)) {
      return field198 < rhs.field198;
    }
    if (!(field199 == rhs.field199)) {
      return field199 < rhs.field199;
    }
    if (!(field200 == rhs.field200)) {
      return field200 < rhs.field200;
    }
    if (!(field201 == rhs.field201)) {
      return field201 < rhs.field201;
    }
    if (!(field202 == rhs.field202)) {
      return field202 < rhs.field202;
    }
    if (!(field203 == rhs.field203)) {
      return field203 < rhs.field203;
    }
    if (!(field204 == rhs.field204)) {
      return field204 < rhs.field204;
    }
    if (!(field205 == rhs.field205)) {
      return field205 < rhs.field205;
    }
    if (!(field206 == rhs.field206)) {
      return field206 < rhs.field206;
    }
    if (!(field207 == rhs.field207)) {
      return field207 < rhs.field207;
    }
    if (!(field208 == rhs.field208)) {
      return field208 < rhs.field208;
    }
    if (!(field209 == rhs.field209)) {
      return field209 < rhs.field209;
    }
    if (!(field210 == rhs.field210)) {
      return field210 < rhs.field210;
    }
    if (!(field211 == rhs.field211)) {
      return field211 < rhs.field211;
    }
    if (!(field212 == rhs.field212)) {
      return field212 < rhs.field212;
    }
    if (!(field213 == rhs.field213)) {
      return field213 < rhs.field213;
    }
    if (!(field214 == rhs.field214)) {
      return field214 < rhs.field214;
    }
    if (!(field215 == rhs.field215)) {
      return field215 < rhs.field215;
    }
    if (!(field216 == rhs.field216)) {
      return field216 < rhs.field216;
    }
    if (!(field217 == rhs.field217)) {
      return field217 < rhs.field217;
    }
    (void)rhs;
    return false;
  }
  const std::map<double, float>& get_field1() const&;
  std::map<double, float> get_field1() &&;

  template <typename T_Struct13_field1_struct_setter>
  std::map<double, float>& set_field1(T_Struct13_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct13_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const std::vector<double>& get_field2() const&;
  std::vector<double> get_field2() &&;

  template <typename T_Struct13_field2_struct_setter>
  std::vector<double>& set_field2(T_Struct13_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct13_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const std::set<std::map<int8_t, int32_t>>& get_field3() const&;
  std::set<std::map<int8_t, int32_t>> get_field3() &&;

  template <typename T_Struct13_field3_struct_setter>
  std::set<std::map<int8_t, int32_t>>& set_field3(T_Struct13_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct13_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  const std::string& get_field4() const& {
    return field4;
  }

  std::string get_field4() && {
    return std::move(field4);
  }

  template <typename T_Struct13_field4_struct_setter>
  std::string& set_field4(T_Struct13_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct13_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }
  const  ::cpp2::Struct0& get_field5() const&;
   ::cpp2::Struct0 get_field5() &&;

  template <typename T_Struct13_field5_struct_setter>
   ::cpp2::Struct0& set_field5(T_Struct13_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct13_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }
  const std::set<int16_t>& get_field6() const&;
  std::set<int16_t> get_field6() &&;

  template <typename T_Struct13_field6_struct_setter>
  std::set<int16_t>& set_field6(T_Struct13_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct13_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }
  const std::map<std::string, int64_t>& get_field7() const&;
  std::map<std::string, int64_t> get_field7() &&;

  template <typename T_Struct13_field7_struct_setter>
  std::map<std::string, int64_t>& set_field7(T_Struct13_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct13_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }
  const std::vector<double>& get_field8() const&;
  std::vector<double> get_field8() &&;

  template <typename T_Struct13_field8_struct_setter>
  std::vector<double>& set_field8(T_Struct13_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct13_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }

  double get_field9() const {
    return field9;
  }

  double& set_field9(double field9_) {
    field9 = field9_;
    __isset.field9 = true;
    return field9;
  }
  const std::map<double, int64_t>& get_field10() const&;
  std::map<double, int64_t> get_field10() &&;

  template <typename T_Struct13_field10_struct_setter>
  std::map<double, int64_t>& set_field10(T_Struct13_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct13_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }

  const std::string& get_field11() const& {
    return field11;
  }

  std::string get_field11() && {
    return std::move(field11);
  }

  template <typename T_Struct13_field11_struct_setter>
  std::string& set_field11(T_Struct13_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct13_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }
  const std::set<int32_t>& get_field12() const&;
  std::set<int32_t> get_field12() &&;

  template <typename T_Struct13_field12_struct_setter>
  std::set<int32_t>& set_field12(T_Struct13_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct13_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }
  const  ::cpp2::Struct0& get_field13() const&;
   ::cpp2::Struct0 get_field13() &&;

  template <typename T_Struct13_field13_struct_setter>
   ::cpp2::Struct0& set_field13(T_Struct13_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct13_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }

  double get_field14() const {
    return field14;
  }

  double& set_field14(double field14_) {
    field14 = field14_;
    __isset.field14 = true;
    return field14;
  }
  const std::set<bool>& get_field15() const&;
  std::set<bool> get_field15() &&;

  template <typename T_Struct13_field15_struct_setter>
  std::set<bool>& set_field15(T_Struct13_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct13_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }
  const  ::cpp2::Struct5& get_field16() const&;
   ::cpp2::Struct5 get_field16() &&;

  template <typename T_Struct13_field16_struct_setter>
   ::cpp2::Struct5& set_field16(T_Struct13_field16_struct_setter&& field16_) {
    field16 = std::forward<T_Struct13_field16_struct_setter>(field16_);
    __isset.field16 = true;
    return field16;
  }

  double get_field17() const {
    return field17;
  }

  double& set_field17(double field17_) {
    field17 = field17_;
    __isset.field17 = true;
    return field17;
  }

  int16_t get_field18() const {
    return field18;
  }

  int16_t& set_field18(int16_t field18_) {
    field18 = field18_;
    __isset.field18 = true;
    return field18;
  }

  const std::string& get_field19() const& {
    return field19;
  }

  std::string get_field19() && {
    return std::move(field19);
  }

  template <typename T_Struct13_field19_struct_setter>
  std::string& set_field19(T_Struct13_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct13_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }
  const std::vector<float>& get_field20() const&;
  std::vector<float> get_field20() &&;

  template <typename T_Struct13_field20_struct_setter>
  std::vector<float>& set_field20(T_Struct13_field20_struct_setter&& field20_) {
    field20 = std::forward<T_Struct13_field20_struct_setter>(field20_);
    __isset.field20 = true;
    return field20;
  }

  int64_t get_field21() const {
    return field21;
  }

  int64_t& set_field21(int64_t field21_) {
    field21 = field21_;
    __isset.field21 = true;
    return field21;
  }

  const std::string& get_field22() const& {
    return field22;
  }

  std::string get_field22() && {
    return std::move(field22);
  }

  template <typename T_Struct13_field22_struct_setter>
  std::string& set_field22(T_Struct13_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct13_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }

  bool get_field23() const {
    return field23;
  }

  bool& set_field23(bool field23_) {
    field23 = field23_;
    __isset.field23 = true;
    return field23;
  }

  float get_field24() const {
    return field24;
  }

  float& set_field24(float field24_) {
    field24 = field24_;
    __isset.field24 = true;
    return field24;
  }

  int32_t get_field25() const {
    return field25;
  }

  int32_t& set_field25(int32_t field25_) {
    field25 = field25_;
    __isset.field25 = true;
    return field25;
  }
  const std::vector<float>& get_field26() const&;
  std::vector<float> get_field26() &&;

  template <typename T_Struct13_field26_struct_setter>
  std::vector<float>& set_field26(T_Struct13_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct13_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }

  int32_t get_field27() const {
    return field27;
  }

  int32_t& set_field27(int32_t field27_) {
    field27 = field27_;
    __isset.field27 = true;
    return field27;
  }
  const std::map<std::vector<std::set<bool>>, bool>& get_field28() const&;
  std::map<std::vector<std::set<bool>>, bool> get_field28() &&;

  template <typename T_Struct13_field28_struct_setter>
  std::map<std::vector<std::set<bool>>, bool>& set_field28(T_Struct13_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct13_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }
  const std::vector<std::vector<int16_t>>& get_field29() const&;
  std::vector<std::vector<int16_t>> get_field29() &&;

  template <typename T_Struct13_field29_struct_setter>
  std::vector<std::vector<int16_t>>& set_field29(T_Struct13_field29_struct_setter&& field29_) {
    field29 = std::forward<T_Struct13_field29_struct_setter>(field29_);
    __isset.field29 = true;
    return field29;
  }

  bool get_field30() const {
    return field30;
  }

  bool& set_field30(bool field30_) {
    field30 = field30_;
    __isset.field30 = true;
    return field30;
  }
  const std::vector<std::vector<float>>& get_field31() const&;
  std::vector<std::vector<float>> get_field31() &&;

  template <typename T_Struct13_field31_struct_setter>
  std::vector<std::vector<float>>& set_field31(T_Struct13_field31_struct_setter&& field31_) {
    field31 = std::forward<T_Struct13_field31_struct_setter>(field31_);
    __isset.field31 = true;
    return field31;
  }

  int8_t get_field32() const {
    return field32;
  }

  int8_t& set_field32(int8_t field32_) {
    field32 = field32_;
    __isset.field32 = true;
    return field32;
  }
  const std::set<int32_t>& get_field33() const&;
  std::set<int32_t> get_field33() &&;

  template <typename T_Struct13_field33_struct_setter>
  std::set<int32_t>& set_field33(T_Struct13_field33_struct_setter&& field33_) {
    field33 = std::forward<T_Struct13_field33_struct_setter>(field33_);
    __isset.field33 = true;
    return field33;
  }

  float get_field34() const {
    return field34;
  }

  float& set_field34(float field34_) {
    field34 = field34_;
    __isset.field34 = true;
    return field34;
  }

  int8_t get_field35() const {
    return field35;
  }

  int8_t& set_field35(int8_t field35_) {
    field35 = field35_;
    __isset.field35 = true;
    return field35;
  }
  const std::map<std::vector<std::string>, std::map<std::string, int64_t>>& get_field36() const&;
  std::map<std::vector<std::string>, std::map<std::string, int64_t>> get_field36() &&;

  template <typename T_Struct13_field36_struct_setter>
  std::map<std::vector<std::string>, std::map<std::string, int64_t>>& set_field36(T_Struct13_field36_struct_setter&& field36_) {
    field36 = std::forward<T_Struct13_field36_struct_setter>(field36_);
    __isset.field36 = true;
    return field36;
  }

  float get_field37() const {
    return field37;
  }

  float& set_field37(float field37_) {
    field37 = field37_;
    __isset.field37 = true;
    return field37;
  }

  double get_field38() const {
    return field38;
  }

  double& set_field38(double field38_) {
    field38 = field38_;
    __isset.field38 = true;
    return field38;
  }

  float get_field39() const {
    return field39;
  }

  float& set_field39(float field39_) {
    field39 = field39_;
    __isset.field39 = true;
    return field39;
  }
  const  ::cpp2::Struct6& get_field40() const&;
   ::cpp2::Struct6 get_field40() &&;

  template <typename T_Struct13_field40_struct_setter>
   ::cpp2::Struct6& set_field40(T_Struct13_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct13_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }
  const std::set<std::vector<int32_t>>& get_field41() const&;
  std::set<std::vector<int32_t>> get_field41() &&;

  template <typename T_Struct13_field41_struct_setter>
  std::set<std::vector<int32_t>>& set_field41(T_Struct13_field41_struct_setter&& field41_) {
    field41 = std::forward<T_Struct13_field41_struct_setter>(field41_);
    __isset.field41 = true;
    return field41;
  }
  const std::vector<bool>& get_field42() const&;
  std::vector<bool> get_field42() &&;

  template <typename T_Struct13_field42_struct_setter>
  std::vector<bool>& set_field42(T_Struct13_field42_struct_setter&& field42_) {
    field42 = std::forward<T_Struct13_field42_struct_setter>(field42_);
    __isset.field42 = true;
    return field42;
  }

  const std::string& get_field43() const& {
    return field43;
  }

  std::string get_field43() && {
    return std::move(field43);
  }

  template <typename T_Struct13_field43_struct_setter>
  std::string& set_field43(T_Struct13_field43_struct_setter&& field43_) {
    field43 = std::forward<T_Struct13_field43_struct_setter>(field43_);
    __isset.field43 = true;
    return field43;
  }
  const std::vector< ::cpp2::Struct8>& get_field44() const&;
  std::vector< ::cpp2::Struct8> get_field44() &&;

  template <typename T_Struct13_field44_struct_setter>
  std::vector< ::cpp2::Struct8>& set_field44(T_Struct13_field44_struct_setter&& field44_) {
    field44 = std::forward<T_Struct13_field44_struct_setter>(field44_);
    __isset.field44 = true;
    return field44;
  }

  float get_field45() const {
    return field45;
  }

  float& set_field45(float field45_) {
    field45 = field45_;
    __isset.field45 = true;
    return field45;
  }
  const std::vector<std::set<std::string>>& get_field46() const&;
  std::vector<std::set<std::string>> get_field46() &&;

  template <typename T_Struct13_field46_struct_setter>
  std::vector<std::set<std::string>>& set_field46(T_Struct13_field46_struct_setter&& field46_) {
    field46 = std::forward<T_Struct13_field46_struct_setter>(field46_);
    __isset.field46 = true;
    return field46;
  }
  const std::set<std::set<std::string>>& get_field47() const&;
  std::set<std::set<std::string>> get_field47() &&;

  template <typename T_Struct13_field47_struct_setter>
  std::set<std::set<std::string>>& set_field47(T_Struct13_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct13_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }

  int64_t get_field48() const {
    return field48;
  }

  int64_t& set_field48(int64_t field48_) {
    field48 = field48_;
    __isset.field48 = true;
    return field48;
  }

  int8_t get_field49() const {
    return field49;
  }

  int8_t& set_field49(int8_t field49_) {
    field49 = field49_;
    __isset.field49 = true;
    return field49;
  }
  const  ::cpp2::Struct5& get_field50() const&;
   ::cpp2::Struct5 get_field50() &&;

  template <typename T_Struct13_field50_struct_setter>
   ::cpp2::Struct5& set_field50(T_Struct13_field50_struct_setter&& field50_) {
    field50 = std::forward<T_Struct13_field50_struct_setter>(field50_);
    __isset.field50 = true;
    return field50;
  }

  int64_t get_field51() const {
    return field51;
  }

  int64_t& set_field51(int64_t field51_) {
    field51 = field51_;
    __isset.field51 = true;
    return field51;
  }
  const std::set<bool>& get_field52() const&;
  std::set<bool> get_field52() &&;

  template <typename T_Struct13_field52_struct_setter>
  std::set<bool>& set_field52(T_Struct13_field52_struct_setter&& field52_) {
    field52 = std::forward<T_Struct13_field52_struct_setter>(field52_);
    __isset.field52 = true;
    return field52;
  }

  int16_t get_field53() const {
    return field53;
  }

  int16_t& set_field53(int16_t field53_) {
    field53 = field53_;
    __isset.field53 = true;
    return field53;
  }
  const std::vector<std::string>& get_field54() const&;
  std::vector<std::string> get_field54() &&;

  template <typename T_Struct13_field54_struct_setter>
  std::vector<std::string>& set_field54(T_Struct13_field54_struct_setter&& field54_) {
    field54 = std::forward<T_Struct13_field54_struct_setter>(field54_);
    __isset.field54 = true;
    return field54;
  }

  int64_t get_field55() const {
    return field55;
  }

  int64_t& set_field55(int64_t field55_) {
    field55 = field55_;
    __isset.field55 = true;
    return field55;
  }
  const std::vector< ::cpp2::Struct0>& get_field56() const&;
  std::vector< ::cpp2::Struct0> get_field56() &&;

  template <typename T_Struct13_field56_struct_setter>
  std::vector< ::cpp2::Struct0>& set_field56(T_Struct13_field56_struct_setter&& field56_) {
    field56 = std::forward<T_Struct13_field56_struct_setter>(field56_);
    __isset.field56 = true;
    return field56;
  }

  int32_t get_field57() const {
    return field57;
  }

  int32_t& set_field57(int32_t field57_) {
    field57 = field57_;
    __isset.field57 = true;
    return field57;
  }
  const  ::cpp2::Struct2& get_field58() const&;
   ::cpp2::Struct2 get_field58() &&;

  template <typename T_Struct13_field58_struct_setter>
   ::cpp2::Struct2& set_field58(T_Struct13_field58_struct_setter&& field58_) {
    field58 = std::forward<T_Struct13_field58_struct_setter>(field58_);
    __isset.field58 = true;
    return field58;
  }
  const std::vector<std::string>& get_field59() const&;
  std::vector<std::string> get_field59() &&;

  template <typename T_Struct13_field59_struct_setter>
  std::vector<std::string>& set_field59(T_Struct13_field59_struct_setter&& field59_) {
    field59 = std::forward<T_Struct13_field59_struct_setter>(field59_);
    __isset.field59 = true;
    return field59;
  }
  const std::set<int8_t>& get_field60() const&;
  std::set<int8_t> get_field60() &&;

  template <typename T_Struct13_field60_struct_setter>
  std::set<int8_t>& set_field60(T_Struct13_field60_struct_setter&& field60_) {
    field60 = std::forward<T_Struct13_field60_struct_setter>(field60_);
    __isset.field60 = true;
    return field60;
  }
  const std::vector<float>& get_field61() const&;
  std::vector<float> get_field61() &&;

  template <typename T_Struct13_field61_struct_setter>
  std::vector<float>& set_field61(T_Struct13_field61_struct_setter&& field61_) {
    field61 = std::forward<T_Struct13_field61_struct_setter>(field61_);
    __isset.field61 = true;
    return field61;
  }
  const std::vector<bool>& get_field62() const&;
  std::vector<bool> get_field62() &&;

  template <typename T_Struct13_field62_struct_setter>
  std::vector<bool>& set_field62(T_Struct13_field62_struct_setter&& field62_) {
    field62 = std::forward<T_Struct13_field62_struct_setter>(field62_);
    __isset.field62 = true;
    return field62;
  }
  const std::set<int32_t>& get_field63() const&;
  std::set<int32_t> get_field63() &&;

  template <typename T_Struct13_field63_struct_setter>
  std::set<int32_t>& set_field63(T_Struct13_field63_struct_setter&& field63_) {
    field63 = std::forward<T_Struct13_field63_struct_setter>(field63_);
    __isset.field63 = true;
    return field63;
  }

  int32_t get_field64() const {
    return field64;
  }

  int32_t& set_field64(int32_t field64_) {
    field64 = field64_;
    __isset.field64 = true;
    return field64;
  }

  const std::string& get_field65() const& {
    return field65;
  }

  std::string get_field65() && {
    return std::move(field65);
  }

  template <typename T_Struct13_field65_struct_setter>
  std::string& set_field65(T_Struct13_field65_struct_setter&& field65_) {
    field65 = std::forward<T_Struct13_field65_struct_setter>(field65_);
    __isset.field65 = true;
    return field65;
  }

  const std::string& get_field66() const& {
    return field66;
  }

  std::string get_field66() && {
    return std::move(field66);
  }

  template <typename T_Struct13_field66_struct_setter>
  std::string& set_field66(T_Struct13_field66_struct_setter&& field66_) {
    field66 = std::forward<T_Struct13_field66_struct_setter>(field66_);
    __isset.field66 = true;
    return field66;
  }
  const std::set<int16_t>& get_field67() const&;
  std::set<int16_t> get_field67() &&;

  template <typename T_Struct13_field67_struct_setter>
  std::set<int16_t>& set_field67(T_Struct13_field67_struct_setter&& field67_) {
    field67 = std::forward<T_Struct13_field67_struct_setter>(field67_);
    __isset.field67 = true;
    return field67;
  }

  const std::string& get_field68() const& {
    return field68;
  }

  std::string get_field68() && {
    return std::move(field68);
  }

  template <typename T_Struct13_field68_struct_setter>
  std::string& set_field68(T_Struct13_field68_struct_setter&& field68_) {
    field68 = std::forward<T_Struct13_field68_struct_setter>(field68_);
    __isset.field68 = true;
    return field68;
  }

  float get_field69() const {
    return field69;
  }

  float& set_field69(float field69_) {
    field69 = field69_;
    __isset.field69 = true;
    return field69;
  }
  const  ::cpp2::Struct1& get_field70() const&;
   ::cpp2::Struct1 get_field70() &&;

  template <typename T_Struct13_field70_struct_setter>
   ::cpp2::Struct1& set_field70(T_Struct13_field70_struct_setter&& field70_) {
    field70 = std::forward<T_Struct13_field70_struct_setter>(field70_);
    __isset.field70 = true;
    return field70;
  }

  float get_field71() const {
    return field71;
  }

  float& set_field71(float field71_) {
    field71 = field71_;
    __isset.field71 = true;
    return field71;
  }

  int32_t get_field72() const {
    return field72;
  }

  int32_t& set_field72(int32_t field72_) {
    field72 = field72_;
    __isset.field72 = true;
    return field72;
  }
  const  ::cpp2::Struct2& get_field73() const&;
   ::cpp2::Struct2 get_field73() &&;

  template <typename T_Struct13_field73_struct_setter>
   ::cpp2::Struct2& set_field73(T_Struct13_field73_struct_setter&& field73_) {
    field73 = std::forward<T_Struct13_field73_struct_setter>(field73_);
    __isset.field73 = true;
    return field73;
  }

  int64_t get_field74() const {
    return field74;
  }

  int64_t& set_field74(int64_t field74_) {
    field74 = field74_;
    __isset.field74 = true;
    return field74;
  }

  int32_t get_field75() const {
    return field75;
  }

  int32_t& set_field75(int32_t field75_) {
    field75 = field75_;
    __isset.field75 = true;
    return field75;
  }
  const std::map<bool, int64_t>& get_field76() const&;
  std::map<bool, int64_t> get_field76() &&;

  template <typename T_Struct13_field76_struct_setter>
  std::map<bool, int64_t>& set_field76(T_Struct13_field76_struct_setter&& field76_) {
    field76 = std::forward<T_Struct13_field76_struct_setter>(field76_);
    __isset.field76 = true;
    return field76;
  }

  int32_t get_field77() const {
    return field77;
  }

  int32_t& set_field77(int32_t field77_) {
    field77 = field77_;
    __isset.field77 = true;
    return field77;
  }
  const std::vector<std::map<bool, std::vector<float>>>& get_field78() const&;
  std::vector<std::map<bool, std::vector<float>>> get_field78() &&;

  template <typename T_Struct13_field78_struct_setter>
  std::vector<std::map<bool, std::vector<float>>>& set_field78(T_Struct13_field78_struct_setter&& field78_) {
    field78 = std::forward<T_Struct13_field78_struct_setter>(field78_);
    __isset.field78 = true;
    return field78;
  }
  const std::vector<int32_t>& get_field79() const&;
  std::vector<int32_t> get_field79() &&;

  template <typename T_Struct13_field79_struct_setter>
  std::vector<int32_t>& set_field79(T_Struct13_field79_struct_setter&& field79_) {
    field79 = std::forward<T_Struct13_field79_struct_setter>(field79_);
    __isset.field79 = true;
    return field79;
  }

  const std::string& get_field80() const& {
    return field80;
  }

  std::string get_field80() && {
    return std::move(field80);
  }

  template <typename T_Struct13_field80_struct_setter>
  std::string& set_field80(T_Struct13_field80_struct_setter&& field80_) {
    field80 = std::forward<T_Struct13_field80_struct_setter>(field80_);
    __isset.field80 = true;
    return field80;
  }
  const std::map< ::cpp2::Struct8,  ::cpp2::Struct7>& get_field81() const&;
  std::map< ::cpp2::Struct8,  ::cpp2::Struct7> get_field81() &&;

  template <typename T_Struct13_field81_struct_setter>
  std::map< ::cpp2::Struct8,  ::cpp2::Struct7>& set_field81(T_Struct13_field81_struct_setter&& field81_) {
    field81 = std::forward<T_Struct13_field81_struct_setter>(field81_);
    __isset.field81 = true;
    return field81;
  }

  bool get_field82() const {
    return field82;
  }

  bool& set_field82(bool field82_) {
    field82 = field82_;
    __isset.field82 = true;
    return field82;
  }

  bool get_field83() const {
    return field83;
  }

  bool& set_field83(bool field83_) {
    field83 = field83_;
    __isset.field83 = true;
    return field83;
  }
  const std::map<int16_t,  ::cpp2::Struct2>& get_field84() const&;
  std::map<int16_t,  ::cpp2::Struct2> get_field84() &&;

  template <typename T_Struct13_field84_struct_setter>
  std::map<int16_t,  ::cpp2::Struct2>& set_field84(T_Struct13_field84_struct_setter&& field84_) {
    field84 = std::forward<T_Struct13_field84_struct_setter>(field84_);
    __isset.field84 = true;
    return field84;
  }

  int16_t get_field85() const {
    return field85;
  }

  int16_t& set_field85(int16_t field85_) {
    field85 = field85_;
    __isset.field85 = true;
    return field85;
  }

  int8_t get_field86() const {
    return field86;
  }

  int8_t& set_field86(int8_t field86_) {
    field86 = field86_;
    __isset.field86 = true;
    return field86;
  }
  const std::vector<std::string>& get_field87() const&;
  std::vector<std::string> get_field87() &&;

  template <typename T_Struct13_field87_struct_setter>
  std::vector<std::string>& set_field87(T_Struct13_field87_struct_setter&& field87_) {
    field87 = std::forward<T_Struct13_field87_struct_setter>(field87_);
    __isset.field87 = true;
    return field87;
  }
  const  ::cpp2::Struct2& get_field88() const&;
   ::cpp2::Struct2 get_field88() &&;

  template <typename T_Struct13_field88_struct_setter>
   ::cpp2::Struct2& set_field88(T_Struct13_field88_struct_setter&& field88_) {
    field88 = std::forward<T_Struct13_field88_struct_setter>(field88_);
    __isset.field88 = true;
    return field88;
  }

  float get_field89() const {
    return field89;
  }

  float& set_field89(float field89_) {
    field89 = field89_;
    __isset.field89 = true;
    return field89;
  }

  float get_field90() const {
    return field90;
  }

  float& set_field90(float field90_) {
    field90 = field90_;
    __isset.field90 = true;
    return field90;
  }
  const std::vector<std::map<bool, int8_t>>& get_field91() const&;
  std::vector<std::map<bool, int8_t>> get_field91() &&;

  template <typename T_Struct13_field91_struct_setter>
  std::vector<std::map<bool, int8_t>>& set_field91(T_Struct13_field91_struct_setter&& field91_) {
    field91 = std::forward<T_Struct13_field91_struct_setter>(field91_);
    __isset.field91 = true;
    return field91;
  }

  bool get_field92() const {
    return field92;
  }

  bool& set_field92(bool field92_) {
    field92 = field92_;
    __isset.field92 = true;
    return field92;
  }
  const std::set<double>& get_field93() const&;
  std::set<double> get_field93() &&;

  template <typename T_Struct13_field93_struct_setter>
  std::set<double>& set_field93(T_Struct13_field93_struct_setter&& field93_) {
    field93 = std::forward<T_Struct13_field93_struct_setter>(field93_);
    __isset.field93 = true;
    return field93;
  }
  const  ::cpp2::Struct4& get_field94() const&;
   ::cpp2::Struct4 get_field94() &&;

  template <typename T_Struct13_field94_struct_setter>
   ::cpp2::Struct4& set_field94(T_Struct13_field94_struct_setter&& field94_) {
    field94 = std::forward<T_Struct13_field94_struct_setter>(field94_);
    __isset.field94 = true;
    return field94;
  }

  bool get_field95() const {
    return field95;
  }

  bool& set_field95(bool field95_) {
    field95 = field95_;
    __isset.field95 = true;
    return field95;
  }

  bool get_field96() const {
    return field96;
  }

  bool& set_field96(bool field96_) {
    field96 = field96_;
    __isset.field96 = true;
    return field96;
  }

  int16_t get_field97() const {
    return field97;
  }

  int16_t& set_field97(int16_t field97_) {
    field97 = field97_;
    __isset.field97 = true;
    return field97;
  }

  bool get_field98() const {
    return field98;
  }

  bool& set_field98(bool field98_) {
    field98 = field98_;
    __isset.field98 = true;
    return field98;
  }
  const  ::cpp2::Struct4& get_field99() const&;
   ::cpp2::Struct4 get_field99() &&;

  template <typename T_Struct13_field99_struct_setter>
   ::cpp2::Struct4& set_field99(T_Struct13_field99_struct_setter&& field99_) {
    field99 = std::forward<T_Struct13_field99_struct_setter>(field99_);
    __isset.field99 = true;
    return field99;
  }
  const std::set<std::map<int16_t, float>>& get_field100() const&;
  std::set<std::map<int16_t, float>> get_field100() &&;

  template <typename T_Struct13_field100_struct_setter>
  std::set<std::map<int16_t, float>>& set_field100(T_Struct13_field100_struct_setter&& field100_) {
    field100 = std::forward<T_Struct13_field100_struct_setter>(field100_);
    __isset.field100 = true;
    return field100;
  }

  const std::string& get_field101() const& {
    return field101;
  }

  std::string get_field101() && {
    return std::move(field101);
  }

  template <typename T_Struct13_field101_struct_setter>
  std::string& set_field101(T_Struct13_field101_struct_setter&& field101_) {
    field101 = std::forward<T_Struct13_field101_struct_setter>(field101_);
    __isset.field101 = true;
    return field101;
  }

  int16_t get_field102() const {
    return field102;
  }

  int16_t& set_field102(int16_t field102_) {
    field102 = field102_;
    __isset.field102 = true;
    return field102;
  }
  const std::map<int16_t, std::map<bool,  ::cpp2::Struct1>>& get_field103() const&;
  std::map<int16_t, std::map<bool,  ::cpp2::Struct1>> get_field103() &&;

  template <typename T_Struct13_field103_struct_setter>
  std::map<int16_t, std::map<bool,  ::cpp2::Struct1>>& set_field103(T_Struct13_field103_struct_setter&& field103_) {
    field103 = std::forward<T_Struct13_field103_struct_setter>(field103_);
    __isset.field103 = true;
    return field103;
  }

  int64_t get_field104() const {
    return field104;
  }

  int64_t& set_field104(int64_t field104_) {
    field104 = field104_;
    __isset.field104 = true;
    return field104;
  }
  const std::set<int16_t>& get_field105() const&;
  std::set<int16_t> get_field105() &&;

  template <typename T_Struct13_field105_struct_setter>
  std::set<int16_t>& set_field105(T_Struct13_field105_struct_setter&& field105_) {
    field105 = std::forward<T_Struct13_field105_struct_setter>(field105_);
    __isset.field105 = true;
    return field105;
  }

  double get_field106() const {
    return field106;
  }

  double& set_field106(double field106_) {
    field106 = field106_;
    __isset.field106 = true;
    return field106;
  }
  const std::set<float>& get_field107() const&;
  std::set<float> get_field107() &&;

  template <typename T_Struct13_field107_struct_setter>
  std::set<float>& set_field107(T_Struct13_field107_struct_setter&& field107_) {
    field107 = std::forward<T_Struct13_field107_struct_setter>(field107_);
    __isset.field107 = true;
    return field107;
  }
  const std::set<bool>& get_field108() const&;
  std::set<bool> get_field108() &&;

  template <typename T_Struct13_field108_struct_setter>
  std::set<bool>& set_field108(T_Struct13_field108_struct_setter&& field108_) {
    field108 = std::forward<T_Struct13_field108_struct_setter>(field108_);
    __isset.field108 = true;
    return field108;
  }
  const std::vector<std::map<float, int8_t>>& get_field109() const&;
  std::vector<std::map<float, int8_t>> get_field109() &&;

  template <typename T_Struct13_field109_struct_setter>
  std::vector<std::map<float, int8_t>>& set_field109(T_Struct13_field109_struct_setter&& field109_) {
    field109 = std::forward<T_Struct13_field109_struct_setter>(field109_);
    __isset.field109 = true;
    return field109;
  }

  int16_t get_field110() const {
    return field110;
  }

  int16_t& set_field110(int16_t field110_) {
    field110 = field110_;
    __isset.field110 = true;
    return field110;
  }
  const  ::cpp2::Struct1& get_field111() const&;
   ::cpp2::Struct1 get_field111() &&;

  template <typename T_Struct13_field111_struct_setter>
   ::cpp2::Struct1& set_field111(T_Struct13_field111_struct_setter&& field111_) {
    field111 = std::forward<T_Struct13_field111_struct_setter>(field111_);
    __isset.field111 = true;
    return field111;
  }

  const std::string& get_field112() const& {
    return field112;
  }

  std::string get_field112() && {
    return std::move(field112);
  }

  template <typename T_Struct13_field112_struct_setter>
  std::string& set_field112(T_Struct13_field112_struct_setter&& field112_) {
    field112 = std::forward<T_Struct13_field112_struct_setter>(field112_);
    __isset.field112 = true;
    return field112;
  }

  double get_field113() const {
    return field113;
  }

  double& set_field113(double field113_) {
    field113 = field113_;
    __isset.field113 = true;
    return field113;
  }

  int16_t get_field114() const {
    return field114;
  }

  int16_t& set_field114(int16_t field114_) {
    field114 = field114_;
    __isset.field114 = true;
    return field114;
  }
  const std::map<std::vector<int8_t>, int64_t>& get_field115() const&;
  std::map<std::vector<int8_t>, int64_t> get_field115() &&;

  template <typename T_Struct13_field115_struct_setter>
  std::map<std::vector<int8_t>, int64_t>& set_field115(T_Struct13_field115_struct_setter&& field115_) {
    field115 = std::forward<T_Struct13_field115_struct_setter>(field115_);
    __isset.field115 = true;
    return field115;
  }
  const std::vector<bool>& get_field116() const&;
  std::vector<bool> get_field116() &&;

  template <typename T_Struct13_field116_struct_setter>
  std::vector<bool>& set_field116(T_Struct13_field116_struct_setter&& field116_) {
    field116 = std::forward<T_Struct13_field116_struct_setter>(field116_);
    __isset.field116 = true;
    return field116;
  }

  const std::string& get_field117() const& {
    return field117;
  }

  std::string get_field117() && {
    return std::move(field117);
  }

  template <typename T_Struct13_field117_struct_setter>
  std::string& set_field117(T_Struct13_field117_struct_setter&& field117_) {
    field117 = std::forward<T_Struct13_field117_struct_setter>(field117_);
    __isset.field117 = true;
    return field117;
  }
  const std::vector<std::string>& get_field118() const&;
  std::vector<std::string> get_field118() &&;

  template <typename T_Struct13_field118_struct_setter>
  std::vector<std::string>& set_field118(T_Struct13_field118_struct_setter&& field118_) {
    field118 = std::forward<T_Struct13_field118_struct_setter>(field118_);
    __isset.field118 = true;
    return field118;
  }

  int8_t get_field119() const {
    return field119;
  }

  int8_t& set_field119(int8_t field119_) {
    field119 = field119_;
    __isset.field119 = true;
    return field119;
  }

  double get_field120() const {
    return field120;
  }

  double& set_field120(double field120_) {
    field120 = field120_;
    __isset.field120 = true;
    return field120;
  }

  int64_t get_field121() const {
    return field121;
  }

  int64_t& set_field121(int64_t field121_) {
    field121 = field121_;
    __isset.field121 = true;
    return field121;
  }

  double get_field122() const {
    return field122;
  }

  double& set_field122(double field122_) {
    field122 = field122_;
    __isset.field122 = true;
    return field122;
  }

  int32_t get_field123() const {
    return field123;
  }

  int32_t& set_field123(int32_t field123_) {
    field123 = field123_;
    __isset.field123 = true;
    return field123;
  }

  const std::string& get_field124() const& {
    return field124;
  }

  std::string get_field124() && {
    return std::move(field124);
  }

  template <typename T_Struct13_field124_struct_setter>
  std::string& set_field124(T_Struct13_field124_struct_setter&& field124_) {
    field124 = std::forward<T_Struct13_field124_struct_setter>(field124_);
    __isset.field124 = true;
    return field124;
  }

  bool get_field125() const {
    return field125;
  }

  bool& set_field125(bool field125_) {
    field125 = field125_;
    __isset.field125 = true;
    return field125;
  }
  const std::vector<int8_t>& get_field126() const&;
  std::vector<int8_t> get_field126() &&;

  template <typename T_Struct13_field126_struct_setter>
  std::vector<int8_t>& set_field126(T_Struct13_field126_struct_setter&& field126_) {
    field126 = std::forward<T_Struct13_field126_struct_setter>(field126_);
    __isset.field126 = true;
    return field126;
  }

  const std::string& get_field127() const& {
    return field127;
  }

  std::string get_field127() && {
    return std::move(field127);
  }

  template <typename T_Struct13_field127_struct_setter>
  std::string& set_field127(T_Struct13_field127_struct_setter&& field127_) {
    field127 = std::forward<T_Struct13_field127_struct_setter>(field127_);
    __isset.field127 = true;
    return field127;
  }

  const std::string& get_field128() const& {
    return field128;
  }

  std::string get_field128() && {
    return std::move(field128);
  }

  template <typename T_Struct13_field128_struct_setter>
  std::string& set_field128(T_Struct13_field128_struct_setter&& field128_) {
    field128 = std::forward<T_Struct13_field128_struct_setter>(field128_);
    __isset.field128 = true;
    return field128;
  }
  const  ::cpp2::Struct4& get_field129() const&;
   ::cpp2::Struct4 get_field129() &&;

  template <typename T_Struct13_field129_struct_setter>
   ::cpp2::Struct4& set_field129(T_Struct13_field129_struct_setter&& field129_) {
    field129 = std::forward<T_Struct13_field129_struct_setter>(field129_);
    __isset.field129 = true;
    return field129;
  }

  int64_t get_field130() const {
    return field130;
  }

  int64_t& set_field130(int64_t field130_) {
    field130 = field130_;
    __isset.field130 = true;
    return field130;
  }

  const std::string& get_field131() const& {
    return field131;
  }

  std::string get_field131() && {
    return std::move(field131);
  }

  template <typename T_Struct13_field131_struct_setter>
  std::string& set_field131(T_Struct13_field131_struct_setter&& field131_) {
    field131 = std::forward<T_Struct13_field131_struct_setter>(field131_);
    __isset.field131 = true;
    return field131;
  }
  const  ::cpp2::Struct2& get_field132() const&;
   ::cpp2::Struct2 get_field132() &&;

  template <typename T_Struct13_field132_struct_setter>
   ::cpp2::Struct2& set_field132(T_Struct13_field132_struct_setter&& field132_) {
    field132 = std::forward<T_Struct13_field132_struct_setter>(field132_);
    __isset.field132 = true;
    return field132;
  }

  const std::string& get_field133() const& {
    return field133;
  }

  std::string get_field133() && {
    return std::move(field133);
  }

  template <typename T_Struct13_field133_struct_setter>
  std::string& set_field133(T_Struct13_field133_struct_setter&& field133_) {
    field133 = std::forward<T_Struct13_field133_struct_setter>(field133_);
    __isset.field133 = true;
    return field133;
  }
  const std::set<std::map< ::cpp2::Struct11, int16_t>>& get_field134() const&;
  std::set<std::map< ::cpp2::Struct11, int16_t>> get_field134() &&;

  template <typename T_Struct13_field134_struct_setter>
  std::set<std::map< ::cpp2::Struct11, int16_t>>& set_field134(T_Struct13_field134_struct_setter&& field134_) {
    field134 = std::forward<T_Struct13_field134_struct_setter>(field134_);
    __isset.field134 = true;
    return field134;
  }

  const std::string& get_field135() const& {
    return field135;
  }

  std::string get_field135() && {
    return std::move(field135);
  }

  template <typename T_Struct13_field135_struct_setter>
  std::string& set_field135(T_Struct13_field135_struct_setter&& field135_) {
    field135 = std::forward<T_Struct13_field135_struct_setter>(field135_);
    __isset.field135 = true;
    return field135;
  }
  const std::set<std::string>& get_field136() const&;
  std::set<std::string> get_field136() &&;

  template <typename T_Struct13_field136_struct_setter>
  std::set<std::string>& set_field136(T_Struct13_field136_struct_setter&& field136_) {
    field136 = std::forward<T_Struct13_field136_struct_setter>(field136_);
    __isset.field136 = true;
    return field136;
  }

  float get_field137() const {
    return field137;
  }

  float& set_field137(float field137_) {
    field137 = field137_;
    __isset.field137 = true;
    return field137;
  }

  double get_field138() const {
    return field138;
  }

  double& set_field138(double field138_) {
    field138 = field138_;
    __isset.field138 = true;
    return field138;
  }
  const std::set<std::set<double>>& get_field139() const&;
  std::set<std::set<double>> get_field139() &&;

  template <typename T_Struct13_field139_struct_setter>
  std::set<std::set<double>>& set_field139(T_Struct13_field139_struct_setter&& field139_) {
    field139 = std::forward<T_Struct13_field139_struct_setter>(field139_);
    __isset.field139 = true;
    return field139;
  }

  int64_t get_field140() const {
    return field140;
  }

  int64_t& set_field140(int64_t field140_) {
    field140 = field140_;
    __isset.field140 = true;
    return field140;
  }
  const std::map<bool, float>& get_field141() const&;
  std::map<bool, float> get_field141() &&;

  template <typename T_Struct13_field141_struct_setter>
  std::map<bool, float>& set_field141(T_Struct13_field141_struct_setter&& field141_) {
    field141 = std::forward<T_Struct13_field141_struct_setter>(field141_);
    __isset.field141 = true;
    return field141;
  }
  const std::set<std::vector<double>>& get_field142() const&;
  std::set<std::vector<double>> get_field142() &&;

  template <typename T_Struct13_field142_struct_setter>
  std::set<std::vector<double>>& set_field142(T_Struct13_field142_struct_setter&& field142_) {
    field142 = std::forward<T_Struct13_field142_struct_setter>(field142_);
    __isset.field142 = true;
    return field142;
  }
  const  ::cpp2::Struct0& get_field143() const&;
   ::cpp2::Struct0 get_field143() &&;

  template <typename T_Struct13_field143_struct_setter>
   ::cpp2::Struct0& set_field143(T_Struct13_field143_struct_setter&& field143_) {
    field143 = std::forward<T_Struct13_field143_struct_setter>(field143_);
    __isset.field143 = true;
    return field143;
  }

  int8_t get_field144() const {
    return field144;
  }

  int8_t& set_field144(int8_t field144_) {
    field144 = field144_;
    __isset.field144 = true;
    return field144;
  }
  const std::set<int64_t>& get_field145() const&;
  std::set<int64_t> get_field145() &&;

  template <typename T_Struct13_field145_struct_setter>
  std::set<int64_t>& set_field145(T_Struct13_field145_struct_setter&& field145_) {
    field145 = std::forward<T_Struct13_field145_struct_setter>(field145_);
    __isset.field145 = true;
    return field145;
  }

  int32_t get_field146() const {
    return field146;
  }

  int32_t& set_field146(int32_t field146_) {
    field146 = field146_;
    __isset.field146 = true;
    return field146;
  }

  double get_field147() const {
    return field147;
  }

  double& set_field147(double field147_) {
    field147 = field147_;
    __isset.field147 = true;
    return field147;
  }
  const  ::cpp2::Struct4& get_field148() const&;
   ::cpp2::Struct4 get_field148() &&;

  template <typename T_Struct13_field148_struct_setter>
   ::cpp2::Struct4& set_field148(T_Struct13_field148_struct_setter&& field148_) {
    field148 = std::forward<T_Struct13_field148_struct_setter>(field148_);
    __isset.field148 = true;
    return field148;
  }
  const std::vector<int8_t>& get_field149() const&;
  std::vector<int8_t> get_field149() &&;

  template <typename T_Struct13_field149_struct_setter>
  std::vector<int8_t>& set_field149(T_Struct13_field149_struct_setter&& field149_) {
    field149 = std::forward<T_Struct13_field149_struct_setter>(field149_);
    __isset.field149 = true;
    return field149;
  }
  const std::vector<double>& get_field150() const&;
  std::vector<double> get_field150() &&;

  template <typename T_Struct13_field150_struct_setter>
  std::vector<double>& set_field150(T_Struct13_field150_struct_setter&& field150_) {
    field150 = std::forward<T_Struct13_field150_struct_setter>(field150_);
    __isset.field150 = true;
    return field150;
  }

  double get_field151() const {
    return field151;
  }

  double& set_field151(double field151_) {
    field151 = field151_;
    __isset.field151 = true;
    return field151;
  }
  const std::vector<std::set<int32_t>>& get_field152() const&;
  std::vector<std::set<int32_t>> get_field152() &&;

  template <typename T_Struct13_field152_struct_setter>
  std::vector<std::set<int32_t>>& set_field152(T_Struct13_field152_struct_setter&& field152_) {
    field152 = std::forward<T_Struct13_field152_struct_setter>(field152_);
    __isset.field152 = true;
    return field152;
  }

  const std::string& get_field153() const& {
    return field153;
  }

  std::string get_field153() && {
    return std::move(field153);
  }

  template <typename T_Struct13_field153_struct_setter>
  std::string& set_field153(T_Struct13_field153_struct_setter&& field153_) {
    field153 = std::forward<T_Struct13_field153_struct_setter>(field153_);
    __isset.field153 = true;
    return field153;
  }
  const std::set<bool>& get_field154() const&;
  std::set<bool> get_field154() &&;

  template <typename T_Struct13_field154_struct_setter>
  std::set<bool>& set_field154(T_Struct13_field154_struct_setter&& field154_) {
    field154 = std::forward<T_Struct13_field154_struct_setter>(field154_);
    __isset.field154 = true;
    return field154;
  }
  const std::map<int32_t, std::set<bool>>& get_field155() const&;
  std::map<int32_t, std::set<bool>> get_field155() &&;

  template <typename T_Struct13_field155_struct_setter>
  std::map<int32_t, std::set<bool>>& set_field155(T_Struct13_field155_struct_setter&& field155_) {
    field155 = std::forward<T_Struct13_field155_struct_setter>(field155_);
    __isset.field155 = true;
    return field155;
  }

  int64_t get_field156() const {
    return field156;
  }

  int64_t& set_field156(int64_t field156_) {
    field156 = field156_;
    __isset.field156 = true;
    return field156;
  }

  double get_field157() const {
    return field157;
  }

  double& set_field157(double field157_) {
    field157 = field157_;
    __isset.field157 = true;
    return field157;
  }
  const std::vector<std::vector<int8_t>>& get_field158() const&;
  std::vector<std::vector<int8_t>> get_field158() &&;

  template <typename T_Struct13_field158_struct_setter>
  std::vector<std::vector<int8_t>>& set_field158(T_Struct13_field158_struct_setter&& field158_) {
    field158 = std::forward<T_Struct13_field158_struct_setter>(field158_);
    __isset.field158 = true;
    return field158;
  }

  bool get_field159() const {
    return field159;
  }

  bool& set_field159(bool field159_) {
    field159 = field159_;
    __isset.field159 = true;
    return field159;
  }

  double get_field160() const {
    return field160;
  }

  double& set_field160(double field160_) {
    field160 = field160_;
    __isset.field160 = true;
    return field160;
  }

  double get_field161() const {
    return field161;
  }

  double& set_field161(double field161_) {
    field161 = field161_;
    __isset.field161 = true;
    return field161;
  }
  const std::set<double>& get_field162() const&;
  std::set<double> get_field162() &&;

  template <typename T_Struct13_field162_struct_setter>
  std::set<double>& set_field162(T_Struct13_field162_struct_setter&& field162_) {
    field162 = std::forward<T_Struct13_field162_struct_setter>(field162_);
    __isset.field162 = true;
    return field162;
  }

  const std::string& get_field163() const& {
    return field163;
  }

  std::string get_field163() && {
    return std::move(field163);
  }

  template <typename T_Struct13_field163_struct_setter>
  std::string& set_field163(T_Struct13_field163_struct_setter&& field163_) {
    field163 = std::forward<T_Struct13_field163_struct_setter>(field163_);
    __isset.field163 = true;
    return field163;
  }

  int64_t get_field164() const {
    return field164;
  }

  int64_t& set_field164(int64_t field164_) {
    field164 = field164_;
    __isset.field164 = true;
    return field164;
  }

  const std::string& get_field165() const& {
    return field165;
  }

  std::string get_field165() && {
    return std::move(field165);
  }

  template <typename T_Struct13_field165_struct_setter>
  std::string& set_field165(T_Struct13_field165_struct_setter&& field165_) {
    field165 = std::forward<T_Struct13_field165_struct_setter>(field165_);
    __isset.field165 = true;
    return field165;
  }
  const std::set<float>& get_field166() const&;
  std::set<float> get_field166() &&;

  template <typename T_Struct13_field166_struct_setter>
  std::set<float>& set_field166(T_Struct13_field166_struct_setter&& field166_) {
    field166 = std::forward<T_Struct13_field166_struct_setter>(field166_);
    __isset.field166 = true;
    return field166;
  }
  const std::vector<int32_t>& get_field167() const&;
  std::vector<int32_t> get_field167() &&;

  template <typename T_Struct13_field167_struct_setter>
  std::vector<int32_t>& set_field167(T_Struct13_field167_struct_setter&& field167_) {
    field167 = std::forward<T_Struct13_field167_struct_setter>(field167_);
    __isset.field167 = true;
    return field167;
  }
  const std::map<bool,  ::cpp2::Struct1>& get_field168() const&;
  std::map<bool,  ::cpp2::Struct1> get_field168() &&;

  template <typename T_Struct13_field168_struct_setter>
  std::map<bool,  ::cpp2::Struct1>& set_field168(T_Struct13_field168_struct_setter&& field168_) {
    field168 = std::forward<T_Struct13_field168_struct_setter>(field168_);
    __isset.field168 = true;
    return field168;
  }

  int8_t get_field169() const {
    return field169;
  }

  int8_t& set_field169(int8_t field169_) {
    field169 = field169_;
    __isset.field169 = true;
    return field169;
  }

  const std::string& get_field170() const& {
    return field170;
  }

  std::string get_field170() && {
    return std::move(field170);
  }

  template <typename T_Struct13_field170_struct_setter>
  std::string& set_field170(T_Struct13_field170_struct_setter&& field170_) {
    field170 = std::forward<T_Struct13_field170_struct_setter>(field170_);
    __isset.field170 = true;
    return field170;
  }

  const std::string& get_field171() const& {
    return field171;
  }

  std::string get_field171() && {
    return std::move(field171);
  }

  template <typename T_Struct13_field171_struct_setter>
  std::string& set_field171(T_Struct13_field171_struct_setter&& field171_) {
    field171 = std::forward<T_Struct13_field171_struct_setter>(field171_);
    __isset.field171 = true;
    return field171;
  }
  const std::set<bool>& get_field172() const&;
  std::set<bool> get_field172() &&;

  template <typename T_Struct13_field172_struct_setter>
  std::set<bool>& set_field172(T_Struct13_field172_struct_setter&& field172_) {
    field172 = std::forward<T_Struct13_field172_struct_setter>(field172_);
    __isset.field172 = true;
    return field172;
  }

  bool get_field173() const {
    return field173;
  }

  bool& set_field173(bool field173_) {
    field173 = field173_;
    __isset.field173 = true;
    return field173;
  }
  const std::map<int16_t, std::vector<int64_t>>& get_field174() const&;
  std::map<int16_t, std::vector<int64_t>> get_field174() &&;

  template <typename T_Struct13_field174_struct_setter>
  std::map<int16_t, std::vector<int64_t>>& set_field174(T_Struct13_field174_struct_setter&& field174_) {
    field174 = std::forward<T_Struct13_field174_struct_setter>(field174_);
    __isset.field174 = true;
    return field174;
  }

  int32_t get_field175() const {
    return field175;
  }

  int32_t& set_field175(int32_t field175_) {
    field175 = field175_;
    __isset.field175 = true;
    return field175;
  }

  float get_field176() const {
    return field176;
  }

  float& set_field176(float field176_) {
    field176 = field176_;
    __isset.field176 = true;
    return field176;
  }
  const std::vector<float>& get_field177() const&;
  std::vector<float> get_field177() &&;

  template <typename T_Struct13_field177_struct_setter>
  std::vector<float>& set_field177(T_Struct13_field177_struct_setter&& field177_) {
    field177 = std::forward<T_Struct13_field177_struct_setter>(field177_);
    __isset.field177 = true;
    return field177;
  }

  float get_field178() const {
    return field178;
  }

  float& set_field178(float field178_) {
    field178 = field178_;
    __isset.field178 = true;
    return field178;
  }

  const std::string& get_field179() const& {
    return field179;
  }

  std::string get_field179() && {
    return std::move(field179);
  }

  template <typename T_Struct13_field179_struct_setter>
  std::string& set_field179(T_Struct13_field179_struct_setter&& field179_) {
    field179 = std::forward<T_Struct13_field179_struct_setter>(field179_);
    __isset.field179 = true;
    return field179;
  }
  const std::set<std::set<float>>& get_field180() const&;
  std::set<std::set<float>> get_field180() &&;

  template <typename T_Struct13_field180_struct_setter>
  std::set<std::set<float>>& set_field180(T_Struct13_field180_struct_setter&& field180_) {
    field180 = std::forward<T_Struct13_field180_struct_setter>(field180_);
    __isset.field180 = true;
    return field180;
  }
  const std::set<std::vector<float>>& get_field181() const&;
  std::set<std::vector<float>> get_field181() &&;

  template <typename T_Struct13_field181_struct_setter>
  std::set<std::vector<float>>& set_field181(T_Struct13_field181_struct_setter&& field181_) {
    field181 = std::forward<T_Struct13_field181_struct_setter>(field181_);
    __isset.field181 = true;
    return field181;
  }

  const std::string& get_field182() const& {
    return field182;
  }

  std::string get_field182() && {
    return std::move(field182);
  }

  template <typename T_Struct13_field182_struct_setter>
  std::string& set_field182(T_Struct13_field182_struct_setter&& field182_) {
    field182 = std::forward<T_Struct13_field182_struct_setter>(field182_);
    __isset.field182 = true;
    return field182;
  }

  float get_field183() const {
    return field183;
  }

  float& set_field183(float field183_) {
    field183 = field183_;
    __isset.field183 = true;
    return field183;
  }
  const  ::cpp2::Struct6& get_field184() const&;
   ::cpp2::Struct6 get_field184() &&;

  template <typename T_Struct13_field184_struct_setter>
   ::cpp2::Struct6& set_field184(T_Struct13_field184_struct_setter&& field184_) {
    field184 = std::forward<T_Struct13_field184_struct_setter>(field184_);
    __isset.field184 = true;
    return field184;
  }
  const std::set<int64_t>& get_field185() const&;
  std::set<int64_t> get_field185() &&;

  template <typename T_Struct13_field185_struct_setter>
  std::set<int64_t>& set_field185(T_Struct13_field185_struct_setter&& field185_) {
    field185 = std::forward<T_Struct13_field185_struct_setter>(field185_);
    __isset.field185 = true;
    return field185;
  }

  int32_t get_field186() const {
    return field186;
  }

  int32_t& set_field186(int32_t field186_) {
    field186 = field186_;
    __isset.field186 = true;
    return field186;
  }

  double get_field187() const {
    return field187;
  }

  double& set_field187(double field187_) {
    field187 = field187_;
    __isset.field187 = true;
    return field187;
  }
  const std::vector<std::string>& get_field188() const&;
  std::vector<std::string> get_field188() &&;

  template <typename T_Struct13_field188_struct_setter>
  std::vector<std::string>& set_field188(T_Struct13_field188_struct_setter&& field188_) {
    field188 = std::forward<T_Struct13_field188_struct_setter>(field188_);
    __isset.field188 = true;
    return field188;
  }

  float get_field189() const {
    return field189;
  }

  float& set_field189(float field189_) {
    field189 = field189_;
    __isset.field189 = true;
    return field189;
  }

  double get_field190() const {
    return field190;
  }

  double& set_field190(double field190_) {
    field190 = field190_;
    __isset.field190 = true;
    return field190;
  }
  const  ::cpp2::Struct0& get_field191() const&;
   ::cpp2::Struct0 get_field191() &&;

  template <typename T_Struct13_field191_struct_setter>
   ::cpp2::Struct0& set_field191(T_Struct13_field191_struct_setter&& field191_) {
    field191 = std::forward<T_Struct13_field191_struct_setter>(field191_);
    __isset.field191 = true;
    return field191;
  }
  const std::vector<int8_t>& get_field192() const&;
  std::vector<int8_t> get_field192() &&;

  template <typename T_Struct13_field192_struct_setter>
  std::vector<int8_t>& set_field192(T_Struct13_field192_struct_setter&& field192_) {
    field192 = std::forward<T_Struct13_field192_struct_setter>(field192_);
    __isset.field192 = true;
    return field192;
  }

  const std::string& get_field193() const& {
    return field193;
  }

  std::string get_field193() && {
    return std::move(field193);
  }

  template <typename T_Struct13_field193_struct_setter>
  std::string& set_field193(T_Struct13_field193_struct_setter&& field193_) {
    field193 = std::forward<T_Struct13_field193_struct_setter>(field193_);
    __isset.field193 = true;
    return field193;
  }

  bool get_field194() const {
    return field194;
  }

  bool& set_field194(bool field194_) {
    field194 = field194_;
    __isset.field194 = true;
    return field194;
  }
  const std::vector<int8_t>& get_field195() const&;
  std::vector<int8_t> get_field195() &&;

  template <typename T_Struct13_field195_struct_setter>
  std::vector<int8_t>& set_field195(T_Struct13_field195_struct_setter&& field195_) {
    field195 = std::forward<T_Struct13_field195_struct_setter>(field195_);
    __isset.field195 = true;
    return field195;
  }

  float get_field196() const {
    return field196;
  }

  float& set_field196(float field196_) {
    field196 = field196_;
    __isset.field196 = true;
    return field196;
  }
  const  ::cpp2::Struct2& get_field197() const&;
   ::cpp2::Struct2 get_field197() &&;

  template <typename T_Struct13_field197_struct_setter>
   ::cpp2::Struct2& set_field197(T_Struct13_field197_struct_setter&& field197_) {
    field197 = std::forward<T_Struct13_field197_struct_setter>(field197_);
    __isset.field197 = true;
    return field197;
  }
  const std::vector< ::cpp2::Struct3>& get_field198() const&;
  std::vector< ::cpp2::Struct3> get_field198() &&;

  template <typename T_Struct13_field198_struct_setter>
  std::vector< ::cpp2::Struct3>& set_field198(T_Struct13_field198_struct_setter&& field198_) {
    field198 = std::forward<T_Struct13_field198_struct_setter>(field198_);
    __isset.field198 = true;
    return field198;
  }
  const std::map< ::cpp2::Struct5, std::string>& get_field199() const&;
  std::map< ::cpp2::Struct5, std::string> get_field199() &&;

  template <typename T_Struct13_field199_struct_setter>
  std::map< ::cpp2::Struct5, std::string>& set_field199(T_Struct13_field199_struct_setter&& field199_) {
    field199 = std::forward<T_Struct13_field199_struct_setter>(field199_);
    __isset.field199 = true;
    return field199;
  }
  const std::vector<double>& get_field200() const&;
  std::vector<double> get_field200() &&;

  template <typename T_Struct13_field200_struct_setter>
  std::vector<double>& set_field200(T_Struct13_field200_struct_setter&& field200_) {
    field200 = std::forward<T_Struct13_field200_struct_setter>(field200_);
    __isset.field200 = true;
    return field200;
  }
  const std::vector<std::string>& get_field201() const&;
  std::vector<std::string> get_field201() &&;

  template <typename T_Struct13_field201_struct_setter>
  std::vector<std::string>& set_field201(T_Struct13_field201_struct_setter&& field201_) {
    field201 = std::forward<T_Struct13_field201_struct_setter>(field201_);
    __isset.field201 = true;
    return field201;
  }

  float get_field202() const {
    return field202;
  }

  float& set_field202(float field202_) {
    field202 = field202_;
    __isset.field202 = true;
    return field202;
  }

  int16_t get_field203() const {
    return field203;
  }

  int16_t& set_field203(int16_t field203_) {
    field203 = field203_;
    __isset.field203 = true;
    return field203;
  }
  const std::map<int16_t, std::set<float>>& get_field204() const&;
  std::map<int16_t, std::set<float>> get_field204() &&;

  template <typename T_Struct13_field204_struct_setter>
  std::map<int16_t, std::set<float>>& set_field204(T_Struct13_field204_struct_setter&& field204_) {
    field204 = std::forward<T_Struct13_field204_struct_setter>(field204_);
    __isset.field204 = true;
    return field204;
  }
  const  ::cpp2::Struct7& get_field205() const&;
   ::cpp2::Struct7 get_field205() &&;

  template <typename T_Struct13_field205_struct_setter>
   ::cpp2::Struct7& set_field205(T_Struct13_field205_struct_setter&& field205_) {
    field205 = std::forward<T_Struct13_field205_struct_setter>(field205_);
    __isset.field205 = true;
    return field205;
  }

  double get_field206() const {
    return field206;
  }

  double& set_field206(double field206_) {
    field206 = field206_;
    __isset.field206 = true;
    return field206;
  }
  const std::map<std::set<int8_t>, std::vector<float>>& get_field207() const&;
  std::map<std::set<int8_t>, std::vector<float>> get_field207() &&;

  template <typename T_Struct13_field207_struct_setter>
  std::map<std::set<int8_t>, std::vector<float>>& set_field207(T_Struct13_field207_struct_setter&& field207_) {
    field207 = std::forward<T_Struct13_field207_struct_setter>(field207_);
    __isset.field207 = true;
    return field207;
  }
  const std::set<int16_t>& get_field208() const&;
  std::set<int16_t> get_field208() &&;

  template <typename T_Struct13_field208_struct_setter>
  std::set<int16_t>& set_field208(T_Struct13_field208_struct_setter&& field208_) {
    field208 = std::forward<T_Struct13_field208_struct_setter>(field208_);
    __isset.field208 = true;
    return field208;
  }
  const std::set<std::string>& get_field209() const&;
  std::set<std::string> get_field209() &&;

  template <typename T_Struct13_field209_struct_setter>
  std::set<std::string>& set_field209(T_Struct13_field209_struct_setter&& field209_) {
    field209 = std::forward<T_Struct13_field209_struct_setter>(field209_);
    __isset.field209 = true;
    return field209;
  }
  const  ::cpp2::Struct7& get_field210() const&;
   ::cpp2::Struct7 get_field210() &&;

  template <typename T_Struct13_field210_struct_setter>
   ::cpp2::Struct7& set_field210(T_Struct13_field210_struct_setter&& field210_) {
    field210 = std::forward<T_Struct13_field210_struct_setter>(field210_);
    __isset.field210 = true;
    return field210;
  }
  const std::vector<float>& get_field211() const&;
  std::vector<float> get_field211() &&;

  template <typename T_Struct13_field211_struct_setter>
  std::vector<float>& set_field211(T_Struct13_field211_struct_setter&& field211_) {
    field211 = std::forward<T_Struct13_field211_struct_setter>(field211_);
    __isset.field211 = true;
    return field211;
  }
  const std::vector<int8_t>& get_field212() const&;
  std::vector<int8_t> get_field212() &&;

  template <typename T_Struct13_field212_struct_setter>
  std::vector<int8_t>& set_field212(T_Struct13_field212_struct_setter&& field212_) {
    field212 = std::forward<T_Struct13_field212_struct_setter>(field212_);
    __isset.field212 = true;
    return field212;
  }
  const std::set<std::set<std::set<int64_t>>>& get_field213() const&;
  std::set<std::set<std::set<int64_t>>> get_field213() &&;

  template <typename T_Struct13_field213_struct_setter>
  std::set<std::set<std::set<int64_t>>>& set_field213(T_Struct13_field213_struct_setter&& field213_) {
    field213 = std::forward<T_Struct13_field213_struct_setter>(field213_);
    __isset.field213 = true;
    return field213;
  }
  const std::vector<int32_t>& get_field214() const&;
  std::vector<int32_t> get_field214() &&;

  template <typename T_Struct13_field214_struct_setter>
  std::vector<int32_t>& set_field214(T_Struct13_field214_struct_setter&& field214_) {
    field214 = std::forward<T_Struct13_field214_struct_setter>(field214_);
    __isset.field214 = true;
    return field214;
  }

  const std::string& get_field215() const& {
    return field215;
  }

  std::string get_field215() && {
    return std::move(field215);
  }

  template <typename T_Struct13_field215_struct_setter>
  std::string& set_field215(T_Struct13_field215_struct_setter&& field215_) {
    field215 = std::forward<T_Struct13_field215_struct_setter>(field215_);
    __isset.field215 = true;
    return field215;
  }

  int32_t get_field216() const {
    return field216;
  }

  int32_t& set_field216(int32_t field216_) {
    field216 = field216_;
    __isset.field216 = true;
    return field216;
  }
  const std::set<std::map<std::string, bool>>& get_field217() const&;
  std::set<std::map<std::string, bool>> get_field217() &&;

  template <typename T_Struct13_field217_struct_setter>
  std::set<std::map<std::string, bool>>& set_field217(T_Struct13_field217_struct_setter&& field217_) {
    field217 = std::forward<T_Struct13_field217_struct_setter>(field217_);
    __isset.field217 = true;
    return field217;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct13& a, Struct13& b);
extern template uint32_t Struct13::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct13::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct13::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct13::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct13::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct13::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct13::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct13::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct13>::clear( ::cpp2::Struct13* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct13>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct13>::write(Protocol* proto,  ::cpp2::Struct13 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct13>::read(Protocol* proto,  ::cpp2::Struct13* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct13>::serializedSize(Protocol const* proto,  ::cpp2::Struct13 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct13>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct13 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct14 : private apache::thrift::detail::st::ComparisonOperators<Struct14> {
 public:

  Struct14() :
      field1(0),
      field3(0),
      field4(0),
      field5(0),
      field8(0),
      field11(0),
      field12(0),
      field13(0),
      field14(0),
      field15(0),
      field16(0),
      field17(0),
      field18(0),
      field20(0),
      field21(0),
      field22(0),
      field29(0),
      field31(0),
      field36(0),
      field39(0),
      field45(0),
      field46(0),
      field51(0),
      field56(0),
      field57(0),
      field61(0),
      field62(0),
      field67(0),
      field68(0),
      field76(0),
      field78(0),
      field80(0),
      field81(0),
      field82(0),
      field85(0),
      field86(0),
      field90(0),
      field91(0),
      field93(0),
      field94(0),
      field100(0),
      field103(0),
      field106(0),
      field108(0),
      field115(0),
      field116(0),
      field124(0),
      field126(0),
      field130(0),
      field134(0),
      field136(0),
      field139(0),
      field142(0),
      field145(0),
      field146(0),
      field150(0),
      field151(0),
      field153(0),
      field159(0),
      field162(0),
      field165(0),
      field173(0),
      field181(0),
      field183(0),
      field185(0),
      field187(0),
      field189(0),
      field190(0),
      field197(0) {}
  // FragileConstructor for use in initialization lists only

  Struct14(apache::thrift::FragileConstructor, int64_t field1__arg,  ::cpp2::Struct0 field2__arg, int16_t field3__arg, int8_t field4__arg, double field5__arg, std::string field6__arg, std::set<int16_t> field7__arg, double field8__arg, std::string field9__arg,  ::cpp2::Struct1 field10__arg, float field11__arg, int32_t field12__arg, float field13__arg, double field14__arg, bool field15__arg, int64_t field16__arg, int16_t field17__arg, int64_t field18__arg, std::string field19__arg, bool field20__arg, int16_t field21__arg, float field22__arg, std::map<int64_t, std::map<std::string, float>> field23__arg, std::string field24__arg,  ::cpp2::Struct1 field25__arg, std::map<int16_t, double> field26__arg, std::string field27__arg, std::map<std::map<std::vector<std::string>, std::set<std::string>>, std::string> field28__arg, float field29__arg, std::string field30__arg, double field31__arg, std::vector<std::set<bool>> field32__arg, std::vector<int16_t> field33__arg, std::string field34__arg,  ::cpp2::Struct0 field35__arg, int32_t field36__arg,  ::cpp2::Struct1 field37__arg, std::string field38__arg, int32_t field39__arg,  ::cpp2::Struct6 field40__arg,  ::cpp2::Struct1 field41__arg, std::map<int64_t, int16_t> field42__arg, std::string field43__arg, std::set<std::map<std::map<int64_t,  ::cpp2::Struct8>, int32_t>> field44__arg, int32_t field45__arg, int8_t field46__arg,  ::cpp2::Struct5 field47__arg, std::set<std::string> field48__arg,  ::cpp2::Struct3 field49__arg, std::map<float,  ::cpp2::Struct3> field50__arg, int32_t field51__arg, std::vector<int16_t> field52__arg, std::map<std::string, std::string> field53__arg, std::map< ::cpp2::Struct2, int32_t> field54__arg,  ::cpp2::Struct2 field55__arg, double field56__arg, bool field57__arg, std::vector<int32_t> field58__arg,  ::cpp2::Struct5 field59__arg, std::string field60__arg, bool field61__arg, int16_t field62__arg, std::vector<int8_t> field63__arg, std::string field64__arg,  ::cpp2::Struct1 field65__arg,  ::cpp2::Struct4 field66__arg, int8_t field67__arg, int64_t field68__arg, std::set<int8_t> field69__arg, std::vector<bool> field70__arg, std::string field71__arg, std::vector<int16_t> field72__arg, std::set< ::cpp2::Struct5> field73__arg,  ::cpp2::Struct5 field74__arg, std::map<int16_t, int8_t> field75__arg, bool field76__arg, std::set<int8_t> field77__arg, int8_t field78__arg, std::string field79__arg, double field80__arg, bool field81__arg, int64_t field82__arg, std::set<std::string> field83__arg,  ::cpp2::Struct5 field84__arg, bool field85__arg, float field86__arg, std::set<double> field87__arg, std::map<double, float> field88__arg, std::map<std::set<std::string>, std::string> field89__arg, int64_t field90__arg, int16_t field91__arg, std::map<std::set<double>, int8_t> field92__arg, bool field93__arg, int64_t field94__arg, std::vector<int64_t> field95__arg, std::map< ::cpp2::Struct6, int64_t> field96__arg, std::string field97__arg,  ::cpp2::Struct0 field98__arg, std::set<float> field99__arg, int64_t field100__arg, std::vector<bool> field101__arg, std::vector<int8_t> field102__arg, int64_t field103__arg, std::map<int8_t, std::set<float>> field104__arg,  ::cpp2::Struct6 field105__arg, int8_t field106__arg, std::set<float> field107__arg, float field108__arg, std::string field109__arg, std::vector<int8_t> field110__arg, std::set<std::map<float, int16_t>> field111__arg, std::vector<float> field112__arg, std::vector<int8_t> field113__arg,  ::cpp2::Struct4 field114__arg, bool field115__arg, int16_t field116__arg, std::map<float, float> field117__arg, std::set<int8_t> field118__arg, std::set<std::string> field119__arg, std::set<int8_t> field120__arg, std::map< ::cpp2::Struct0, int32_t> field121__arg, std::set<int8_t> field122__arg,  ::cpp2::Struct10 field123__arg, float field124__arg, std::string field125__arg, bool field126__arg, std::vector<std::map<std::string, bool>> field127__arg, std::vector<double> field128__arg, std::vector<int8_t> field129__arg, int8_t field130__arg, std::string field131__arg, std::map< ::cpp2::Struct2, float> field132__arg, std::vector<double> field133__arg, int64_t field134__arg, std::string field135__arg, float field136__arg, std::set<bool> field137__arg, std::map<bool, int32_t> field138__arg, double field139__arg, std::string field140__arg, std::string field141__arg, int8_t field142__arg, std::set<std::string> field143__arg, std::map<float, int64_t> field144__arg, int32_t field145__arg, int16_t field146__arg, std::set<std::vector<int32_t>> field147__arg, std::map<float, std::vector<int32_t>> field148__arg,  ::cpp2::Struct7 field149__arg, int8_t field150__arg, bool field151__arg, std::map<int16_t, int32_t> field152__arg, int8_t field153__arg, std::string field154__arg, std::string field155__arg,  ::cpp2::Struct2 field156__arg, std::vector<std::string> field157__arg,  ::cpp2::Struct6 field158__arg, bool field159__arg, std::vector<int16_t> field160__arg, std::vector<int64_t> field161__arg, int64_t field162__arg, std::string field163__arg, std::string field164__arg, int64_t field165__arg, std::vector<std::string> field166__arg,  ::cpp2::Struct5 field167__arg, std::map< ::cpp2::Struct3, int64_t> field168__arg, std::map<std::string, bool> field169__arg, std::vector<double> field170__arg, std::set<int16_t> field171__arg, std::vector<std::string> field172__arg, int32_t field173__arg, std::set<int32_t> field174__arg, std::map<int8_t, std::string> field175__arg, std::vector<std::string> field176__arg,  ::cpp2::Struct4 field177__arg,  ::cpp2::Struct10 field178__arg, std::set<int64_t> field179__arg, std::vector<std::string> field180__arg, int8_t field181__arg,  ::cpp2::Struct5 field182__arg, int8_t field183__arg, std::string field184__arg, double field185__arg, std::set<float> field186__arg, int32_t field187__arg,  ::cpp2::Struct0 field188__arg, int16_t field189__arg, float field190__arg,  ::cpp2::Struct2 field191__arg, std::map<std::vector<int16_t>, int8_t> field192__arg, std::string field193__arg, std::string field194__arg,  ::cpp2::Struct2 field195__arg, std::map<bool,  ::cpp2::Struct3> field196__arg, bool field197__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)),
      field97(std::move(field97__arg)),
      field98(std::move(field98__arg)),
      field99(std::move(field99__arg)),
      field100(std::move(field100__arg)),
      field101(std::move(field101__arg)),
      field102(std::move(field102__arg)),
      field103(std::move(field103__arg)),
      field104(std::move(field104__arg)),
      field105(std::move(field105__arg)),
      field106(std::move(field106__arg)),
      field107(std::move(field107__arg)),
      field108(std::move(field108__arg)),
      field109(std::move(field109__arg)),
      field110(std::move(field110__arg)),
      field111(std::move(field111__arg)),
      field112(std::move(field112__arg)),
      field113(std::move(field113__arg)),
      field114(std::move(field114__arg)),
      field115(std::move(field115__arg)),
      field116(std::move(field116__arg)),
      field117(std::move(field117__arg)),
      field118(std::move(field118__arg)),
      field119(std::move(field119__arg)),
      field120(std::move(field120__arg)),
      field121(std::move(field121__arg)),
      field122(std::move(field122__arg)),
      field123(std::move(field123__arg)),
      field124(std::move(field124__arg)),
      field125(std::move(field125__arg)),
      field126(std::move(field126__arg)),
      field127(std::move(field127__arg)),
      field128(std::move(field128__arg)),
      field129(std::move(field129__arg)),
      field130(std::move(field130__arg)),
      field131(std::move(field131__arg)),
      field132(std::move(field132__arg)),
      field133(std::move(field133__arg)),
      field134(std::move(field134__arg)),
      field135(std::move(field135__arg)),
      field136(std::move(field136__arg)),
      field137(std::move(field137__arg)),
      field138(std::move(field138__arg)),
      field139(std::move(field139__arg)),
      field140(std::move(field140__arg)),
      field141(std::move(field141__arg)),
      field142(std::move(field142__arg)),
      field143(std::move(field143__arg)),
      field144(std::move(field144__arg)),
      field145(std::move(field145__arg)),
      field146(std::move(field146__arg)),
      field147(std::move(field147__arg)),
      field148(std::move(field148__arg)),
      field149(std::move(field149__arg)),
      field150(std::move(field150__arg)),
      field151(std::move(field151__arg)),
      field152(std::move(field152__arg)),
      field153(std::move(field153__arg)),
      field154(std::move(field154__arg)),
      field155(std::move(field155__arg)),
      field156(std::move(field156__arg)),
      field157(std::move(field157__arg)),
      field158(std::move(field158__arg)),
      field159(std::move(field159__arg)),
      field160(std::move(field160__arg)),
      field161(std::move(field161__arg)),
      field162(std::move(field162__arg)),
      field163(std::move(field163__arg)),
      field164(std::move(field164__arg)),
      field165(std::move(field165__arg)),
      field166(std::move(field166__arg)),
      field167(std::move(field167__arg)),
      field168(std::move(field168__arg)),
      field169(std::move(field169__arg)),
      field170(std::move(field170__arg)),
      field171(std::move(field171__arg)),
      field172(std::move(field172__arg)),
      field173(std::move(field173__arg)),
      field174(std::move(field174__arg)),
      field175(std::move(field175__arg)),
      field176(std::move(field176__arg)),
      field177(std::move(field177__arg)),
      field178(std::move(field178__arg)),
      field179(std::move(field179__arg)),
      field180(std::move(field180__arg)),
      field181(std::move(field181__arg)),
      field182(std::move(field182__arg)),
      field183(std::move(field183__arg)),
      field184(std::move(field184__arg)),
      field185(std::move(field185__arg)),
      field186(std::move(field186__arg)),
      field187(std::move(field187__arg)),
      field188(std::move(field188__arg)),
      field189(std::move(field189__arg)),
      field190(std::move(field190__arg)),
      field191(std::move(field191__arg)),
      field192(std::move(field192__arg)),
      field193(std::move(field193__arg)),
      field194(std::move(field194__arg)),
      field195(std::move(field195__arg)),
      field196(std::move(field196__arg)),
      field197(std::move(field197__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
    __isset.field97 = true;
    __isset.field98 = true;
    __isset.field99 = true;
    __isset.field100 = true;
    __isset.field101 = true;
    __isset.field102 = true;
    __isset.field103 = true;
    __isset.field104 = true;
    __isset.field105 = true;
    __isset.field106 = true;
    __isset.field107 = true;
    __isset.field108 = true;
    __isset.field109 = true;
    __isset.field110 = true;
    __isset.field111 = true;
    __isset.field112 = true;
    __isset.field113 = true;
    __isset.field114 = true;
    __isset.field115 = true;
    __isset.field116 = true;
    __isset.field117 = true;
    __isset.field118 = true;
    __isset.field119 = true;
    __isset.field120 = true;
    __isset.field121 = true;
    __isset.field122 = true;
    __isset.field123 = true;
    __isset.field124 = true;
    __isset.field125 = true;
    __isset.field126 = true;
    __isset.field127 = true;
    __isset.field128 = true;
    __isset.field129 = true;
    __isset.field130 = true;
    __isset.field131 = true;
    __isset.field132 = true;
    __isset.field133 = true;
    __isset.field134 = true;
    __isset.field135 = true;
    __isset.field136 = true;
    __isset.field137 = true;
    __isset.field138 = true;
    __isset.field139 = true;
    __isset.field140 = true;
    __isset.field141 = true;
    __isset.field142 = true;
    __isset.field143 = true;
    __isset.field144 = true;
    __isset.field145 = true;
    __isset.field146 = true;
    __isset.field147 = true;
    __isset.field148 = true;
    __isset.field149 = true;
    __isset.field150 = true;
    __isset.field151 = true;
    __isset.field152 = true;
    __isset.field153 = true;
    __isset.field154 = true;
    __isset.field155 = true;
    __isset.field156 = true;
    __isset.field157 = true;
    __isset.field158 = true;
    __isset.field159 = true;
    __isset.field160 = true;
    __isset.field161 = true;
    __isset.field162 = true;
    __isset.field163 = true;
    __isset.field164 = true;
    __isset.field165 = true;
    __isset.field166 = true;
    __isset.field167 = true;
    __isset.field168 = true;
    __isset.field169 = true;
    __isset.field170 = true;
    __isset.field171 = true;
    __isset.field172 = true;
    __isset.field173 = true;
    __isset.field174 = true;
    __isset.field175 = true;
    __isset.field176 = true;
    __isset.field177 = true;
    __isset.field178 = true;
    __isset.field179 = true;
    __isset.field180 = true;
    __isset.field181 = true;
    __isset.field182 = true;
    __isset.field183 = true;
    __isset.field184 = true;
    __isset.field185 = true;
    __isset.field186 = true;
    __isset.field187 = true;
    __isset.field188 = true;
    __isset.field189 = true;
    __isset.field190 = true;
    __isset.field191 = true;
    __isset.field192 = true;
    __isset.field193 = true;
    __isset.field194 = true;
    __isset.field195 = true;
    __isset.field196 = true;
    __isset.field197 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<97, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field97 = arg.move();
    __isset.field97 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<98, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field98 = arg.move();
    __isset.field98 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<99, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field99 = arg.move();
    __isset.field99 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field100 = arg.move();
    __isset.field100 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field101 = arg.move();
    __isset.field101 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<102, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field102 = arg.move();
    __isset.field102 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<103, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field103 = arg.move();
    __isset.field103 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<104, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field104 = arg.move();
    __isset.field104 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<105, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field105 = arg.move();
    __isset.field105 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<106, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field106 = arg.move();
    __isset.field106 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<107, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field107 = arg.move();
    __isset.field107 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<108, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field108 = arg.move();
    __isset.field108 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<109, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field109 = arg.move();
    __isset.field109 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<110, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field110 = arg.move();
    __isset.field110 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<111, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field111 = arg.move();
    __isset.field111 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<112, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field112 = arg.move();
    __isset.field112 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<113, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field113 = arg.move();
    __isset.field113 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<114, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field114 = arg.move();
    __isset.field114 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<115, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field115 = arg.move();
    __isset.field115 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<116, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field116 = arg.move();
    __isset.field116 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<117, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field117 = arg.move();
    __isset.field117 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<118, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field118 = arg.move();
    __isset.field118 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<119, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field119 = arg.move();
    __isset.field119 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<120, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field120 = arg.move();
    __isset.field120 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<121, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field121 = arg.move();
    __isset.field121 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<122, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field122 = arg.move();
    __isset.field122 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<123, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field123 = arg.move();
    __isset.field123 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<124, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field124 = arg.move();
    __isset.field124 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<125, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field125 = arg.move();
    __isset.field125 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<126, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field126 = arg.move();
    __isset.field126 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<127, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field127 = arg.move();
    __isset.field127 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<128, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field128 = arg.move();
    __isset.field128 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<129, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field129 = arg.move();
    __isset.field129 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<130, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field130 = arg.move();
    __isset.field130 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<131, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field131 = arg.move();
    __isset.field131 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<132, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field132 = arg.move();
    __isset.field132 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<133, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field133 = arg.move();
    __isset.field133 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<134, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field134 = arg.move();
    __isset.field134 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<135, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field135 = arg.move();
    __isset.field135 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<136, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field136 = arg.move();
    __isset.field136 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<137, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field137 = arg.move();
    __isset.field137 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<138, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field138 = arg.move();
    __isset.field138 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<139, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field139 = arg.move();
    __isset.field139 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<140, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field140 = arg.move();
    __isset.field140 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<141, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field141 = arg.move();
    __isset.field141 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<142, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field142 = arg.move();
    __isset.field142 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<143, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field143 = arg.move();
    __isset.field143 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<144, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field144 = arg.move();
    __isset.field144 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<145, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field145 = arg.move();
    __isset.field145 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<146, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field146 = arg.move();
    __isset.field146 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<147, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field147 = arg.move();
    __isset.field147 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<148, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field148 = arg.move();
    __isset.field148 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<149, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field149 = arg.move();
    __isset.field149 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<150, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field150 = arg.move();
    __isset.field150 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<151, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field151 = arg.move();
    __isset.field151 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<152, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field152 = arg.move();
    __isset.field152 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<153, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field153 = arg.move();
    __isset.field153 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<154, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field154 = arg.move();
    __isset.field154 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<155, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field155 = arg.move();
    __isset.field155 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<156, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field156 = arg.move();
    __isset.field156 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<157, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field157 = arg.move();
    __isset.field157 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<158, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field158 = arg.move();
    __isset.field158 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<159, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field159 = arg.move();
    __isset.field159 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<160, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field160 = arg.move();
    __isset.field160 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<161, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field161 = arg.move();
    __isset.field161 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<162, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field162 = arg.move();
    __isset.field162 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<163, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field163 = arg.move();
    __isset.field163 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<164, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field164 = arg.move();
    __isset.field164 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<165, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field165 = arg.move();
    __isset.field165 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<166, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field166 = arg.move();
    __isset.field166 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<167, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field167 = arg.move();
    __isset.field167 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<168, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field168 = arg.move();
    __isset.field168 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<169, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field169 = arg.move();
    __isset.field169 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<170, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field170 = arg.move();
    __isset.field170 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<171, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field171 = arg.move();
    __isset.field171 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<172, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field172 = arg.move();
    __isset.field172 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<173, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field173 = arg.move();
    __isset.field173 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<174, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field174 = arg.move();
    __isset.field174 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<175, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field175 = arg.move();
    __isset.field175 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<176, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field176 = arg.move();
    __isset.field176 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<177, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field177 = arg.move();
    __isset.field177 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<178, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field178 = arg.move();
    __isset.field178 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<179, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field179 = arg.move();
    __isset.field179 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<180, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field180 = arg.move();
    __isset.field180 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<181, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field181 = arg.move();
    __isset.field181 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<182, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field182 = arg.move();
    __isset.field182 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<183, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field183 = arg.move();
    __isset.field183 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<184, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field184 = arg.move();
    __isset.field184 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<185, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field185 = arg.move();
    __isset.field185 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<186, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field186 = arg.move();
    __isset.field186 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<187, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field187 = arg.move();
    __isset.field187 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<188, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field188 = arg.move();
    __isset.field188 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<189, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field189 = arg.move();
    __isset.field189 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<190, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field190 = arg.move();
    __isset.field190 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<191, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field191 = arg.move();
    __isset.field191 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<192, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field192 = arg.move();
    __isset.field192 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<193, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field193 = arg.move();
    __isset.field193 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<194, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field194 = arg.move();
    __isset.field194 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<195, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field195 = arg.move();
    __isset.field195 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<196, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field196 = arg.move();
    __isset.field196 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct14(::apache::thrift::detail::argument_wrapper<197, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct14(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field197 = arg.move();
    __isset.field197 = true;
  }

  Struct14(Struct14&&) = default;

  Struct14(const Struct14&) = default;

  Struct14& operator=(Struct14&&) = default;

  Struct14& operator=(const Struct14&) = default;
  void __clear();

  virtual ~Struct14() {}

  int64_t field1;
   ::cpp2::Struct0 field2;
  int16_t field3;
  int8_t field4;
  double field5;
  std::string field6;
  std::set<int16_t> field7;
  double field8;
  std::string field9;
   ::cpp2::Struct1 field10;
  float field11;
  int32_t field12;
  float field13;
  double field14;
  bool field15;
  int64_t field16;
  int16_t field17;
  int64_t field18;
  std::string field19;
  bool field20;
  int16_t field21;
  float field22;
  std::map<int64_t, std::map<std::string, float>> field23;
  std::string field24;
   ::cpp2::Struct1 field25;
  std::map<int16_t, double> field26;
  std::string field27;
  std::map<std::map<std::vector<std::string>, std::set<std::string>>, std::string> field28;
  float field29;
  std::string field30;
  double field31;
  std::vector<std::set<bool>> field32;
  std::vector<int16_t> field33;
  std::string field34;
   ::cpp2::Struct0 field35;
  int32_t field36;
   ::cpp2::Struct1 field37;
  std::string field38;
  int32_t field39;
   ::cpp2::Struct6 field40;
   ::cpp2::Struct1 field41;
  std::map<int64_t, int16_t> field42;
  std::string field43;
  std::set<std::map<std::map<int64_t,  ::cpp2::Struct8>, int32_t>> field44;
  int32_t field45;
  int8_t field46;
   ::cpp2::Struct5 field47;
  std::set<std::string> field48;
   ::cpp2::Struct3 field49;
  std::map<float,  ::cpp2::Struct3> field50;
  int32_t field51;
  std::vector<int16_t> field52;
  std::map<std::string, std::string> field53;
  std::map< ::cpp2::Struct2, int32_t> field54;
   ::cpp2::Struct2 field55;
  double field56;
  bool field57;
  std::vector<int32_t> field58;
   ::cpp2::Struct5 field59;
  std::string field60;
  bool field61;
  int16_t field62;
  std::vector<int8_t> field63;
  std::string field64;
   ::cpp2::Struct1 field65;
   ::cpp2::Struct4 field66;
  int8_t field67;
  int64_t field68;
  std::set<int8_t> field69;
  std::vector<bool> field70;
  std::string field71;
  std::vector<int16_t> field72;
  std::set< ::cpp2::Struct5> field73;
   ::cpp2::Struct5 field74;
  std::map<int16_t, int8_t> field75;
  bool field76;
  std::set<int8_t> field77;
  int8_t field78;
  std::string field79;
  double field80;
  bool field81;
  int64_t field82;
  std::set<std::string> field83;
   ::cpp2::Struct5 field84;
  bool field85;
  float field86;
  std::set<double> field87;
  std::map<double, float> field88;
  std::map<std::set<std::string>, std::string> field89;
  int64_t field90;
  int16_t field91;
  std::map<std::set<double>, int8_t> field92;
  bool field93;
  int64_t field94;
  std::vector<int64_t> field95;
  std::map< ::cpp2::Struct6, int64_t> field96;
  std::string field97;
   ::cpp2::Struct0 field98;
  std::set<float> field99;
  int64_t field100;
  std::vector<bool> field101;
  std::vector<int8_t> field102;
  int64_t field103;
  std::map<int8_t, std::set<float>> field104;
   ::cpp2::Struct6 field105;
  int8_t field106;
  std::set<float> field107;
  float field108;
  std::string field109;
  std::vector<int8_t> field110;
  std::set<std::map<float, int16_t>> field111;
  std::vector<float> field112;
  std::vector<int8_t> field113;
   ::cpp2::Struct4 field114;
  bool field115;
  int16_t field116;
  std::map<float, float> field117;
  std::set<int8_t> field118;
  std::set<std::string> field119;
  std::set<int8_t> field120;
  std::map< ::cpp2::Struct0, int32_t> field121;
  std::set<int8_t> field122;
   ::cpp2::Struct10 field123;
  float field124;
  std::string field125;
  bool field126;
  std::vector<std::map<std::string, bool>> field127;
  std::vector<double> field128;
  std::vector<int8_t> field129;
  int8_t field130;
  std::string field131;
  std::map< ::cpp2::Struct2, float> field132;
  std::vector<double> field133;
  int64_t field134;
  std::string field135;
  float field136;
  std::set<bool> field137;
  std::map<bool, int32_t> field138;
  double field139;
  std::string field140;
  std::string field141;
  int8_t field142;
  std::set<std::string> field143;
  std::map<float, int64_t> field144;
  int32_t field145;
  int16_t field146;
  std::set<std::vector<int32_t>> field147;
  std::map<float, std::vector<int32_t>> field148;
   ::cpp2::Struct7 field149;
  int8_t field150;
  bool field151;
  std::map<int16_t, int32_t> field152;
  int8_t field153;
  std::string field154;
  std::string field155;
   ::cpp2::Struct2 field156;
  std::vector<std::string> field157;
   ::cpp2::Struct6 field158;
  bool field159;
  std::vector<int16_t> field160;
  std::vector<int64_t> field161;
  int64_t field162;
  std::string field163;
  std::string field164;
  int64_t field165;
  std::vector<std::string> field166;
   ::cpp2::Struct5 field167;
  std::map< ::cpp2::Struct3, int64_t> field168;
  std::map<std::string, bool> field169;
  std::vector<double> field170;
  std::set<int16_t> field171;
  std::vector<std::string> field172;
  int32_t field173;
  std::set<int32_t> field174;
  std::map<int8_t, std::string> field175;
  std::vector<std::string> field176;
   ::cpp2::Struct4 field177;
   ::cpp2::Struct10 field178;
  std::set<int64_t> field179;
  std::vector<std::string> field180;
  int8_t field181;
   ::cpp2::Struct5 field182;
  int8_t field183;
  std::string field184;
  double field185;
  std::set<float> field186;
  int32_t field187;
   ::cpp2::Struct0 field188;
  int16_t field189;
  float field190;
   ::cpp2::Struct2 field191;
  std::map<std::vector<int16_t>, int8_t> field192;
  std::string field193;
  std::string field194;
   ::cpp2::Struct2 field195;
  std::map<bool,  ::cpp2::Struct3> field196;
  bool field197;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
      field97 = false;
      field98 = false;
      field99 = false;
      field100 = false;
      field101 = false;
      field102 = false;
      field103 = false;
      field104 = false;
      field105 = false;
      field106 = false;
      field107 = false;
      field108 = false;
      field109 = false;
      field110 = false;
      field111 = false;
      field112 = false;
      field113 = false;
      field114 = false;
      field115 = false;
      field116 = false;
      field117 = false;
      field118 = false;
      field119 = false;
      field120 = false;
      field121 = false;
      field122 = false;
      field123 = false;
      field124 = false;
      field125 = false;
      field126 = false;
      field127 = false;
      field128 = false;
      field129 = false;
      field130 = false;
      field131 = false;
      field132 = false;
      field133 = false;
      field134 = false;
      field135 = false;
      field136 = false;
      field137 = false;
      field138 = false;
      field139 = false;
      field140 = false;
      field141 = false;
      field142 = false;
      field143 = false;
      field144 = false;
      field145 = false;
      field146 = false;
      field147 = false;
      field148 = false;
      field149 = false;
      field150 = false;
      field151 = false;
      field152 = false;
      field153 = false;
      field154 = false;
      field155 = false;
      field156 = false;
      field157 = false;
      field158 = false;
      field159 = false;
      field160 = false;
      field161 = false;
      field162 = false;
      field163 = false;
      field164 = false;
      field165 = false;
      field166 = false;
      field167 = false;
      field168 = false;
      field169 = false;
      field170 = false;
      field171 = false;
      field172 = false;
      field173 = false;
      field174 = false;
      field175 = false;
      field176 = false;
      field177 = false;
      field178 = false;
      field179 = false;
      field180 = false;
      field181 = false;
      field182 = false;
      field183 = false;
      field184 = false;
      field185 = false;
      field186 = false;
      field187 = false;
      field188 = false;
      field189 = false;
      field190 = false;
      field191 = false;
      field192 = false;
      field193 = false;
      field194 = false;
      field195 = false;
      field196 = false;
      field197 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
    bool field97 = false;
    bool field98 = false;
    bool field99 = false;
    bool field100 = false;
    bool field101 = false;
    bool field102 = false;
    bool field103 = false;
    bool field104 = false;
    bool field105 = false;
    bool field106 = false;
    bool field107 = false;
    bool field108 = false;
    bool field109 = false;
    bool field110 = false;
    bool field111 = false;
    bool field112 = false;
    bool field113 = false;
    bool field114 = false;
    bool field115 = false;
    bool field116 = false;
    bool field117 = false;
    bool field118 = false;
    bool field119 = false;
    bool field120 = false;
    bool field121 = false;
    bool field122 = false;
    bool field123 = false;
    bool field124 = false;
    bool field125 = false;
    bool field126 = false;
    bool field127 = false;
    bool field128 = false;
    bool field129 = false;
    bool field130 = false;
    bool field131 = false;
    bool field132 = false;
    bool field133 = false;
    bool field134 = false;
    bool field135 = false;
    bool field136 = false;
    bool field137 = false;
    bool field138 = false;
    bool field139 = false;
    bool field140 = false;
    bool field141 = false;
    bool field142 = false;
    bool field143 = false;
    bool field144 = false;
    bool field145 = false;
    bool field146 = false;
    bool field147 = false;
    bool field148 = false;
    bool field149 = false;
    bool field150 = false;
    bool field151 = false;
    bool field152 = false;
    bool field153 = false;
    bool field154 = false;
    bool field155 = false;
    bool field156 = false;
    bool field157 = false;
    bool field158 = false;
    bool field159 = false;
    bool field160 = false;
    bool field161 = false;
    bool field162 = false;
    bool field163 = false;
    bool field164 = false;
    bool field165 = false;
    bool field166 = false;
    bool field167 = false;
    bool field168 = false;
    bool field169 = false;
    bool field170 = false;
    bool field171 = false;
    bool field172 = false;
    bool field173 = false;
    bool field174 = false;
    bool field175 = false;
    bool field176 = false;
    bool field177 = false;
    bool field178 = false;
    bool field179 = false;
    bool field180 = false;
    bool field181 = false;
    bool field182 = false;
    bool field183 = false;
    bool field184 = false;
    bool field185 = false;
    bool field186 = false;
    bool field187 = false;
    bool field188 = false;
    bool field189 = false;
    bool field190 = false;
    bool field191 = false;
    bool field192 = false;
    bool field193 = false;
    bool field194 = false;
    bool field195 = false;
    bool field196 = false;
    bool field197 = false;
  } __isset;
  bool operator==(const Struct14& rhs) const;

  bool operator < (const Struct14& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    if (!(field97 == rhs.field97)) {
      return field97 < rhs.field97;
    }
    if (!(field98 == rhs.field98)) {
      return field98 < rhs.field98;
    }
    if (!(field99 == rhs.field99)) {
      return field99 < rhs.field99;
    }
    if (!(field100 == rhs.field100)) {
      return field100 < rhs.field100;
    }
    if (!(field101 == rhs.field101)) {
      return field101 < rhs.field101;
    }
    if (!(field102 == rhs.field102)) {
      return field102 < rhs.field102;
    }
    if (!(field103 == rhs.field103)) {
      return field103 < rhs.field103;
    }
    if (!(field104 == rhs.field104)) {
      return field104 < rhs.field104;
    }
    if (!(field105 == rhs.field105)) {
      return field105 < rhs.field105;
    }
    if (!(field106 == rhs.field106)) {
      return field106 < rhs.field106;
    }
    if (!(field107 == rhs.field107)) {
      return field107 < rhs.field107;
    }
    if (!(field108 == rhs.field108)) {
      return field108 < rhs.field108;
    }
    if (!(field109 == rhs.field109)) {
      return field109 < rhs.field109;
    }
    if (!(field110 == rhs.field110)) {
      return field110 < rhs.field110;
    }
    if (!(field111 == rhs.field111)) {
      return field111 < rhs.field111;
    }
    if (!(field112 == rhs.field112)) {
      return field112 < rhs.field112;
    }
    if (!(field113 == rhs.field113)) {
      return field113 < rhs.field113;
    }
    if (!(field114 == rhs.field114)) {
      return field114 < rhs.field114;
    }
    if (!(field115 == rhs.field115)) {
      return field115 < rhs.field115;
    }
    if (!(field116 == rhs.field116)) {
      return field116 < rhs.field116;
    }
    if (!(field117 == rhs.field117)) {
      return field117 < rhs.field117;
    }
    if (!(field118 == rhs.field118)) {
      return field118 < rhs.field118;
    }
    if (!(field119 == rhs.field119)) {
      return field119 < rhs.field119;
    }
    if (!(field120 == rhs.field120)) {
      return field120 < rhs.field120;
    }
    if (!(field121 == rhs.field121)) {
      return field121 < rhs.field121;
    }
    if (!(field122 == rhs.field122)) {
      return field122 < rhs.field122;
    }
    if (!(field123 == rhs.field123)) {
      return field123 < rhs.field123;
    }
    if (!(field124 == rhs.field124)) {
      return field124 < rhs.field124;
    }
    if (!(field125 == rhs.field125)) {
      return field125 < rhs.field125;
    }
    if (!(field126 == rhs.field126)) {
      return field126 < rhs.field126;
    }
    if (!(field127 == rhs.field127)) {
      return field127 < rhs.field127;
    }
    if (!(field128 == rhs.field128)) {
      return field128 < rhs.field128;
    }
    if (!(field129 == rhs.field129)) {
      return field129 < rhs.field129;
    }
    if (!(field130 == rhs.field130)) {
      return field130 < rhs.field130;
    }
    if (!(field131 == rhs.field131)) {
      return field131 < rhs.field131;
    }
    if (!(field132 == rhs.field132)) {
      return field132 < rhs.field132;
    }
    if (!(field133 == rhs.field133)) {
      return field133 < rhs.field133;
    }
    if (!(field134 == rhs.field134)) {
      return field134 < rhs.field134;
    }
    if (!(field135 == rhs.field135)) {
      return field135 < rhs.field135;
    }
    if (!(field136 == rhs.field136)) {
      return field136 < rhs.field136;
    }
    if (!(field137 == rhs.field137)) {
      return field137 < rhs.field137;
    }
    if (!(field138 == rhs.field138)) {
      return field138 < rhs.field138;
    }
    if (!(field139 == rhs.field139)) {
      return field139 < rhs.field139;
    }
    if (!(field140 == rhs.field140)) {
      return field140 < rhs.field140;
    }
    if (!(field141 == rhs.field141)) {
      return field141 < rhs.field141;
    }
    if (!(field142 == rhs.field142)) {
      return field142 < rhs.field142;
    }
    if (!(field143 == rhs.field143)) {
      return field143 < rhs.field143;
    }
    if (!(field144 == rhs.field144)) {
      return field144 < rhs.field144;
    }
    if (!(field145 == rhs.field145)) {
      return field145 < rhs.field145;
    }
    if (!(field146 == rhs.field146)) {
      return field146 < rhs.field146;
    }
    if (!(field147 == rhs.field147)) {
      return field147 < rhs.field147;
    }
    if (!(field148 == rhs.field148)) {
      return field148 < rhs.field148;
    }
    if (!(field149 == rhs.field149)) {
      return field149 < rhs.field149;
    }
    if (!(field150 == rhs.field150)) {
      return field150 < rhs.field150;
    }
    if (!(field151 == rhs.field151)) {
      return field151 < rhs.field151;
    }
    if (!(field152 == rhs.field152)) {
      return field152 < rhs.field152;
    }
    if (!(field153 == rhs.field153)) {
      return field153 < rhs.field153;
    }
    if (!(field154 == rhs.field154)) {
      return field154 < rhs.field154;
    }
    if (!(field155 == rhs.field155)) {
      return field155 < rhs.field155;
    }
    if (!(field156 == rhs.field156)) {
      return field156 < rhs.field156;
    }
    if (!(field157 == rhs.field157)) {
      return field157 < rhs.field157;
    }
    if (!(field158 == rhs.field158)) {
      return field158 < rhs.field158;
    }
    if (!(field159 == rhs.field159)) {
      return field159 < rhs.field159;
    }
    if (!(field160 == rhs.field160)) {
      return field160 < rhs.field160;
    }
    if (!(field161 == rhs.field161)) {
      return field161 < rhs.field161;
    }
    if (!(field162 == rhs.field162)) {
      return field162 < rhs.field162;
    }
    if (!(field163 == rhs.field163)) {
      return field163 < rhs.field163;
    }
    if (!(field164 == rhs.field164)) {
      return field164 < rhs.field164;
    }
    if (!(field165 == rhs.field165)) {
      return field165 < rhs.field165;
    }
    if (!(field166 == rhs.field166)) {
      return field166 < rhs.field166;
    }
    if (!(field167 == rhs.field167)) {
      return field167 < rhs.field167;
    }
    if (!(field168 == rhs.field168)) {
      return field168 < rhs.field168;
    }
    if (!(field169 == rhs.field169)) {
      return field169 < rhs.field169;
    }
    if (!(field170 == rhs.field170)) {
      return field170 < rhs.field170;
    }
    if (!(field171 == rhs.field171)) {
      return field171 < rhs.field171;
    }
    if (!(field172 == rhs.field172)) {
      return field172 < rhs.field172;
    }
    if (!(field173 == rhs.field173)) {
      return field173 < rhs.field173;
    }
    if (!(field174 == rhs.field174)) {
      return field174 < rhs.field174;
    }
    if (!(field175 == rhs.field175)) {
      return field175 < rhs.field175;
    }
    if (!(field176 == rhs.field176)) {
      return field176 < rhs.field176;
    }
    if (!(field177 == rhs.field177)) {
      return field177 < rhs.field177;
    }
    if (!(field178 == rhs.field178)) {
      return field178 < rhs.field178;
    }
    if (!(field179 == rhs.field179)) {
      return field179 < rhs.field179;
    }
    if (!(field180 == rhs.field180)) {
      return field180 < rhs.field180;
    }
    if (!(field181 == rhs.field181)) {
      return field181 < rhs.field181;
    }
    if (!(field182 == rhs.field182)) {
      return field182 < rhs.field182;
    }
    if (!(field183 == rhs.field183)) {
      return field183 < rhs.field183;
    }
    if (!(field184 == rhs.field184)) {
      return field184 < rhs.field184;
    }
    if (!(field185 == rhs.field185)) {
      return field185 < rhs.field185;
    }
    if (!(field186 == rhs.field186)) {
      return field186 < rhs.field186;
    }
    if (!(field187 == rhs.field187)) {
      return field187 < rhs.field187;
    }
    if (!(field188 == rhs.field188)) {
      return field188 < rhs.field188;
    }
    if (!(field189 == rhs.field189)) {
      return field189 < rhs.field189;
    }
    if (!(field190 == rhs.field190)) {
      return field190 < rhs.field190;
    }
    if (!(field191 == rhs.field191)) {
      return field191 < rhs.field191;
    }
    if (!(field192 == rhs.field192)) {
      return field192 < rhs.field192;
    }
    if (!(field193 == rhs.field193)) {
      return field193 < rhs.field193;
    }
    if (!(field194 == rhs.field194)) {
      return field194 < rhs.field194;
    }
    if (!(field195 == rhs.field195)) {
      return field195 < rhs.field195;
    }
    if (!(field196 == rhs.field196)) {
      return field196 < rhs.field196;
    }
    if (!(field197 == rhs.field197)) {
      return field197 < rhs.field197;
    }
    (void)rhs;
    return false;
  }

  int64_t get_field1() const {
    return field1;
  }

  int64_t& set_field1(int64_t field1_) {
    field1 = field1_;
    __isset.field1 = true;
    return field1;
  }
  const  ::cpp2::Struct0& get_field2() const&;
   ::cpp2::Struct0 get_field2() &&;

  template <typename T_Struct14_field2_struct_setter>
   ::cpp2::Struct0& set_field2(T_Struct14_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct14_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  int16_t get_field3() const {
    return field3;
  }

  int16_t& set_field3(int16_t field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }

  int8_t get_field4() const {
    return field4;
  }

  int8_t& set_field4(int8_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }

  double get_field5() const {
    return field5;
  }

  double& set_field5(double field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }

  const std::string& get_field6() const& {
    return field6;
  }

  std::string get_field6() && {
    return std::move(field6);
  }

  template <typename T_Struct14_field6_struct_setter>
  std::string& set_field6(T_Struct14_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct14_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }
  const std::set<int16_t>& get_field7() const&;
  std::set<int16_t> get_field7() &&;

  template <typename T_Struct14_field7_struct_setter>
  std::set<int16_t>& set_field7(T_Struct14_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct14_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }

  double get_field8() const {
    return field8;
  }

  double& set_field8(double field8_) {
    field8 = field8_;
    __isset.field8 = true;
    return field8;
  }

  const std::string& get_field9() const& {
    return field9;
  }

  std::string get_field9() && {
    return std::move(field9);
  }

  template <typename T_Struct14_field9_struct_setter>
  std::string& set_field9(T_Struct14_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct14_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }
  const  ::cpp2::Struct1& get_field10() const&;
   ::cpp2::Struct1 get_field10() &&;

  template <typename T_Struct14_field10_struct_setter>
   ::cpp2::Struct1& set_field10(T_Struct14_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct14_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }

  float get_field11() const {
    return field11;
  }

  float& set_field11(float field11_) {
    field11 = field11_;
    __isset.field11 = true;
    return field11;
  }

  int32_t get_field12() const {
    return field12;
  }

  int32_t& set_field12(int32_t field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }

  float get_field13() const {
    return field13;
  }

  float& set_field13(float field13_) {
    field13 = field13_;
    __isset.field13 = true;
    return field13;
  }

  double get_field14() const {
    return field14;
  }

  double& set_field14(double field14_) {
    field14 = field14_;
    __isset.field14 = true;
    return field14;
  }

  bool get_field15() const {
    return field15;
  }

  bool& set_field15(bool field15_) {
    field15 = field15_;
    __isset.field15 = true;
    return field15;
  }

  int64_t get_field16() const {
    return field16;
  }

  int64_t& set_field16(int64_t field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }

  int16_t get_field17() const {
    return field17;
  }

  int16_t& set_field17(int16_t field17_) {
    field17 = field17_;
    __isset.field17 = true;
    return field17;
  }

  int64_t get_field18() const {
    return field18;
  }

  int64_t& set_field18(int64_t field18_) {
    field18 = field18_;
    __isset.field18 = true;
    return field18;
  }

  const std::string& get_field19() const& {
    return field19;
  }

  std::string get_field19() && {
    return std::move(field19);
  }

  template <typename T_Struct14_field19_struct_setter>
  std::string& set_field19(T_Struct14_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct14_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }

  bool get_field20() const {
    return field20;
  }

  bool& set_field20(bool field20_) {
    field20 = field20_;
    __isset.field20 = true;
    return field20;
  }

  int16_t get_field21() const {
    return field21;
  }

  int16_t& set_field21(int16_t field21_) {
    field21 = field21_;
    __isset.field21 = true;
    return field21;
  }

  float get_field22() const {
    return field22;
  }

  float& set_field22(float field22_) {
    field22 = field22_;
    __isset.field22 = true;
    return field22;
  }
  const std::map<int64_t, std::map<std::string, float>>& get_field23() const&;
  std::map<int64_t, std::map<std::string, float>> get_field23() &&;

  template <typename T_Struct14_field23_struct_setter>
  std::map<int64_t, std::map<std::string, float>>& set_field23(T_Struct14_field23_struct_setter&& field23_) {
    field23 = std::forward<T_Struct14_field23_struct_setter>(field23_);
    __isset.field23 = true;
    return field23;
  }

  const std::string& get_field24() const& {
    return field24;
  }

  std::string get_field24() && {
    return std::move(field24);
  }

  template <typename T_Struct14_field24_struct_setter>
  std::string& set_field24(T_Struct14_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct14_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }
  const  ::cpp2::Struct1& get_field25() const&;
   ::cpp2::Struct1 get_field25() &&;

  template <typename T_Struct14_field25_struct_setter>
   ::cpp2::Struct1& set_field25(T_Struct14_field25_struct_setter&& field25_) {
    field25 = std::forward<T_Struct14_field25_struct_setter>(field25_);
    __isset.field25 = true;
    return field25;
  }
  const std::map<int16_t, double>& get_field26() const&;
  std::map<int16_t, double> get_field26() &&;

  template <typename T_Struct14_field26_struct_setter>
  std::map<int16_t, double>& set_field26(T_Struct14_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct14_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }

  const std::string& get_field27() const& {
    return field27;
  }

  std::string get_field27() && {
    return std::move(field27);
  }

  template <typename T_Struct14_field27_struct_setter>
  std::string& set_field27(T_Struct14_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct14_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }
  const std::map<std::map<std::vector<std::string>, std::set<std::string>>, std::string>& get_field28() const&;
  std::map<std::map<std::vector<std::string>, std::set<std::string>>, std::string> get_field28() &&;

  template <typename T_Struct14_field28_struct_setter>
  std::map<std::map<std::vector<std::string>, std::set<std::string>>, std::string>& set_field28(T_Struct14_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct14_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }

  float get_field29() const {
    return field29;
  }

  float& set_field29(float field29_) {
    field29 = field29_;
    __isset.field29 = true;
    return field29;
  }

  const std::string& get_field30() const& {
    return field30;
  }

  std::string get_field30() && {
    return std::move(field30);
  }

  template <typename T_Struct14_field30_struct_setter>
  std::string& set_field30(T_Struct14_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct14_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }

  double get_field31() const {
    return field31;
  }

  double& set_field31(double field31_) {
    field31 = field31_;
    __isset.field31 = true;
    return field31;
  }
  const std::vector<std::set<bool>>& get_field32() const&;
  std::vector<std::set<bool>> get_field32() &&;

  template <typename T_Struct14_field32_struct_setter>
  std::vector<std::set<bool>>& set_field32(T_Struct14_field32_struct_setter&& field32_) {
    field32 = std::forward<T_Struct14_field32_struct_setter>(field32_);
    __isset.field32 = true;
    return field32;
  }
  const std::vector<int16_t>& get_field33() const&;
  std::vector<int16_t> get_field33() &&;

  template <typename T_Struct14_field33_struct_setter>
  std::vector<int16_t>& set_field33(T_Struct14_field33_struct_setter&& field33_) {
    field33 = std::forward<T_Struct14_field33_struct_setter>(field33_);
    __isset.field33 = true;
    return field33;
  }

  const std::string& get_field34() const& {
    return field34;
  }

  std::string get_field34() && {
    return std::move(field34);
  }

  template <typename T_Struct14_field34_struct_setter>
  std::string& set_field34(T_Struct14_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct14_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }
  const  ::cpp2::Struct0& get_field35() const&;
   ::cpp2::Struct0 get_field35() &&;

  template <typename T_Struct14_field35_struct_setter>
   ::cpp2::Struct0& set_field35(T_Struct14_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct14_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }

  int32_t get_field36() const {
    return field36;
  }

  int32_t& set_field36(int32_t field36_) {
    field36 = field36_;
    __isset.field36 = true;
    return field36;
  }
  const  ::cpp2::Struct1& get_field37() const&;
   ::cpp2::Struct1 get_field37() &&;

  template <typename T_Struct14_field37_struct_setter>
   ::cpp2::Struct1& set_field37(T_Struct14_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct14_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }

  const std::string& get_field38() const& {
    return field38;
  }

  std::string get_field38() && {
    return std::move(field38);
  }

  template <typename T_Struct14_field38_struct_setter>
  std::string& set_field38(T_Struct14_field38_struct_setter&& field38_) {
    field38 = std::forward<T_Struct14_field38_struct_setter>(field38_);
    __isset.field38 = true;
    return field38;
  }

  int32_t get_field39() const {
    return field39;
  }

  int32_t& set_field39(int32_t field39_) {
    field39 = field39_;
    __isset.field39 = true;
    return field39;
  }
  const  ::cpp2::Struct6& get_field40() const&;
   ::cpp2::Struct6 get_field40() &&;

  template <typename T_Struct14_field40_struct_setter>
   ::cpp2::Struct6& set_field40(T_Struct14_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct14_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }
  const  ::cpp2::Struct1& get_field41() const&;
   ::cpp2::Struct1 get_field41() &&;

  template <typename T_Struct14_field41_struct_setter>
   ::cpp2::Struct1& set_field41(T_Struct14_field41_struct_setter&& field41_) {
    field41 = std::forward<T_Struct14_field41_struct_setter>(field41_);
    __isset.field41 = true;
    return field41;
  }
  const std::map<int64_t, int16_t>& get_field42() const&;
  std::map<int64_t, int16_t> get_field42() &&;

  template <typename T_Struct14_field42_struct_setter>
  std::map<int64_t, int16_t>& set_field42(T_Struct14_field42_struct_setter&& field42_) {
    field42 = std::forward<T_Struct14_field42_struct_setter>(field42_);
    __isset.field42 = true;
    return field42;
  }

  const std::string& get_field43() const& {
    return field43;
  }

  std::string get_field43() && {
    return std::move(field43);
  }

  template <typename T_Struct14_field43_struct_setter>
  std::string& set_field43(T_Struct14_field43_struct_setter&& field43_) {
    field43 = std::forward<T_Struct14_field43_struct_setter>(field43_);
    __isset.field43 = true;
    return field43;
  }
  const std::set<std::map<std::map<int64_t,  ::cpp2::Struct8>, int32_t>>& get_field44() const&;
  std::set<std::map<std::map<int64_t,  ::cpp2::Struct8>, int32_t>> get_field44() &&;

  template <typename T_Struct14_field44_struct_setter>
  std::set<std::map<std::map<int64_t,  ::cpp2::Struct8>, int32_t>>& set_field44(T_Struct14_field44_struct_setter&& field44_) {
    field44 = std::forward<T_Struct14_field44_struct_setter>(field44_);
    __isset.field44 = true;
    return field44;
  }

  int32_t get_field45() const {
    return field45;
  }

  int32_t& set_field45(int32_t field45_) {
    field45 = field45_;
    __isset.field45 = true;
    return field45;
  }

  int8_t get_field46() const {
    return field46;
  }

  int8_t& set_field46(int8_t field46_) {
    field46 = field46_;
    __isset.field46 = true;
    return field46;
  }
  const  ::cpp2::Struct5& get_field47() const&;
   ::cpp2::Struct5 get_field47() &&;

  template <typename T_Struct14_field47_struct_setter>
   ::cpp2::Struct5& set_field47(T_Struct14_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct14_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }
  const std::set<std::string>& get_field48() const&;
  std::set<std::string> get_field48() &&;

  template <typename T_Struct14_field48_struct_setter>
  std::set<std::string>& set_field48(T_Struct14_field48_struct_setter&& field48_) {
    field48 = std::forward<T_Struct14_field48_struct_setter>(field48_);
    __isset.field48 = true;
    return field48;
  }
  const  ::cpp2::Struct3& get_field49() const&;
   ::cpp2::Struct3 get_field49() &&;

  template <typename T_Struct14_field49_struct_setter>
   ::cpp2::Struct3& set_field49(T_Struct14_field49_struct_setter&& field49_) {
    field49 = std::forward<T_Struct14_field49_struct_setter>(field49_);
    __isset.field49 = true;
    return field49;
  }
  const std::map<float,  ::cpp2::Struct3>& get_field50() const&;
  std::map<float,  ::cpp2::Struct3> get_field50() &&;

  template <typename T_Struct14_field50_struct_setter>
  std::map<float,  ::cpp2::Struct3>& set_field50(T_Struct14_field50_struct_setter&& field50_) {
    field50 = std::forward<T_Struct14_field50_struct_setter>(field50_);
    __isset.field50 = true;
    return field50;
  }

  int32_t get_field51() const {
    return field51;
  }

  int32_t& set_field51(int32_t field51_) {
    field51 = field51_;
    __isset.field51 = true;
    return field51;
  }
  const std::vector<int16_t>& get_field52() const&;
  std::vector<int16_t> get_field52() &&;

  template <typename T_Struct14_field52_struct_setter>
  std::vector<int16_t>& set_field52(T_Struct14_field52_struct_setter&& field52_) {
    field52 = std::forward<T_Struct14_field52_struct_setter>(field52_);
    __isset.field52 = true;
    return field52;
  }
  const std::map<std::string, std::string>& get_field53() const&;
  std::map<std::string, std::string> get_field53() &&;

  template <typename T_Struct14_field53_struct_setter>
  std::map<std::string, std::string>& set_field53(T_Struct14_field53_struct_setter&& field53_) {
    field53 = std::forward<T_Struct14_field53_struct_setter>(field53_);
    __isset.field53 = true;
    return field53;
  }
  const std::map< ::cpp2::Struct2, int32_t>& get_field54() const&;
  std::map< ::cpp2::Struct2, int32_t> get_field54() &&;

  template <typename T_Struct14_field54_struct_setter>
  std::map< ::cpp2::Struct2, int32_t>& set_field54(T_Struct14_field54_struct_setter&& field54_) {
    field54 = std::forward<T_Struct14_field54_struct_setter>(field54_);
    __isset.field54 = true;
    return field54;
  }
  const  ::cpp2::Struct2& get_field55() const&;
   ::cpp2::Struct2 get_field55() &&;

  template <typename T_Struct14_field55_struct_setter>
   ::cpp2::Struct2& set_field55(T_Struct14_field55_struct_setter&& field55_) {
    field55 = std::forward<T_Struct14_field55_struct_setter>(field55_);
    __isset.field55 = true;
    return field55;
  }

  double get_field56() const {
    return field56;
  }

  double& set_field56(double field56_) {
    field56 = field56_;
    __isset.field56 = true;
    return field56;
  }

  bool get_field57() const {
    return field57;
  }

  bool& set_field57(bool field57_) {
    field57 = field57_;
    __isset.field57 = true;
    return field57;
  }
  const std::vector<int32_t>& get_field58() const&;
  std::vector<int32_t> get_field58() &&;

  template <typename T_Struct14_field58_struct_setter>
  std::vector<int32_t>& set_field58(T_Struct14_field58_struct_setter&& field58_) {
    field58 = std::forward<T_Struct14_field58_struct_setter>(field58_);
    __isset.field58 = true;
    return field58;
  }
  const  ::cpp2::Struct5& get_field59() const&;
   ::cpp2::Struct5 get_field59() &&;

  template <typename T_Struct14_field59_struct_setter>
   ::cpp2::Struct5& set_field59(T_Struct14_field59_struct_setter&& field59_) {
    field59 = std::forward<T_Struct14_field59_struct_setter>(field59_);
    __isset.field59 = true;
    return field59;
  }

  const std::string& get_field60() const& {
    return field60;
  }

  std::string get_field60() && {
    return std::move(field60);
  }

  template <typename T_Struct14_field60_struct_setter>
  std::string& set_field60(T_Struct14_field60_struct_setter&& field60_) {
    field60 = std::forward<T_Struct14_field60_struct_setter>(field60_);
    __isset.field60 = true;
    return field60;
  }

  bool get_field61() const {
    return field61;
  }

  bool& set_field61(bool field61_) {
    field61 = field61_;
    __isset.field61 = true;
    return field61;
  }

  int16_t get_field62() const {
    return field62;
  }

  int16_t& set_field62(int16_t field62_) {
    field62 = field62_;
    __isset.field62 = true;
    return field62;
  }
  const std::vector<int8_t>& get_field63() const&;
  std::vector<int8_t> get_field63() &&;

  template <typename T_Struct14_field63_struct_setter>
  std::vector<int8_t>& set_field63(T_Struct14_field63_struct_setter&& field63_) {
    field63 = std::forward<T_Struct14_field63_struct_setter>(field63_);
    __isset.field63 = true;
    return field63;
  }

  const std::string& get_field64() const& {
    return field64;
  }

  std::string get_field64() && {
    return std::move(field64);
  }

  template <typename T_Struct14_field64_struct_setter>
  std::string& set_field64(T_Struct14_field64_struct_setter&& field64_) {
    field64 = std::forward<T_Struct14_field64_struct_setter>(field64_);
    __isset.field64 = true;
    return field64;
  }
  const  ::cpp2::Struct1& get_field65() const&;
   ::cpp2::Struct1 get_field65() &&;

  template <typename T_Struct14_field65_struct_setter>
   ::cpp2::Struct1& set_field65(T_Struct14_field65_struct_setter&& field65_) {
    field65 = std::forward<T_Struct14_field65_struct_setter>(field65_);
    __isset.field65 = true;
    return field65;
  }
  const  ::cpp2::Struct4& get_field66() const&;
   ::cpp2::Struct4 get_field66() &&;

  template <typename T_Struct14_field66_struct_setter>
   ::cpp2::Struct4& set_field66(T_Struct14_field66_struct_setter&& field66_) {
    field66 = std::forward<T_Struct14_field66_struct_setter>(field66_);
    __isset.field66 = true;
    return field66;
  }

  int8_t get_field67() const {
    return field67;
  }

  int8_t& set_field67(int8_t field67_) {
    field67 = field67_;
    __isset.field67 = true;
    return field67;
  }

  int64_t get_field68() const {
    return field68;
  }

  int64_t& set_field68(int64_t field68_) {
    field68 = field68_;
    __isset.field68 = true;
    return field68;
  }
  const std::set<int8_t>& get_field69() const&;
  std::set<int8_t> get_field69() &&;

  template <typename T_Struct14_field69_struct_setter>
  std::set<int8_t>& set_field69(T_Struct14_field69_struct_setter&& field69_) {
    field69 = std::forward<T_Struct14_field69_struct_setter>(field69_);
    __isset.field69 = true;
    return field69;
  }
  const std::vector<bool>& get_field70() const&;
  std::vector<bool> get_field70() &&;

  template <typename T_Struct14_field70_struct_setter>
  std::vector<bool>& set_field70(T_Struct14_field70_struct_setter&& field70_) {
    field70 = std::forward<T_Struct14_field70_struct_setter>(field70_);
    __isset.field70 = true;
    return field70;
  }

  const std::string& get_field71() const& {
    return field71;
  }

  std::string get_field71() && {
    return std::move(field71);
  }

  template <typename T_Struct14_field71_struct_setter>
  std::string& set_field71(T_Struct14_field71_struct_setter&& field71_) {
    field71 = std::forward<T_Struct14_field71_struct_setter>(field71_);
    __isset.field71 = true;
    return field71;
  }
  const std::vector<int16_t>& get_field72() const&;
  std::vector<int16_t> get_field72() &&;

  template <typename T_Struct14_field72_struct_setter>
  std::vector<int16_t>& set_field72(T_Struct14_field72_struct_setter&& field72_) {
    field72 = std::forward<T_Struct14_field72_struct_setter>(field72_);
    __isset.field72 = true;
    return field72;
  }
  const std::set< ::cpp2::Struct5>& get_field73() const&;
  std::set< ::cpp2::Struct5> get_field73() &&;

  template <typename T_Struct14_field73_struct_setter>
  std::set< ::cpp2::Struct5>& set_field73(T_Struct14_field73_struct_setter&& field73_) {
    field73 = std::forward<T_Struct14_field73_struct_setter>(field73_);
    __isset.field73 = true;
    return field73;
  }
  const  ::cpp2::Struct5& get_field74() const&;
   ::cpp2::Struct5 get_field74() &&;

  template <typename T_Struct14_field74_struct_setter>
   ::cpp2::Struct5& set_field74(T_Struct14_field74_struct_setter&& field74_) {
    field74 = std::forward<T_Struct14_field74_struct_setter>(field74_);
    __isset.field74 = true;
    return field74;
  }
  const std::map<int16_t, int8_t>& get_field75() const&;
  std::map<int16_t, int8_t> get_field75() &&;

  template <typename T_Struct14_field75_struct_setter>
  std::map<int16_t, int8_t>& set_field75(T_Struct14_field75_struct_setter&& field75_) {
    field75 = std::forward<T_Struct14_field75_struct_setter>(field75_);
    __isset.field75 = true;
    return field75;
  }

  bool get_field76() const {
    return field76;
  }

  bool& set_field76(bool field76_) {
    field76 = field76_;
    __isset.field76 = true;
    return field76;
  }
  const std::set<int8_t>& get_field77() const&;
  std::set<int8_t> get_field77() &&;

  template <typename T_Struct14_field77_struct_setter>
  std::set<int8_t>& set_field77(T_Struct14_field77_struct_setter&& field77_) {
    field77 = std::forward<T_Struct14_field77_struct_setter>(field77_);
    __isset.field77 = true;
    return field77;
  }

  int8_t get_field78() const {
    return field78;
  }

  int8_t& set_field78(int8_t field78_) {
    field78 = field78_;
    __isset.field78 = true;
    return field78;
  }

  const std::string& get_field79() const& {
    return field79;
  }

  std::string get_field79() && {
    return std::move(field79);
  }

  template <typename T_Struct14_field79_struct_setter>
  std::string& set_field79(T_Struct14_field79_struct_setter&& field79_) {
    field79 = std::forward<T_Struct14_field79_struct_setter>(field79_);
    __isset.field79 = true;
    return field79;
  }

  double get_field80() const {
    return field80;
  }

  double& set_field80(double field80_) {
    field80 = field80_;
    __isset.field80 = true;
    return field80;
  }

  bool get_field81() const {
    return field81;
  }

  bool& set_field81(bool field81_) {
    field81 = field81_;
    __isset.field81 = true;
    return field81;
  }

  int64_t get_field82() const {
    return field82;
  }

  int64_t& set_field82(int64_t field82_) {
    field82 = field82_;
    __isset.field82 = true;
    return field82;
  }
  const std::set<std::string>& get_field83() const&;
  std::set<std::string> get_field83() &&;

  template <typename T_Struct14_field83_struct_setter>
  std::set<std::string>& set_field83(T_Struct14_field83_struct_setter&& field83_) {
    field83 = std::forward<T_Struct14_field83_struct_setter>(field83_);
    __isset.field83 = true;
    return field83;
  }
  const  ::cpp2::Struct5& get_field84() const&;
   ::cpp2::Struct5 get_field84() &&;

  template <typename T_Struct14_field84_struct_setter>
   ::cpp2::Struct5& set_field84(T_Struct14_field84_struct_setter&& field84_) {
    field84 = std::forward<T_Struct14_field84_struct_setter>(field84_);
    __isset.field84 = true;
    return field84;
  }

  bool get_field85() const {
    return field85;
  }

  bool& set_field85(bool field85_) {
    field85 = field85_;
    __isset.field85 = true;
    return field85;
  }

  float get_field86() const {
    return field86;
  }

  float& set_field86(float field86_) {
    field86 = field86_;
    __isset.field86 = true;
    return field86;
  }
  const std::set<double>& get_field87() const&;
  std::set<double> get_field87() &&;

  template <typename T_Struct14_field87_struct_setter>
  std::set<double>& set_field87(T_Struct14_field87_struct_setter&& field87_) {
    field87 = std::forward<T_Struct14_field87_struct_setter>(field87_);
    __isset.field87 = true;
    return field87;
  }
  const std::map<double, float>& get_field88() const&;
  std::map<double, float> get_field88() &&;

  template <typename T_Struct14_field88_struct_setter>
  std::map<double, float>& set_field88(T_Struct14_field88_struct_setter&& field88_) {
    field88 = std::forward<T_Struct14_field88_struct_setter>(field88_);
    __isset.field88 = true;
    return field88;
  }
  const std::map<std::set<std::string>, std::string>& get_field89() const&;
  std::map<std::set<std::string>, std::string> get_field89() &&;

  template <typename T_Struct14_field89_struct_setter>
  std::map<std::set<std::string>, std::string>& set_field89(T_Struct14_field89_struct_setter&& field89_) {
    field89 = std::forward<T_Struct14_field89_struct_setter>(field89_);
    __isset.field89 = true;
    return field89;
  }

  int64_t get_field90() const {
    return field90;
  }

  int64_t& set_field90(int64_t field90_) {
    field90 = field90_;
    __isset.field90 = true;
    return field90;
  }

  int16_t get_field91() const {
    return field91;
  }

  int16_t& set_field91(int16_t field91_) {
    field91 = field91_;
    __isset.field91 = true;
    return field91;
  }
  const std::map<std::set<double>, int8_t>& get_field92() const&;
  std::map<std::set<double>, int8_t> get_field92() &&;

  template <typename T_Struct14_field92_struct_setter>
  std::map<std::set<double>, int8_t>& set_field92(T_Struct14_field92_struct_setter&& field92_) {
    field92 = std::forward<T_Struct14_field92_struct_setter>(field92_);
    __isset.field92 = true;
    return field92;
  }

  bool get_field93() const {
    return field93;
  }

  bool& set_field93(bool field93_) {
    field93 = field93_;
    __isset.field93 = true;
    return field93;
  }

  int64_t get_field94() const {
    return field94;
  }

  int64_t& set_field94(int64_t field94_) {
    field94 = field94_;
    __isset.field94 = true;
    return field94;
  }
  const std::vector<int64_t>& get_field95() const&;
  std::vector<int64_t> get_field95() &&;

  template <typename T_Struct14_field95_struct_setter>
  std::vector<int64_t>& set_field95(T_Struct14_field95_struct_setter&& field95_) {
    field95 = std::forward<T_Struct14_field95_struct_setter>(field95_);
    __isset.field95 = true;
    return field95;
  }
  const std::map< ::cpp2::Struct6, int64_t>& get_field96() const&;
  std::map< ::cpp2::Struct6, int64_t> get_field96() &&;

  template <typename T_Struct14_field96_struct_setter>
  std::map< ::cpp2::Struct6, int64_t>& set_field96(T_Struct14_field96_struct_setter&& field96_) {
    field96 = std::forward<T_Struct14_field96_struct_setter>(field96_);
    __isset.field96 = true;
    return field96;
  }

  const std::string& get_field97() const& {
    return field97;
  }

  std::string get_field97() && {
    return std::move(field97);
  }

  template <typename T_Struct14_field97_struct_setter>
  std::string& set_field97(T_Struct14_field97_struct_setter&& field97_) {
    field97 = std::forward<T_Struct14_field97_struct_setter>(field97_);
    __isset.field97 = true;
    return field97;
  }
  const  ::cpp2::Struct0& get_field98() const&;
   ::cpp2::Struct0 get_field98() &&;

  template <typename T_Struct14_field98_struct_setter>
   ::cpp2::Struct0& set_field98(T_Struct14_field98_struct_setter&& field98_) {
    field98 = std::forward<T_Struct14_field98_struct_setter>(field98_);
    __isset.field98 = true;
    return field98;
  }
  const std::set<float>& get_field99() const&;
  std::set<float> get_field99() &&;

  template <typename T_Struct14_field99_struct_setter>
  std::set<float>& set_field99(T_Struct14_field99_struct_setter&& field99_) {
    field99 = std::forward<T_Struct14_field99_struct_setter>(field99_);
    __isset.field99 = true;
    return field99;
  }

  int64_t get_field100() const {
    return field100;
  }

  int64_t& set_field100(int64_t field100_) {
    field100 = field100_;
    __isset.field100 = true;
    return field100;
  }
  const std::vector<bool>& get_field101() const&;
  std::vector<bool> get_field101() &&;

  template <typename T_Struct14_field101_struct_setter>
  std::vector<bool>& set_field101(T_Struct14_field101_struct_setter&& field101_) {
    field101 = std::forward<T_Struct14_field101_struct_setter>(field101_);
    __isset.field101 = true;
    return field101;
  }
  const std::vector<int8_t>& get_field102() const&;
  std::vector<int8_t> get_field102() &&;

  template <typename T_Struct14_field102_struct_setter>
  std::vector<int8_t>& set_field102(T_Struct14_field102_struct_setter&& field102_) {
    field102 = std::forward<T_Struct14_field102_struct_setter>(field102_);
    __isset.field102 = true;
    return field102;
  }

  int64_t get_field103() const {
    return field103;
  }

  int64_t& set_field103(int64_t field103_) {
    field103 = field103_;
    __isset.field103 = true;
    return field103;
  }
  const std::map<int8_t, std::set<float>>& get_field104() const&;
  std::map<int8_t, std::set<float>> get_field104() &&;

  template <typename T_Struct14_field104_struct_setter>
  std::map<int8_t, std::set<float>>& set_field104(T_Struct14_field104_struct_setter&& field104_) {
    field104 = std::forward<T_Struct14_field104_struct_setter>(field104_);
    __isset.field104 = true;
    return field104;
  }
  const  ::cpp2::Struct6& get_field105() const&;
   ::cpp2::Struct6 get_field105() &&;

  template <typename T_Struct14_field105_struct_setter>
   ::cpp2::Struct6& set_field105(T_Struct14_field105_struct_setter&& field105_) {
    field105 = std::forward<T_Struct14_field105_struct_setter>(field105_);
    __isset.field105 = true;
    return field105;
  }

  int8_t get_field106() const {
    return field106;
  }

  int8_t& set_field106(int8_t field106_) {
    field106 = field106_;
    __isset.field106 = true;
    return field106;
  }
  const std::set<float>& get_field107() const&;
  std::set<float> get_field107() &&;

  template <typename T_Struct14_field107_struct_setter>
  std::set<float>& set_field107(T_Struct14_field107_struct_setter&& field107_) {
    field107 = std::forward<T_Struct14_field107_struct_setter>(field107_);
    __isset.field107 = true;
    return field107;
  }

  float get_field108() const {
    return field108;
  }

  float& set_field108(float field108_) {
    field108 = field108_;
    __isset.field108 = true;
    return field108;
  }

  const std::string& get_field109() const& {
    return field109;
  }

  std::string get_field109() && {
    return std::move(field109);
  }

  template <typename T_Struct14_field109_struct_setter>
  std::string& set_field109(T_Struct14_field109_struct_setter&& field109_) {
    field109 = std::forward<T_Struct14_field109_struct_setter>(field109_);
    __isset.field109 = true;
    return field109;
  }
  const std::vector<int8_t>& get_field110() const&;
  std::vector<int8_t> get_field110() &&;

  template <typename T_Struct14_field110_struct_setter>
  std::vector<int8_t>& set_field110(T_Struct14_field110_struct_setter&& field110_) {
    field110 = std::forward<T_Struct14_field110_struct_setter>(field110_);
    __isset.field110 = true;
    return field110;
  }
  const std::set<std::map<float, int16_t>>& get_field111() const&;
  std::set<std::map<float, int16_t>> get_field111() &&;

  template <typename T_Struct14_field111_struct_setter>
  std::set<std::map<float, int16_t>>& set_field111(T_Struct14_field111_struct_setter&& field111_) {
    field111 = std::forward<T_Struct14_field111_struct_setter>(field111_);
    __isset.field111 = true;
    return field111;
  }
  const std::vector<float>& get_field112() const&;
  std::vector<float> get_field112() &&;

  template <typename T_Struct14_field112_struct_setter>
  std::vector<float>& set_field112(T_Struct14_field112_struct_setter&& field112_) {
    field112 = std::forward<T_Struct14_field112_struct_setter>(field112_);
    __isset.field112 = true;
    return field112;
  }
  const std::vector<int8_t>& get_field113() const&;
  std::vector<int8_t> get_field113() &&;

  template <typename T_Struct14_field113_struct_setter>
  std::vector<int8_t>& set_field113(T_Struct14_field113_struct_setter&& field113_) {
    field113 = std::forward<T_Struct14_field113_struct_setter>(field113_);
    __isset.field113 = true;
    return field113;
  }
  const  ::cpp2::Struct4& get_field114() const&;
   ::cpp2::Struct4 get_field114() &&;

  template <typename T_Struct14_field114_struct_setter>
   ::cpp2::Struct4& set_field114(T_Struct14_field114_struct_setter&& field114_) {
    field114 = std::forward<T_Struct14_field114_struct_setter>(field114_);
    __isset.field114 = true;
    return field114;
  }

  bool get_field115() const {
    return field115;
  }

  bool& set_field115(bool field115_) {
    field115 = field115_;
    __isset.field115 = true;
    return field115;
  }

  int16_t get_field116() const {
    return field116;
  }

  int16_t& set_field116(int16_t field116_) {
    field116 = field116_;
    __isset.field116 = true;
    return field116;
  }
  const std::map<float, float>& get_field117() const&;
  std::map<float, float> get_field117() &&;

  template <typename T_Struct14_field117_struct_setter>
  std::map<float, float>& set_field117(T_Struct14_field117_struct_setter&& field117_) {
    field117 = std::forward<T_Struct14_field117_struct_setter>(field117_);
    __isset.field117 = true;
    return field117;
  }
  const std::set<int8_t>& get_field118() const&;
  std::set<int8_t> get_field118() &&;

  template <typename T_Struct14_field118_struct_setter>
  std::set<int8_t>& set_field118(T_Struct14_field118_struct_setter&& field118_) {
    field118 = std::forward<T_Struct14_field118_struct_setter>(field118_);
    __isset.field118 = true;
    return field118;
  }
  const std::set<std::string>& get_field119() const&;
  std::set<std::string> get_field119() &&;

  template <typename T_Struct14_field119_struct_setter>
  std::set<std::string>& set_field119(T_Struct14_field119_struct_setter&& field119_) {
    field119 = std::forward<T_Struct14_field119_struct_setter>(field119_);
    __isset.field119 = true;
    return field119;
  }
  const std::set<int8_t>& get_field120() const&;
  std::set<int8_t> get_field120() &&;

  template <typename T_Struct14_field120_struct_setter>
  std::set<int8_t>& set_field120(T_Struct14_field120_struct_setter&& field120_) {
    field120 = std::forward<T_Struct14_field120_struct_setter>(field120_);
    __isset.field120 = true;
    return field120;
  }
  const std::map< ::cpp2::Struct0, int32_t>& get_field121() const&;
  std::map< ::cpp2::Struct0, int32_t> get_field121() &&;

  template <typename T_Struct14_field121_struct_setter>
  std::map< ::cpp2::Struct0, int32_t>& set_field121(T_Struct14_field121_struct_setter&& field121_) {
    field121 = std::forward<T_Struct14_field121_struct_setter>(field121_);
    __isset.field121 = true;
    return field121;
  }
  const std::set<int8_t>& get_field122() const&;
  std::set<int8_t> get_field122() &&;

  template <typename T_Struct14_field122_struct_setter>
  std::set<int8_t>& set_field122(T_Struct14_field122_struct_setter&& field122_) {
    field122 = std::forward<T_Struct14_field122_struct_setter>(field122_);
    __isset.field122 = true;
    return field122;
  }
  const  ::cpp2::Struct10& get_field123() const&;
   ::cpp2::Struct10 get_field123() &&;

  template <typename T_Struct14_field123_struct_setter>
   ::cpp2::Struct10& set_field123(T_Struct14_field123_struct_setter&& field123_) {
    field123 = std::forward<T_Struct14_field123_struct_setter>(field123_);
    __isset.field123 = true;
    return field123;
  }

  float get_field124() const {
    return field124;
  }

  float& set_field124(float field124_) {
    field124 = field124_;
    __isset.field124 = true;
    return field124;
  }

  const std::string& get_field125() const& {
    return field125;
  }

  std::string get_field125() && {
    return std::move(field125);
  }

  template <typename T_Struct14_field125_struct_setter>
  std::string& set_field125(T_Struct14_field125_struct_setter&& field125_) {
    field125 = std::forward<T_Struct14_field125_struct_setter>(field125_);
    __isset.field125 = true;
    return field125;
  }

  bool get_field126() const {
    return field126;
  }

  bool& set_field126(bool field126_) {
    field126 = field126_;
    __isset.field126 = true;
    return field126;
  }
  const std::vector<std::map<std::string, bool>>& get_field127() const&;
  std::vector<std::map<std::string, bool>> get_field127() &&;

  template <typename T_Struct14_field127_struct_setter>
  std::vector<std::map<std::string, bool>>& set_field127(T_Struct14_field127_struct_setter&& field127_) {
    field127 = std::forward<T_Struct14_field127_struct_setter>(field127_);
    __isset.field127 = true;
    return field127;
  }
  const std::vector<double>& get_field128() const&;
  std::vector<double> get_field128() &&;

  template <typename T_Struct14_field128_struct_setter>
  std::vector<double>& set_field128(T_Struct14_field128_struct_setter&& field128_) {
    field128 = std::forward<T_Struct14_field128_struct_setter>(field128_);
    __isset.field128 = true;
    return field128;
  }
  const std::vector<int8_t>& get_field129() const&;
  std::vector<int8_t> get_field129() &&;

  template <typename T_Struct14_field129_struct_setter>
  std::vector<int8_t>& set_field129(T_Struct14_field129_struct_setter&& field129_) {
    field129 = std::forward<T_Struct14_field129_struct_setter>(field129_);
    __isset.field129 = true;
    return field129;
  }

  int8_t get_field130() const {
    return field130;
  }

  int8_t& set_field130(int8_t field130_) {
    field130 = field130_;
    __isset.field130 = true;
    return field130;
  }

  const std::string& get_field131() const& {
    return field131;
  }

  std::string get_field131() && {
    return std::move(field131);
  }

  template <typename T_Struct14_field131_struct_setter>
  std::string& set_field131(T_Struct14_field131_struct_setter&& field131_) {
    field131 = std::forward<T_Struct14_field131_struct_setter>(field131_);
    __isset.field131 = true;
    return field131;
  }
  const std::map< ::cpp2::Struct2, float>& get_field132() const&;
  std::map< ::cpp2::Struct2, float> get_field132() &&;

  template <typename T_Struct14_field132_struct_setter>
  std::map< ::cpp2::Struct2, float>& set_field132(T_Struct14_field132_struct_setter&& field132_) {
    field132 = std::forward<T_Struct14_field132_struct_setter>(field132_);
    __isset.field132 = true;
    return field132;
  }
  const std::vector<double>& get_field133() const&;
  std::vector<double> get_field133() &&;

  template <typename T_Struct14_field133_struct_setter>
  std::vector<double>& set_field133(T_Struct14_field133_struct_setter&& field133_) {
    field133 = std::forward<T_Struct14_field133_struct_setter>(field133_);
    __isset.field133 = true;
    return field133;
  }

  int64_t get_field134() const {
    return field134;
  }

  int64_t& set_field134(int64_t field134_) {
    field134 = field134_;
    __isset.field134 = true;
    return field134;
  }

  const std::string& get_field135() const& {
    return field135;
  }

  std::string get_field135() && {
    return std::move(field135);
  }

  template <typename T_Struct14_field135_struct_setter>
  std::string& set_field135(T_Struct14_field135_struct_setter&& field135_) {
    field135 = std::forward<T_Struct14_field135_struct_setter>(field135_);
    __isset.field135 = true;
    return field135;
  }

  float get_field136() const {
    return field136;
  }

  float& set_field136(float field136_) {
    field136 = field136_;
    __isset.field136 = true;
    return field136;
  }
  const std::set<bool>& get_field137() const&;
  std::set<bool> get_field137() &&;

  template <typename T_Struct14_field137_struct_setter>
  std::set<bool>& set_field137(T_Struct14_field137_struct_setter&& field137_) {
    field137 = std::forward<T_Struct14_field137_struct_setter>(field137_);
    __isset.field137 = true;
    return field137;
  }
  const std::map<bool, int32_t>& get_field138() const&;
  std::map<bool, int32_t> get_field138() &&;

  template <typename T_Struct14_field138_struct_setter>
  std::map<bool, int32_t>& set_field138(T_Struct14_field138_struct_setter&& field138_) {
    field138 = std::forward<T_Struct14_field138_struct_setter>(field138_);
    __isset.field138 = true;
    return field138;
  }

  double get_field139() const {
    return field139;
  }

  double& set_field139(double field139_) {
    field139 = field139_;
    __isset.field139 = true;
    return field139;
  }

  const std::string& get_field140() const& {
    return field140;
  }

  std::string get_field140() && {
    return std::move(field140);
  }

  template <typename T_Struct14_field140_struct_setter>
  std::string& set_field140(T_Struct14_field140_struct_setter&& field140_) {
    field140 = std::forward<T_Struct14_field140_struct_setter>(field140_);
    __isset.field140 = true;
    return field140;
  }

  const std::string& get_field141() const& {
    return field141;
  }

  std::string get_field141() && {
    return std::move(field141);
  }

  template <typename T_Struct14_field141_struct_setter>
  std::string& set_field141(T_Struct14_field141_struct_setter&& field141_) {
    field141 = std::forward<T_Struct14_field141_struct_setter>(field141_);
    __isset.field141 = true;
    return field141;
  }

  int8_t get_field142() const {
    return field142;
  }

  int8_t& set_field142(int8_t field142_) {
    field142 = field142_;
    __isset.field142 = true;
    return field142;
  }
  const std::set<std::string>& get_field143() const&;
  std::set<std::string> get_field143() &&;

  template <typename T_Struct14_field143_struct_setter>
  std::set<std::string>& set_field143(T_Struct14_field143_struct_setter&& field143_) {
    field143 = std::forward<T_Struct14_field143_struct_setter>(field143_);
    __isset.field143 = true;
    return field143;
  }
  const std::map<float, int64_t>& get_field144() const&;
  std::map<float, int64_t> get_field144() &&;

  template <typename T_Struct14_field144_struct_setter>
  std::map<float, int64_t>& set_field144(T_Struct14_field144_struct_setter&& field144_) {
    field144 = std::forward<T_Struct14_field144_struct_setter>(field144_);
    __isset.field144 = true;
    return field144;
  }

  int32_t get_field145() const {
    return field145;
  }

  int32_t& set_field145(int32_t field145_) {
    field145 = field145_;
    __isset.field145 = true;
    return field145;
  }

  int16_t get_field146() const {
    return field146;
  }

  int16_t& set_field146(int16_t field146_) {
    field146 = field146_;
    __isset.field146 = true;
    return field146;
  }
  const std::set<std::vector<int32_t>>& get_field147() const&;
  std::set<std::vector<int32_t>> get_field147() &&;

  template <typename T_Struct14_field147_struct_setter>
  std::set<std::vector<int32_t>>& set_field147(T_Struct14_field147_struct_setter&& field147_) {
    field147 = std::forward<T_Struct14_field147_struct_setter>(field147_);
    __isset.field147 = true;
    return field147;
  }
  const std::map<float, std::vector<int32_t>>& get_field148() const&;
  std::map<float, std::vector<int32_t>> get_field148() &&;

  template <typename T_Struct14_field148_struct_setter>
  std::map<float, std::vector<int32_t>>& set_field148(T_Struct14_field148_struct_setter&& field148_) {
    field148 = std::forward<T_Struct14_field148_struct_setter>(field148_);
    __isset.field148 = true;
    return field148;
  }
  const  ::cpp2::Struct7& get_field149() const&;
   ::cpp2::Struct7 get_field149() &&;

  template <typename T_Struct14_field149_struct_setter>
   ::cpp2::Struct7& set_field149(T_Struct14_field149_struct_setter&& field149_) {
    field149 = std::forward<T_Struct14_field149_struct_setter>(field149_);
    __isset.field149 = true;
    return field149;
  }

  int8_t get_field150() const {
    return field150;
  }

  int8_t& set_field150(int8_t field150_) {
    field150 = field150_;
    __isset.field150 = true;
    return field150;
  }

  bool get_field151() const {
    return field151;
  }

  bool& set_field151(bool field151_) {
    field151 = field151_;
    __isset.field151 = true;
    return field151;
  }
  const std::map<int16_t, int32_t>& get_field152() const&;
  std::map<int16_t, int32_t> get_field152() &&;

  template <typename T_Struct14_field152_struct_setter>
  std::map<int16_t, int32_t>& set_field152(T_Struct14_field152_struct_setter&& field152_) {
    field152 = std::forward<T_Struct14_field152_struct_setter>(field152_);
    __isset.field152 = true;
    return field152;
  }

  int8_t get_field153() const {
    return field153;
  }

  int8_t& set_field153(int8_t field153_) {
    field153 = field153_;
    __isset.field153 = true;
    return field153;
  }

  const std::string& get_field154() const& {
    return field154;
  }

  std::string get_field154() && {
    return std::move(field154);
  }

  template <typename T_Struct14_field154_struct_setter>
  std::string& set_field154(T_Struct14_field154_struct_setter&& field154_) {
    field154 = std::forward<T_Struct14_field154_struct_setter>(field154_);
    __isset.field154 = true;
    return field154;
  }

  const std::string& get_field155() const& {
    return field155;
  }

  std::string get_field155() && {
    return std::move(field155);
  }

  template <typename T_Struct14_field155_struct_setter>
  std::string& set_field155(T_Struct14_field155_struct_setter&& field155_) {
    field155 = std::forward<T_Struct14_field155_struct_setter>(field155_);
    __isset.field155 = true;
    return field155;
  }
  const  ::cpp2::Struct2& get_field156() const&;
   ::cpp2::Struct2 get_field156() &&;

  template <typename T_Struct14_field156_struct_setter>
   ::cpp2::Struct2& set_field156(T_Struct14_field156_struct_setter&& field156_) {
    field156 = std::forward<T_Struct14_field156_struct_setter>(field156_);
    __isset.field156 = true;
    return field156;
  }
  const std::vector<std::string>& get_field157() const&;
  std::vector<std::string> get_field157() &&;

  template <typename T_Struct14_field157_struct_setter>
  std::vector<std::string>& set_field157(T_Struct14_field157_struct_setter&& field157_) {
    field157 = std::forward<T_Struct14_field157_struct_setter>(field157_);
    __isset.field157 = true;
    return field157;
  }
  const  ::cpp2::Struct6& get_field158() const&;
   ::cpp2::Struct6 get_field158() &&;

  template <typename T_Struct14_field158_struct_setter>
   ::cpp2::Struct6& set_field158(T_Struct14_field158_struct_setter&& field158_) {
    field158 = std::forward<T_Struct14_field158_struct_setter>(field158_);
    __isset.field158 = true;
    return field158;
  }

  bool get_field159() const {
    return field159;
  }

  bool& set_field159(bool field159_) {
    field159 = field159_;
    __isset.field159 = true;
    return field159;
  }
  const std::vector<int16_t>& get_field160() const&;
  std::vector<int16_t> get_field160() &&;

  template <typename T_Struct14_field160_struct_setter>
  std::vector<int16_t>& set_field160(T_Struct14_field160_struct_setter&& field160_) {
    field160 = std::forward<T_Struct14_field160_struct_setter>(field160_);
    __isset.field160 = true;
    return field160;
  }
  const std::vector<int64_t>& get_field161() const&;
  std::vector<int64_t> get_field161() &&;

  template <typename T_Struct14_field161_struct_setter>
  std::vector<int64_t>& set_field161(T_Struct14_field161_struct_setter&& field161_) {
    field161 = std::forward<T_Struct14_field161_struct_setter>(field161_);
    __isset.field161 = true;
    return field161;
  }

  int64_t get_field162() const {
    return field162;
  }

  int64_t& set_field162(int64_t field162_) {
    field162 = field162_;
    __isset.field162 = true;
    return field162;
  }

  const std::string& get_field163() const& {
    return field163;
  }

  std::string get_field163() && {
    return std::move(field163);
  }

  template <typename T_Struct14_field163_struct_setter>
  std::string& set_field163(T_Struct14_field163_struct_setter&& field163_) {
    field163 = std::forward<T_Struct14_field163_struct_setter>(field163_);
    __isset.field163 = true;
    return field163;
  }

  const std::string& get_field164() const& {
    return field164;
  }

  std::string get_field164() && {
    return std::move(field164);
  }

  template <typename T_Struct14_field164_struct_setter>
  std::string& set_field164(T_Struct14_field164_struct_setter&& field164_) {
    field164 = std::forward<T_Struct14_field164_struct_setter>(field164_);
    __isset.field164 = true;
    return field164;
  }

  int64_t get_field165() const {
    return field165;
  }

  int64_t& set_field165(int64_t field165_) {
    field165 = field165_;
    __isset.field165 = true;
    return field165;
  }
  const std::vector<std::string>& get_field166() const&;
  std::vector<std::string> get_field166() &&;

  template <typename T_Struct14_field166_struct_setter>
  std::vector<std::string>& set_field166(T_Struct14_field166_struct_setter&& field166_) {
    field166 = std::forward<T_Struct14_field166_struct_setter>(field166_);
    __isset.field166 = true;
    return field166;
  }
  const  ::cpp2::Struct5& get_field167() const&;
   ::cpp2::Struct5 get_field167() &&;

  template <typename T_Struct14_field167_struct_setter>
   ::cpp2::Struct5& set_field167(T_Struct14_field167_struct_setter&& field167_) {
    field167 = std::forward<T_Struct14_field167_struct_setter>(field167_);
    __isset.field167 = true;
    return field167;
  }
  const std::map< ::cpp2::Struct3, int64_t>& get_field168() const&;
  std::map< ::cpp2::Struct3, int64_t> get_field168() &&;

  template <typename T_Struct14_field168_struct_setter>
  std::map< ::cpp2::Struct3, int64_t>& set_field168(T_Struct14_field168_struct_setter&& field168_) {
    field168 = std::forward<T_Struct14_field168_struct_setter>(field168_);
    __isset.field168 = true;
    return field168;
  }
  const std::map<std::string, bool>& get_field169() const&;
  std::map<std::string, bool> get_field169() &&;

  template <typename T_Struct14_field169_struct_setter>
  std::map<std::string, bool>& set_field169(T_Struct14_field169_struct_setter&& field169_) {
    field169 = std::forward<T_Struct14_field169_struct_setter>(field169_);
    __isset.field169 = true;
    return field169;
  }
  const std::vector<double>& get_field170() const&;
  std::vector<double> get_field170() &&;

  template <typename T_Struct14_field170_struct_setter>
  std::vector<double>& set_field170(T_Struct14_field170_struct_setter&& field170_) {
    field170 = std::forward<T_Struct14_field170_struct_setter>(field170_);
    __isset.field170 = true;
    return field170;
  }
  const std::set<int16_t>& get_field171() const&;
  std::set<int16_t> get_field171() &&;

  template <typename T_Struct14_field171_struct_setter>
  std::set<int16_t>& set_field171(T_Struct14_field171_struct_setter&& field171_) {
    field171 = std::forward<T_Struct14_field171_struct_setter>(field171_);
    __isset.field171 = true;
    return field171;
  }
  const std::vector<std::string>& get_field172() const&;
  std::vector<std::string> get_field172() &&;

  template <typename T_Struct14_field172_struct_setter>
  std::vector<std::string>& set_field172(T_Struct14_field172_struct_setter&& field172_) {
    field172 = std::forward<T_Struct14_field172_struct_setter>(field172_);
    __isset.field172 = true;
    return field172;
  }

  int32_t get_field173() const {
    return field173;
  }

  int32_t& set_field173(int32_t field173_) {
    field173 = field173_;
    __isset.field173 = true;
    return field173;
  }
  const std::set<int32_t>& get_field174() const&;
  std::set<int32_t> get_field174() &&;

  template <typename T_Struct14_field174_struct_setter>
  std::set<int32_t>& set_field174(T_Struct14_field174_struct_setter&& field174_) {
    field174 = std::forward<T_Struct14_field174_struct_setter>(field174_);
    __isset.field174 = true;
    return field174;
  }
  const std::map<int8_t, std::string>& get_field175() const&;
  std::map<int8_t, std::string> get_field175() &&;

  template <typename T_Struct14_field175_struct_setter>
  std::map<int8_t, std::string>& set_field175(T_Struct14_field175_struct_setter&& field175_) {
    field175 = std::forward<T_Struct14_field175_struct_setter>(field175_);
    __isset.field175 = true;
    return field175;
  }
  const std::vector<std::string>& get_field176() const&;
  std::vector<std::string> get_field176() &&;

  template <typename T_Struct14_field176_struct_setter>
  std::vector<std::string>& set_field176(T_Struct14_field176_struct_setter&& field176_) {
    field176 = std::forward<T_Struct14_field176_struct_setter>(field176_);
    __isset.field176 = true;
    return field176;
  }
  const  ::cpp2::Struct4& get_field177() const&;
   ::cpp2::Struct4 get_field177() &&;

  template <typename T_Struct14_field177_struct_setter>
   ::cpp2::Struct4& set_field177(T_Struct14_field177_struct_setter&& field177_) {
    field177 = std::forward<T_Struct14_field177_struct_setter>(field177_);
    __isset.field177 = true;
    return field177;
  }
  const  ::cpp2::Struct10& get_field178() const&;
   ::cpp2::Struct10 get_field178() &&;

  template <typename T_Struct14_field178_struct_setter>
   ::cpp2::Struct10& set_field178(T_Struct14_field178_struct_setter&& field178_) {
    field178 = std::forward<T_Struct14_field178_struct_setter>(field178_);
    __isset.field178 = true;
    return field178;
  }
  const std::set<int64_t>& get_field179() const&;
  std::set<int64_t> get_field179() &&;

  template <typename T_Struct14_field179_struct_setter>
  std::set<int64_t>& set_field179(T_Struct14_field179_struct_setter&& field179_) {
    field179 = std::forward<T_Struct14_field179_struct_setter>(field179_);
    __isset.field179 = true;
    return field179;
  }
  const std::vector<std::string>& get_field180() const&;
  std::vector<std::string> get_field180() &&;

  template <typename T_Struct14_field180_struct_setter>
  std::vector<std::string>& set_field180(T_Struct14_field180_struct_setter&& field180_) {
    field180 = std::forward<T_Struct14_field180_struct_setter>(field180_);
    __isset.field180 = true;
    return field180;
  }

  int8_t get_field181() const {
    return field181;
  }

  int8_t& set_field181(int8_t field181_) {
    field181 = field181_;
    __isset.field181 = true;
    return field181;
  }
  const  ::cpp2::Struct5& get_field182() const&;
   ::cpp2::Struct5 get_field182() &&;

  template <typename T_Struct14_field182_struct_setter>
   ::cpp2::Struct5& set_field182(T_Struct14_field182_struct_setter&& field182_) {
    field182 = std::forward<T_Struct14_field182_struct_setter>(field182_);
    __isset.field182 = true;
    return field182;
  }

  int8_t get_field183() const {
    return field183;
  }

  int8_t& set_field183(int8_t field183_) {
    field183 = field183_;
    __isset.field183 = true;
    return field183;
  }

  const std::string& get_field184() const& {
    return field184;
  }

  std::string get_field184() && {
    return std::move(field184);
  }

  template <typename T_Struct14_field184_struct_setter>
  std::string& set_field184(T_Struct14_field184_struct_setter&& field184_) {
    field184 = std::forward<T_Struct14_field184_struct_setter>(field184_);
    __isset.field184 = true;
    return field184;
  }

  double get_field185() const {
    return field185;
  }

  double& set_field185(double field185_) {
    field185 = field185_;
    __isset.field185 = true;
    return field185;
  }
  const std::set<float>& get_field186() const&;
  std::set<float> get_field186() &&;

  template <typename T_Struct14_field186_struct_setter>
  std::set<float>& set_field186(T_Struct14_field186_struct_setter&& field186_) {
    field186 = std::forward<T_Struct14_field186_struct_setter>(field186_);
    __isset.field186 = true;
    return field186;
  }

  int32_t get_field187() const {
    return field187;
  }

  int32_t& set_field187(int32_t field187_) {
    field187 = field187_;
    __isset.field187 = true;
    return field187;
  }
  const  ::cpp2::Struct0& get_field188() const&;
   ::cpp2::Struct0 get_field188() &&;

  template <typename T_Struct14_field188_struct_setter>
   ::cpp2::Struct0& set_field188(T_Struct14_field188_struct_setter&& field188_) {
    field188 = std::forward<T_Struct14_field188_struct_setter>(field188_);
    __isset.field188 = true;
    return field188;
  }

  int16_t get_field189() const {
    return field189;
  }

  int16_t& set_field189(int16_t field189_) {
    field189 = field189_;
    __isset.field189 = true;
    return field189;
  }

  float get_field190() const {
    return field190;
  }

  float& set_field190(float field190_) {
    field190 = field190_;
    __isset.field190 = true;
    return field190;
  }
  const  ::cpp2::Struct2& get_field191() const&;
   ::cpp2::Struct2 get_field191() &&;

  template <typename T_Struct14_field191_struct_setter>
   ::cpp2::Struct2& set_field191(T_Struct14_field191_struct_setter&& field191_) {
    field191 = std::forward<T_Struct14_field191_struct_setter>(field191_);
    __isset.field191 = true;
    return field191;
  }
  const std::map<std::vector<int16_t>, int8_t>& get_field192() const&;
  std::map<std::vector<int16_t>, int8_t> get_field192() &&;

  template <typename T_Struct14_field192_struct_setter>
  std::map<std::vector<int16_t>, int8_t>& set_field192(T_Struct14_field192_struct_setter&& field192_) {
    field192 = std::forward<T_Struct14_field192_struct_setter>(field192_);
    __isset.field192 = true;
    return field192;
  }

  const std::string& get_field193() const& {
    return field193;
  }

  std::string get_field193() && {
    return std::move(field193);
  }

  template <typename T_Struct14_field193_struct_setter>
  std::string& set_field193(T_Struct14_field193_struct_setter&& field193_) {
    field193 = std::forward<T_Struct14_field193_struct_setter>(field193_);
    __isset.field193 = true;
    return field193;
  }

  const std::string& get_field194() const& {
    return field194;
  }

  std::string get_field194() && {
    return std::move(field194);
  }

  template <typename T_Struct14_field194_struct_setter>
  std::string& set_field194(T_Struct14_field194_struct_setter&& field194_) {
    field194 = std::forward<T_Struct14_field194_struct_setter>(field194_);
    __isset.field194 = true;
    return field194;
  }
  const  ::cpp2::Struct2& get_field195() const&;
   ::cpp2::Struct2 get_field195() &&;

  template <typename T_Struct14_field195_struct_setter>
   ::cpp2::Struct2& set_field195(T_Struct14_field195_struct_setter&& field195_) {
    field195 = std::forward<T_Struct14_field195_struct_setter>(field195_);
    __isset.field195 = true;
    return field195;
  }
  const std::map<bool,  ::cpp2::Struct3>& get_field196() const&;
  std::map<bool,  ::cpp2::Struct3> get_field196() &&;

  template <typename T_Struct14_field196_struct_setter>
  std::map<bool,  ::cpp2::Struct3>& set_field196(T_Struct14_field196_struct_setter&& field196_) {
    field196 = std::forward<T_Struct14_field196_struct_setter>(field196_);
    __isset.field196 = true;
    return field196;
  }

  bool get_field197() const {
    return field197;
  }

  bool& set_field197(bool field197_) {
    field197 = field197_;
    __isset.field197 = true;
    return field197;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct14& a, Struct14& b);
extern template uint32_t Struct14::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct14::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct14::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct14::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct14::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct14::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct14::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct14::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct14>::clear( ::cpp2::Struct14* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct14>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct14>::write(Protocol* proto,  ::cpp2::Struct14 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct14>::read(Protocol* proto,  ::cpp2::Struct14* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct14>::serializedSize(Protocol const* proto,  ::cpp2::Struct14 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct14>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct14 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct15 : private apache::thrift::detail::st::ComparisonOperators<Struct15> {
 public:

  Struct15() :
      field3(0),
      field4(0),
      field7(0),
      field8(0),
      field10(0),
      field12(0),
      field13(0),
      field23(0),
      field25(0),
      field28(0),
      field31(0),
      field32(0),
      field33(0),
      field35(0),
      field36(0),
      field38(0),
      field39(0),
      field41(0),
      field44(0),
      field47(0),
      field48(0),
      field49(0),
      field52(0),
      field56(0),
      field58(0),
      field61(0),
      field62(0),
      field68(0),
      field69(0) {}
  // FragileConstructor for use in initialization lists only

  Struct15(apache::thrift::FragileConstructor,  ::cpp2::Struct6 field1__arg, std::set<int64_t> field2__arg, int32_t field3__arg, int32_t field4__arg, std::string field5__arg, std::set<int8_t> field6__arg, int16_t field7__arg, bool field8__arg, std::vector<std::map<std::set<int8_t>, int32_t>> field9__arg, int32_t field10__arg, std::vector<int8_t> field11__arg, bool field12__arg, float field13__arg, std::set<std::vector<int16_t>> field14__arg, std::map<int64_t, std::map<std::set<std::string>, float>> field15__arg, std::set<int32_t> field16__arg, std::map<bool, std::map<int64_t, float>> field17__arg, std::set<float> field18__arg,  ::cpp2::Struct3 field19__arg, std::set<int16_t> field20__arg, std::string field21__arg, std::string field22__arg, int64_t field23__arg, std::string field24__arg, int16_t field25__arg, std::vector<std::map<std::set<int32_t>, std::string>> field26__arg, std::set<std::map<int8_t, int64_t>> field27__arg, double field28__arg,  ::cpp2::Struct2 field29__arg,  ::cpp2::Struct3 field30__arg, int32_t field31__arg, float field32__arg, int16_t field33__arg, std::map<std::string, std::vector<int32_t>> field34__arg, int64_t field35__arg, bool field36__arg, std::vector<double> field37__arg, double field38__arg, float field39__arg, std::string field40__arg, double field41__arg,  ::cpp2::Struct5 field42__arg, std::string field43__arg, int8_t field44__arg, std::set<std::string> field45__arg, std::vector< ::cpp2::Struct0> field46__arg, int8_t field47__arg, int16_t field48__arg, int8_t field49__arg, std::vector<std::string> field50__arg, std::set<std::set<std::string>> field51__arg, bool field52__arg, std::string field53__arg,  ::cpp2::Struct4 field54__arg, std::string field55__arg, double field56__arg, std::map<int32_t, float> field57__arg, int16_t field58__arg, std::vector<int32_t> field59__arg,  ::cpp2::Struct9 field60__arg, int16_t field61__arg, int32_t field62__arg, std::vector<std::string> field63__arg, std::map<std::map<int8_t, int32_t>, int16_t> field64__arg,  ::cpp2::Struct9 field65__arg,  ::cpp2::Struct8 field66__arg, std::string field67__arg, bool field68__arg, bool field69__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct15(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct15(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }

  Struct15(Struct15&&) = default;

  Struct15(const Struct15&) = default;

  Struct15& operator=(Struct15&&) = default;

  Struct15& operator=(const Struct15&) = default;
  void __clear();

  virtual ~Struct15() {}

   ::cpp2::Struct6 field1;
  std::set<int64_t> field2;
  int32_t field3;
  int32_t field4;
  std::string field5;
  std::set<int8_t> field6;
  int16_t field7;
  bool field8;
  std::vector<std::map<std::set<int8_t>, int32_t>> field9;
  int32_t field10;
  std::vector<int8_t> field11;
  bool field12;
  float field13;
  std::set<std::vector<int16_t>> field14;
  std::map<int64_t, std::map<std::set<std::string>, float>> field15;
  std::set<int32_t> field16;
  std::map<bool, std::map<int64_t, float>> field17;
  std::set<float> field18;
   ::cpp2::Struct3 field19;
  std::set<int16_t> field20;
  std::string field21;
  std::string field22;
  int64_t field23;
  std::string field24;
  int16_t field25;
  std::vector<std::map<std::set<int32_t>, std::string>> field26;
  std::set<std::map<int8_t, int64_t>> field27;
  double field28;
   ::cpp2::Struct2 field29;
   ::cpp2::Struct3 field30;
  int32_t field31;
  float field32;
  int16_t field33;
  std::map<std::string, std::vector<int32_t>> field34;
  int64_t field35;
  bool field36;
  std::vector<double> field37;
  double field38;
  float field39;
  std::string field40;
  double field41;
   ::cpp2::Struct5 field42;
  std::string field43;
  int8_t field44;
  std::set<std::string> field45;
  std::vector< ::cpp2::Struct0> field46;
  int8_t field47;
  int16_t field48;
  int8_t field49;
  std::vector<std::string> field50;
  std::set<std::set<std::string>> field51;
  bool field52;
  std::string field53;
   ::cpp2::Struct4 field54;
  std::string field55;
  double field56;
  std::map<int32_t, float> field57;
  int16_t field58;
  std::vector<int32_t> field59;
   ::cpp2::Struct9 field60;
  int16_t field61;
  int32_t field62;
  std::vector<std::string> field63;
  std::map<std::map<int8_t, int32_t>, int16_t> field64;
   ::cpp2::Struct9 field65;
   ::cpp2::Struct8 field66;
  std::string field67;
  bool field68;
  bool field69;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
  } __isset;
  bool operator==(const Struct15& rhs) const;

  bool operator < (const Struct15& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    (void)rhs;
    return false;
  }
  const  ::cpp2::Struct6& get_field1() const&;
   ::cpp2::Struct6 get_field1() &&;

  template <typename T_Struct15_field1_struct_setter>
   ::cpp2::Struct6& set_field1(T_Struct15_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct15_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const std::set<int64_t>& get_field2() const&;
  std::set<int64_t> get_field2() &&;

  template <typename T_Struct15_field2_struct_setter>
  std::set<int64_t>& set_field2(T_Struct15_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct15_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  int32_t get_field3() const {
    return field3;
  }

  int32_t& set_field3(int32_t field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }

  int32_t get_field4() const {
    return field4;
  }

  int32_t& set_field4(int32_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }

  const std::string& get_field5() const& {
    return field5;
  }

  std::string get_field5() && {
    return std::move(field5);
  }

  template <typename T_Struct15_field5_struct_setter>
  std::string& set_field5(T_Struct15_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct15_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }
  const std::set<int8_t>& get_field6() const&;
  std::set<int8_t> get_field6() &&;

  template <typename T_Struct15_field6_struct_setter>
  std::set<int8_t>& set_field6(T_Struct15_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct15_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }

  int16_t get_field7() const {
    return field7;
  }

  int16_t& set_field7(int16_t field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }

  bool get_field8() const {
    return field8;
  }

  bool& set_field8(bool field8_) {
    field8 = field8_;
    __isset.field8 = true;
    return field8;
  }
  const std::vector<std::map<std::set<int8_t>, int32_t>>& get_field9() const&;
  std::vector<std::map<std::set<int8_t>, int32_t>> get_field9() &&;

  template <typename T_Struct15_field9_struct_setter>
  std::vector<std::map<std::set<int8_t>, int32_t>>& set_field9(T_Struct15_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct15_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }

  int32_t get_field10() const {
    return field10;
  }

  int32_t& set_field10(int32_t field10_) {
    field10 = field10_;
    __isset.field10 = true;
    return field10;
  }
  const std::vector<int8_t>& get_field11() const&;
  std::vector<int8_t> get_field11() &&;

  template <typename T_Struct15_field11_struct_setter>
  std::vector<int8_t>& set_field11(T_Struct15_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct15_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }

  bool get_field12() const {
    return field12;
  }

  bool& set_field12(bool field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }

  float get_field13() const {
    return field13;
  }

  float& set_field13(float field13_) {
    field13 = field13_;
    __isset.field13 = true;
    return field13;
  }
  const std::set<std::vector<int16_t>>& get_field14() const&;
  std::set<std::vector<int16_t>> get_field14() &&;

  template <typename T_Struct15_field14_struct_setter>
  std::set<std::vector<int16_t>>& set_field14(T_Struct15_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct15_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }
  const std::map<int64_t, std::map<std::set<std::string>, float>>& get_field15() const&;
  std::map<int64_t, std::map<std::set<std::string>, float>> get_field15() &&;

  template <typename T_Struct15_field15_struct_setter>
  std::map<int64_t, std::map<std::set<std::string>, float>>& set_field15(T_Struct15_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct15_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }
  const std::set<int32_t>& get_field16() const&;
  std::set<int32_t> get_field16() &&;

  template <typename T_Struct15_field16_struct_setter>
  std::set<int32_t>& set_field16(T_Struct15_field16_struct_setter&& field16_) {
    field16 = std::forward<T_Struct15_field16_struct_setter>(field16_);
    __isset.field16 = true;
    return field16;
  }
  const std::map<bool, std::map<int64_t, float>>& get_field17() const&;
  std::map<bool, std::map<int64_t, float>> get_field17() &&;

  template <typename T_Struct15_field17_struct_setter>
  std::map<bool, std::map<int64_t, float>>& set_field17(T_Struct15_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct15_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }
  const std::set<float>& get_field18() const&;
  std::set<float> get_field18() &&;

  template <typename T_Struct15_field18_struct_setter>
  std::set<float>& set_field18(T_Struct15_field18_struct_setter&& field18_) {
    field18 = std::forward<T_Struct15_field18_struct_setter>(field18_);
    __isset.field18 = true;
    return field18;
  }
  const  ::cpp2::Struct3& get_field19() const&;
   ::cpp2::Struct3 get_field19() &&;

  template <typename T_Struct15_field19_struct_setter>
   ::cpp2::Struct3& set_field19(T_Struct15_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct15_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }
  const std::set<int16_t>& get_field20() const&;
  std::set<int16_t> get_field20() &&;

  template <typename T_Struct15_field20_struct_setter>
  std::set<int16_t>& set_field20(T_Struct15_field20_struct_setter&& field20_) {
    field20 = std::forward<T_Struct15_field20_struct_setter>(field20_);
    __isset.field20 = true;
    return field20;
  }

  const std::string& get_field21() const& {
    return field21;
  }

  std::string get_field21() && {
    return std::move(field21);
  }

  template <typename T_Struct15_field21_struct_setter>
  std::string& set_field21(T_Struct15_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct15_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }

  const std::string& get_field22() const& {
    return field22;
  }

  std::string get_field22() && {
    return std::move(field22);
  }

  template <typename T_Struct15_field22_struct_setter>
  std::string& set_field22(T_Struct15_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct15_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }

  int64_t get_field23() const {
    return field23;
  }

  int64_t& set_field23(int64_t field23_) {
    field23 = field23_;
    __isset.field23 = true;
    return field23;
  }

  const std::string& get_field24() const& {
    return field24;
  }

  std::string get_field24() && {
    return std::move(field24);
  }

  template <typename T_Struct15_field24_struct_setter>
  std::string& set_field24(T_Struct15_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct15_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }

  int16_t get_field25() const {
    return field25;
  }

  int16_t& set_field25(int16_t field25_) {
    field25 = field25_;
    __isset.field25 = true;
    return field25;
  }
  const std::vector<std::map<std::set<int32_t>, std::string>>& get_field26() const&;
  std::vector<std::map<std::set<int32_t>, std::string>> get_field26() &&;

  template <typename T_Struct15_field26_struct_setter>
  std::vector<std::map<std::set<int32_t>, std::string>>& set_field26(T_Struct15_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct15_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }
  const std::set<std::map<int8_t, int64_t>>& get_field27() const&;
  std::set<std::map<int8_t, int64_t>> get_field27() &&;

  template <typename T_Struct15_field27_struct_setter>
  std::set<std::map<int8_t, int64_t>>& set_field27(T_Struct15_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct15_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }

  double get_field28() const {
    return field28;
  }

  double& set_field28(double field28_) {
    field28 = field28_;
    __isset.field28 = true;
    return field28;
  }
  const  ::cpp2::Struct2& get_field29() const&;
   ::cpp2::Struct2 get_field29() &&;

  template <typename T_Struct15_field29_struct_setter>
   ::cpp2::Struct2& set_field29(T_Struct15_field29_struct_setter&& field29_) {
    field29 = std::forward<T_Struct15_field29_struct_setter>(field29_);
    __isset.field29 = true;
    return field29;
  }
  const  ::cpp2::Struct3& get_field30() const&;
   ::cpp2::Struct3 get_field30() &&;

  template <typename T_Struct15_field30_struct_setter>
   ::cpp2::Struct3& set_field30(T_Struct15_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct15_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }

  int32_t get_field31() const {
    return field31;
  }

  int32_t& set_field31(int32_t field31_) {
    field31 = field31_;
    __isset.field31 = true;
    return field31;
  }

  float get_field32() const {
    return field32;
  }

  float& set_field32(float field32_) {
    field32 = field32_;
    __isset.field32 = true;
    return field32;
  }

  int16_t get_field33() const {
    return field33;
  }

  int16_t& set_field33(int16_t field33_) {
    field33 = field33_;
    __isset.field33 = true;
    return field33;
  }
  const std::map<std::string, std::vector<int32_t>>& get_field34() const&;
  std::map<std::string, std::vector<int32_t>> get_field34() &&;

  template <typename T_Struct15_field34_struct_setter>
  std::map<std::string, std::vector<int32_t>>& set_field34(T_Struct15_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct15_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }

  int64_t get_field35() const {
    return field35;
  }

  int64_t& set_field35(int64_t field35_) {
    field35 = field35_;
    __isset.field35 = true;
    return field35;
  }

  bool get_field36() const {
    return field36;
  }

  bool& set_field36(bool field36_) {
    field36 = field36_;
    __isset.field36 = true;
    return field36;
  }
  const std::vector<double>& get_field37() const&;
  std::vector<double> get_field37() &&;

  template <typename T_Struct15_field37_struct_setter>
  std::vector<double>& set_field37(T_Struct15_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct15_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }

  double get_field38() const {
    return field38;
  }

  double& set_field38(double field38_) {
    field38 = field38_;
    __isset.field38 = true;
    return field38;
  }

  float get_field39() const {
    return field39;
  }

  float& set_field39(float field39_) {
    field39 = field39_;
    __isset.field39 = true;
    return field39;
  }

  const std::string& get_field40() const& {
    return field40;
  }

  std::string get_field40() && {
    return std::move(field40);
  }

  template <typename T_Struct15_field40_struct_setter>
  std::string& set_field40(T_Struct15_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct15_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }

  double get_field41() const {
    return field41;
  }

  double& set_field41(double field41_) {
    field41 = field41_;
    __isset.field41 = true;
    return field41;
  }
  const  ::cpp2::Struct5& get_field42() const&;
   ::cpp2::Struct5 get_field42() &&;

  template <typename T_Struct15_field42_struct_setter>
   ::cpp2::Struct5& set_field42(T_Struct15_field42_struct_setter&& field42_) {
    field42 = std::forward<T_Struct15_field42_struct_setter>(field42_);
    __isset.field42 = true;
    return field42;
  }

  const std::string& get_field43() const& {
    return field43;
  }

  std::string get_field43() && {
    return std::move(field43);
  }

  template <typename T_Struct15_field43_struct_setter>
  std::string& set_field43(T_Struct15_field43_struct_setter&& field43_) {
    field43 = std::forward<T_Struct15_field43_struct_setter>(field43_);
    __isset.field43 = true;
    return field43;
  }

  int8_t get_field44() const {
    return field44;
  }

  int8_t& set_field44(int8_t field44_) {
    field44 = field44_;
    __isset.field44 = true;
    return field44;
  }
  const std::set<std::string>& get_field45() const&;
  std::set<std::string> get_field45() &&;

  template <typename T_Struct15_field45_struct_setter>
  std::set<std::string>& set_field45(T_Struct15_field45_struct_setter&& field45_) {
    field45 = std::forward<T_Struct15_field45_struct_setter>(field45_);
    __isset.field45 = true;
    return field45;
  }
  const std::vector< ::cpp2::Struct0>& get_field46() const&;
  std::vector< ::cpp2::Struct0> get_field46() &&;

  template <typename T_Struct15_field46_struct_setter>
  std::vector< ::cpp2::Struct0>& set_field46(T_Struct15_field46_struct_setter&& field46_) {
    field46 = std::forward<T_Struct15_field46_struct_setter>(field46_);
    __isset.field46 = true;
    return field46;
  }

  int8_t get_field47() const {
    return field47;
  }

  int8_t& set_field47(int8_t field47_) {
    field47 = field47_;
    __isset.field47 = true;
    return field47;
  }

  int16_t get_field48() const {
    return field48;
  }

  int16_t& set_field48(int16_t field48_) {
    field48 = field48_;
    __isset.field48 = true;
    return field48;
  }

  int8_t get_field49() const {
    return field49;
  }

  int8_t& set_field49(int8_t field49_) {
    field49 = field49_;
    __isset.field49 = true;
    return field49;
  }
  const std::vector<std::string>& get_field50() const&;
  std::vector<std::string> get_field50() &&;

  template <typename T_Struct15_field50_struct_setter>
  std::vector<std::string>& set_field50(T_Struct15_field50_struct_setter&& field50_) {
    field50 = std::forward<T_Struct15_field50_struct_setter>(field50_);
    __isset.field50 = true;
    return field50;
  }
  const std::set<std::set<std::string>>& get_field51() const&;
  std::set<std::set<std::string>> get_field51() &&;

  template <typename T_Struct15_field51_struct_setter>
  std::set<std::set<std::string>>& set_field51(T_Struct15_field51_struct_setter&& field51_) {
    field51 = std::forward<T_Struct15_field51_struct_setter>(field51_);
    __isset.field51 = true;
    return field51;
  }

  bool get_field52() const {
    return field52;
  }

  bool& set_field52(bool field52_) {
    field52 = field52_;
    __isset.field52 = true;
    return field52;
  }

  const std::string& get_field53() const& {
    return field53;
  }

  std::string get_field53() && {
    return std::move(field53);
  }

  template <typename T_Struct15_field53_struct_setter>
  std::string& set_field53(T_Struct15_field53_struct_setter&& field53_) {
    field53 = std::forward<T_Struct15_field53_struct_setter>(field53_);
    __isset.field53 = true;
    return field53;
  }
  const  ::cpp2::Struct4& get_field54() const&;
   ::cpp2::Struct4 get_field54() &&;

  template <typename T_Struct15_field54_struct_setter>
   ::cpp2::Struct4& set_field54(T_Struct15_field54_struct_setter&& field54_) {
    field54 = std::forward<T_Struct15_field54_struct_setter>(field54_);
    __isset.field54 = true;
    return field54;
  }

  const std::string& get_field55() const& {
    return field55;
  }

  std::string get_field55() && {
    return std::move(field55);
  }

  template <typename T_Struct15_field55_struct_setter>
  std::string& set_field55(T_Struct15_field55_struct_setter&& field55_) {
    field55 = std::forward<T_Struct15_field55_struct_setter>(field55_);
    __isset.field55 = true;
    return field55;
  }

  double get_field56() const {
    return field56;
  }

  double& set_field56(double field56_) {
    field56 = field56_;
    __isset.field56 = true;
    return field56;
  }
  const std::map<int32_t, float>& get_field57() const&;
  std::map<int32_t, float> get_field57() &&;

  template <typename T_Struct15_field57_struct_setter>
  std::map<int32_t, float>& set_field57(T_Struct15_field57_struct_setter&& field57_) {
    field57 = std::forward<T_Struct15_field57_struct_setter>(field57_);
    __isset.field57 = true;
    return field57;
  }

  int16_t get_field58() const {
    return field58;
  }

  int16_t& set_field58(int16_t field58_) {
    field58 = field58_;
    __isset.field58 = true;
    return field58;
  }
  const std::vector<int32_t>& get_field59() const&;
  std::vector<int32_t> get_field59() &&;

  template <typename T_Struct15_field59_struct_setter>
  std::vector<int32_t>& set_field59(T_Struct15_field59_struct_setter&& field59_) {
    field59 = std::forward<T_Struct15_field59_struct_setter>(field59_);
    __isset.field59 = true;
    return field59;
  }
  const  ::cpp2::Struct9& get_field60() const&;
   ::cpp2::Struct9 get_field60() &&;

  template <typename T_Struct15_field60_struct_setter>
   ::cpp2::Struct9& set_field60(T_Struct15_field60_struct_setter&& field60_) {
    field60 = std::forward<T_Struct15_field60_struct_setter>(field60_);
    __isset.field60 = true;
    return field60;
  }

  int16_t get_field61() const {
    return field61;
  }

  int16_t& set_field61(int16_t field61_) {
    field61 = field61_;
    __isset.field61 = true;
    return field61;
  }

  int32_t get_field62() const {
    return field62;
  }

  int32_t& set_field62(int32_t field62_) {
    field62 = field62_;
    __isset.field62 = true;
    return field62;
  }
  const std::vector<std::string>& get_field63() const&;
  std::vector<std::string> get_field63() &&;

  template <typename T_Struct15_field63_struct_setter>
  std::vector<std::string>& set_field63(T_Struct15_field63_struct_setter&& field63_) {
    field63 = std::forward<T_Struct15_field63_struct_setter>(field63_);
    __isset.field63 = true;
    return field63;
  }
  const std::map<std::map<int8_t, int32_t>, int16_t>& get_field64() const&;
  std::map<std::map<int8_t, int32_t>, int16_t> get_field64() &&;

  template <typename T_Struct15_field64_struct_setter>
  std::map<std::map<int8_t, int32_t>, int16_t>& set_field64(T_Struct15_field64_struct_setter&& field64_) {
    field64 = std::forward<T_Struct15_field64_struct_setter>(field64_);
    __isset.field64 = true;
    return field64;
  }
  const  ::cpp2::Struct9& get_field65() const&;
   ::cpp2::Struct9 get_field65() &&;

  template <typename T_Struct15_field65_struct_setter>
   ::cpp2::Struct9& set_field65(T_Struct15_field65_struct_setter&& field65_) {
    field65 = std::forward<T_Struct15_field65_struct_setter>(field65_);
    __isset.field65 = true;
    return field65;
  }
  const  ::cpp2::Struct8& get_field66() const&;
   ::cpp2::Struct8 get_field66() &&;

  template <typename T_Struct15_field66_struct_setter>
   ::cpp2::Struct8& set_field66(T_Struct15_field66_struct_setter&& field66_) {
    field66 = std::forward<T_Struct15_field66_struct_setter>(field66_);
    __isset.field66 = true;
    return field66;
  }

  const std::string& get_field67() const& {
    return field67;
  }

  std::string get_field67() && {
    return std::move(field67);
  }

  template <typename T_Struct15_field67_struct_setter>
  std::string& set_field67(T_Struct15_field67_struct_setter&& field67_) {
    field67 = std::forward<T_Struct15_field67_struct_setter>(field67_);
    __isset.field67 = true;
    return field67;
  }

  bool get_field68() const {
    return field68;
  }

  bool& set_field68(bool field68_) {
    field68 = field68_;
    __isset.field68 = true;
    return field68;
  }

  bool get_field69() const {
    return field69;
  }

  bool& set_field69(bool field69_) {
    field69 = field69_;
    __isset.field69 = true;
    return field69;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct15& a, Struct15& b);
extern template uint32_t Struct15::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct15::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct15::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct15::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct15::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct15::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct15::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct15::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct15>::clear( ::cpp2::Struct15* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct15>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct15>::write(Protocol* proto,  ::cpp2::Struct15 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct15>::read(Protocol* proto,  ::cpp2::Struct15* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct15>::serializedSize(Protocol const* proto,  ::cpp2::Struct15 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct15>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct15 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct16 : private apache::thrift::detail::st::ComparisonOperators<Struct16> {
 public:

  Struct16() :
      field5(0),
      field7(0),
      field8(0),
      field10(0),
      field12(0),
      field13(0),
      field16(0),
      field17(0),
      field18(0),
      field20(0),
      field23(0),
      field24(0),
      field27(0) {}
  // FragileConstructor for use in initialization lists only

  Struct16(apache::thrift::FragileConstructor,  ::cpp2::Struct10 field1__arg, std::map<std::vector<int32_t>, bool> field2__arg,  ::cpp2::Struct7 field3__arg, std::vector<int32_t> field4__arg, int16_t field5__arg, std::vector<double> field6__arg, int8_t field7__arg, int16_t field8__arg, std::set<std::map<int32_t, int64_t>> field9__arg, int8_t field10__arg, std::string field11__arg, int64_t field12__arg, int32_t field13__arg, std::string field14__arg, std::map<std::set<bool>, float> field15__arg, int8_t field16__arg, float field17__arg, int32_t field18__arg, std::vector<std::string> field19__arg, int16_t field20__arg, std::vector<float> field21__arg,  ::cpp2::Struct6 field22__arg, int16_t field23__arg, bool field24__arg,  ::cpp2::Struct5 field25__arg, std::set<std::set<bool>> field26__arg, int32_t field27__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct16(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct16(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }

  Struct16(Struct16&&) = default;

  Struct16(const Struct16&) = default;

  Struct16& operator=(Struct16&&) = default;

  Struct16& operator=(const Struct16&) = default;
  void __clear();

  virtual ~Struct16() {}

   ::cpp2::Struct10 field1;
  std::map<std::vector<int32_t>, bool> field2;
   ::cpp2::Struct7 field3;
  std::vector<int32_t> field4;
  int16_t field5;
  std::vector<double> field6;
  int8_t field7;
  int16_t field8;
  std::set<std::map<int32_t, int64_t>> field9;
  int8_t field10;
  std::string field11;
  int64_t field12;
  int32_t field13;
  std::string field14;
  std::map<std::set<bool>, float> field15;
  int8_t field16;
  float field17;
  int32_t field18;
  std::vector<std::string> field19;
  int16_t field20;
  std::vector<float> field21;
   ::cpp2::Struct6 field22;
  int16_t field23;
  bool field24;
   ::cpp2::Struct5 field25;
  std::set<std::set<bool>> field26;
  int32_t field27;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
  } __isset;
  bool operator==(const Struct16& rhs) const;

  bool operator < (const Struct16& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    (void)rhs;
    return false;
  }
  const  ::cpp2::Struct10& get_field1() const&;
   ::cpp2::Struct10 get_field1() &&;

  template <typename T_Struct16_field1_struct_setter>
   ::cpp2::Struct10& set_field1(T_Struct16_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct16_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const std::map<std::vector<int32_t>, bool>& get_field2() const&;
  std::map<std::vector<int32_t>, bool> get_field2() &&;

  template <typename T_Struct16_field2_struct_setter>
  std::map<std::vector<int32_t>, bool>& set_field2(T_Struct16_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct16_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const  ::cpp2::Struct7& get_field3() const&;
   ::cpp2::Struct7 get_field3() &&;

  template <typename T_Struct16_field3_struct_setter>
   ::cpp2::Struct7& set_field3(T_Struct16_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct16_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }
  const std::vector<int32_t>& get_field4() const&;
  std::vector<int32_t> get_field4() &&;

  template <typename T_Struct16_field4_struct_setter>
  std::vector<int32_t>& set_field4(T_Struct16_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct16_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }

  int16_t get_field5() const {
    return field5;
  }

  int16_t& set_field5(int16_t field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }
  const std::vector<double>& get_field6() const&;
  std::vector<double> get_field6() &&;

  template <typename T_Struct16_field6_struct_setter>
  std::vector<double>& set_field6(T_Struct16_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct16_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }

  int8_t get_field7() const {
    return field7;
  }

  int8_t& set_field7(int8_t field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }

  int16_t get_field8() const {
    return field8;
  }

  int16_t& set_field8(int16_t field8_) {
    field8 = field8_;
    __isset.field8 = true;
    return field8;
  }
  const std::set<std::map<int32_t, int64_t>>& get_field9() const&;
  std::set<std::map<int32_t, int64_t>> get_field9() &&;

  template <typename T_Struct16_field9_struct_setter>
  std::set<std::map<int32_t, int64_t>>& set_field9(T_Struct16_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct16_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }

  int8_t get_field10() const {
    return field10;
  }

  int8_t& set_field10(int8_t field10_) {
    field10 = field10_;
    __isset.field10 = true;
    return field10;
  }

  const std::string& get_field11() const& {
    return field11;
  }

  std::string get_field11() && {
    return std::move(field11);
  }

  template <typename T_Struct16_field11_struct_setter>
  std::string& set_field11(T_Struct16_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct16_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }

  int64_t get_field12() const {
    return field12;
  }

  int64_t& set_field12(int64_t field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }

  int32_t get_field13() const {
    return field13;
  }

  int32_t& set_field13(int32_t field13_) {
    field13 = field13_;
    __isset.field13 = true;
    return field13;
  }

  const std::string& get_field14() const& {
    return field14;
  }

  std::string get_field14() && {
    return std::move(field14);
  }

  template <typename T_Struct16_field14_struct_setter>
  std::string& set_field14(T_Struct16_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct16_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }
  const std::map<std::set<bool>, float>& get_field15() const&;
  std::map<std::set<bool>, float> get_field15() &&;

  template <typename T_Struct16_field15_struct_setter>
  std::map<std::set<bool>, float>& set_field15(T_Struct16_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct16_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }

  int8_t get_field16() const {
    return field16;
  }

  int8_t& set_field16(int8_t field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }

  float get_field17() const {
    return field17;
  }

  float& set_field17(float field17_) {
    field17 = field17_;
    __isset.field17 = true;
    return field17;
  }

  int32_t get_field18() const {
    return field18;
  }

  int32_t& set_field18(int32_t field18_) {
    field18 = field18_;
    __isset.field18 = true;
    return field18;
  }
  const std::vector<std::string>& get_field19() const&;
  std::vector<std::string> get_field19() &&;

  template <typename T_Struct16_field19_struct_setter>
  std::vector<std::string>& set_field19(T_Struct16_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct16_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }

  int16_t get_field20() const {
    return field20;
  }

  int16_t& set_field20(int16_t field20_) {
    field20 = field20_;
    __isset.field20 = true;
    return field20;
  }
  const std::vector<float>& get_field21() const&;
  std::vector<float> get_field21() &&;

  template <typename T_Struct16_field21_struct_setter>
  std::vector<float>& set_field21(T_Struct16_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct16_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }
  const  ::cpp2::Struct6& get_field22() const&;
   ::cpp2::Struct6 get_field22() &&;

  template <typename T_Struct16_field22_struct_setter>
   ::cpp2::Struct6& set_field22(T_Struct16_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct16_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }

  int16_t get_field23() const {
    return field23;
  }

  int16_t& set_field23(int16_t field23_) {
    field23 = field23_;
    __isset.field23 = true;
    return field23;
  }

  bool get_field24() const {
    return field24;
  }

  bool& set_field24(bool field24_) {
    field24 = field24_;
    __isset.field24 = true;
    return field24;
  }
  const  ::cpp2::Struct5& get_field25() const&;
   ::cpp2::Struct5 get_field25() &&;

  template <typename T_Struct16_field25_struct_setter>
   ::cpp2::Struct5& set_field25(T_Struct16_field25_struct_setter&& field25_) {
    field25 = std::forward<T_Struct16_field25_struct_setter>(field25_);
    __isset.field25 = true;
    return field25;
  }
  const std::set<std::set<bool>>& get_field26() const&;
  std::set<std::set<bool>> get_field26() &&;

  template <typename T_Struct16_field26_struct_setter>
  std::set<std::set<bool>>& set_field26(T_Struct16_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct16_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }

  int32_t get_field27() const {
    return field27;
  }

  int32_t& set_field27(int32_t field27_) {
    field27 = field27_;
    __isset.field27 = true;
    return field27;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct16& a, Struct16& b);
extern template uint32_t Struct16::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct16::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct16::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct16::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct16::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct16::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct16::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct16::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct16>::clear( ::cpp2::Struct16* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct16>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct16>::write(Protocol* proto,  ::cpp2::Struct16 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct16>::read(Protocol* proto,  ::cpp2::Struct16* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct16>::serializedSize(Protocol const* proto,  ::cpp2::Struct16 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct16>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct16 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct17 : private apache::thrift::detail::st::ComparisonOperators<Struct17> {
 public:

  Struct17() :
      field1(0),
      field4(0),
      field5(0),
      field6(0),
      field8(0),
      field13(0),
      field16(0),
      field19(0),
      field21(0),
      field25(0),
      field26(0),
      field28(0),
      field31(0),
      field32(0),
      field36(0),
      field37(0),
      field38(0),
      field39(0),
      field43(0),
      field45(0),
      field46(0),
      field48(0),
      field49(0),
      field50(0),
      field51(0),
      field54(0),
      field55(0),
      field59(0),
      field60(0),
      field62(0),
      field63(0),
      field66(0),
      field70(0),
      field71(0),
      field72(0),
      field73(0),
      field76(0),
      field80(0),
      field85(0),
      field89(0),
      field92(0),
      field96(0),
      field98(0),
      field99(0),
      field103(0),
      field105(0),
      field106(0),
      field108(0),
      field110(0),
      field111(0),
      field112(0),
      field113(0),
      field114(0),
      field115(0),
      field119(0),
      field121(0),
      field122(0),
      field123(0),
      field125(0),
      field127(0) {}
  // FragileConstructor for use in initialization lists only

  Struct17(apache::thrift::FragileConstructor, int8_t field1__arg, std::vector<std::string> field2__arg, std::string field3__arg, int64_t field4__arg, int16_t field5__arg, bool field6__arg, std::map<bool, int32_t> field7__arg, int8_t field8__arg,  ::cpp2::Struct3 field9__arg, std::map<bool, bool> field10__arg, std::map< ::cpp2::Struct3, std::string> field11__arg, std::set<float> field12__arg, double field13__arg, std::map<int16_t, int64_t> field14__arg, std::string field15__arg, bool field16__arg, std::map<std::vector<bool>,  ::cpp2::Struct5> field17__arg, std::set<int8_t> field18__arg, double field19__arg, std::map<double, int8_t> field20__arg, int32_t field21__arg, std::string field22__arg, std::vector<int32_t> field23__arg, std::vector<std::vector<int8_t>> field24__arg, int32_t field25__arg, bool field26__arg, std::set<float> field27__arg, int64_t field28__arg, std::vector<float> field29__arg, std::vector<int16_t> field30__arg, float field31__arg, int16_t field32__arg,  ::cpp2::Struct11 field33__arg, std::set<double> field34__arg,  ::cpp2::Struct3 field35__arg, int64_t field36__arg, double field37__arg, float field38__arg, int64_t field39__arg, std::vector<int16_t> field40__arg, std::string field41__arg, std::set<double> field42__arg, int16_t field43__arg,  ::cpp2::Struct1 field44__arg, int16_t field45__arg, int16_t field46__arg, std::string field47__arg, float field48__arg, int64_t field49__arg, int64_t field50__arg, double field51__arg, std::set< ::cpp2::Struct10> field52__arg, std::set<int32_t> field53__arg, bool field54__arg, int64_t field55__arg,  ::cpp2::Struct12 field56__arg, std::set<std::map<float, std::string>> field57__arg, std::map<bool, std::set<std::string>> field58__arg, int32_t field59__arg, bool field60__arg,  ::cpp2::Struct10 field61__arg, int16_t field62__arg, int32_t field63__arg, std::string field64__arg, std::set<std::string> field65__arg, int32_t field66__arg, std::map<int16_t, std::string> field67__arg, std::map<std::map<std::vector<int16_t>, std::string>, std::vector<int8_t>> field68__arg, std::string field69__arg, float field70__arg, float field71__arg, int16_t field72__arg, double field73__arg, std::string field74__arg, std::set<int16_t> field75__arg, int64_t field76__arg, std::map<std::string, std::set<float>> field77__arg, std::vector<float> field78__arg,  ::cpp2::Struct5 field79__arg, int64_t field80__arg, std::map< ::cpp2::Struct0, std::string> field81__arg,  ::cpp2::Struct3 field82__arg,  ::cpp2::Struct11 field83__arg, std::map<double, int16_t> field84__arg, int64_t field85__arg,  ::cpp2::Struct5 field86__arg, std::set<std::vector<int32_t>> field87__arg, std::vector<std::set<int64_t>> field88__arg, double field89__arg, std::vector<int64_t> field90__arg, std::map<int8_t, bool> field91__arg, double field92__arg, std::map<int16_t, int32_t> field93__arg,  ::cpp2::Struct2 field94__arg, std::string field95__arg, int8_t field96__arg,  ::cpp2::Struct2 field97__arg, double field98__arg, int64_t field99__arg,  ::cpp2::Struct3 field100__arg, std::vector< ::cpp2::Struct9> field101__arg,  ::cpp2::Struct6 field102__arg, int8_t field103__arg, std::map<int8_t, int16_t> field104__arg, int32_t field105__arg, int8_t field106__arg, std::map<double, std::vector<std::map<float, int8_t>>> field107__arg, double field108__arg,  ::cpp2::Struct6 field109__arg, double field110__arg, int16_t field111__arg, int32_t field112__arg, int32_t field113__arg, int64_t field114__arg, int8_t field115__arg, std::string field116__arg, std::set<std::map<std::map<std::string, std::string>, int64_t>> field117__arg, std::map<int64_t, std::string> field118__arg, bool field119__arg, std::string field120__arg, float field121__arg, int32_t field122__arg, int32_t field123__arg, std::set<std::set<double>> field124__arg, int8_t field125__arg, std::vector<std::string> field126__arg, int16_t field127__arg, std::map<int32_t, double> field128__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)),
      field97(std::move(field97__arg)),
      field98(std::move(field98__arg)),
      field99(std::move(field99__arg)),
      field100(std::move(field100__arg)),
      field101(std::move(field101__arg)),
      field102(std::move(field102__arg)),
      field103(std::move(field103__arg)),
      field104(std::move(field104__arg)),
      field105(std::move(field105__arg)),
      field106(std::move(field106__arg)),
      field107(std::move(field107__arg)),
      field108(std::move(field108__arg)),
      field109(std::move(field109__arg)),
      field110(std::move(field110__arg)),
      field111(std::move(field111__arg)),
      field112(std::move(field112__arg)),
      field113(std::move(field113__arg)),
      field114(std::move(field114__arg)),
      field115(std::move(field115__arg)),
      field116(std::move(field116__arg)),
      field117(std::move(field117__arg)),
      field118(std::move(field118__arg)),
      field119(std::move(field119__arg)),
      field120(std::move(field120__arg)),
      field121(std::move(field121__arg)),
      field122(std::move(field122__arg)),
      field123(std::move(field123__arg)),
      field124(std::move(field124__arg)),
      field125(std::move(field125__arg)),
      field126(std::move(field126__arg)),
      field127(std::move(field127__arg)),
      field128(std::move(field128__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
    __isset.field97 = true;
    __isset.field98 = true;
    __isset.field99 = true;
    __isset.field100 = true;
    __isset.field101 = true;
    __isset.field102 = true;
    __isset.field103 = true;
    __isset.field104 = true;
    __isset.field105 = true;
    __isset.field106 = true;
    __isset.field107 = true;
    __isset.field108 = true;
    __isset.field109 = true;
    __isset.field110 = true;
    __isset.field111 = true;
    __isset.field112 = true;
    __isset.field113 = true;
    __isset.field114 = true;
    __isset.field115 = true;
    __isset.field116 = true;
    __isset.field117 = true;
    __isset.field118 = true;
    __isset.field119 = true;
    __isset.field120 = true;
    __isset.field121 = true;
    __isset.field122 = true;
    __isset.field123 = true;
    __isset.field124 = true;
    __isset.field125 = true;
    __isset.field126 = true;
    __isset.field127 = true;
    __isset.field128 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<97, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field97 = arg.move();
    __isset.field97 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<98, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field98 = arg.move();
    __isset.field98 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<99, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field99 = arg.move();
    __isset.field99 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field100 = arg.move();
    __isset.field100 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field101 = arg.move();
    __isset.field101 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<102, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field102 = arg.move();
    __isset.field102 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<103, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field103 = arg.move();
    __isset.field103 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<104, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field104 = arg.move();
    __isset.field104 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<105, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field105 = arg.move();
    __isset.field105 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<106, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field106 = arg.move();
    __isset.field106 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<107, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field107 = arg.move();
    __isset.field107 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<108, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field108 = arg.move();
    __isset.field108 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<109, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field109 = arg.move();
    __isset.field109 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<110, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field110 = arg.move();
    __isset.field110 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<111, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field111 = arg.move();
    __isset.field111 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<112, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field112 = arg.move();
    __isset.field112 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<113, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field113 = arg.move();
    __isset.field113 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<114, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field114 = arg.move();
    __isset.field114 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<115, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field115 = arg.move();
    __isset.field115 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<116, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field116 = arg.move();
    __isset.field116 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<117, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field117 = arg.move();
    __isset.field117 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<118, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field118 = arg.move();
    __isset.field118 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<119, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field119 = arg.move();
    __isset.field119 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<120, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field120 = arg.move();
    __isset.field120 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<121, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field121 = arg.move();
    __isset.field121 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<122, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field122 = arg.move();
    __isset.field122 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<123, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field123 = arg.move();
    __isset.field123 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<124, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field124 = arg.move();
    __isset.field124 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<125, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field125 = arg.move();
    __isset.field125 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<126, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field126 = arg.move();
    __isset.field126 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<127, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field127 = arg.move();
    __isset.field127 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct17(::apache::thrift::detail::argument_wrapper<128, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct17(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field128 = arg.move();
    __isset.field128 = true;
  }

  Struct17(Struct17&&) = default;

  Struct17(const Struct17&) = default;

  Struct17& operator=(Struct17&&) = default;

  Struct17& operator=(const Struct17&) = default;
  void __clear();

  virtual ~Struct17() {}

  int8_t field1;
  std::vector<std::string> field2;
  std::string field3;
  int64_t field4;
  int16_t field5;
  bool field6;
  std::map<bool, int32_t> field7;
  int8_t field8;
   ::cpp2::Struct3 field9;
  std::map<bool, bool> field10;
  std::map< ::cpp2::Struct3, std::string> field11;
  std::set<float> field12;
  double field13;
  std::map<int16_t, int64_t> field14;
  std::string field15;
  bool field16;
  std::map<std::vector<bool>,  ::cpp2::Struct5> field17;
  std::set<int8_t> field18;
  double field19;
  std::map<double, int8_t> field20;
  int32_t field21;
  std::string field22;
  std::vector<int32_t> field23;
  std::vector<std::vector<int8_t>> field24;
  int32_t field25;
  bool field26;
  std::set<float> field27;
  int64_t field28;
  std::vector<float> field29;
  std::vector<int16_t> field30;
  float field31;
  int16_t field32;
   ::cpp2::Struct11 field33;
  std::set<double> field34;
   ::cpp2::Struct3 field35;
  int64_t field36;
  double field37;
  float field38;
  int64_t field39;
  std::vector<int16_t> field40;
  std::string field41;
  std::set<double> field42;
  int16_t field43;
   ::cpp2::Struct1 field44;
  int16_t field45;
  int16_t field46;
  std::string field47;
  float field48;
  int64_t field49;
  int64_t field50;
  double field51;
  std::set< ::cpp2::Struct10> field52;
  std::set<int32_t> field53;
  bool field54;
  int64_t field55;
   ::cpp2::Struct12 field56;
  std::set<std::map<float, std::string>> field57;
  std::map<bool, std::set<std::string>> field58;
  int32_t field59;
  bool field60;
   ::cpp2::Struct10 field61;
  int16_t field62;
  int32_t field63;
  std::string field64;
  std::set<std::string> field65;
  int32_t field66;
  std::map<int16_t, std::string> field67;
  std::map<std::map<std::vector<int16_t>, std::string>, std::vector<int8_t>> field68;
  std::string field69;
  float field70;
  float field71;
  int16_t field72;
  double field73;
  std::string field74;
  std::set<int16_t> field75;
  int64_t field76;
  std::map<std::string, std::set<float>> field77;
  std::vector<float> field78;
   ::cpp2::Struct5 field79;
  int64_t field80;
  std::map< ::cpp2::Struct0, std::string> field81;
   ::cpp2::Struct3 field82;
   ::cpp2::Struct11 field83;
  std::map<double, int16_t> field84;
  int64_t field85;
   ::cpp2::Struct5 field86;
  std::set<std::vector<int32_t>> field87;
  std::vector<std::set<int64_t>> field88;
  double field89;
  std::vector<int64_t> field90;
  std::map<int8_t, bool> field91;
  double field92;
  std::map<int16_t, int32_t> field93;
   ::cpp2::Struct2 field94;
  std::string field95;
  int8_t field96;
   ::cpp2::Struct2 field97;
  double field98;
  int64_t field99;
   ::cpp2::Struct3 field100;
  std::vector< ::cpp2::Struct9> field101;
   ::cpp2::Struct6 field102;
  int8_t field103;
  std::map<int8_t, int16_t> field104;
  int32_t field105;
  int8_t field106;
  std::map<double, std::vector<std::map<float, int8_t>>> field107;
  double field108;
   ::cpp2::Struct6 field109;
  double field110;
  int16_t field111;
  int32_t field112;
  int32_t field113;
  int64_t field114;
  int8_t field115;
  std::string field116;
  std::set<std::map<std::map<std::string, std::string>, int64_t>> field117;
  std::map<int64_t, std::string> field118;
  bool field119;
  std::string field120;
  float field121;
  int32_t field122;
  int32_t field123;
  std::set<std::set<double>> field124;
  int8_t field125;
  std::vector<std::string> field126;
  int16_t field127;
  std::map<int32_t, double> field128;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
      field97 = false;
      field98 = false;
      field99 = false;
      field100 = false;
      field101 = false;
      field102 = false;
      field103 = false;
      field104 = false;
      field105 = false;
      field106 = false;
      field107 = false;
      field108 = false;
      field109 = false;
      field110 = false;
      field111 = false;
      field112 = false;
      field113 = false;
      field114 = false;
      field115 = false;
      field116 = false;
      field117 = false;
      field118 = false;
      field119 = false;
      field120 = false;
      field121 = false;
      field122 = false;
      field123 = false;
      field124 = false;
      field125 = false;
      field126 = false;
      field127 = false;
      field128 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
    bool field97 = false;
    bool field98 = false;
    bool field99 = false;
    bool field100 = false;
    bool field101 = false;
    bool field102 = false;
    bool field103 = false;
    bool field104 = false;
    bool field105 = false;
    bool field106 = false;
    bool field107 = false;
    bool field108 = false;
    bool field109 = false;
    bool field110 = false;
    bool field111 = false;
    bool field112 = false;
    bool field113 = false;
    bool field114 = false;
    bool field115 = false;
    bool field116 = false;
    bool field117 = false;
    bool field118 = false;
    bool field119 = false;
    bool field120 = false;
    bool field121 = false;
    bool field122 = false;
    bool field123 = false;
    bool field124 = false;
    bool field125 = false;
    bool field126 = false;
    bool field127 = false;
    bool field128 = false;
  } __isset;
  bool operator==(const Struct17& rhs) const;

  bool operator < (const Struct17& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    if (!(field97 == rhs.field97)) {
      return field97 < rhs.field97;
    }
    if (!(field98 == rhs.field98)) {
      return field98 < rhs.field98;
    }
    if (!(field99 == rhs.field99)) {
      return field99 < rhs.field99;
    }
    if (!(field100 == rhs.field100)) {
      return field100 < rhs.field100;
    }
    if (!(field101 == rhs.field101)) {
      return field101 < rhs.field101;
    }
    if (!(field102 == rhs.field102)) {
      return field102 < rhs.field102;
    }
    if (!(field103 == rhs.field103)) {
      return field103 < rhs.field103;
    }
    if (!(field104 == rhs.field104)) {
      return field104 < rhs.field104;
    }
    if (!(field105 == rhs.field105)) {
      return field105 < rhs.field105;
    }
    if (!(field106 == rhs.field106)) {
      return field106 < rhs.field106;
    }
    if (!(field107 == rhs.field107)) {
      return field107 < rhs.field107;
    }
    if (!(field108 == rhs.field108)) {
      return field108 < rhs.field108;
    }
    if (!(field109 == rhs.field109)) {
      return field109 < rhs.field109;
    }
    if (!(field110 == rhs.field110)) {
      return field110 < rhs.field110;
    }
    if (!(field111 == rhs.field111)) {
      return field111 < rhs.field111;
    }
    if (!(field112 == rhs.field112)) {
      return field112 < rhs.field112;
    }
    if (!(field113 == rhs.field113)) {
      return field113 < rhs.field113;
    }
    if (!(field114 == rhs.field114)) {
      return field114 < rhs.field114;
    }
    if (!(field115 == rhs.field115)) {
      return field115 < rhs.field115;
    }
    if (!(field116 == rhs.field116)) {
      return field116 < rhs.field116;
    }
    if (!(field117 == rhs.field117)) {
      return field117 < rhs.field117;
    }
    if (!(field118 == rhs.field118)) {
      return field118 < rhs.field118;
    }
    if (!(field119 == rhs.field119)) {
      return field119 < rhs.field119;
    }
    if (!(field120 == rhs.field120)) {
      return field120 < rhs.field120;
    }
    if (!(field121 == rhs.field121)) {
      return field121 < rhs.field121;
    }
    if (!(field122 == rhs.field122)) {
      return field122 < rhs.field122;
    }
    if (!(field123 == rhs.field123)) {
      return field123 < rhs.field123;
    }
    if (!(field124 == rhs.field124)) {
      return field124 < rhs.field124;
    }
    if (!(field125 == rhs.field125)) {
      return field125 < rhs.field125;
    }
    if (!(field126 == rhs.field126)) {
      return field126 < rhs.field126;
    }
    if (!(field127 == rhs.field127)) {
      return field127 < rhs.field127;
    }
    if (!(field128 == rhs.field128)) {
      return field128 < rhs.field128;
    }
    (void)rhs;
    return false;
  }

  int8_t get_field1() const {
    return field1;
  }

  int8_t& set_field1(int8_t field1_) {
    field1 = field1_;
    __isset.field1 = true;
    return field1;
  }
  const std::vector<std::string>& get_field2() const&;
  std::vector<std::string> get_field2() &&;

  template <typename T_Struct17_field2_struct_setter>
  std::vector<std::string>& set_field2(T_Struct17_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct17_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  const std::string& get_field3() const& {
    return field3;
  }

  std::string get_field3() && {
    return std::move(field3);
  }

  template <typename T_Struct17_field3_struct_setter>
  std::string& set_field3(T_Struct17_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct17_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  int64_t get_field4() const {
    return field4;
  }

  int64_t& set_field4(int64_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }

  int16_t get_field5() const {
    return field5;
  }

  int16_t& set_field5(int16_t field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }

  bool get_field6() const {
    return field6;
  }

  bool& set_field6(bool field6_) {
    field6 = field6_;
    __isset.field6 = true;
    return field6;
  }
  const std::map<bool, int32_t>& get_field7() const&;
  std::map<bool, int32_t> get_field7() &&;

  template <typename T_Struct17_field7_struct_setter>
  std::map<bool, int32_t>& set_field7(T_Struct17_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct17_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }

  int8_t get_field8() const {
    return field8;
  }

  int8_t& set_field8(int8_t field8_) {
    field8 = field8_;
    __isset.field8 = true;
    return field8;
  }
  const  ::cpp2::Struct3& get_field9() const&;
   ::cpp2::Struct3 get_field9() &&;

  template <typename T_Struct17_field9_struct_setter>
   ::cpp2::Struct3& set_field9(T_Struct17_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct17_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }
  const std::map<bool, bool>& get_field10() const&;
  std::map<bool, bool> get_field10() &&;

  template <typename T_Struct17_field10_struct_setter>
  std::map<bool, bool>& set_field10(T_Struct17_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct17_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }
  const std::map< ::cpp2::Struct3, std::string>& get_field11() const&;
  std::map< ::cpp2::Struct3, std::string> get_field11() &&;

  template <typename T_Struct17_field11_struct_setter>
  std::map< ::cpp2::Struct3, std::string>& set_field11(T_Struct17_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct17_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }
  const std::set<float>& get_field12() const&;
  std::set<float> get_field12() &&;

  template <typename T_Struct17_field12_struct_setter>
  std::set<float>& set_field12(T_Struct17_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct17_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }

  double get_field13() const {
    return field13;
  }

  double& set_field13(double field13_) {
    field13 = field13_;
    __isset.field13 = true;
    return field13;
  }
  const std::map<int16_t, int64_t>& get_field14() const&;
  std::map<int16_t, int64_t> get_field14() &&;

  template <typename T_Struct17_field14_struct_setter>
  std::map<int16_t, int64_t>& set_field14(T_Struct17_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct17_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }

  const std::string& get_field15() const& {
    return field15;
  }

  std::string get_field15() && {
    return std::move(field15);
  }

  template <typename T_Struct17_field15_struct_setter>
  std::string& set_field15(T_Struct17_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct17_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }

  bool get_field16() const {
    return field16;
  }

  bool& set_field16(bool field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }
  const std::map<std::vector<bool>,  ::cpp2::Struct5>& get_field17() const&;
  std::map<std::vector<bool>,  ::cpp2::Struct5> get_field17() &&;

  template <typename T_Struct17_field17_struct_setter>
  std::map<std::vector<bool>,  ::cpp2::Struct5>& set_field17(T_Struct17_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct17_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }
  const std::set<int8_t>& get_field18() const&;
  std::set<int8_t> get_field18() &&;

  template <typename T_Struct17_field18_struct_setter>
  std::set<int8_t>& set_field18(T_Struct17_field18_struct_setter&& field18_) {
    field18 = std::forward<T_Struct17_field18_struct_setter>(field18_);
    __isset.field18 = true;
    return field18;
  }

  double get_field19() const {
    return field19;
  }

  double& set_field19(double field19_) {
    field19 = field19_;
    __isset.field19 = true;
    return field19;
  }
  const std::map<double, int8_t>& get_field20() const&;
  std::map<double, int8_t> get_field20() &&;

  template <typename T_Struct17_field20_struct_setter>
  std::map<double, int8_t>& set_field20(T_Struct17_field20_struct_setter&& field20_) {
    field20 = std::forward<T_Struct17_field20_struct_setter>(field20_);
    __isset.field20 = true;
    return field20;
  }

  int32_t get_field21() const {
    return field21;
  }

  int32_t& set_field21(int32_t field21_) {
    field21 = field21_;
    __isset.field21 = true;
    return field21;
  }

  const std::string& get_field22() const& {
    return field22;
  }

  std::string get_field22() && {
    return std::move(field22);
  }

  template <typename T_Struct17_field22_struct_setter>
  std::string& set_field22(T_Struct17_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct17_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }
  const std::vector<int32_t>& get_field23() const&;
  std::vector<int32_t> get_field23() &&;

  template <typename T_Struct17_field23_struct_setter>
  std::vector<int32_t>& set_field23(T_Struct17_field23_struct_setter&& field23_) {
    field23 = std::forward<T_Struct17_field23_struct_setter>(field23_);
    __isset.field23 = true;
    return field23;
  }
  const std::vector<std::vector<int8_t>>& get_field24() const&;
  std::vector<std::vector<int8_t>> get_field24() &&;

  template <typename T_Struct17_field24_struct_setter>
  std::vector<std::vector<int8_t>>& set_field24(T_Struct17_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct17_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }

  int32_t get_field25() const {
    return field25;
  }

  int32_t& set_field25(int32_t field25_) {
    field25 = field25_;
    __isset.field25 = true;
    return field25;
  }

  bool get_field26() const {
    return field26;
  }

  bool& set_field26(bool field26_) {
    field26 = field26_;
    __isset.field26 = true;
    return field26;
  }
  const std::set<float>& get_field27() const&;
  std::set<float> get_field27() &&;

  template <typename T_Struct17_field27_struct_setter>
  std::set<float>& set_field27(T_Struct17_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct17_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }

  int64_t get_field28() const {
    return field28;
  }

  int64_t& set_field28(int64_t field28_) {
    field28 = field28_;
    __isset.field28 = true;
    return field28;
  }
  const std::vector<float>& get_field29() const&;
  std::vector<float> get_field29() &&;

  template <typename T_Struct17_field29_struct_setter>
  std::vector<float>& set_field29(T_Struct17_field29_struct_setter&& field29_) {
    field29 = std::forward<T_Struct17_field29_struct_setter>(field29_);
    __isset.field29 = true;
    return field29;
  }
  const std::vector<int16_t>& get_field30() const&;
  std::vector<int16_t> get_field30() &&;

  template <typename T_Struct17_field30_struct_setter>
  std::vector<int16_t>& set_field30(T_Struct17_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct17_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }

  float get_field31() const {
    return field31;
  }

  float& set_field31(float field31_) {
    field31 = field31_;
    __isset.field31 = true;
    return field31;
  }

  int16_t get_field32() const {
    return field32;
  }

  int16_t& set_field32(int16_t field32_) {
    field32 = field32_;
    __isset.field32 = true;
    return field32;
  }
  const  ::cpp2::Struct11& get_field33() const&;
   ::cpp2::Struct11 get_field33() &&;

  template <typename T_Struct17_field33_struct_setter>
   ::cpp2::Struct11& set_field33(T_Struct17_field33_struct_setter&& field33_) {
    field33 = std::forward<T_Struct17_field33_struct_setter>(field33_);
    __isset.field33 = true;
    return field33;
  }
  const std::set<double>& get_field34() const&;
  std::set<double> get_field34() &&;

  template <typename T_Struct17_field34_struct_setter>
  std::set<double>& set_field34(T_Struct17_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct17_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }
  const  ::cpp2::Struct3& get_field35() const&;
   ::cpp2::Struct3 get_field35() &&;

  template <typename T_Struct17_field35_struct_setter>
   ::cpp2::Struct3& set_field35(T_Struct17_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct17_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }

  int64_t get_field36() const {
    return field36;
  }

  int64_t& set_field36(int64_t field36_) {
    field36 = field36_;
    __isset.field36 = true;
    return field36;
  }

  double get_field37() const {
    return field37;
  }

  double& set_field37(double field37_) {
    field37 = field37_;
    __isset.field37 = true;
    return field37;
  }

  float get_field38() const {
    return field38;
  }

  float& set_field38(float field38_) {
    field38 = field38_;
    __isset.field38 = true;
    return field38;
  }

  int64_t get_field39() const {
    return field39;
  }

  int64_t& set_field39(int64_t field39_) {
    field39 = field39_;
    __isset.field39 = true;
    return field39;
  }
  const std::vector<int16_t>& get_field40() const&;
  std::vector<int16_t> get_field40() &&;

  template <typename T_Struct17_field40_struct_setter>
  std::vector<int16_t>& set_field40(T_Struct17_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct17_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }

  const std::string& get_field41() const& {
    return field41;
  }

  std::string get_field41() && {
    return std::move(field41);
  }

  template <typename T_Struct17_field41_struct_setter>
  std::string& set_field41(T_Struct17_field41_struct_setter&& field41_) {
    field41 = std::forward<T_Struct17_field41_struct_setter>(field41_);
    __isset.field41 = true;
    return field41;
  }
  const std::set<double>& get_field42() const&;
  std::set<double> get_field42() &&;

  template <typename T_Struct17_field42_struct_setter>
  std::set<double>& set_field42(T_Struct17_field42_struct_setter&& field42_) {
    field42 = std::forward<T_Struct17_field42_struct_setter>(field42_);
    __isset.field42 = true;
    return field42;
  }

  int16_t get_field43() const {
    return field43;
  }

  int16_t& set_field43(int16_t field43_) {
    field43 = field43_;
    __isset.field43 = true;
    return field43;
  }
  const  ::cpp2::Struct1& get_field44() const&;
   ::cpp2::Struct1 get_field44() &&;

  template <typename T_Struct17_field44_struct_setter>
   ::cpp2::Struct1& set_field44(T_Struct17_field44_struct_setter&& field44_) {
    field44 = std::forward<T_Struct17_field44_struct_setter>(field44_);
    __isset.field44 = true;
    return field44;
  }

  int16_t get_field45() const {
    return field45;
  }

  int16_t& set_field45(int16_t field45_) {
    field45 = field45_;
    __isset.field45 = true;
    return field45;
  }

  int16_t get_field46() const {
    return field46;
  }

  int16_t& set_field46(int16_t field46_) {
    field46 = field46_;
    __isset.field46 = true;
    return field46;
  }

  const std::string& get_field47() const& {
    return field47;
  }

  std::string get_field47() && {
    return std::move(field47);
  }

  template <typename T_Struct17_field47_struct_setter>
  std::string& set_field47(T_Struct17_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct17_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }

  float get_field48() const {
    return field48;
  }

  float& set_field48(float field48_) {
    field48 = field48_;
    __isset.field48 = true;
    return field48;
  }

  int64_t get_field49() const {
    return field49;
  }

  int64_t& set_field49(int64_t field49_) {
    field49 = field49_;
    __isset.field49 = true;
    return field49;
  }

  int64_t get_field50() const {
    return field50;
  }

  int64_t& set_field50(int64_t field50_) {
    field50 = field50_;
    __isset.field50 = true;
    return field50;
  }

  double get_field51() const {
    return field51;
  }

  double& set_field51(double field51_) {
    field51 = field51_;
    __isset.field51 = true;
    return field51;
  }
  const std::set< ::cpp2::Struct10>& get_field52() const&;
  std::set< ::cpp2::Struct10> get_field52() &&;

  template <typename T_Struct17_field52_struct_setter>
  std::set< ::cpp2::Struct10>& set_field52(T_Struct17_field52_struct_setter&& field52_) {
    field52 = std::forward<T_Struct17_field52_struct_setter>(field52_);
    __isset.field52 = true;
    return field52;
  }
  const std::set<int32_t>& get_field53() const&;
  std::set<int32_t> get_field53() &&;

  template <typename T_Struct17_field53_struct_setter>
  std::set<int32_t>& set_field53(T_Struct17_field53_struct_setter&& field53_) {
    field53 = std::forward<T_Struct17_field53_struct_setter>(field53_);
    __isset.field53 = true;
    return field53;
  }

  bool get_field54() const {
    return field54;
  }

  bool& set_field54(bool field54_) {
    field54 = field54_;
    __isset.field54 = true;
    return field54;
  }

  int64_t get_field55() const {
    return field55;
  }

  int64_t& set_field55(int64_t field55_) {
    field55 = field55_;
    __isset.field55 = true;
    return field55;
  }
  const  ::cpp2::Struct12& get_field56() const&;
   ::cpp2::Struct12 get_field56() &&;

  template <typename T_Struct17_field56_struct_setter>
   ::cpp2::Struct12& set_field56(T_Struct17_field56_struct_setter&& field56_) {
    field56 = std::forward<T_Struct17_field56_struct_setter>(field56_);
    __isset.field56 = true;
    return field56;
  }
  const std::set<std::map<float, std::string>>& get_field57() const&;
  std::set<std::map<float, std::string>> get_field57() &&;

  template <typename T_Struct17_field57_struct_setter>
  std::set<std::map<float, std::string>>& set_field57(T_Struct17_field57_struct_setter&& field57_) {
    field57 = std::forward<T_Struct17_field57_struct_setter>(field57_);
    __isset.field57 = true;
    return field57;
  }
  const std::map<bool, std::set<std::string>>& get_field58() const&;
  std::map<bool, std::set<std::string>> get_field58() &&;

  template <typename T_Struct17_field58_struct_setter>
  std::map<bool, std::set<std::string>>& set_field58(T_Struct17_field58_struct_setter&& field58_) {
    field58 = std::forward<T_Struct17_field58_struct_setter>(field58_);
    __isset.field58 = true;
    return field58;
  }

  int32_t get_field59() const {
    return field59;
  }

  int32_t& set_field59(int32_t field59_) {
    field59 = field59_;
    __isset.field59 = true;
    return field59;
  }

  bool get_field60() const {
    return field60;
  }

  bool& set_field60(bool field60_) {
    field60 = field60_;
    __isset.field60 = true;
    return field60;
  }
  const  ::cpp2::Struct10& get_field61() const&;
   ::cpp2::Struct10 get_field61() &&;

  template <typename T_Struct17_field61_struct_setter>
   ::cpp2::Struct10& set_field61(T_Struct17_field61_struct_setter&& field61_) {
    field61 = std::forward<T_Struct17_field61_struct_setter>(field61_);
    __isset.field61 = true;
    return field61;
  }

  int16_t get_field62() const {
    return field62;
  }

  int16_t& set_field62(int16_t field62_) {
    field62 = field62_;
    __isset.field62 = true;
    return field62;
  }

  int32_t get_field63() const {
    return field63;
  }

  int32_t& set_field63(int32_t field63_) {
    field63 = field63_;
    __isset.field63 = true;
    return field63;
  }

  const std::string& get_field64() const& {
    return field64;
  }

  std::string get_field64() && {
    return std::move(field64);
  }

  template <typename T_Struct17_field64_struct_setter>
  std::string& set_field64(T_Struct17_field64_struct_setter&& field64_) {
    field64 = std::forward<T_Struct17_field64_struct_setter>(field64_);
    __isset.field64 = true;
    return field64;
  }
  const std::set<std::string>& get_field65() const&;
  std::set<std::string> get_field65() &&;

  template <typename T_Struct17_field65_struct_setter>
  std::set<std::string>& set_field65(T_Struct17_field65_struct_setter&& field65_) {
    field65 = std::forward<T_Struct17_field65_struct_setter>(field65_);
    __isset.field65 = true;
    return field65;
  }

  int32_t get_field66() const {
    return field66;
  }

  int32_t& set_field66(int32_t field66_) {
    field66 = field66_;
    __isset.field66 = true;
    return field66;
  }
  const std::map<int16_t, std::string>& get_field67() const&;
  std::map<int16_t, std::string> get_field67() &&;

  template <typename T_Struct17_field67_struct_setter>
  std::map<int16_t, std::string>& set_field67(T_Struct17_field67_struct_setter&& field67_) {
    field67 = std::forward<T_Struct17_field67_struct_setter>(field67_);
    __isset.field67 = true;
    return field67;
  }
  const std::map<std::map<std::vector<int16_t>, std::string>, std::vector<int8_t>>& get_field68() const&;
  std::map<std::map<std::vector<int16_t>, std::string>, std::vector<int8_t>> get_field68() &&;

  template <typename T_Struct17_field68_struct_setter>
  std::map<std::map<std::vector<int16_t>, std::string>, std::vector<int8_t>>& set_field68(T_Struct17_field68_struct_setter&& field68_) {
    field68 = std::forward<T_Struct17_field68_struct_setter>(field68_);
    __isset.field68 = true;
    return field68;
  }

  const std::string& get_field69() const& {
    return field69;
  }

  std::string get_field69() && {
    return std::move(field69);
  }

  template <typename T_Struct17_field69_struct_setter>
  std::string& set_field69(T_Struct17_field69_struct_setter&& field69_) {
    field69 = std::forward<T_Struct17_field69_struct_setter>(field69_);
    __isset.field69 = true;
    return field69;
  }

  float get_field70() const {
    return field70;
  }

  float& set_field70(float field70_) {
    field70 = field70_;
    __isset.field70 = true;
    return field70;
  }

  float get_field71() const {
    return field71;
  }

  float& set_field71(float field71_) {
    field71 = field71_;
    __isset.field71 = true;
    return field71;
  }

  int16_t get_field72() const {
    return field72;
  }

  int16_t& set_field72(int16_t field72_) {
    field72 = field72_;
    __isset.field72 = true;
    return field72;
  }

  double get_field73() const {
    return field73;
  }

  double& set_field73(double field73_) {
    field73 = field73_;
    __isset.field73 = true;
    return field73;
  }

  const std::string& get_field74() const& {
    return field74;
  }

  std::string get_field74() && {
    return std::move(field74);
  }

  template <typename T_Struct17_field74_struct_setter>
  std::string& set_field74(T_Struct17_field74_struct_setter&& field74_) {
    field74 = std::forward<T_Struct17_field74_struct_setter>(field74_);
    __isset.field74 = true;
    return field74;
  }
  const std::set<int16_t>& get_field75() const&;
  std::set<int16_t> get_field75() &&;

  template <typename T_Struct17_field75_struct_setter>
  std::set<int16_t>& set_field75(T_Struct17_field75_struct_setter&& field75_) {
    field75 = std::forward<T_Struct17_field75_struct_setter>(field75_);
    __isset.field75 = true;
    return field75;
  }

  int64_t get_field76() const {
    return field76;
  }

  int64_t& set_field76(int64_t field76_) {
    field76 = field76_;
    __isset.field76 = true;
    return field76;
  }
  const std::map<std::string, std::set<float>>& get_field77() const&;
  std::map<std::string, std::set<float>> get_field77() &&;

  template <typename T_Struct17_field77_struct_setter>
  std::map<std::string, std::set<float>>& set_field77(T_Struct17_field77_struct_setter&& field77_) {
    field77 = std::forward<T_Struct17_field77_struct_setter>(field77_);
    __isset.field77 = true;
    return field77;
  }
  const std::vector<float>& get_field78() const&;
  std::vector<float> get_field78() &&;

  template <typename T_Struct17_field78_struct_setter>
  std::vector<float>& set_field78(T_Struct17_field78_struct_setter&& field78_) {
    field78 = std::forward<T_Struct17_field78_struct_setter>(field78_);
    __isset.field78 = true;
    return field78;
  }
  const  ::cpp2::Struct5& get_field79() const&;
   ::cpp2::Struct5 get_field79() &&;

  template <typename T_Struct17_field79_struct_setter>
   ::cpp2::Struct5& set_field79(T_Struct17_field79_struct_setter&& field79_) {
    field79 = std::forward<T_Struct17_field79_struct_setter>(field79_);
    __isset.field79 = true;
    return field79;
  }

  int64_t get_field80() const {
    return field80;
  }

  int64_t& set_field80(int64_t field80_) {
    field80 = field80_;
    __isset.field80 = true;
    return field80;
  }
  const std::map< ::cpp2::Struct0, std::string>& get_field81() const&;
  std::map< ::cpp2::Struct0, std::string> get_field81() &&;

  template <typename T_Struct17_field81_struct_setter>
  std::map< ::cpp2::Struct0, std::string>& set_field81(T_Struct17_field81_struct_setter&& field81_) {
    field81 = std::forward<T_Struct17_field81_struct_setter>(field81_);
    __isset.field81 = true;
    return field81;
  }
  const  ::cpp2::Struct3& get_field82() const&;
   ::cpp2::Struct3 get_field82() &&;

  template <typename T_Struct17_field82_struct_setter>
   ::cpp2::Struct3& set_field82(T_Struct17_field82_struct_setter&& field82_) {
    field82 = std::forward<T_Struct17_field82_struct_setter>(field82_);
    __isset.field82 = true;
    return field82;
  }
  const  ::cpp2::Struct11& get_field83() const&;
   ::cpp2::Struct11 get_field83() &&;

  template <typename T_Struct17_field83_struct_setter>
   ::cpp2::Struct11& set_field83(T_Struct17_field83_struct_setter&& field83_) {
    field83 = std::forward<T_Struct17_field83_struct_setter>(field83_);
    __isset.field83 = true;
    return field83;
  }
  const std::map<double, int16_t>& get_field84() const&;
  std::map<double, int16_t> get_field84() &&;

  template <typename T_Struct17_field84_struct_setter>
  std::map<double, int16_t>& set_field84(T_Struct17_field84_struct_setter&& field84_) {
    field84 = std::forward<T_Struct17_field84_struct_setter>(field84_);
    __isset.field84 = true;
    return field84;
  }

  int64_t get_field85() const {
    return field85;
  }

  int64_t& set_field85(int64_t field85_) {
    field85 = field85_;
    __isset.field85 = true;
    return field85;
  }
  const  ::cpp2::Struct5& get_field86() const&;
   ::cpp2::Struct5 get_field86() &&;

  template <typename T_Struct17_field86_struct_setter>
   ::cpp2::Struct5& set_field86(T_Struct17_field86_struct_setter&& field86_) {
    field86 = std::forward<T_Struct17_field86_struct_setter>(field86_);
    __isset.field86 = true;
    return field86;
  }
  const std::set<std::vector<int32_t>>& get_field87() const&;
  std::set<std::vector<int32_t>> get_field87() &&;

  template <typename T_Struct17_field87_struct_setter>
  std::set<std::vector<int32_t>>& set_field87(T_Struct17_field87_struct_setter&& field87_) {
    field87 = std::forward<T_Struct17_field87_struct_setter>(field87_);
    __isset.field87 = true;
    return field87;
  }
  const std::vector<std::set<int64_t>>& get_field88() const&;
  std::vector<std::set<int64_t>> get_field88() &&;

  template <typename T_Struct17_field88_struct_setter>
  std::vector<std::set<int64_t>>& set_field88(T_Struct17_field88_struct_setter&& field88_) {
    field88 = std::forward<T_Struct17_field88_struct_setter>(field88_);
    __isset.field88 = true;
    return field88;
  }

  double get_field89() const {
    return field89;
  }

  double& set_field89(double field89_) {
    field89 = field89_;
    __isset.field89 = true;
    return field89;
  }
  const std::vector<int64_t>& get_field90() const&;
  std::vector<int64_t> get_field90() &&;

  template <typename T_Struct17_field90_struct_setter>
  std::vector<int64_t>& set_field90(T_Struct17_field90_struct_setter&& field90_) {
    field90 = std::forward<T_Struct17_field90_struct_setter>(field90_);
    __isset.field90 = true;
    return field90;
  }
  const std::map<int8_t, bool>& get_field91() const&;
  std::map<int8_t, bool> get_field91() &&;

  template <typename T_Struct17_field91_struct_setter>
  std::map<int8_t, bool>& set_field91(T_Struct17_field91_struct_setter&& field91_) {
    field91 = std::forward<T_Struct17_field91_struct_setter>(field91_);
    __isset.field91 = true;
    return field91;
  }

  double get_field92() const {
    return field92;
  }

  double& set_field92(double field92_) {
    field92 = field92_;
    __isset.field92 = true;
    return field92;
  }
  const std::map<int16_t, int32_t>& get_field93() const&;
  std::map<int16_t, int32_t> get_field93() &&;

  template <typename T_Struct17_field93_struct_setter>
  std::map<int16_t, int32_t>& set_field93(T_Struct17_field93_struct_setter&& field93_) {
    field93 = std::forward<T_Struct17_field93_struct_setter>(field93_);
    __isset.field93 = true;
    return field93;
  }
  const  ::cpp2::Struct2& get_field94() const&;
   ::cpp2::Struct2 get_field94() &&;

  template <typename T_Struct17_field94_struct_setter>
   ::cpp2::Struct2& set_field94(T_Struct17_field94_struct_setter&& field94_) {
    field94 = std::forward<T_Struct17_field94_struct_setter>(field94_);
    __isset.field94 = true;
    return field94;
  }

  const std::string& get_field95() const& {
    return field95;
  }

  std::string get_field95() && {
    return std::move(field95);
  }

  template <typename T_Struct17_field95_struct_setter>
  std::string& set_field95(T_Struct17_field95_struct_setter&& field95_) {
    field95 = std::forward<T_Struct17_field95_struct_setter>(field95_);
    __isset.field95 = true;
    return field95;
  }

  int8_t get_field96() const {
    return field96;
  }

  int8_t& set_field96(int8_t field96_) {
    field96 = field96_;
    __isset.field96 = true;
    return field96;
  }
  const  ::cpp2::Struct2& get_field97() const&;
   ::cpp2::Struct2 get_field97() &&;

  template <typename T_Struct17_field97_struct_setter>
   ::cpp2::Struct2& set_field97(T_Struct17_field97_struct_setter&& field97_) {
    field97 = std::forward<T_Struct17_field97_struct_setter>(field97_);
    __isset.field97 = true;
    return field97;
  }

  double get_field98() const {
    return field98;
  }

  double& set_field98(double field98_) {
    field98 = field98_;
    __isset.field98 = true;
    return field98;
  }

  int64_t get_field99() const {
    return field99;
  }

  int64_t& set_field99(int64_t field99_) {
    field99 = field99_;
    __isset.field99 = true;
    return field99;
  }
  const  ::cpp2::Struct3& get_field100() const&;
   ::cpp2::Struct3 get_field100() &&;

  template <typename T_Struct17_field100_struct_setter>
   ::cpp2::Struct3& set_field100(T_Struct17_field100_struct_setter&& field100_) {
    field100 = std::forward<T_Struct17_field100_struct_setter>(field100_);
    __isset.field100 = true;
    return field100;
  }
  const std::vector< ::cpp2::Struct9>& get_field101() const&;
  std::vector< ::cpp2::Struct9> get_field101() &&;

  template <typename T_Struct17_field101_struct_setter>
  std::vector< ::cpp2::Struct9>& set_field101(T_Struct17_field101_struct_setter&& field101_) {
    field101 = std::forward<T_Struct17_field101_struct_setter>(field101_);
    __isset.field101 = true;
    return field101;
  }
  const  ::cpp2::Struct6& get_field102() const&;
   ::cpp2::Struct6 get_field102() &&;

  template <typename T_Struct17_field102_struct_setter>
   ::cpp2::Struct6& set_field102(T_Struct17_field102_struct_setter&& field102_) {
    field102 = std::forward<T_Struct17_field102_struct_setter>(field102_);
    __isset.field102 = true;
    return field102;
  }

  int8_t get_field103() const {
    return field103;
  }

  int8_t& set_field103(int8_t field103_) {
    field103 = field103_;
    __isset.field103 = true;
    return field103;
  }
  const std::map<int8_t, int16_t>& get_field104() const&;
  std::map<int8_t, int16_t> get_field104() &&;

  template <typename T_Struct17_field104_struct_setter>
  std::map<int8_t, int16_t>& set_field104(T_Struct17_field104_struct_setter&& field104_) {
    field104 = std::forward<T_Struct17_field104_struct_setter>(field104_);
    __isset.field104 = true;
    return field104;
  }

  int32_t get_field105() const {
    return field105;
  }

  int32_t& set_field105(int32_t field105_) {
    field105 = field105_;
    __isset.field105 = true;
    return field105;
  }

  int8_t get_field106() const {
    return field106;
  }

  int8_t& set_field106(int8_t field106_) {
    field106 = field106_;
    __isset.field106 = true;
    return field106;
  }
  const std::map<double, std::vector<std::map<float, int8_t>>>& get_field107() const&;
  std::map<double, std::vector<std::map<float, int8_t>>> get_field107() &&;

  template <typename T_Struct17_field107_struct_setter>
  std::map<double, std::vector<std::map<float, int8_t>>>& set_field107(T_Struct17_field107_struct_setter&& field107_) {
    field107 = std::forward<T_Struct17_field107_struct_setter>(field107_);
    __isset.field107 = true;
    return field107;
  }

  double get_field108() const {
    return field108;
  }

  double& set_field108(double field108_) {
    field108 = field108_;
    __isset.field108 = true;
    return field108;
  }
  const  ::cpp2::Struct6& get_field109() const&;
   ::cpp2::Struct6 get_field109() &&;

  template <typename T_Struct17_field109_struct_setter>
   ::cpp2::Struct6& set_field109(T_Struct17_field109_struct_setter&& field109_) {
    field109 = std::forward<T_Struct17_field109_struct_setter>(field109_);
    __isset.field109 = true;
    return field109;
  }

  double get_field110() const {
    return field110;
  }

  double& set_field110(double field110_) {
    field110 = field110_;
    __isset.field110 = true;
    return field110;
  }

  int16_t get_field111() const {
    return field111;
  }

  int16_t& set_field111(int16_t field111_) {
    field111 = field111_;
    __isset.field111 = true;
    return field111;
  }

  int32_t get_field112() const {
    return field112;
  }

  int32_t& set_field112(int32_t field112_) {
    field112 = field112_;
    __isset.field112 = true;
    return field112;
  }

  int32_t get_field113() const {
    return field113;
  }

  int32_t& set_field113(int32_t field113_) {
    field113 = field113_;
    __isset.field113 = true;
    return field113;
  }

  int64_t get_field114() const {
    return field114;
  }

  int64_t& set_field114(int64_t field114_) {
    field114 = field114_;
    __isset.field114 = true;
    return field114;
  }

  int8_t get_field115() const {
    return field115;
  }

  int8_t& set_field115(int8_t field115_) {
    field115 = field115_;
    __isset.field115 = true;
    return field115;
  }

  const std::string& get_field116() const& {
    return field116;
  }

  std::string get_field116() && {
    return std::move(field116);
  }

  template <typename T_Struct17_field116_struct_setter>
  std::string& set_field116(T_Struct17_field116_struct_setter&& field116_) {
    field116 = std::forward<T_Struct17_field116_struct_setter>(field116_);
    __isset.field116 = true;
    return field116;
  }
  const std::set<std::map<std::map<std::string, std::string>, int64_t>>& get_field117() const&;
  std::set<std::map<std::map<std::string, std::string>, int64_t>> get_field117() &&;

  template <typename T_Struct17_field117_struct_setter>
  std::set<std::map<std::map<std::string, std::string>, int64_t>>& set_field117(T_Struct17_field117_struct_setter&& field117_) {
    field117 = std::forward<T_Struct17_field117_struct_setter>(field117_);
    __isset.field117 = true;
    return field117;
  }
  const std::map<int64_t, std::string>& get_field118() const&;
  std::map<int64_t, std::string> get_field118() &&;

  template <typename T_Struct17_field118_struct_setter>
  std::map<int64_t, std::string>& set_field118(T_Struct17_field118_struct_setter&& field118_) {
    field118 = std::forward<T_Struct17_field118_struct_setter>(field118_);
    __isset.field118 = true;
    return field118;
  }

  bool get_field119() const {
    return field119;
  }

  bool& set_field119(bool field119_) {
    field119 = field119_;
    __isset.field119 = true;
    return field119;
  }

  const std::string& get_field120() const& {
    return field120;
  }

  std::string get_field120() && {
    return std::move(field120);
  }

  template <typename T_Struct17_field120_struct_setter>
  std::string& set_field120(T_Struct17_field120_struct_setter&& field120_) {
    field120 = std::forward<T_Struct17_field120_struct_setter>(field120_);
    __isset.field120 = true;
    return field120;
  }

  float get_field121() const {
    return field121;
  }

  float& set_field121(float field121_) {
    field121 = field121_;
    __isset.field121 = true;
    return field121;
  }

  int32_t get_field122() const {
    return field122;
  }

  int32_t& set_field122(int32_t field122_) {
    field122 = field122_;
    __isset.field122 = true;
    return field122;
  }

  int32_t get_field123() const {
    return field123;
  }

  int32_t& set_field123(int32_t field123_) {
    field123 = field123_;
    __isset.field123 = true;
    return field123;
  }
  const std::set<std::set<double>>& get_field124() const&;
  std::set<std::set<double>> get_field124() &&;

  template <typename T_Struct17_field124_struct_setter>
  std::set<std::set<double>>& set_field124(T_Struct17_field124_struct_setter&& field124_) {
    field124 = std::forward<T_Struct17_field124_struct_setter>(field124_);
    __isset.field124 = true;
    return field124;
  }

  int8_t get_field125() const {
    return field125;
  }

  int8_t& set_field125(int8_t field125_) {
    field125 = field125_;
    __isset.field125 = true;
    return field125;
  }
  const std::vector<std::string>& get_field126() const&;
  std::vector<std::string> get_field126() &&;

  template <typename T_Struct17_field126_struct_setter>
  std::vector<std::string>& set_field126(T_Struct17_field126_struct_setter&& field126_) {
    field126 = std::forward<T_Struct17_field126_struct_setter>(field126_);
    __isset.field126 = true;
    return field126;
  }

  int16_t get_field127() const {
    return field127;
  }

  int16_t& set_field127(int16_t field127_) {
    field127 = field127_;
    __isset.field127 = true;
    return field127;
  }
  const std::map<int32_t, double>& get_field128() const&;
  std::map<int32_t, double> get_field128() &&;

  template <typename T_Struct17_field128_struct_setter>
  std::map<int32_t, double>& set_field128(T_Struct17_field128_struct_setter&& field128_) {
    field128 = std::forward<T_Struct17_field128_struct_setter>(field128_);
    __isset.field128 = true;
    return field128;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct17& a, Struct17& b);
extern template uint32_t Struct17::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct17::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct17::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct17::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct17::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct17::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct17::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct17::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct17>::clear( ::cpp2::Struct17* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct17>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct17>::write(Protocol* proto,  ::cpp2::Struct17 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct17>::read(Protocol* proto,  ::cpp2::Struct17* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct17>::serializedSize(Protocol const* proto,  ::cpp2::Struct17 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct17>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct17 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct18 : private apache::thrift::detail::st::ComparisonOperators<Struct18> {
 public:

  Struct18() :
      field3(0),
      field5(0),
      field8(0),
      field9(0),
      field11(0),
      field12(0),
      field14(0),
      field15(0),
      field16(0),
      field18(0),
      field19(0),
      field22(0),
      field24(0),
      field29(0),
      field31(0),
      field33(0),
      field35(0),
      field36(0),
      field41(0),
      field45(0),
      field52(0),
      field53(0),
      field58(0),
      field59(0),
      field66(0),
      field67(0),
      field70(0),
      field73(0),
      field77(0),
      field79(0),
      field81(0),
      field82(0),
      field85(0),
      field87(0),
      field88(0),
      field91(0),
      field92(0),
      field93(0),
      field96(0),
      field99(0),
      field102(0),
      field103(0),
      field109(0),
      field114(0),
      field117(0),
      field121(0),
      field125(0),
      field127(0),
      field128(0),
      field130(0),
      field131(0),
      field133(0),
      field134(0),
      field135(0),
      field136(0),
      field138(0),
      field140(0),
      field141(0),
      field142(0),
      field143(0),
      field146(0),
      field149(0),
      field150(0),
      field153(0),
      field154(0),
      field155(0),
      field156(0),
      field159(0),
      field163(0),
      field164(0),
      field165(0),
      field177(0),
      field178(0),
      field179(0),
      field182(0),
      field184(0),
      field186(0),
      field189(0),
      field192(0),
      field193(0),
      field194(0),
      field196(0),
      field198(0),
      field206(0),
      field213(0),
      field215(0),
      field216(0),
      field218(0),
      field224(0),
      field228(0) {}
  // FragileConstructor for use in initialization lists only

  Struct18(apache::thrift::FragileConstructor,  ::cpp2::Struct0 field1__arg,  ::cpp2::Struct10 field2__arg, int64_t field3__arg, std::map< ::cpp2::Struct3,  ::cpp2::Struct0> field4__arg, int16_t field5__arg, std::vector<float> field6__arg, std::vector<bool> field7__arg, int32_t field8__arg, int16_t field9__arg,  ::cpp2::Struct0 field10__arg, float field11__arg, int8_t field12__arg, std::set<int16_t> field13__arg, int64_t field14__arg, int16_t field15__arg, int16_t field16__arg, std::map<bool, std::string> field17__arg, int32_t field18__arg, int32_t field19__arg, std::string field20__arg, std::set<float> field21__arg, int16_t field22__arg, std::string field23__arg, int32_t field24__arg,  ::cpp2::Struct0 field25__arg, std::map<int8_t, int16_t> field26__arg, std::string field27__arg, std::string field28__arg, int32_t field29__arg, std::string field30__arg, int64_t field31__arg, std::map<int32_t, bool> field32__arg, int8_t field33__arg, std::string field34__arg, int64_t field35__arg, int64_t field36__arg,  ::cpp2::Struct2 field37__arg, std::vector<bool> field38__arg, std::string field39__arg, std::map<std::vector<std::map<int8_t, int64_t>>, std::string> field40__arg, bool field41__arg,  ::cpp2::Struct6 field42__arg, std::string field43__arg, std::map<std::string, std::vector<std::vector<std::string>>> field44__arg, int64_t field45__arg, std::map<int16_t, int32_t> field46__arg, std::set<std::string> field47__arg, std::set<float> field48__arg,  ::cpp2::Struct0 field49__arg, std::vector< ::cpp2::Struct3> field50__arg, std::map<int64_t, std::vector<std::string>> field51__arg, int64_t field52__arg, bool field53__arg, std::set<std::string> field54__arg, std::string field55__arg, std::set<float> field56__arg, std::string field57__arg, double field58__arg, bool field59__arg, std::set< ::cpp2::Struct1> field60__arg, std::set<int8_t> field61__arg, std::set<int16_t> field62__arg, std::set<std::string> field63__arg,  ::cpp2::Struct8 field64__arg,  ::cpp2::Struct8 field65__arg, int16_t field66__arg, double field67__arg, std::map<std::vector<int8_t>, std::set<float>> field68__arg, std::vector<int64_t> field69__arg, int64_t field70__arg, std::vector<std::map<int16_t, std::string>> field71__arg, std::vector<std::map<std::string, int8_t>> field72__arg, int8_t field73__arg, std::vector<std::set<std::string>> field74__arg, std::vector<std::vector<double>> field75__arg, std::map<double, std::vector<int64_t>> field76__arg, int32_t field77__arg, std::string field78__arg, bool field79__arg, std::set<std::set<int64_t>> field80__arg, double field81__arg, float field82__arg,  ::cpp2::Struct9 field83__arg,  ::cpp2::Struct9 field84__arg, int64_t field85__arg, std::string field86__arg, int32_t field87__arg, float field88__arg, std::map<int8_t, int8_t> field89__arg, std::map<int16_t, std::vector<float>> field90__arg, int16_t field91__arg, int64_t field92__arg, int64_t field93__arg, std::map<float,  ::cpp2::Struct5> field94__arg, std::vector<std::string> field95__arg, float field96__arg,  ::cpp2::Struct8 field97__arg, std::map<int8_t, std::string> field98__arg, int16_t field99__arg, std::map<int8_t, std::string> field100__arg, std::map<bool, int64_t> field101__arg, int16_t field102__arg, int8_t field103__arg, std::set<int16_t> field104__arg, std::string field105__arg, std::set<std::string> field106__arg, std::string field107__arg,  ::cpp2::Struct8 field108__arg, int8_t field109__arg, std::set<std::string> field110__arg,  ::cpp2::Struct2 field111__arg, std::string field112__arg, std::set<std::map<std::string, int32_t>> field113__arg, int64_t field114__arg,  ::cpp2::Struct3 field115__arg, std::set<int16_t> field116__arg, float field117__arg, std::vector<std::map<int8_t, double>> field118__arg, std::string field119__arg, std::string field120__arg, int64_t field121__arg, std::set<std::vector<std::map<float, double>>> field122__arg, std::vector<std::map<std::string, int8_t>> field123__arg, std::set<int8_t> field124__arg, int16_t field125__arg, std::map<std::string, int32_t> field126__arg, int8_t field127__arg, int32_t field128__arg,  ::cpp2::Struct11 field129__arg, double field130__arg, int8_t field131__arg,  ::cpp2::Struct7 field132__arg, int32_t field133__arg, double field134__arg, int8_t field135__arg, double field136__arg, std::string field137__arg, int64_t field138__arg, std::string field139__arg, int64_t field140__arg, float field141__arg, bool field142__arg, int16_t field143__arg, std::map< ::cpp2::Struct4, int64_t> field144__arg, std::vector<float> field145__arg, int16_t field146__arg,  ::cpp2::Struct9 field147__arg, std::map< ::cpp2::Struct0, double> field148__arg, float field149__arg, bool field150__arg, std::set<int8_t> field151__arg, std::map<int64_t, std::vector<int64_t>> field152__arg, bool field153__arg, int8_t field154__arg, int32_t field155__arg, int16_t field156__arg, std::string field157__arg, std::string field158__arg, int64_t field159__arg, std::map<double, int8_t> field160__arg, std::string field161__arg,  ::cpp2::Struct2 field162__arg, bool field163__arg, int64_t field164__arg, bool field165__arg, std::set< ::cpp2::Struct6> field166__arg, std::map<int16_t, std::set<float>> field167__arg, std::vector<std::string> field168__arg, std::set<std::string> field169__arg, std::set<int8_t> field170__arg, std::vector<bool> field171__arg,  ::cpp2::Struct0 field172__arg, std::vector<std::string> field173__arg, std::map<int32_t,  ::cpp2::Struct8> field174__arg,  ::cpp2::Struct3 field175__arg, std::set<float> field176__arg, int32_t field177__arg, int8_t field178__arg, int16_t field179__arg, std::set<std::string> field180__arg, std::string field181__arg, float field182__arg, std::vector<int64_t> field183__arg, int8_t field184__arg, std::set<std::string> field185__arg, bool field186__arg, std::set<std::string> field187__arg,  ::cpp2::Struct4 field188__arg, bool field189__arg,  ::cpp2::Struct7 field190__arg, std::string field191__arg, float field192__arg, int32_t field193__arg, float field194__arg, std::set<int32_t> field195__arg, double field196__arg,  ::cpp2::Struct4 field197__arg, int32_t field198__arg,  ::cpp2::Struct14 field199__arg, std::vector<float> field200__arg, std::vector<int64_t> field201__arg, std::map<bool, int32_t> field202__arg, std::string field203__arg, std::map<int64_t, int32_t> field204__arg, std::map<std::string, std::vector<int32_t>> field205__arg, int8_t field206__arg, std::set<std::string> field207__arg,  ::cpp2::Struct8 field208__arg, std::string field209__arg, std::map<std::string, bool> field210__arg, std::map<bool, int16_t> field211__arg, std::string field212__arg, int8_t field213__arg,  ::cpp2::Struct5 field214__arg, int64_t field215__arg, int16_t field216__arg, std::string field217__arg, float field218__arg, std::vector<float> field219__arg,  ::cpp2::Struct13 field220__arg, std::string field221__arg,  ::cpp2::Struct8 field222__arg, std::set<int16_t> field223__arg, int16_t field224__arg, std::vector<float> field225__arg, std::vector<int16_t> field226__arg, std::vector<std::map<int64_t, int16_t>> field227__arg, int64_t field228__arg,  ::cpp2::Struct2 field229__arg, std::string field230__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)),
      field97(std::move(field97__arg)),
      field98(std::move(field98__arg)),
      field99(std::move(field99__arg)),
      field100(std::move(field100__arg)),
      field101(std::move(field101__arg)),
      field102(std::move(field102__arg)),
      field103(std::move(field103__arg)),
      field104(std::move(field104__arg)),
      field105(std::move(field105__arg)),
      field106(std::move(field106__arg)),
      field107(std::move(field107__arg)),
      field108(std::move(field108__arg)),
      field109(std::move(field109__arg)),
      field110(std::move(field110__arg)),
      field111(std::move(field111__arg)),
      field112(std::move(field112__arg)),
      field113(std::move(field113__arg)),
      field114(std::move(field114__arg)),
      field115(std::move(field115__arg)),
      field116(std::move(field116__arg)),
      field117(std::move(field117__arg)),
      field118(std::move(field118__arg)),
      field119(std::move(field119__arg)),
      field120(std::move(field120__arg)),
      field121(std::move(field121__arg)),
      field122(std::move(field122__arg)),
      field123(std::move(field123__arg)),
      field124(std::move(field124__arg)),
      field125(std::move(field125__arg)),
      field126(std::move(field126__arg)),
      field127(std::move(field127__arg)),
      field128(std::move(field128__arg)),
      field129(std::move(field129__arg)),
      field130(std::move(field130__arg)),
      field131(std::move(field131__arg)),
      field132(std::move(field132__arg)),
      field133(std::move(field133__arg)),
      field134(std::move(field134__arg)),
      field135(std::move(field135__arg)),
      field136(std::move(field136__arg)),
      field137(std::move(field137__arg)),
      field138(std::move(field138__arg)),
      field139(std::move(field139__arg)),
      field140(std::move(field140__arg)),
      field141(std::move(field141__arg)),
      field142(std::move(field142__arg)),
      field143(std::move(field143__arg)),
      field144(std::move(field144__arg)),
      field145(std::move(field145__arg)),
      field146(std::move(field146__arg)),
      field147(std::move(field147__arg)),
      field148(std::move(field148__arg)),
      field149(std::move(field149__arg)),
      field150(std::move(field150__arg)),
      field151(std::move(field151__arg)),
      field152(std::move(field152__arg)),
      field153(std::move(field153__arg)),
      field154(std::move(field154__arg)),
      field155(std::move(field155__arg)),
      field156(std::move(field156__arg)),
      field157(std::move(field157__arg)),
      field158(std::move(field158__arg)),
      field159(std::move(field159__arg)),
      field160(std::move(field160__arg)),
      field161(std::move(field161__arg)),
      field162(std::move(field162__arg)),
      field163(std::move(field163__arg)),
      field164(std::move(field164__arg)),
      field165(std::move(field165__arg)),
      field166(std::move(field166__arg)),
      field167(std::move(field167__arg)),
      field168(std::move(field168__arg)),
      field169(std::move(field169__arg)),
      field170(std::move(field170__arg)),
      field171(std::move(field171__arg)),
      field172(std::move(field172__arg)),
      field173(std::move(field173__arg)),
      field174(std::move(field174__arg)),
      field175(std::move(field175__arg)),
      field176(std::move(field176__arg)),
      field177(std::move(field177__arg)),
      field178(std::move(field178__arg)),
      field179(std::move(field179__arg)),
      field180(std::move(field180__arg)),
      field181(std::move(field181__arg)),
      field182(std::move(field182__arg)),
      field183(std::move(field183__arg)),
      field184(std::move(field184__arg)),
      field185(std::move(field185__arg)),
      field186(std::move(field186__arg)),
      field187(std::move(field187__arg)),
      field188(std::move(field188__arg)),
      field189(std::move(field189__arg)),
      field190(std::move(field190__arg)),
      field191(std::move(field191__arg)),
      field192(std::move(field192__arg)),
      field193(std::move(field193__arg)),
      field194(std::move(field194__arg)),
      field195(std::move(field195__arg)),
      field196(std::move(field196__arg)),
      field197(std::move(field197__arg)),
      field198(std::move(field198__arg)),
      field199(std::move(field199__arg)),
      field200(std::move(field200__arg)),
      field201(std::move(field201__arg)),
      field202(std::move(field202__arg)),
      field203(std::move(field203__arg)),
      field204(std::move(field204__arg)),
      field205(std::move(field205__arg)),
      field206(std::move(field206__arg)),
      field207(std::move(field207__arg)),
      field208(std::move(field208__arg)),
      field209(std::move(field209__arg)),
      field210(std::move(field210__arg)),
      field211(std::move(field211__arg)),
      field212(std::move(field212__arg)),
      field213(std::move(field213__arg)),
      field214(std::move(field214__arg)),
      field215(std::move(field215__arg)),
      field216(std::move(field216__arg)),
      field217(std::move(field217__arg)),
      field218(std::move(field218__arg)),
      field219(std::move(field219__arg)),
      field220(std::move(field220__arg)),
      field221(std::move(field221__arg)),
      field222(std::move(field222__arg)),
      field223(std::move(field223__arg)),
      field224(std::move(field224__arg)),
      field225(std::move(field225__arg)),
      field226(std::move(field226__arg)),
      field227(std::move(field227__arg)),
      field228(std::move(field228__arg)),
      field229(std::move(field229__arg)),
      field230(std::move(field230__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
    __isset.field97 = true;
    __isset.field98 = true;
    __isset.field99 = true;
    __isset.field100 = true;
    __isset.field101 = true;
    __isset.field102 = true;
    __isset.field103 = true;
    __isset.field104 = true;
    __isset.field105 = true;
    __isset.field106 = true;
    __isset.field107 = true;
    __isset.field108 = true;
    __isset.field109 = true;
    __isset.field110 = true;
    __isset.field111 = true;
    __isset.field112 = true;
    __isset.field113 = true;
    __isset.field114 = true;
    __isset.field115 = true;
    __isset.field116 = true;
    __isset.field117 = true;
    __isset.field118 = true;
    __isset.field119 = true;
    __isset.field120 = true;
    __isset.field121 = true;
    __isset.field122 = true;
    __isset.field123 = true;
    __isset.field124 = true;
    __isset.field125 = true;
    __isset.field126 = true;
    __isset.field127 = true;
    __isset.field128 = true;
    __isset.field129 = true;
    __isset.field130 = true;
    __isset.field131 = true;
    __isset.field132 = true;
    __isset.field133 = true;
    __isset.field134 = true;
    __isset.field135 = true;
    __isset.field136 = true;
    __isset.field137 = true;
    __isset.field138 = true;
    __isset.field139 = true;
    __isset.field140 = true;
    __isset.field141 = true;
    __isset.field142 = true;
    __isset.field143 = true;
    __isset.field144 = true;
    __isset.field145 = true;
    __isset.field146 = true;
    __isset.field147 = true;
    __isset.field148 = true;
    __isset.field149 = true;
    __isset.field150 = true;
    __isset.field151 = true;
    __isset.field152 = true;
    __isset.field153 = true;
    __isset.field154 = true;
    __isset.field155 = true;
    __isset.field156 = true;
    __isset.field157 = true;
    __isset.field158 = true;
    __isset.field159 = true;
    __isset.field160 = true;
    __isset.field161 = true;
    __isset.field162 = true;
    __isset.field163 = true;
    __isset.field164 = true;
    __isset.field165 = true;
    __isset.field166 = true;
    __isset.field167 = true;
    __isset.field168 = true;
    __isset.field169 = true;
    __isset.field170 = true;
    __isset.field171 = true;
    __isset.field172 = true;
    __isset.field173 = true;
    __isset.field174 = true;
    __isset.field175 = true;
    __isset.field176 = true;
    __isset.field177 = true;
    __isset.field178 = true;
    __isset.field179 = true;
    __isset.field180 = true;
    __isset.field181 = true;
    __isset.field182 = true;
    __isset.field183 = true;
    __isset.field184 = true;
    __isset.field185 = true;
    __isset.field186 = true;
    __isset.field187 = true;
    __isset.field188 = true;
    __isset.field189 = true;
    __isset.field190 = true;
    __isset.field191 = true;
    __isset.field192 = true;
    __isset.field193 = true;
    __isset.field194 = true;
    __isset.field195 = true;
    __isset.field196 = true;
    __isset.field197 = true;
    __isset.field198 = true;
    __isset.field199 = true;
    __isset.field200 = true;
    __isset.field201 = true;
    __isset.field202 = true;
    __isset.field203 = true;
    __isset.field204 = true;
    __isset.field205 = true;
    __isset.field206 = true;
    __isset.field207 = true;
    __isset.field208 = true;
    __isset.field209 = true;
    __isset.field210 = true;
    __isset.field211 = true;
    __isset.field212 = true;
    __isset.field213 = true;
    __isset.field214 = true;
    __isset.field215 = true;
    __isset.field216 = true;
    __isset.field217 = true;
    __isset.field218 = true;
    __isset.field219 = true;
    __isset.field220 = true;
    __isset.field221 = true;
    __isset.field222 = true;
    __isset.field223 = true;
    __isset.field224 = true;
    __isset.field225 = true;
    __isset.field226 = true;
    __isset.field227 = true;
    __isset.field228 = true;
    __isset.field229 = true;
    __isset.field230 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<97, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field97 = arg.move();
    __isset.field97 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<98, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field98 = arg.move();
    __isset.field98 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<99, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field99 = arg.move();
    __isset.field99 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field100 = arg.move();
    __isset.field100 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field101 = arg.move();
    __isset.field101 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<102, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field102 = arg.move();
    __isset.field102 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<103, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field103 = arg.move();
    __isset.field103 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<104, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field104 = arg.move();
    __isset.field104 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<105, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field105 = arg.move();
    __isset.field105 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<106, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field106 = arg.move();
    __isset.field106 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<107, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field107 = arg.move();
    __isset.field107 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<108, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field108 = arg.move();
    __isset.field108 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<109, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field109 = arg.move();
    __isset.field109 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<110, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field110 = arg.move();
    __isset.field110 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<111, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field111 = arg.move();
    __isset.field111 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<112, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field112 = arg.move();
    __isset.field112 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<113, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field113 = arg.move();
    __isset.field113 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<114, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field114 = arg.move();
    __isset.field114 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<115, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field115 = arg.move();
    __isset.field115 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<116, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field116 = arg.move();
    __isset.field116 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<117, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field117 = arg.move();
    __isset.field117 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<118, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field118 = arg.move();
    __isset.field118 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<119, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field119 = arg.move();
    __isset.field119 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<120, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field120 = arg.move();
    __isset.field120 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<121, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field121 = arg.move();
    __isset.field121 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<122, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field122 = arg.move();
    __isset.field122 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<123, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field123 = arg.move();
    __isset.field123 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<124, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field124 = arg.move();
    __isset.field124 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<125, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field125 = arg.move();
    __isset.field125 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<126, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field126 = arg.move();
    __isset.field126 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<127, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field127 = arg.move();
    __isset.field127 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<128, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field128 = arg.move();
    __isset.field128 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<129, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field129 = arg.move();
    __isset.field129 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<130, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field130 = arg.move();
    __isset.field130 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<131, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field131 = arg.move();
    __isset.field131 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<132, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field132 = arg.move();
    __isset.field132 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<133, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field133 = arg.move();
    __isset.field133 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<134, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field134 = arg.move();
    __isset.field134 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<135, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field135 = arg.move();
    __isset.field135 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<136, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field136 = arg.move();
    __isset.field136 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<137, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field137 = arg.move();
    __isset.field137 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<138, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field138 = arg.move();
    __isset.field138 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<139, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field139 = arg.move();
    __isset.field139 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<140, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field140 = arg.move();
    __isset.field140 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<141, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field141 = arg.move();
    __isset.field141 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<142, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field142 = arg.move();
    __isset.field142 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<143, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field143 = arg.move();
    __isset.field143 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<144, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field144 = arg.move();
    __isset.field144 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<145, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field145 = arg.move();
    __isset.field145 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<146, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field146 = arg.move();
    __isset.field146 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<147, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field147 = arg.move();
    __isset.field147 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<148, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field148 = arg.move();
    __isset.field148 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<149, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field149 = arg.move();
    __isset.field149 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<150, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field150 = arg.move();
    __isset.field150 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<151, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field151 = arg.move();
    __isset.field151 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<152, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field152 = arg.move();
    __isset.field152 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<153, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field153 = arg.move();
    __isset.field153 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<154, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field154 = arg.move();
    __isset.field154 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<155, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field155 = arg.move();
    __isset.field155 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<156, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field156 = arg.move();
    __isset.field156 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<157, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field157 = arg.move();
    __isset.field157 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<158, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field158 = arg.move();
    __isset.field158 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<159, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field159 = arg.move();
    __isset.field159 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<160, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field160 = arg.move();
    __isset.field160 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<161, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field161 = arg.move();
    __isset.field161 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<162, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field162 = arg.move();
    __isset.field162 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<163, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field163 = arg.move();
    __isset.field163 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<164, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field164 = arg.move();
    __isset.field164 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<165, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field165 = arg.move();
    __isset.field165 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<166, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field166 = arg.move();
    __isset.field166 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<167, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field167 = arg.move();
    __isset.field167 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<168, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field168 = arg.move();
    __isset.field168 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<169, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field169 = arg.move();
    __isset.field169 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<170, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field170 = arg.move();
    __isset.field170 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<171, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field171 = arg.move();
    __isset.field171 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<172, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field172 = arg.move();
    __isset.field172 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<173, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field173 = arg.move();
    __isset.field173 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<174, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field174 = arg.move();
    __isset.field174 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<175, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field175 = arg.move();
    __isset.field175 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<176, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field176 = arg.move();
    __isset.field176 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<177, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field177 = arg.move();
    __isset.field177 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<178, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field178 = arg.move();
    __isset.field178 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<179, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field179 = arg.move();
    __isset.field179 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<180, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field180 = arg.move();
    __isset.field180 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<181, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field181 = arg.move();
    __isset.field181 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<182, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field182 = arg.move();
    __isset.field182 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<183, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field183 = arg.move();
    __isset.field183 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<184, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field184 = arg.move();
    __isset.field184 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<185, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field185 = arg.move();
    __isset.field185 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<186, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field186 = arg.move();
    __isset.field186 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<187, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field187 = arg.move();
    __isset.field187 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<188, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field188 = arg.move();
    __isset.field188 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<189, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field189 = arg.move();
    __isset.field189 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<190, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field190 = arg.move();
    __isset.field190 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<191, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field191 = arg.move();
    __isset.field191 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<192, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field192 = arg.move();
    __isset.field192 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<193, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field193 = arg.move();
    __isset.field193 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<194, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field194 = arg.move();
    __isset.field194 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<195, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field195 = arg.move();
    __isset.field195 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<196, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field196 = arg.move();
    __isset.field196 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<197, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field197 = arg.move();
    __isset.field197 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<198, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field198 = arg.move();
    __isset.field198 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<199, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field199 = arg.move();
    __isset.field199 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<200, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field200 = arg.move();
    __isset.field200 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<201, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field201 = arg.move();
    __isset.field201 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<202, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field202 = arg.move();
    __isset.field202 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<203, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field203 = arg.move();
    __isset.field203 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<204, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field204 = arg.move();
    __isset.field204 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<205, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field205 = arg.move();
    __isset.field205 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<206, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field206 = arg.move();
    __isset.field206 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<207, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field207 = arg.move();
    __isset.field207 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<208, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field208 = arg.move();
    __isset.field208 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<209, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field209 = arg.move();
    __isset.field209 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<210, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field210 = arg.move();
    __isset.field210 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<211, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field211 = arg.move();
    __isset.field211 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<212, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field212 = arg.move();
    __isset.field212 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<213, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field213 = arg.move();
    __isset.field213 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<214, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field214 = arg.move();
    __isset.field214 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<215, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field215 = arg.move();
    __isset.field215 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<216, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field216 = arg.move();
    __isset.field216 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<217, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field217 = arg.move();
    __isset.field217 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<218, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field218 = arg.move();
    __isset.field218 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<219, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field219 = arg.move();
    __isset.field219 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<220, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field220 = arg.move();
    __isset.field220 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<221, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field221 = arg.move();
    __isset.field221 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<222, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field222 = arg.move();
    __isset.field222 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<223, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field223 = arg.move();
    __isset.field223 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<224, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field224 = arg.move();
    __isset.field224 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<225, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field225 = arg.move();
    __isset.field225 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<226, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field226 = arg.move();
    __isset.field226 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<227, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field227 = arg.move();
    __isset.field227 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<228, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field228 = arg.move();
    __isset.field228 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<229, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field229 = arg.move();
    __isset.field229 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct18(::apache::thrift::detail::argument_wrapper<230, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct18(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field230 = arg.move();
    __isset.field230 = true;
  }

  Struct18(Struct18&&) = default;

  Struct18(const Struct18&) = default;

  Struct18& operator=(Struct18&&) = default;

  Struct18& operator=(const Struct18&) = default;
  void __clear();

  virtual ~Struct18() {}

   ::cpp2::Struct0 field1;
   ::cpp2::Struct10 field2;
  int64_t field3;
  std::map< ::cpp2::Struct3,  ::cpp2::Struct0> field4;
  int16_t field5;
  std::vector<float> field6;
  std::vector<bool> field7;
  int32_t field8;
  int16_t field9;
   ::cpp2::Struct0 field10;
  float field11;
  int8_t field12;
  std::set<int16_t> field13;
  int64_t field14;
  int16_t field15;
  int16_t field16;
  std::map<bool, std::string> field17;
  int32_t field18;
  int32_t field19;
  std::string field20;
  std::set<float> field21;
  int16_t field22;
  std::string field23;
  int32_t field24;
   ::cpp2::Struct0 field25;
  std::map<int8_t, int16_t> field26;
  std::string field27;
  std::string field28;
  int32_t field29;
  std::string field30;
  int64_t field31;
  std::map<int32_t, bool> field32;
  int8_t field33;
  std::string field34;
  int64_t field35;
  int64_t field36;
   ::cpp2::Struct2 field37;
  std::vector<bool> field38;
  std::string field39;
  std::map<std::vector<std::map<int8_t, int64_t>>, std::string> field40;
  bool field41;
   ::cpp2::Struct6 field42;
  std::string field43;
  std::map<std::string, std::vector<std::vector<std::string>>> field44;
  int64_t field45;
  std::map<int16_t, int32_t> field46;
  std::set<std::string> field47;
  std::set<float> field48;
   ::cpp2::Struct0 field49;
  std::vector< ::cpp2::Struct3> field50;
  std::map<int64_t, std::vector<std::string>> field51;
  int64_t field52;
  bool field53;
  std::set<std::string> field54;
  std::string field55;
  std::set<float> field56;
  std::string field57;
  double field58;
  bool field59;
  std::set< ::cpp2::Struct1> field60;
  std::set<int8_t> field61;
  std::set<int16_t> field62;
  std::set<std::string> field63;
   ::cpp2::Struct8 field64;
   ::cpp2::Struct8 field65;
  int16_t field66;
  double field67;
  std::map<std::vector<int8_t>, std::set<float>> field68;
  std::vector<int64_t> field69;
  int64_t field70;
  std::vector<std::map<int16_t, std::string>> field71;
  std::vector<std::map<std::string, int8_t>> field72;
  int8_t field73;
  std::vector<std::set<std::string>> field74;
  std::vector<std::vector<double>> field75;
  std::map<double, std::vector<int64_t>> field76;
  int32_t field77;
  std::string field78;
  bool field79;
  std::set<std::set<int64_t>> field80;
  double field81;
  float field82;
   ::cpp2::Struct9 field83;
   ::cpp2::Struct9 field84;
  int64_t field85;
  std::string field86;
  int32_t field87;
  float field88;
  std::map<int8_t, int8_t> field89;
  std::map<int16_t, std::vector<float>> field90;
  int16_t field91;
  int64_t field92;
  int64_t field93;
  std::map<float,  ::cpp2::Struct5> field94;
  std::vector<std::string> field95;
  float field96;
   ::cpp2::Struct8 field97;
  std::map<int8_t, std::string> field98;
  int16_t field99;
  std::map<int8_t, std::string> field100;
  std::map<bool, int64_t> field101;
  int16_t field102;
  int8_t field103;
  std::set<int16_t> field104;
  std::string field105;
  std::set<std::string> field106;
  std::string field107;
   ::cpp2::Struct8 field108;
  int8_t field109;
  std::set<std::string> field110;
   ::cpp2::Struct2 field111;
  std::string field112;
  std::set<std::map<std::string, int32_t>> field113;
  int64_t field114;
   ::cpp2::Struct3 field115;
  std::set<int16_t> field116;
  float field117;
  std::vector<std::map<int8_t, double>> field118;
  std::string field119;
  std::string field120;
  int64_t field121;
  std::set<std::vector<std::map<float, double>>> field122;
  std::vector<std::map<std::string, int8_t>> field123;
  std::set<int8_t> field124;
  int16_t field125;
  std::map<std::string, int32_t> field126;
  int8_t field127;
  int32_t field128;
   ::cpp2::Struct11 field129;
  double field130;
  int8_t field131;
   ::cpp2::Struct7 field132;
  int32_t field133;
  double field134;
  int8_t field135;
  double field136;
  std::string field137;
  int64_t field138;
  std::string field139;
  int64_t field140;
  float field141;
  bool field142;
  int16_t field143;
  std::map< ::cpp2::Struct4, int64_t> field144;
  std::vector<float> field145;
  int16_t field146;
   ::cpp2::Struct9 field147;
  std::map< ::cpp2::Struct0, double> field148;
  float field149;
  bool field150;
  std::set<int8_t> field151;
  std::map<int64_t, std::vector<int64_t>> field152;
  bool field153;
  int8_t field154;
  int32_t field155;
  int16_t field156;
  std::string field157;
  std::string field158;
  int64_t field159;
  std::map<double, int8_t> field160;
  std::string field161;
   ::cpp2::Struct2 field162;
  bool field163;
  int64_t field164;
  bool field165;
  std::set< ::cpp2::Struct6> field166;
  std::map<int16_t, std::set<float>> field167;
  std::vector<std::string> field168;
  std::set<std::string> field169;
  std::set<int8_t> field170;
  std::vector<bool> field171;
   ::cpp2::Struct0 field172;
  std::vector<std::string> field173;
  std::map<int32_t,  ::cpp2::Struct8> field174;
   ::cpp2::Struct3 field175;
  std::set<float> field176;
  int32_t field177;
  int8_t field178;
  int16_t field179;
  std::set<std::string> field180;
  std::string field181;
  float field182;
  std::vector<int64_t> field183;
  int8_t field184;
  std::set<std::string> field185;
  bool field186;
  std::set<std::string> field187;
   ::cpp2::Struct4 field188;
  bool field189;
   ::cpp2::Struct7 field190;
  std::string field191;
  float field192;
  int32_t field193;
  float field194;
  std::set<int32_t> field195;
  double field196;
   ::cpp2::Struct4 field197;
  int32_t field198;
   ::cpp2::Struct14 field199;
  std::vector<float> field200;
  std::vector<int64_t> field201;
  std::map<bool, int32_t> field202;
  std::string field203;
  std::map<int64_t, int32_t> field204;
  std::map<std::string, std::vector<int32_t>> field205;
  int8_t field206;
  std::set<std::string> field207;
   ::cpp2::Struct8 field208;
  std::string field209;
  std::map<std::string, bool> field210;
  std::map<bool, int16_t> field211;
  std::string field212;
  int8_t field213;
   ::cpp2::Struct5 field214;
  int64_t field215;
  int16_t field216;
  std::string field217;
  float field218;
  std::vector<float> field219;
   ::cpp2::Struct13 field220;
  std::string field221;
   ::cpp2::Struct8 field222;
  std::set<int16_t> field223;
  int16_t field224;
  std::vector<float> field225;
  std::vector<int16_t> field226;
  std::vector<std::map<int64_t, int16_t>> field227;
  int64_t field228;
   ::cpp2::Struct2 field229;
  std::string field230;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
      field97 = false;
      field98 = false;
      field99 = false;
      field100 = false;
      field101 = false;
      field102 = false;
      field103 = false;
      field104 = false;
      field105 = false;
      field106 = false;
      field107 = false;
      field108 = false;
      field109 = false;
      field110 = false;
      field111 = false;
      field112 = false;
      field113 = false;
      field114 = false;
      field115 = false;
      field116 = false;
      field117 = false;
      field118 = false;
      field119 = false;
      field120 = false;
      field121 = false;
      field122 = false;
      field123 = false;
      field124 = false;
      field125 = false;
      field126 = false;
      field127 = false;
      field128 = false;
      field129 = false;
      field130 = false;
      field131 = false;
      field132 = false;
      field133 = false;
      field134 = false;
      field135 = false;
      field136 = false;
      field137 = false;
      field138 = false;
      field139 = false;
      field140 = false;
      field141 = false;
      field142 = false;
      field143 = false;
      field144 = false;
      field145 = false;
      field146 = false;
      field147 = false;
      field148 = false;
      field149 = false;
      field150 = false;
      field151 = false;
      field152 = false;
      field153 = false;
      field154 = false;
      field155 = false;
      field156 = false;
      field157 = false;
      field158 = false;
      field159 = false;
      field160 = false;
      field161 = false;
      field162 = false;
      field163 = false;
      field164 = false;
      field165 = false;
      field166 = false;
      field167 = false;
      field168 = false;
      field169 = false;
      field170 = false;
      field171 = false;
      field172 = false;
      field173 = false;
      field174 = false;
      field175 = false;
      field176 = false;
      field177 = false;
      field178 = false;
      field179 = false;
      field180 = false;
      field181 = false;
      field182 = false;
      field183 = false;
      field184 = false;
      field185 = false;
      field186 = false;
      field187 = false;
      field188 = false;
      field189 = false;
      field190 = false;
      field191 = false;
      field192 = false;
      field193 = false;
      field194 = false;
      field195 = false;
      field196 = false;
      field197 = false;
      field198 = false;
      field199 = false;
      field200 = false;
      field201 = false;
      field202 = false;
      field203 = false;
      field204 = false;
      field205 = false;
      field206 = false;
      field207 = false;
      field208 = false;
      field209 = false;
      field210 = false;
      field211 = false;
      field212 = false;
      field213 = false;
      field214 = false;
      field215 = false;
      field216 = false;
      field217 = false;
      field218 = false;
      field219 = false;
      field220 = false;
      field221 = false;
      field222 = false;
      field223 = false;
      field224 = false;
      field225 = false;
      field226 = false;
      field227 = false;
      field228 = false;
      field229 = false;
      field230 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
    bool field97 = false;
    bool field98 = false;
    bool field99 = false;
    bool field100 = false;
    bool field101 = false;
    bool field102 = false;
    bool field103 = false;
    bool field104 = false;
    bool field105 = false;
    bool field106 = false;
    bool field107 = false;
    bool field108 = false;
    bool field109 = false;
    bool field110 = false;
    bool field111 = false;
    bool field112 = false;
    bool field113 = false;
    bool field114 = false;
    bool field115 = false;
    bool field116 = false;
    bool field117 = false;
    bool field118 = false;
    bool field119 = false;
    bool field120 = false;
    bool field121 = false;
    bool field122 = false;
    bool field123 = false;
    bool field124 = false;
    bool field125 = false;
    bool field126 = false;
    bool field127 = false;
    bool field128 = false;
    bool field129 = false;
    bool field130 = false;
    bool field131 = false;
    bool field132 = false;
    bool field133 = false;
    bool field134 = false;
    bool field135 = false;
    bool field136 = false;
    bool field137 = false;
    bool field138 = false;
    bool field139 = false;
    bool field140 = false;
    bool field141 = false;
    bool field142 = false;
    bool field143 = false;
    bool field144 = false;
    bool field145 = false;
    bool field146 = false;
    bool field147 = false;
    bool field148 = false;
    bool field149 = false;
    bool field150 = false;
    bool field151 = false;
    bool field152 = false;
    bool field153 = false;
    bool field154 = false;
    bool field155 = false;
    bool field156 = false;
    bool field157 = false;
    bool field158 = false;
    bool field159 = false;
    bool field160 = false;
    bool field161 = false;
    bool field162 = false;
    bool field163 = false;
    bool field164 = false;
    bool field165 = false;
    bool field166 = false;
    bool field167 = false;
    bool field168 = false;
    bool field169 = false;
    bool field170 = false;
    bool field171 = false;
    bool field172 = false;
    bool field173 = false;
    bool field174 = false;
    bool field175 = false;
    bool field176 = false;
    bool field177 = false;
    bool field178 = false;
    bool field179 = false;
    bool field180 = false;
    bool field181 = false;
    bool field182 = false;
    bool field183 = false;
    bool field184 = false;
    bool field185 = false;
    bool field186 = false;
    bool field187 = false;
    bool field188 = false;
    bool field189 = false;
    bool field190 = false;
    bool field191 = false;
    bool field192 = false;
    bool field193 = false;
    bool field194 = false;
    bool field195 = false;
    bool field196 = false;
    bool field197 = false;
    bool field198 = false;
    bool field199 = false;
    bool field200 = false;
    bool field201 = false;
    bool field202 = false;
    bool field203 = false;
    bool field204 = false;
    bool field205 = false;
    bool field206 = false;
    bool field207 = false;
    bool field208 = false;
    bool field209 = false;
    bool field210 = false;
    bool field211 = false;
    bool field212 = false;
    bool field213 = false;
    bool field214 = false;
    bool field215 = false;
    bool field216 = false;
    bool field217 = false;
    bool field218 = false;
    bool field219 = false;
    bool field220 = false;
    bool field221 = false;
    bool field222 = false;
    bool field223 = false;
    bool field224 = false;
    bool field225 = false;
    bool field226 = false;
    bool field227 = false;
    bool field228 = false;
    bool field229 = false;
    bool field230 = false;
  } __isset;
  bool operator==(const Struct18& rhs) const;

  bool operator < (const Struct18& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    if (!(field97 == rhs.field97)) {
      return field97 < rhs.field97;
    }
    if (!(field98 == rhs.field98)) {
      return field98 < rhs.field98;
    }
    if (!(field99 == rhs.field99)) {
      return field99 < rhs.field99;
    }
    if (!(field100 == rhs.field100)) {
      return field100 < rhs.field100;
    }
    if (!(field101 == rhs.field101)) {
      return field101 < rhs.field101;
    }
    if (!(field102 == rhs.field102)) {
      return field102 < rhs.field102;
    }
    if (!(field103 == rhs.field103)) {
      return field103 < rhs.field103;
    }
    if (!(field104 == rhs.field104)) {
      return field104 < rhs.field104;
    }
    if (!(field105 == rhs.field105)) {
      return field105 < rhs.field105;
    }
    if (!(field106 == rhs.field106)) {
      return field106 < rhs.field106;
    }
    if (!(field107 == rhs.field107)) {
      return field107 < rhs.field107;
    }
    if (!(field108 == rhs.field108)) {
      return field108 < rhs.field108;
    }
    if (!(field109 == rhs.field109)) {
      return field109 < rhs.field109;
    }
    if (!(field110 == rhs.field110)) {
      return field110 < rhs.field110;
    }
    if (!(field111 == rhs.field111)) {
      return field111 < rhs.field111;
    }
    if (!(field112 == rhs.field112)) {
      return field112 < rhs.field112;
    }
    if (!(field113 == rhs.field113)) {
      return field113 < rhs.field113;
    }
    if (!(field114 == rhs.field114)) {
      return field114 < rhs.field114;
    }
    if (!(field115 == rhs.field115)) {
      return field115 < rhs.field115;
    }
    if (!(field116 == rhs.field116)) {
      return field116 < rhs.field116;
    }
    if (!(field117 == rhs.field117)) {
      return field117 < rhs.field117;
    }
    if (!(field118 == rhs.field118)) {
      return field118 < rhs.field118;
    }
    if (!(field119 == rhs.field119)) {
      return field119 < rhs.field119;
    }
    if (!(field120 == rhs.field120)) {
      return field120 < rhs.field120;
    }
    if (!(field121 == rhs.field121)) {
      return field121 < rhs.field121;
    }
    if (!(field122 == rhs.field122)) {
      return field122 < rhs.field122;
    }
    if (!(field123 == rhs.field123)) {
      return field123 < rhs.field123;
    }
    if (!(field124 == rhs.field124)) {
      return field124 < rhs.field124;
    }
    if (!(field125 == rhs.field125)) {
      return field125 < rhs.field125;
    }
    if (!(field126 == rhs.field126)) {
      return field126 < rhs.field126;
    }
    if (!(field127 == rhs.field127)) {
      return field127 < rhs.field127;
    }
    if (!(field128 == rhs.field128)) {
      return field128 < rhs.field128;
    }
    if (!(field129 == rhs.field129)) {
      return field129 < rhs.field129;
    }
    if (!(field130 == rhs.field130)) {
      return field130 < rhs.field130;
    }
    if (!(field131 == rhs.field131)) {
      return field131 < rhs.field131;
    }
    if (!(field132 == rhs.field132)) {
      return field132 < rhs.field132;
    }
    if (!(field133 == rhs.field133)) {
      return field133 < rhs.field133;
    }
    if (!(field134 == rhs.field134)) {
      return field134 < rhs.field134;
    }
    if (!(field135 == rhs.field135)) {
      return field135 < rhs.field135;
    }
    if (!(field136 == rhs.field136)) {
      return field136 < rhs.field136;
    }
    if (!(field137 == rhs.field137)) {
      return field137 < rhs.field137;
    }
    if (!(field138 == rhs.field138)) {
      return field138 < rhs.field138;
    }
    if (!(field139 == rhs.field139)) {
      return field139 < rhs.field139;
    }
    if (!(field140 == rhs.field140)) {
      return field140 < rhs.field140;
    }
    if (!(field141 == rhs.field141)) {
      return field141 < rhs.field141;
    }
    if (!(field142 == rhs.field142)) {
      return field142 < rhs.field142;
    }
    if (!(field143 == rhs.field143)) {
      return field143 < rhs.field143;
    }
    if (!(field144 == rhs.field144)) {
      return field144 < rhs.field144;
    }
    if (!(field145 == rhs.field145)) {
      return field145 < rhs.field145;
    }
    if (!(field146 == rhs.field146)) {
      return field146 < rhs.field146;
    }
    if (!(field147 == rhs.field147)) {
      return field147 < rhs.field147;
    }
    if (!(field148 == rhs.field148)) {
      return field148 < rhs.field148;
    }
    if (!(field149 == rhs.field149)) {
      return field149 < rhs.field149;
    }
    if (!(field150 == rhs.field150)) {
      return field150 < rhs.field150;
    }
    if (!(field151 == rhs.field151)) {
      return field151 < rhs.field151;
    }
    if (!(field152 == rhs.field152)) {
      return field152 < rhs.field152;
    }
    if (!(field153 == rhs.field153)) {
      return field153 < rhs.field153;
    }
    if (!(field154 == rhs.field154)) {
      return field154 < rhs.field154;
    }
    if (!(field155 == rhs.field155)) {
      return field155 < rhs.field155;
    }
    if (!(field156 == rhs.field156)) {
      return field156 < rhs.field156;
    }
    if (!(field157 == rhs.field157)) {
      return field157 < rhs.field157;
    }
    if (!(field158 == rhs.field158)) {
      return field158 < rhs.field158;
    }
    if (!(field159 == rhs.field159)) {
      return field159 < rhs.field159;
    }
    if (!(field160 == rhs.field160)) {
      return field160 < rhs.field160;
    }
    if (!(field161 == rhs.field161)) {
      return field161 < rhs.field161;
    }
    if (!(field162 == rhs.field162)) {
      return field162 < rhs.field162;
    }
    if (!(field163 == rhs.field163)) {
      return field163 < rhs.field163;
    }
    if (!(field164 == rhs.field164)) {
      return field164 < rhs.field164;
    }
    if (!(field165 == rhs.field165)) {
      return field165 < rhs.field165;
    }
    if (!(field166 == rhs.field166)) {
      return field166 < rhs.field166;
    }
    if (!(field167 == rhs.field167)) {
      return field167 < rhs.field167;
    }
    if (!(field168 == rhs.field168)) {
      return field168 < rhs.field168;
    }
    if (!(field169 == rhs.field169)) {
      return field169 < rhs.field169;
    }
    if (!(field170 == rhs.field170)) {
      return field170 < rhs.field170;
    }
    if (!(field171 == rhs.field171)) {
      return field171 < rhs.field171;
    }
    if (!(field172 == rhs.field172)) {
      return field172 < rhs.field172;
    }
    if (!(field173 == rhs.field173)) {
      return field173 < rhs.field173;
    }
    if (!(field174 == rhs.field174)) {
      return field174 < rhs.field174;
    }
    if (!(field175 == rhs.field175)) {
      return field175 < rhs.field175;
    }
    if (!(field176 == rhs.field176)) {
      return field176 < rhs.field176;
    }
    if (!(field177 == rhs.field177)) {
      return field177 < rhs.field177;
    }
    if (!(field178 == rhs.field178)) {
      return field178 < rhs.field178;
    }
    if (!(field179 == rhs.field179)) {
      return field179 < rhs.field179;
    }
    if (!(field180 == rhs.field180)) {
      return field180 < rhs.field180;
    }
    if (!(field181 == rhs.field181)) {
      return field181 < rhs.field181;
    }
    if (!(field182 == rhs.field182)) {
      return field182 < rhs.field182;
    }
    if (!(field183 == rhs.field183)) {
      return field183 < rhs.field183;
    }
    if (!(field184 == rhs.field184)) {
      return field184 < rhs.field184;
    }
    if (!(field185 == rhs.field185)) {
      return field185 < rhs.field185;
    }
    if (!(field186 == rhs.field186)) {
      return field186 < rhs.field186;
    }
    if (!(field187 == rhs.field187)) {
      return field187 < rhs.field187;
    }
    if (!(field188 == rhs.field188)) {
      return field188 < rhs.field188;
    }
    if (!(field189 == rhs.field189)) {
      return field189 < rhs.field189;
    }
    if (!(field190 == rhs.field190)) {
      return field190 < rhs.field190;
    }
    if (!(field191 == rhs.field191)) {
      return field191 < rhs.field191;
    }
    if (!(field192 == rhs.field192)) {
      return field192 < rhs.field192;
    }
    if (!(field193 == rhs.field193)) {
      return field193 < rhs.field193;
    }
    if (!(field194 == rhs.field194)) {
      return field194 < rhs.field194;
    }
    if (!(field195 == rhs.field195)) {
      return field195 < rhs.field195;
    }
    if (!(field196 == rhs.field196)) {
      return field196 < rhs.field196;
    }
    if (!(field197 == rhs.field197)) {
      return field197 < rhs.field197;
    }
    if (!(field198 == rhs.field198)) {
      return field198 < rhs.field198;
    }
    if (!(field199 == rhs.field199)) {
      return field199 < rhs.field199;
    }
    if (!(field200 == rhs.field200)) {
      return field200 < rhs.field200;
    }
    if (!(field201 == rhs.field201)) {
      return field201 < rhs.field201;
    }
    if (!(field202 == rhs.field202)) {
      return field202 < rhs.field202;
    }
    if (!(field203 == rhs.field203)) {
      return field203 < rhs.field203;
    }
    if (!(field204 == rhs.field204)) {
      return field204 < rhs.field204;
    }
    if (!(field205 == rhs.field205)) {
      return field205 < rhs.field205;
    }
    if (!(field206 == rhs.field206)) {
      return field206 < rhs.field206;
    }
    if (!(field207 == rhs.field207)) {
      return field207 < rhs.field207;
    }
    if (!(field208 == rhs.field208)) {
      return field208 < rhs.field208;
    }
    if (!(field209 == rhs.field209)) {
      return field209 < rhs.field209;
    }
    if (!(field210 == rhs.field210)) {
      return field210 < rhs.field210;
    }
    if (!(field211 == rhs.field211)) {
      return field211 < rhs.field211;
    }
    if (!(field212 == rhs.field212)) {
      return field212 < rhs.field212;
    }
    if (!(field213 == rhs.field213)) {
      return field213 < rhs.field213;
    }
    if (!(field214 == rhs.field214)) {
      return field214 < rhs.field214;
    }
    if (!(field215 == rhs.field215)) {
      return field215 < rhs.field215;
    }
    if (!(field216 == rhs.field216)) {
      return field216 < rhs.field216;
    }
    if (!(field217 == rhs.field217)) {
      return field217 < rhs.field217;
    }
    if (!(field218 == rhs.field218)) {
      return field218 < rhs.field218;
    }
    if (!(field219 == rhs.field219)) {
      return field219 < rhs.field219;
    }
    if (!(field220 == rhs.field220)) {
      return field220 < rhs.field220;
    }
    if (!(field221 == rhs.field221)) {
      return field221 < rhs.field221;
    }
    if (!(field222 == rhs.field222)) {
      return field222 < rhs.field222;
    }
    if (!(field223 == rhs.field223)) {
      return field223 < rhs.field223;
    }
    if (!(field224 == rhs.field224)) {
      return field224 < rhs.field224;
    }
    if (!(field225 == rhs.field225)) {
      return field225 < rhs.field225;
    }
    if (!(field226 == rhs.field226)) {
      return field226 < rhs.field226;
    }
    if (!(field227 == rhs.field227)) {
      return field227 < rhs.field227;
    }
    if (!(field228 == rhs.field228)) {
      return field228 < rhs.field228;
    }
    if (!(field229 == rhs.field229)) {
      return field229 < rhs.field229;
    }
    if (!(field230 == rhs.field230)) {
      return field230 < rhs.field230;
    }
    (void)rhs;
    return false;
  }
  const  ::cpp2::Struct0& get_field1() const&;
   ::cpp2::Struct0 get_field1() &&;

  template <typename T_Struct18_field1_struct_setter>
   ::cpp2::Struct0& set_field1(T_Struct18_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct18_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const  ::cpp2::Struct10& get_field2() const&;
   ::cpp2::Struct10 get_field2() &&;

  template <typename T_Struct18_field2_struct_setter>
   ::cpp2::Struct10& set_field2(T_Struct18_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct18_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  int64_t get_field3() const {
    return field3;
  }

  int64_t& set_field3(int64_t field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }
  const std::map< ::cpp2::Struct3,  ::cpp2::Struct0>& get_field4() const&;
  std::map< ::cpp2::Struct3,  ::cpp2::Struct0> get_field4() &&;

  template <typename T_Struct18_field4_struct_setter>
  std::map< ::cpp2::Struct3,  ::cpp2::Struct0>& set_field4(T_Struct18_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct18_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }

  int16_t get_field5() const {
    return field5;
  }

  int16_t& set_field5(int16_t field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }
  const std::vector<float>& get_field6() const&;
  std::vector<float> get_field6() &&;

  template <typename T_Struct18_field6_struct_setter>
  std::vector<float>& set_field6(T_Struct18_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct18_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }
  const std::vector<bool>& get_field7() const&;
  std::vector<bool> get_field7() &&;

  template <typename T_Struct18_field7_struct_setter>
  std::vector<bool>& set_field7(T_Struct18_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct18_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }

  int32_t get_field8() const {
    return field8;
  }

  int32_t& set_field8(int32_t field8_) {
    field8 = field8_;
    __isset.field8 = true;
    return field8;
  }

  int16_t get_field9() const {
    return field9;
  }

  int16_t& set_field9(int16_t field9_) {
    field9 = field9_;
    __isset.field9 = true;
    return field9;
  }
  const  ::cpp2::Struct0& get_field10() const&;
   ::cpp2::Struct0 get_field10() &&;

  template <typename T_Struct18_field10_struct_setter>
   ::cpp2::Struct0& set_field10(T_Struct18_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct18_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }

  float get_field11() const {
    return field11;
  }

  float& set_field11(float field11_) {
    field11 = field11_;
    __isset.field11 = true;
    return field11;
  }

  int8_t get_field12() const {
    return field12;
  }

  int8_t& set_field12(int8_t field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }
  const std::set<int16_t>& get_field13() const&;
  std::set<int16_t> get_field13() &&;

  template <typename T_Struct18_field13_struct_setter>
  std::set<int16_t>& set_field13(T_Struct18_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct18_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }

  int64_t get_field14() const {
    return field14;
  }

  int64_t& set_field14(int64_t field14_) {
    field14 = field14_;
    __isset.field14 = true;
    return field14;
  }

  int16_t get_field15() const {
    return field15;
  }

  int16_t& set_field15(int16_t field15_) {
    field15 = field15_;
    __isset.field15 = true;
    return field15;
  }

  int16_t get_field16() const {
    return field16;
  }

  int16_t& set_field16(int16_t field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }
  const std::map<bool, std::string>& get_field17() const&;
  std::map<bool, std::string> get_field17() &&;

  template <typename T_Struct18_field17_struct_setter>
  std::map<bool, std::string>& set_field17(T_Struct18_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct18_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }

  int32_t get_field18() const {
    return field18;
  }

  int32_t& set_field18(int32_t field18_) {
    field18 = field18_;
    __isset.field18 = true;
    return field18;
  }

  int32_t get_field19() const {
    return field19;
  }

  int32_t& set_field19(int32_t field19_) {
    field19 = field19_;
    __isset.field19 = true;
    return field19;
  }

  const std::string& get_field20() const& {
    return field20;
  }

  std::string get_field20() && {
    return std::move(field20);
  }

  template <typename T_Struct18_field20_struct_setter>
  std::string& set_field20(T_Struct18_field20_struct_setter&& field20_) {
    field20 = std::forward<T_Struct18_field20_struct_setter>(field20_);
    __isset.field20 = true;
    return field20;
  }
  const std::set<float>& get_field21() const&;
  std::set<float> get_field21() &&;

  template <typename T_Struct18_field21_struct_setter>
  std::set<float>& set_field21(T_Struct18_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct18_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }

  int16_t get_field22() const {
    return field22;
  }

  int16_t& set_field22(int16_t field22_) {
    field22 = field22_;
    __isset.field22 = true;
    return field22;
  }

  const std::string& get_field23() const& {
    return field23;
  }

  std::string get_field23() && {
    return std::move(field23);
  }

  template <typename T_Struct18_field23_struct_setter>
  std::string& set_field23(T_Struct18_field23_struct_setter&& field23_) {
    field23 = std::forward<T_Struct18_field23_struct_setter>(field23_);
    __isset.field23 = true;
    return field23;
  }

  int32_t get_field24() const {
    return field24;
  }

  int32_t& set_field24(int32_t field24_) {
    field24 = field24_;
    __isset.field24 = true;
    return field24;
  }
  const  ::cpp2::Struct0& get_field25() const&;
   ::cpp2::Struct0 get_field25() &&;

  template <typename T_Struct18_field25_struct_setter>
   ::cpp2::Struct0& set_field25(T_Struct18_field25_struct_setter&& field25_) {
    field25 = std::forward<T_Struct18_field25_struct_setter>(field25_);
    __isset.field25 = true;
    return field25;
  }
  const std::map<int8_t, int16_t>& get_field26() const&;
  std::map<int8_t, int16_t> get_field26() &&;

  template <typename T_Struct18_field26_struct_setter>
  std::map<int8_t, int16_t>& set_field26(T_Struct18_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct18_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }

  const std::string& get_field27() const& {
    return field27;
  }

  std::string get_field27() && {
    return std::move(field27);
  }

  template <typename T_Struct18_field27_struct_setter>
  std::string& set_field27(T_Struct18_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct18_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }

  const std::string& get_field28() const& {
    return field28;
  }

  std::string get_field28() && {
    return std::move(field28);
  }

  template <typename T_Struct18_field28_struct_setter>
  std::string& set_field28(T_Struct18_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct18_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }

  int32_t get_field29() const {
    return field29;
  }

  int32_t& set_field29(int32_t field29_) {
    field29 = field29_;
    __isset.field29 = true;
    return field29;
  }

  const std::string& get_field30() const& {
    return field30;
  }

  std::string get_field30() && {
    return std::move(field30);
  }

  template <typename T_Struct18_field30_struct_setter>
  std::string& set_field30(T_Struct18_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct18_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }

  int64_t get_field31() const {
    return field31;
  }

  int64_t& set_field31(int64_t field31_) {
    field31 = field31_;
    __isset.field31 = true;
    return field31;
  }
  const std::map<int32_t, bool>& get_field32() const&;
  std::map<int32_t, bool> get_field32() &&;

  template <typename T_Struct18_field32_struct_setter>
  std::map<int32_t, bool>& set_field32(T_Struct18_field32_struct_setter&& field32_) {
    field32 = std::forward<T_Struct18_field32_struct_setter>(field32_);
    __isset.field32 = true;
    return field32;
  }

  int8_t get_field33() const {
    return field33;
  }

  int8_t& set_field33(int8_t field33_) {
    field33 = field33_;
    __isset.field33 = true;
    return field33;
  }

  const std::string& get_field34() const& {
    return field34;
  }

  std::string get_field34() && {
    return std::move(field34);
  }

  template <typename T_Struct18_field34_struct_setter>
  std::string& set_field34(T_Struct18_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct18_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }

  int64_t get_field35() const {
    return field35;
  }

  int64_t& set_field35(int64_t field35_) {
    field35 = field35_;
    __isset.field35 = true;
    return field35;
  }

  int64_t get_field36() const {
    return field36;
  }

  int64_t& set_field36(int64_t field36_) {
    field36 = field36_;
    __isset.field36 = true;
    return field36;
  }
  const  ::cpp2::Struct2& get_field37() const&;
   ::cpp2::Struct2 get_field37() &&;

  template <typename T_Struct18_field37_struct_setter>
   ::cpp2::Struct2& set_field37(T_Struct18_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct18_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }
  const std::vector<bool>& get_field38() const&;
  std::vector<bool> get_field38() &&;

  template <typename T_Struct18_field38_struct_setter>
  std::vector<bool>& set_field38(T_Struct18_field38_struct_setter&& field38_) {
    field38 = std::forward<T_Struct18_field38_struct_setter>(field38_);
    __isset.field38 = true;
    return field38;
  }

  const std::string& get_field39() const& {
    return field39;
  }

  std::string get_field39() && {
    return std::move(field39);
  }

  template <typename T_Struct18_field39_struct_setter>
  std::string& set_field39(T_Struct18_field39_struct_setter&& field39_) {
    field39 = std::forward<T_Struct18_field39_struct_setter>(field39_);
    __isset.field39 = true;
    return field39;
  }
  const std::map<std::vector<std::map<int8_t, int64_t>>, std::string>& get_field40() const&;
  std::map<std::vector<std::map<int8_t, int64_t>>, std::string> get_field40() &&;

  template <typename T_Struct18_field40_struct_setter>
  std::map<std::vector<std::map<int8_t, int64_t>>, std::string>& set_field40(T_Struct18_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct18_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }

  bool get_field41() const {
    return field41;
  }

  bool& set_field41(bool field41_) {
    field41 = field41_;
    __isset.field41 = true;
    return field41;
  }
  const  ::cpp2::Struct6& get_field42() const&;
   ::cpp2::Struct6 get_field42() &&;

  template <typename T_Struct18_field42_struct_setter>
   ::cpp2::Struct6& set_field42(T_Struct18_field42_struct_setter&& field42_) {
    field42 = std::forward<T_Struct18_field42_struct_setter>(field42_);
    __isset.field42 = true;
    return field42;
  }

  const std::string& get_field43() const& {
    return field43;
  }

  std::string get_field43() && {
    return std::move(field43);
  }

  template <typename T_Struct18_field43_struct_setter>
  std::string& set_field43(T_Struct18_field43_struct_setter&& field43_) {
    field43 = std::forward<T_Struct18_field43_struct_setter>(field43_);
    __isset.field43 = true;
    return field43;
  }
  const std::map<std::string, std::vector<std::vector<std::string>>>& get_field44() const&;
  std::map<std::string, std::vector<std::vector<std::string>>> get_field44() &&;

  template <typename T_Struct18_field44_struct_setter>
  std::map<std::string, std::vector<std::vector<std::string>>>& set_field44(T_Struct18_field44_struct_setter&& field44_) {
    field44 = std::forward<T_Struct18_field44_struct_setter>(field44_);
    __isset.field44 = true;
    return field44;
  }

  int64_t get_field45() const {
    return field45;
  }

  int64_t& set_field45(int64_t field45_) {
    field45 = field45_;
    __isset.field45 = true;
    return field45;
  }
  const std::map<int16_t, int32_t>& get_field46() const&;
  std::map<int16_t, int32_t> get_field46() &&;

  template <typename T_Struct18_field46_struct_setter>
  std::map<int16_t, int32_t>& set_field46(T_Struct18_field46_struct_setter&& field46_) {
    field46 = std::forward<T_Struct18_field46_struct_setter>(field46_);
    __isset.field46 = true;
    return field46;
  }
  const std::set<std::string>& get_field47() const&;
  std::set<std::string> get_field47() &&;

  template <typename T_Struct18_field47_struct_setter>
  std::set<std::string>& set_field47(T_Struct18_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct18_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }
  const std::set<float>& get_field48() const&;
  std::set<float> get_field48() &&;

  template <typename T_Struct18_field48_struct_setter>
  std::set<float>& set_field48(T_Struct18_field48_struct_setter&& field48_) {
    field48 = std::forward<T_Struct18_field48_struct_setter>(field48_);
    __isset.field48 = true;
    return field48;
  }
  const  ::cpp2::Struct0& get_field49() const&;
   ::cpp2::Struct0 get_field49() &&;

  template <typename T_Struct18_field49_struct_setter>
   ::cpp2::Struct0& set_field49(T_Struct18_field49_struct_setter&& field49_) {
    field49 = std::forward<T_Struct18_field49_struct_setter>(field49_);
    __isset.field49 = true;
    return field49;
  }
  const std::vector< ::cpp2::Struct3>& get_field50() const&;
  std::vector< ::cpp2::Struct3> get_field50() &&;

  template <typename T_Struct18_field50_struct_setter>
  std::vector< ::cpp2::Struct3>& set_field50(T_Struct18_field50_struct_setter&& field50_) {
    field50 = std::forward<T_Struct18_field50_struct_setter>(field50_);
    __isset.field50 = true;
    return field50;
  }
  const std::map<int64_t, std::vector<std::string>>& get_field51() const&;
  std::map<int64_t, std::vector<std::string>> get_field51() &&;

  template <typename T_Struct18_field51_struct_setter>
  std::map<int64_t, std::vector<std::string>>& set_field51(T_Struct18_field51_struct_setter&& field51_) {
    field51 = std::forward<T_Struct18_field51_struct_setter>(field51_);
    __isset.field51 = true;
    return field51;
  }

  int64_t get_field52() const {
    return field52;
  }

  int64_t& set_field52(int64_t field52_) {
    field52 = field52_;
    __isset.field52 = true;
    return field52;
  }

  bool get_field53() const {
    return field53;
  }

  bool& set_field53(bool field53_) {
    field53 = field53_;
    __isset.field53 = true;
    return field53;
  }
  const std::set<std::string>& get_field54() const&;
  std::set<std::string> get_field54() &&;

  template <typename T_Struct18_field54_struct_setter>
  std::set<std::string>& set_field54(T_Struct18_field54_struct_setter&& field54_) {
    field54 = std::forward<T_Struct18_field54_struct_setter>(field54_);
    __isset.field54 = true;
    return field54;
  }

  const std::string& get_field55() const& {
    return field55;
  }

  std::string get_field55() && {
    return std::move(field55);
  }

  template <typename T_Struct18_field55_struct_setter>
  std::string& set_field55(T_Struct18_field55_struct_setter&& field55_) {
    field55 = std::forward<T_Struct18_field55_struct_setter>(field55_);
    __isset.field55 = true;
    return field55;
  }
  const std::set<float>& get_field56() const&;
  std::set<float> get_field56() &&;

  template <typename T_Struct18_field56_struct_setter>
  std::set<float>& set_field56(T_Struct18_field56_struct_setter&& field56_) {
    field56 = std::forward<T_Struct18_field56_struct_setter>(field56_);
    __isset.field56 = true;
    return field56;
  }

  const std::string& get_field57() const& {
    return field57;
  }

  std::string get_field57() && {
    return std::move(field57);
  }

  template <typename T_Struct18_field57_struct_setter>
  std::string& set_field57(T_Struct18_field57_struct_setter&& field57_) {
    field57 = std::forward<T_Struct18_field57_struct_setter>(field57_);
    __isset.field57 = true;
    return field57;
  }

  double get_field58() const {
    return field58;
  }

  double& set_field58(double field58_) {
    field58 = field58_;
    __isset.field58 = true;
    return field58;
  }

  bool get_field59() const {
    return field59;
  }

  bool& set_field59(bool field59_) {
    field59 = field59_;
    __isset.field59 = true;
    return field59;
  }
  const std::set< ::cpp2::Struct1>& get_field60() const&;
  std::set< ::cpp2::Struct1> get_field60() &&;

  template <typename T_Struct18_field60_struct_setter>
  std::set< ::cpp2::Struct1>& set_field60(T_Struct18_field60_struct_setter&& field60_) {
    field60 = std::forward<T_Struct18_field60_struct_setter>(field60_);
    __isset.field60 = true;
    return field60;
  }
  const std::set<int8_t>& get_field61() const&;
  std::set<int8_t> get_field61() &&;

  template <typename T_Struct18_field61_struct_setter>
  std::set<int8_t>& set_field61(T_Struct18_field61_struct_setter&& field61_) {
    field61 = std::forward<T_Struct18_field61_struct_setter>(field61_);
    __isset.field61 = true;
    return field61;
  }
  const std::set<int16_t>& get_field62() const&;
  std::set<int16_t> get_field62() &&;

  template <typename T_Struct18_field62_struct_setter>
  std::set<int16_t>& set_field62(T_Struct18_field62_struct_setter&& field62_) {
    field62 = std::forward<T_Struct18_field62_struct_setter>(field62_);
    __isset.field62 = true;
    return field62;
  }
  const std::set<std::string>& get_field63() const&;
  std::set<std::string> get_field63() &&;

  template <typename T_Struct18_field63_struct_setter>
  std::set<std::string>& set_field63(T_Struct18_field63_struct_setter&& field63_) {
    field63 = std::forward<T_Struct18_field63_struct_setter>(field63_);
    __isset.field63 = true;
    return field63;
  }
  const  ::cpp2::Struct8& get_field64() const&;
   ::cpp2::Struct8 get_field64() &&;

  template <typename T_Struct18_field64_struct_setter>
   ::cpp2::Struct8& set_field64(T_Struct18_field64_struct_setter&& field64_) {
    field64 = std::forward<T_Struct18_field64_struct_setter>(field64_);
    __isset.field64 = true;
    return field64;
  }
  const  ::cpp2::Struct8& get_field65() const&;
   ::cpp2::Struct8 get_field65() &&;

  template <typename T_Struct18_field65_struct_setter>
   ::cpp2::Struct8& set_field65(T_Struct18_field65_struct_setter&& field65_) {
    field65 = std::forward<T_Struct18_field65_struct_setter>(field65_);
    __isset.field65 = true;
    return field65;
  }

  int16_t get_field66() const {
    return field66;
  }

  int16_t& set_field66(int16_t field66_) {
    field66 = field66_;
    __isset.field66 = true;
    return field66;
  }

  double get_field67() const {
    return field67;
  }

  double& set_field67(double field67_) {
    field67 = field67_;
    __isset.field67 = true;
    return field67;
  }
  const std::map<std::vector<int8_t>, std::set<float>>& get_field68() const&;
  std::map<std::vector<int8_t>, std::set<float>> get_field68() &&;

  template <typename T_Struct18_field68_struct_setter>
  std::map<std::vector<int8_t>, std::set<float>>& set_field68(T_Struct18_field68_struct_setter&& field68_) {
    field68 = std::forward<T_Struct18_field68_struct_setter>(field68_);
    __isset.field68 = true;
    return field68;
  }
  const std::vector<int64_t>& get_field69() const&;
  std::vector<int64_t> get_field69() &&;

  template <typename T_Struct18_field69_struct_setter>
  std::vector<int64_t>& set_field69(T_Struct18_field69_struct_setter&& field69_) {
    field69 = std::forward<T_Struct18_field69_struct_setter>(field69_);
    __isset.field69 = true;
    return field69;
  }

  int64_t get_field70() const {
    return field70;
  }

  int64_t& set_field70(int64_t field70_) {
    field70 = field70_;
    __isset.field70 = true;
    return field70;
  }
  const std::vector<std::map<int16_t, std::string>>& get_field71() const&;
  std::vector<std::map<int16_t, std::string>> get_field71() &&;

  template <typename T_Struct18_field71_struct_setter>
  std::vector<std::map<int16_t, std::string>>& set_field71(T_Struct18_field71_struct_setter&& field71_) {
    field71 = std::forward<T_Struct18_field71_struct_setter>(field71_);
    __isset.field71 = true;
    return field71;
  }
  const std::vector<std::map<std::string, int8_t>>& get_field72() const&;
  std::vector<std::map<std::string, int8_t>> get_field72() &&;

  template <typename T_Struct18_field72_struct_setter>
  std::vector<std::map<std::string, int8_t>>& set_field72(T_Struct18_field72_struct_setter&& field72_) {
    field72 = std::forward<T_Struct18_field72_struct_setter>(field72_);
    __isset.field72 = true;
    return field72;
  }

  int8_t get_field73() const {
    return field73;
  }

  int8_t& set_field73(int8_t field73_) {
    field73 = field73_;
    __isset.field73 = true;
    return field73;
  }
  const std::vector<std::set<std::string>>& get_field74() const&;
  std::vector<std::set<std::string>> get_field74() &&;

  template <typename T_Struct18_field74_struct_setter>
  std::vector<std::set<std::string>>& set_field74(T_Struct18_field74_struct_setter&& field74_) {
    field74 = std::forward<T_Struct18_field74_struct_setter>(field74_);
    __isset.field74 = true;
    return field74;
  }
  const std::vector<std::vector<double>>& get_field75() const&;
  std::vector<std::vector<double>> get_field75() &&;

  template <typename T_Struct18_field75_struct_setter>
  std::vector<std::vector<double>>& set_field75(T_Struct18_field75_struct_setter&& field75_) {
    field75 = std::forward<T_Struct18_field75_struct_setter>(field75_);
    __isset.field75 = true;
    return field75;
  }
  const std::map<double, std::vector<int64_t>>& get_field76() const&;
  std::map<double, std::vector<int64_t>> get_field76() &&;

  template <typename T_Struct18_field76_struct_setter>
  std::map<double, std::vector<int64_t>>& set_field76(T_Struct18_field76_struct_setter&& field76_) {
    field76 = std::forward<T_Struct18_field76_struct_setter>(field76_);
    __isset.field76 = true;
    return field76;
  }

  int32_t get_field77() const {
    return field77;
  }

  int32_t& set_field77(int32_t field77_) {
    field77 = field77_;
    __isset.field77 = true;
    return field77;
  }

  const std::string& get_field78() const& {
    return field78;
  }

  std::string get_field78() && {
    return std::move(field78);
  }

  template <typename T_Struct18_field78_struct_setter>
  std::string& set_field78(T_Struct18_field78_struct_setter&& field78_) {
    field78 = std::forward<T_Struct18_field78_struct_setter>(field78_);
    __isset.field78 = true;
    return field78;
  }

  bool get_field79() const {
    return field79;
  }

  bool& set_field79(bool field79_) {
    field79 = field79_;
    __isset.field79 = true;
    return field79;
  }
  const std::set<std::set<int64_t>>& get_field80() const&;
  std::set<std::set<int64_t>> get_field80() &&;

  template <typename T_Struct18_field80_struct_setter>
  std::set<std::set<int64_t>>& set_field80(T_Struct18_field80_struct_setter&& field80_) {
    field80 = std::forward<T_Struct18_field80_struct_setter>(field80_);
    __isset.field80 = true;
    return field80;
  }

  double get_field81() const {
    return field81;
  }

  double& set_field81(double field81_) {
    field81 = field81_;
    __isset.field81 = true;
    return field81;
  }

  float get_field82() const {
    return field82;
  }

  float& set_field82(float field82_) {
    field82 = field82_;
    __isset.field82 = true;
    return field82;
  }
  const  ::cpp2::Struct9& get_field83() const&;
   ::cpp2::Struct9 get_field83() &&;

  template <typename T_Struct18_field83_struct_setter>
   ::cpp2::Struct9& set_field83(T_Struct18_field83_struct_setter&& field83_) {
    field83 = std::forward<T_Struct18_field83_struct_setter>(field83_);
    __isset.field83 = true;
    return field83;
  }
  const  ::cpp2::Struct9& get_field84() const&;
   ::cpp2::Struct9 get_field84() &&;

  template <typename T_Struct18_field84_struct_setter>
   ::cpp2::Struct9& set_field84(T_Struct18_field84_struct_setter&& field84_) {
    field84 = std::forward<T_Struct18_field84_struct_setter>(field84_);
    __isset.field84 = true;
    return field84;
  }

  int64_t get_field85() const {
    return field85;
  }

  int64_t& set_field85(int64_t field85_) {
    field85 = field85_;
    __isset.field85 = true;
    return field85;
  }

  const std::string& get_field86() const& {
    return field86;
  }

  std::string get_field86() && {
    return std::move(field86);
  }

  template <typename T_Struct18_field86_struct_setter>
  std::string& set_field86(T_Struct18_field86_struct_setter&& field86_) {
    field86 = std::forward<T_Struct18_field86_struct_setter>(field86_);
    __isset.field86 = true;
    return field86;
  }

  int32_t get_field87() const {
    return field87;
  }

  int32_t& set_field87(int32_t field87_) {
    field87 = field87_;
    __isset.field87 = true;
    return field87;
  }

  float get_field88() const {
    return field88;
  }

  float& set_field88(float field88_) {
    field88 = field88_;
    __isset.field88 = true;
    return field88;
  }
  const std::map<int8_t, int8_t>& get_field89() const&;
  std::map<int8_t, int8_t> get_field89() &&;

  template <typename T_Struct18_field89_struct_setter>
  std::map<int8_t, int8_t>& set_field89(T_Struct18_field89_struct_setter&& field89_) {
    field89 = std::forward<T_Struct18_field89_struct_setter>(field89_);
    __isset.field89 = true;
    return field89;
  }
  const std::map<int16_t, std::vector<float>>& get_field90() const&;
  std::map<int16_t, std::vector<float>> get_field90() &&;

  template <typename T_Struct18_field90_struct_setter>
  std::map<int16_t, std::vector<float>>& set_field90(T_Struct18_field90_struct_setter&& field90_) {
    field90 = std::forward<T_Struct18_field90_struct_setter>(field90_);
    __isset.field90 = true;
    return field90;
  }

  int16_t get_field91() const {
    return field91;
  }

  int16_t& set_field91(int16_t field91_) {
    field91 = field91_;
    __isset.field91 = true;
    return field91;
  }

  int64_t get_field92() const {
    return field92;
  }

  int64_t& set_field92(int64_t field92_) {
    field92 = field92_;
    __isset.field92 = true;
    return field92;
  }

  int64_t get_field93() const {
    return field93;
  }

  int64_t& set_field93(int64_t field93_) {
    field93 = field93_;
    __isset.field93 = true;
    return field93;
  }
  const std::map<float,  ::cpp2::Struct5>& get_field94() const&;
  std::map<float,  ::cpp2::Struct5> get_field94() &&;

  template <typename T_Struct18_field94_struct_setter>
  std::map<float,  ::cpp2::Struct5>& set_field94(T_Struct18_field94_struct_setter&& field94_) {
    field94 = std::forward<T_Struct18_field94_struct_setter>(field94_);
    __isset.field94 = true;
    return field94;
  }
  const std::vector<std::string>& get_field95() const&;
  std::vector<std::string> get_field95() &&;

  template <typename T_Struct18_field95_struct_setter>
  std::vector<std::string>& set_field95(T_Struct18_field95_struct_setter&& field95_) {
    field95 = std::forward<T_Struct18_field95_struct_setter>(field95_);
    __isset.field95 = true;
    return field95;
  }

  float get_field96() const {
    return field96;
  }

  float& set_field96(float field96_) {
    field96 = field96_;
    __isset.field96 = true;
    return field96;
  }
  const  ::cpp2::Struct8& get_field97() const&;
   ::cpp2::Struct8 get_field97() &&;

  template <typename T_Struct18_field97_struct_setter>
   ::cpp2::Struct8& set_field97(T_Struct18_field97_struct_setter&& field97_) {
    field97 = std::forward<T_Struct18_field97_struct_setter>(field97_);
    __isset.field97 = true;
    return field97;
  }
  const std::map<int8_t, std::string>& get_field98() const&;
  std::map<int8_t, std::string> get_field98() &&;

  template <typename T_Struct18_field98_struct_setter>
  std::map<int8_t, std::string>& set_field98(T_Struct18_field98_struct_setter&& field98_) {
    field98 = std::forward<T_Struct18_field98_struct_setter>(field98_);
    __isset.field98 = true;
    return field98;
  }

  int16_t get_field99() const {
    return field99;
  }

  int16_t& set_field99(int16_t field99_) {
    field99 = field99_;
    __isset.field99 = true;
    return field99;
  }
  const std::map<int8_t, std::string>& get_field100() const&;
  std::map<int8_t, std::string> get_field100() &&;

  template <typename T_Struct18_field100_struct_setter>
  std::map<int8_t, std::string>& set_field100(T_Struct18_field100_struct_setter&& field100_) {
    field100 = std::forward<T_Struct18_field100_struct_setter>(field100_);
    __isset.field100 = true;
    return field100;
  }
  const std::map<bool, int64_t>& get_field101() const&;
  std::map<bool, int64_t> get_field101() &&;

  template <typename T_Struct18_field101_struct_setter>
  std::map<bool, int64_t>& set_field101(T_Struct18_field101_struct_setter&& field101_) {
    field101 = std::forward<T_Struct18_field101_struct_setter>(field101_);
    __isset.field101 = true;
    return field101;
  }

  int16_t get_field102() const {
    return field102;
  }

  int16_t& set_field102(int16_t field102_) {
    field102 = field102_;
    __isset.field102 = true;
    return field102;
  }

  int8_t get_field103() const {
    return field103;
  }

  int8_t& set_field103(int8_t field103_) {
    field103 = field103_;
    __isset.field103 = true;
    return field103;
  }
  const std::set<int16_t>& get_field104() const&;
  std::set<int16_t> get_field104() &&;

  template <typename T_Struct18_field104_struct_setter>
  std::set<int16_t>& set_field104(T_Struct18_field104_struct_setter&& field104_) {
    field104 = std::forward<T_Struct18_field104_struct_setter>(field104_);
    __isset.field104 = true;
    return field104;
  }

  const std::string& get_field105() const& {
    return field105;
  }

  std::string get_field105() && {
    return std::move(field105);
  }

  template <typename T_Struct18_field105_struct_setter>
  std::string& set_field105(T_Struct18_field105_struct_setter&& field105_) {
    field105 = std::forward<T_Struct18_field105_struct_setter>(field105_);
    __isset.field105 = true;
    return field105;
  }
  const std::set<std::string>& get_field106() const&;
  std::set<std::string> get_field106() &&;

  template <typename T_Struct18_field106_struct_setter>
  std::set<std::string>& set_field106(T_Struct18_field106_struct_setter&& field106_) {
    field106 = std::forward<T_Struct18_field106_struct_setter>(field106_);
    __isset.field106 = true;
    return field106;
  }

  const std::string& get_field107() const& {
    return field107;
  }

  std::string get_field107() && {
    return std::move(field107);
  }

  template <typename T_Struct18_field107_struct_setter>
  std::string& set_field107(T_Struct18_field107_struct_setter&& field107_) {
    field107 = std::forward<T_Struct18_field107_struct_setter>(field107_);
    __isset.field107 = true;
    return field107;
  }
  const  ::cpp2::Struct8& get_field108() const&;
   ::cpp2::Struct8 get_field108() &&;

  template <typename T_Struct18_field108_struct_setter>
   ::cpp2::Struct8& set_field108(T_Struct18_field108_struct_setter&& field108_) {
    field108 = std::forward<T_Struct18_field108_struct_setter>(field108_);
    __isset.field108 = true;
    return field108;
  }

  int8_t get_field109() const {
    return field109;
  }

  int8_t& set_field109(int8_t field109_) {
    field109 = field109_;
    __isset.field109 = true;
    return field109;
  }
  const std::set<std::string>& get_field110() const&;
  std::set<std::string> get_field110() &&;

  template <typename T_Struct18_field110_struct_setter>
  std::set<std::string>& set_field110(T_Struct18_field110_struct_setter&& field110_) {
    field110 = std::forward<T_Struct18_field110_struct_setter>(field110_);
    __isset.field110 = true;
    return field110;
  }
  const  ::cpp2::Struct2& get_field111() const&;
   ::cpp2::Struct2 get_field111() &&;

  template <typename T_Struct18_field111_struct_setter>
   ::cpp2::Struct2& set_field111(T_Struct18_field111_struct_setter&& field111_) {
    field111 = std::forward<T_Struct18_field111_struct_setter>(field111_);
    __isset.field111 = true;
    return field111;
  }

  const std::string& get_field112() const& {
    return field112;
  }

  std::string get_field112() && {
    return std::move(field112);
  }

  template <typename T_Struct18_field112_struct_setter>
  std::string& set_field112(T_Struct18_field112_struct_setter&& field112_) {
    field112 = std::forward<T_Struct18_field112_struct_setter>(field112_);
    __isset.field112 = true;
    return field112;
  }
  const std::set<std::map<std::string, int32_t>>& get_field113() const&;
  std::set<std::map<std::string, int32_t>> get_field113() &&;

  template <typename T_Struct18_field113_struct_setter>
  std::set<std::map<std::string, int32_t>>& set_field113(T_Struct18_field113_struct_setter&& field113_) {
    field113 = std::forward<T_Struct18_field113_struct_setter>(field113_);
    __isset.field113 = true;
    return field113;
  }

  int64_t get_field114() const {
    return field114;
  }

  int64_t& set_field114(int64_t field114_) {
    field114 = field114_;
    __isset.field114 = true;
    return field114;
  }
  const  ::cpp2::Struct3& get_field115() const&;
   ::cpp2::Struct3 get_field115() &&;

  template <typename T_Struct18_field115_struct_setter>
   ::cpp2::Struct3& set_field115(T_Struct18_field115_struct_setter&& field115_) {
    field115 = std::forward<T_Struct18_field115_struct_setter>(field115_);
    __isset.field115 = true;
    return field115;
  }
  const std::set<int16_t>& get_field116() const&;
  std::set<int16_t> get_field116() &&;

  template <typename T_Struct18_field116_struct_setter>
  std::set<int16_t>& set_field116(T_Struct18_field116_struct_setter&& field116_) {
    field116 = std::forward<T_Struct18_field116_struct_setter>(field116_);
    __isset.field116 = true;
    return field116;
  }

  float get_field117() const {
    return field117;
  }

  float& set_field117(float field117_) {
    field117 = field117_;
    __isset.field117 = true;
    return field117;
  }
  const std::vector<std::map<int8_t, double>>& get_field118() const&;
  std::vector<std::map<int8_t, double>> get_field118() &&;

  template <typename T_Struct18_field118_struct_setter>
  std::vector<std::map<int8_t, double>>& set_field118(T_Struct18_field118_struct_setter&& field118_) {
    field118 = std::forward<T_Struct18_field118_struct_setter>(field118_);
    __isset.field118 = true;
    return field118;
  }

  const std::string& get_field119() const& {
    return field119;
  }

  std::string get_field119() && {
    return std::move(field119);
  }

  template <typename T_Struct18_field119_struct_setter>
  std::string& set_field119(T_Struct18_field119_struct_setter&& field119_) {
    field119 = std::forward<T_Struct18_field119_struct_setter>(field119_);
    __isset.field119 = true;
    return field119;
  }

  const std::string& get_field120() const& {
    return field120;
  }

  std::string get_field120() && {
    return std::move(field120);
  }

  template <typename T_Struct18_field120_struct_setter>
  std::string& set_field120(T_Struct18_field120_struct_setter&& field120_) {
    field120 = std::forward<T_Struct18_field120_struct_setter>(field120_);
    __isset.field120 = true;
    return field120;
  }

  int64_t get_field121() const {
    return field121;
  }

  int64_t& set_field121(int64_t field121_) {
    field121 = field121_;
    __isset.field121 = true;
    return field121;
  }
  const std::set<std::vector<std::map<float, double>>>& get_field122() const&;
  std::set<std::vector<std::map<float, double>>> get_field122() &&;

  template <typename T_Struct18_field122_struct_setter>
  std::set<std::vector<std::map<float, double>>>& set_field122(T_Struct18_field122_struct_setter&& field122_) {
    field122 = std::forward<T_Struct18_field122_struct_setter>(field122_);
    __isset.field122 = true;
    return field122;
  }
  const std::vector<std::map<std::string, int8_t>>& get_field123() const&;
  std::vector<std::map<std::string, int8_t>> get_field123() &&;

  template <typename T_Struct18_field123_struct_setter>
  std::vector<std::map<std::string, int8_t>>& set_field123(T_Struct18_field123_struct_setter&& field123_) {
    field123 = std::forward<T_Struct18_field123_struct_setter>(field123_);
    __isset.field123 = true;
    return field123;
  }
  const std::set<int8_t>& get_field124() const&;
  std::set<int8_t> get_field124() &&;

  template <typename T_Struct18_field124_struct_setter>
  std::set<int8_t>& set_field124(T_Struct18_field124_struct_setter&& field124_) {
    field124 = std::forward<T_Struct18_field124_struct_setter>(field124_);
    __isset.field124 = true;
    return field124;
  }

  int16_t get_field125() const {
    return field125;
  }

  int16_t& set_field125(int16_t field125_) {
    field125 = field125_;
    __isset.field125 = true;
    return field125;
  }
  const std::map<std::string, int32_t>& get_field126() const&;
  std::map<std::string, int32_t> get_field126() &&;

  template <typename T_Struct18_field126_struct_setter>
  std::map<std::string, int32_t>& set_field126(T_Struct18_field126_struct_setter&& field126_) {
    field126 = std::forward<T_Struct18_field126_struct_setter>(field126_);
    __isset.field126 = true;
    return field126;
  }

  int8_t get_field127() const {
    return field127;
  }

  int8_t& set_field127(int8_t field127_) {
    field127 = field127_;
    __isset.field127 = true;
    return field127;
  }

  int32_t get_field128() const {
    return field128;
  }

  int32_t& set_field128(int32_t field128_) {
    field128 = field128_;
    __isset.field128 = true;
    return field128;
  }
  const  ::cpp2::Struct11& get_field129() const&;
   ::cpp2::Struct11 get_field129() &&;

  template <typename T_Struct18_field129_struct_setter>
   ::cpp2::Struct11& set_field129(T_Struct18_field129_struct_setter&& field129_) {
    field129 = std::forward<T_Struct18_field129_struct_setter>(field129_);
    __isset.field129 = true;
    return field129;
  }

  double get_field130() const {
    return field130;
  }

  double& set_field130(double field130_) {
    field130 = field130_;
    __isset.field130 = true;
    return field130;
  }

  int8_t get_field131() const {
    return field131;
  }

  int8_t& set_field131(int8_t field131_) {
    field131 = field131_;
    __isset.field131 = true;
    return field131;
  }
  const  ::cpp2::Struct7& get_field132() const&;
   ::cpp2::Struct7 get_field132() &&;

  template <typename T_Struct18_field132_struct_setter>
   ::cpp2::Struct7& set_field132(T_Struct18_field132_struct_setter&& field132_) {
    field132 = std::forward<T_Struct18_field132_struct_setter>(field132_);
    __isset.field132 = true;
    return field132;
  }

  int32_t get_field133() const {
    return field133;
  }

  int32_t& set_field133(int32_t field133_) {
    field133 = field133_;
    __isset.field133 = true;
    return field133;
  }

  double get_field134() const {
    return field134;
  }

  double& set_field134(double field134_) {
    field134 = field134_;
    __isset.field134 = true;
    return field134;
  }

  int8_t get_field135() const {
    return field135;
  }

  int8_t& set_field135(int8_t field135_) {
    field135 = field135_;
    __isset.field135 = true;
    return field135;
  }

  double get_field136() const {
    return field136;
  }

  double& set_field136(double field136_) {
    field136 = field136_;
    __isset.field136 = true;
    return field136;
  }

  const std::string& get_field137() const& {
    return field137;
  }

  std::string get_field137() && {
    return std::move(field137);
  }

  template <typename T_Struct18_field137_struct_setter>
  std::string& set_field137(T_Struct18_field137_struct_setter&& field137_) {
    field137 = std::forward<T_Struct18_field137_struct_setter>(field137_);
    __isset.field137 = true;
    return field137;
  }

  int64_t get_field138() const {
    return field138;
  }

  int64_t& set_field138(int64_t field138_) {
    field138 = field138_;
    __isset.field138 = true;
    return field138;
  }

  const std::string& get_field139() const& {
    return field139;
  }

  std::string get_field139() && {
    return std::move(field139);
  }

  template <typename T_Struct18_field139_struct_setter>
  std::string& set_field139(T_Struct18_field139_struct_setter&& field139_) {
    field139 = std::forward<T_Struct18_field139_struct_setter>(field139_);
    __isset.field139 = true;
    return field139;
  }

  int64_t get_field140() const {
    return field140;
  }

  int64_t& set_field140(int64_t field140_) {
    field140 = field140_;
    __isset.field140 = true;
    return field140;
  }

  float get_field141() const {
    return field141;
  }

  float& set_field141(float field141_) {
    field141 = field141_;
    __isset.field141 = true;
    return field141;
  }

  bool get_field142() const {
    return field142;
  }

  bool& set_field142(bool field142_) {
    field142 = field142_;
    __isset.field142 = true;
    return field142;
  }

  int16_t get_field143() const {
    return field143;
  }

  int16_t& set_field143(int16_t field143_) {
    field143 = field143_;
    __isset.field143 = true;
    return field143;
  }
  const std::map< ::cpp2::Struct4, int64_t>& get_field144() const&;
  std::map< ::cpp2::Struct4, int64_t> get_field144() &&;

  template <typename T_Struct18_field144_struct_setter>
  std::map< ::cpp2::Struct4, int64_t>& set_field144(T_Struct18_field144_struct_setter&& field144_) {
    field144 = std::forward<T_Struct18_field144_struct_setter>(field144_);
    __isset.field144 = true;
    return field144;
  }
  const std::vector<float>& get_field145() const&;
  std::vector<float> get_field145() &&;

  template <typename T_Struct18_field145_struct_setter>
  std::vector<float>& set_field145(T_Struct18_field145_struct_setter&& field145_) {
    field145 = std::forward<T_Struct18_field145_struct_setter>(field145_);
    __isset.field145 = true;
    return field145;
  }

  int16_t get_field146() const {
    return field146;
  }

  int16_t& set_field146(int16_t field146_) {
    field146 = field146_;
    __isset.field146 = true;
    return field146;
  }
  const  ::cpp2::Struct9& get_field147() const&;
   ::cpp2::Struct9 get_field147() &&;

  template <typename T_Struct18_field147_struct_setter>
   ::cpp2::Struct9& set_field147(T_Struct18_field147_struct_setter&& field147_) {
    field147 = std::forward<T_Struct18_field147_struct_setter>(field147_);
    __isset.field147 = true;
    return field147;
  }
  const std::map< ::cpp2::Struct0, double>& get_field148() const&;
  std::map< ::cpp2::Struct0, double> get_field148() &&;

  template <typename T_Struct18_field148_struct_setter>
  std::map< ::cpp2::Struct0, double>& set_field148(T_Struct18_field148_struct_setter&& field148_) {
    field148 = std::forward<T_Struct18_field148_struct_setter>(field148_);
    __isset.field148 = true;
    return field148;
  }

  float get_field149() const {
    return field149;
  }

  float& set_field149(float field149_) {
    field149 = field149_;
    __isset.field149 = true;
    return field149;
  }

  bool get_field150() const {
    return field150;
  }

  bool& set_field150(bool field150_) {
    field150 = field150_;
    __isset.field150 = true;
    return field150;
  }
  const std::set<int8_t>& get_field151() const&;
  std::set<int8_t> get_field151() &&;

  template <typename T_Struct18_field151_struct_setter>
  std::set<int8_t>& set_field151(T_Struct18_field151_struct_setter&& field151_) {
    field151 = std::forward<T_Struct18_field151_struct_setter>(field151_);
    __isset.field151 = true;
    return field151;
  }
  const std::map<int64_t, std::vector<int64_t>>& get_field152() const&;
  std::map<int64_t, std::vector<int64_t>> get_field152() &&;

  template <typename T_Struct18_field152_struct_setter>
  std::map<int64_t, std::vector<int64_t>>& set_field152(T_Struct18_field152_struct_setter&& field152_) {
    field152 = std::forward<T_Struct18_field152_struct_setter>(field152_);
    __isset.field152 = true;
    return field152;
  }

  bool get_field153() const {
    return field153;
  }

  bool& set_field153(bool field153_) {
    field153 = field153_;
    __isset.field153 = true;
    return field153;
  }

  int8_t get_field154() const {
    return field154;
  }

  int8_t& set_field154(int8_t field154_) {
    field154 = field154_;
    __isset.field154 = true;
    return field154;
  }

  int32_t get_field155() const {
    return field155;
  }

  int32_t& set_field155(int32_t field155_) {
    field155 = field155_;
    __isset.field155 = true;
    return field155;
  }

  int16_t get_field156() const {
    return field156;
  }

  int16_t& set_field156(int16_t field156_) {
    field156 = field156_;
    __isset.field156 = true;
    return field156;
  }

  const std::string& get_field157() const& {
    return field157;
  }

  std::string get_field157() && {
    return std::move(field157);
  }

  template <typename T_Struct18_field157_struct_setter>
  std::string& set_field157(T_Struct18_field157_struct_setter&& field157_) {
    field157 = std::forward<T_Struct18_field157_struct_setter>(field157_);
    __isset.field157 = true;
    return field157;
  }

  const std::string& get_field158() const& {
    return field158;
  }

  std::string get_field158() && {
    return std::move(field158);
  }

  template <typename T_Struct18_field158_struct_setter>
  std::string& set_field158(T_Struct18_field158_struct_setter&& field158_) {
    field158 = std::forward<T_Struct18_field158_struct_setter>(field158_);
    __isset.field158 = true;
    return field158;
  }

  int64_t get_field159() const {
    return field159;
  }

  int64_t& set_field159(int64_t field159_) {
    field159 = field159_;
    __isset.field159 = true;
    return field159;
  }
  const std::map<double, int8_t>& get_field160() const&;
  std::map<double, int8_t> get_field160() &&;

  template <typename T_Struct18_field160_struct_setter>
  std::map<double, int8_t>& set_field160(T_Struct18_field160_struct_setter&& field160_) {
    field160 = std::forward<T_Struct18_field160_struct_setter>(field160_);
    __isset.field160 = true;
    return field160;
  }

  const std::string& get_field161() const& {
    return field161;
  }

  std::string get_field161() && {
    return std::move(field161);
  }

  template <typename T_Struct18_field161_struct_setter>
  std::string& set_field161(T_Struct18_field161_struct_setter&& field161_) {
    field161 = std::forward<T_Struct18_field161_struct_setter>(field161_);
    __isset.field161 = true;
    return field161;
  }
  const  ::cpp2::Struct2& get_field162() const&;
   ::cpp2::Struct2 get_field162() &&;

  template <typename T_Struct18_field162_struct_setter>
   ::cpp2::Struct2& set_field162(T_Struct18_field162_struct_setter&& field162_) {
    field162 = std::forward<T_Struct18_field162_struct_setter>(field162_);
    __isset.field162 = true;
    return field162;
  }

  bool get_field163() const {
    return field163;
  }

  bool& set_field163(bool field163_) {
    field163 = field163_;
    __isset.field163 = true;
    return field163;
  }

  int64_t get_field164() const {
    return field164;
  }

  int64_t& set_field164(int64_t field164_) {
    field164 = field164_;
    __isset.field164 = true;
    return field164;
  }

  bool get_field165() const {
    return field165;
  }

  bool& set_field165(bool field165_) {
    field165 = field165_;
    __isset.field165 = true;
    return field165;
  }
  const std::set< ::cpp2::Struct6>& get_field166() const&;
  std::set< ::cpp2::Struct6> get_field166() &&;

  template <typename T_Struct18_field166_struct_setter>
  std::set< ::cpp2::Struct6>& set_field166(T_Struct18_field166_struct_setter&& field166_) {
    field166 = std::forward<T_Struct18_field166_struct_setter>(field166_);
    __isset.field166 = true;
    return field166;
  }
  const std::map<int16_t, std::set<float>>& get_field167() const&;
  std::map<int16_t, std::set<float>> get_field167() &&;

  template <typename T_Struct18_field167_struct_setter>
  std::map<int16_t, std::set<float>>& set_field167(T_Struct18_field167_struct_setter&& field167_) {
    field167 = std::forward<T_Struct18_field167_struct_setter>(field167_);
    __isset.field167 = true;
    return field167;
  }
  const std::vector<std::string>& get_field168() const&;
  std::vector<std::string> get_field168() &&;

  template <typename T_Struct18_field168_struct_setter>
  std::vector<std::string>& set_field168(T_Struct18_field168_struct_setter&& field168_) {
    field168 = std::forward<T_Struct18_field168_struct_setter>(field168_);
    __isset.field168 = true;
    return field168;
  }
  const std::set<std::string>& get_field169() const&;
  std::set<std::string> get_field169() &&;

  template <typename T_Struct18_field169_struct_setter>
  std::set<std::string>& set_field169(T_Struct18_field169_struct_setter&& field169_) {
    field169 = std::forward<T_Struct18_field169_struct_setter>(field169_);
    __isset.field169 = true;
    return field169;
  }
  const std::set<int8_t>& get_field170() const&;
  std::set<int8_t> get_field170() &&;

  template <typename T_Struct18_field170_struct_setter>
  std::set<int8_t>& set_field170(T_Struct18_field170_struct_setter&& field170_) {
    field170 = std::forward<T_Struct18_field170_struct_setter>(field170_);
    __isset.field170 = true;
    return field170;
  }
  const std::vector<bool>& get_field171() const&;
  std::vector<bool> get_field171() &&;

  template <typename T_Struct18_field171_struct_setter>
  std::vector<bool>& set_field171(T_Struct18_field171_struct_setter&& field171_) {
    field171 = std::forward<T_Struct18_field171_struct_setter>(field171_);
    __isset.field171 = true;
    return field171;
  }
  const  ::cpp2::Struct0& get_field172() const&;
   ::cpp2::Struct0 get_field172() &&;

  template <typename T_Struct18_field172_struct_setter>
   ::cpp2::Struct0& set_field172(T_Struct18_field172_struct_setter&& field172_) {
    field172 = std::forward<T_Struct18_field172_struct_setter>(field172_);
    __isset.field172 = true;
    return field172;
  }
  const std::vector<std::string>& get_field173() const&;
  std::vector<std::string> get_field173() &&;

  template <typename T_Struct18_field173_struct_setter>
  std::vector<std::string>& set_field173(T_Struct18_field173_struct_setter&& field173_) {
    field173 = std::forward<T_Struct18_field173_struct_setter>(field173_);
    __isset.field173 = true;
    return field173;
  }
  const std::map<int32_t,  ::cpp2::Struct8>& get_field174() const&;
  std::map<int32_t,  ::cpp2::Struct8> get_field174() &&;

  template <typename T_Struct18_field174_struct_setter>
  std::map<int32_t,  ::cpp2::Struct8>& set_field174(T_Struct18_field174_struct_setter&& field174_) {
    field174 = std::forward<T_Struct18_field174_struct_setter>(field174_);
    __isset.field174 = true;
    return field174;
  }
  const  ::cpp2::Struct3& get_field175() const&;
   ::cpp2::Struct3 get_field175() &&;

  template <typename T_Struct18_field175_struct_setter>
   ::cpp2::Struct3& set_field175(T_Struct18_field175_struct_setter&& field175_) {
    field175 = std::forward<T_Struct18_field175_struct_setter>(field175_);
    __isset.field175 = true;
    return field175;
  }
  const std::set<float>& get_field176() const&;
  std::set<float> get_field176() &&;

  template <typename T_Struct18_field176_struct_setter>
  std::set<float>& set_field176(T_Struct18_field176_struct_setter&& field176_) {
    field176 = std::forward<T_Struct18_field176_struct_setter>(field176_);
    __isset.field176 = true;
    return field176;
  }

  int32_t get_field177() const {
    return field177;
  }

  int32_t& set_field177(int32_t field177_) {
    field177 = field177_;
    __isset.field177 = true;
    return field177;
  }

  int8_t get_field178() const {
    return field178;
  }

  int8_t& set_field178(int8_t field178_) {
    field178 = field178_;
    __isset.field178 = true;
    return field178;
  }

  int16_t get_field179() const {
    return field179;
  }

  int16_t& set_field179(int16_t field179_) {
    field179 = field179_;
    __isset.field179 = true;
    return field179;
  }
  const std::set<std::string>& get_field180() const&;
  std::set<std::string> get_field180() &&;

  template <typename T_Struct18_field180_struct_setter>
  std::set<std::string>& set_field180(T_Struct18_field180_struct_setter&& field180_) {
    field180 = std::forward<T_Struct18_field180_struct_setter>(field180_);
    __isset.field180 = true;
    return field180;
  }

  const std::string& get_field181() const& {
    return field181;
  }

  std::string get_field181() && {
    return std::move(field181);
  }

  template <typename T_Struct18_field181_struct_setter>
  std::string& set_field181(T_Struct18_field181_struct_setter&& field181_) {
    field181 = std::forward<T_Struct18_field181_struct_setter>(field181_);
    __isset.field181 = true;
    return field181;
  }

  float get_field182() const {
    return field182;
  }

  float& set_field182(float field182_) {
    field182 = field182_;
    __isset.field182 = true;
    return field182;
  }
  const std::vector<int64_t>& get_field183() const&;
  std::vector<int64_t> get_field183() &&;

  template <typename T_Struct18_field183_struct_setter>
  std::vector<int64_t>& set_field183(T_Struct18_field183_struct_setter&& field183_) {
    field183 = std::forward<T_Struct18_field183_struct_setter>(field183_);
    __isset.field183 = true;
    return field183;
  }

  int8_t get_field184() const {
    return field184;
  }

  int8_t& set_field184(int8_t field184_) {
    field184 = field184_;
    __isset.field184 = true;
    return field184;
  }
  const std::set<std::string>& get_field185() const&;
  std::set<std::string> get_field185() &&;

  template <typename T_Struct18_field185_struct_setter>
  std::set<std::string>& set_field185(T_Struct18_field185_struct_setter&& field185_) {
    field185 = std::forward<T_Struct18_field185_struct_setter>(field185_);
    __isset.field185 = true;
    return field185;
  }

  bool get_field186() const {
    return field186;
  }

  bool& set_field186(bool field186_) {
    field186 = field186_;
    __isset.field186 = true;
    return field186;
  }
  const std::set<std::string>& get_field187() const&;
  std::set<std::string> get_field187() &&;

  template <typename T_Struct18_field187_struct_setter>
  std::set<std::string>& set_field187(T_Struct18_field187_struct_setter&& field187_) {
    field187 = std::forward<T_Struct18_field187_struct_setter>(field187_);
    __isset.field187 = true;
    return field187;
  }
  const  ::cpp2::Struct4& get_field188() const&;
   ::cpp2::Struct4 get_field188() &&;

  template <typename T_Struct18_field188_struct_setter>
   ::cpp2::Struct4& set_field188(T_Struct18_field188_struct_setter&& field188_) {
    field188 = std::forward<T_Struct18_field188_struct_setter>(field188_);
    __isset.field188 = true;
    return field188;
  }

  bool get_field189() const {
    return field189;
  }

  bool& set_field189(bool field189_) {
    field189 = field189_;
    __isset.field189 = true;
    return field189;
  }
  const  ::cpp2::Struct7& get_field190() const&;
   ::cpp2::Struct7 get_field190() &&;

  template <typename T_Struct18_field190_struct_setter>
   ::cpp2::Struct7& set_field190(T_Struct18_field190_struct_setter&& field190_) {
    field190 = std::forward<T_Struct18_field190_struct_setter>(field190_);
    __isset.field190 = true;
    return field190;
  }

  const std::string& get_field191() const& {
    return field191;
  }

  std::string get_field191() && {
    return std::move(field191);
  }

  template <typename T_Struct18_field191_struct_setter>
  std::string& set_field191(T_Struct18_field191_struct_setter&& field191_) {
    field191 = std::forward<T_Struct18_field191_struct_setter>(field191_);
    __isset.field191 = true;
    return field191;
  }

  float get_field192() const {
    return field192;
  }

  float& set_field192(float field192_) {
    field192 = field192_;
    __isset.field192 = true;
    return field192;
  }

  int32_t get_field193() const {
    return field193;
  }

  int32_t& set_field193(int32_t field193_) {
    field193 = field193_;
    __isset.field193 = true;
    return field193;
  }

  float get_field194() const {
    return field194;
  }

  float& set_field194(float field194_) {
    field194 = field194_;
    __isset.field194 = true;
    return field194;
  }
  const std::set<int32_t>& get_field195() const&;
  std::set<int32_t> get_field195() &&;

  template <typename T_Struct18_field195_struct_setter>
  std::set<int32_t>& set_field195(T_Struct18_field195_struct_setter&& field195_) {
    field195 = std::forward<T_Struct18_field195_struct_setter>(field195_);
    __isset.field195 = true;
    return field195;
  }

  double get_field196() const {
    return field196;
  }

  double& set_field196(double field196_) {
    field196 = field196_;
    __isset.field196 = true;
    return field196;
  }
  const  ::cpp2::Struct4& get_field197() const&;
   ::cpp2::Struct4 get_field197() &&;

  template <typename T_Struct18_field197_struct_setter>
   ::cpp2::Struct4& set_field197(T_Struct18_field197_struct_setter&& field197_) {
    field197 = std::forward<T_Struct18_field197_struct_setter>(field197_);
    __isset.field197 = true;
    return field197;
  }

  int32_t get_field198() const {
    return field198;
  }

  int32_t& set_field198(int32_t field198_) {
    field198 = field198_;
    __isset.field198 = true;
    return field198;
  }
  const  ::cpp2::Struct14& get_field199() const&;
   ::cpp2::Struct14 get_field199() &&;

  template <typename T_Struct18_field199_struct_setter>
   ::cpp2::Struct14& set_field199(T_Struct18_field199_struct_setter&& field199_) {
    field199 = std::forward<T_Struct18_field199_struct_setter>(field199_);
    __isset.field199 = true;
    return field199;
  }
  const std::vector<float>& get_field200() const&;
  std::vector<float> get_field200() &&;

  template <typename T_Struct18_field200_struct_setter>
  std::vector<float>& set_field200(T_Struct18_field200_struct_setter&& field200_) {
    field200 = std::forward<T_Struct18_field200_struct_setter>(field200_);
    __isset.field200 = true;
    return field200;
  }
  const std::vector<int64_t>& get_field201() const&;
  std::vector<int64_t> get_field201() &&;

  template <typename T_Struct18_field201_struct_setter>
  std::vector<int64_t>& set_field201(T_Struct18_field201_struct_setter&& field201_) {
    field201 = std::forward<T_Struct18_field201_struct_setter>(field201_);
    __isset.field201 = true;
    return field201;
  }
  const std::map<bool, int32_t>& get_field202() const&;
  std::map<bool, int32_t> get_field202() &&;

  template <typename T_Struct18_field202_struct_setter>
  std::map<bool, int32_t>& set_field202(T_Struct18_field202_struct_setter&& field202_) {
    field202 = std::forward<T_Struct18_field202_struct_setter>(field202_);
    __isset.field202 = true;
    return field202;
  }

  const std::string& get_field203() const& {
    return field203;
  }

  std::string get_field203() && {
    return std::move(field203);
  }

  template <typename T_Struct18_field203_struct_setter>
  std::string& set_field203(T_Struct18_field203_struct_setter&& field203_) {
    field203 = std::forward<T_Struct18_field203_struct_setter>(field203_);
    __isset.field203 = true;
    return field203;
  }
  const std::map<int64_t, int32_t>& get_field204() const&;
  std::map<int64_t, int32_t> get_field204() &&;

  template <typename T_Struct18_field204_struct_setter>
  std::map<int64_t, int32_t>& set_field204(T_Struct18_field204_struct_setter&& field204_) {
    field204 = std::forward<T_Struct18_field204_struct_setter>(field204_);
    __isset.field204 = true;
    return field204;
  }
  const std::map<std::string, std::vector<int32_t>>& get_field205() const&;
  std::map<std::string, std::vector<int32_t>> get_field205() &&;

  template <typename T_Struct18_field205_struct_setter>
  std::map<std::string, std::vector<int32_t>>& set_field205(T_Struct18_field205_struct_setter&& field205_) {
    field205 = std::forward<T_Struct18_field205_struct_setter>(field205_);
    __isset.field205 = true;
    return field205;
  }

  int8_t get_field206() const {
    return field206;
  }

  int8_t& set_field206(int8_t field206_) {
    field206 = field206_;
    __isset.field206 = true;
    return field206;
  }
  const std::set<std::string>& get_field207() const&;
  std::set<std::string> get_field207() &&;

  template <typename T_Struct18_field207_struct_setter>
  std::set<std::string>& set_field207(T_Struct18_field207_struct_setter&& field207_) {
    field207 = std::forward<T_Struct18_field207_struct_setter>(field207_);
    __isset.field207 = true;
    return field207;
  }
  const  ::cpp2::Struct8& get_field208() const&;
   ::cpp2::Struct8 get_field208() &&;

  template <typename T_Struct18_field208_struct_setter>
   ::cpp2::Struct8& set_field208(T_Struct18_field208_struct_setter&& field208_) {
    field208 = std::forward<T_Struct18_field208_struct_setter>(field208_);
    __isset.field208 = true;
    return field208;
  }

  const std::string& get_field209() const& {
    return field209;
  }

  std::string get_field209() && {
    return std::move(field209);
  }

  template <typename T_Struct18_field209_struct_setter>
  std::string& set_field209(T_Struct18_field209_struct_setter&& field209_) {
    field209 = std::forward<T_Struct18_field209_struct_setter>(field209_);
    __isset.field209 = true;
    return field209;
  }
  const std::map<std::string, bool>& get_field210() const&;
  std::map<std::string, bool> get_field210() &&;

  template <typename T_Struct18_field210_struct_setter>
  std::map<std::string, bool>& set_field210(T_Struct18_field210_struct_setter&& field210_) {
    field210 = std::forward<T_Struct18_field210_struct_setter>(field210_);
    __isset.field210 = true;
    return field210;
  }
  const std::map<bool, int16_t>& get_field211() const&;
  std::map<bool, int16_t> get_field211() &&;

  template <typename T_Struct18_field211_struct_setter>
  std::map<bool, int16_t>& set_field211(T_Struct18_field211_struct_setter&& field211_) {
    field211 = std::forward<T_Struct18_field211_struct_setter>(field211_);
    __isset.field211 = true;
    return field211;
  }

  const std::string& get_field212() const& {
    return field212;
  }

  std::string get_field212() && {
    return std::move(field212);
  }

  template <typename T_Struct18_field212_struct_setter>
  std::string& set_field212(T_Struct18_field212_struct_setter&& field212_) {
    field212 = std::forward<T_Struct18_field212_struct_setter>(field212_);
    __isset.field212 = true;
    return field212;
  }

  int8_t get_field213() const {
    return field213;
  }

  int8_t& set_field213(int8_t field213_) {
    field213 = field213_;
    __isset.field213 = true;
    return field213;
  }
  const  ::cpp2::Struct5& get_field214() const&;
   ::cpp2::Struct5 get_field214() &&;

  template <typename T_Struct18_field214_struct_setter>
   ::cpp2::Struct5& set_field214(T_Struct18_field214_struct_setter&& field214_) {
    field214 = std::forward<T_Struct18_field214_struct_setter>(field214_);
    __isset.field214 = true;
    return field214;
  }

  int64_t get_field215() const {
    return field215;
  }

  int64_t& set_field215(int64_t field215_) {
    field215 = field215_;
    __isset.field215 = true;
    return field215;
  }

  int16_t get_field216() const {
    return field216;
  }

  int16_t& set_field216(int16_t field216_) {
    field216 = field216_;
    __isset.field216 = true;
    return field216;
  }

  const std::string& get_field217() const& {
    return field217;
  }

  std::string get_field217() && {
    return std::move(field217);
  }

  template <typename T_Struct18_field217_struct_setter>
  std::string& set_field217(T_Struct18_field217_struct_setter&& field217_) {
    field217 = std::forward<T_Struct18_field217_struct_setter>(field217_);
    __isset.field217 = true;
    return field217;
  }

  float get_field218() const {
    return field218;
  }

  float& set_field218(float field218_) {
    field218 = field218_;
    __isset.field218 = true;
    return field218;
  }
  const std::vector<float>& get_field219() const&;
  std::vector<float> get_field219() &&;

  template <typename T_Struct18_field219_struct_setter>
  std::vector<float>& set_field219(T_Struct18_field219_struct_setter&& field219_) {
    field219 = std::forward<T_Struct18_field219_struct_setter>(field219_);
    __isset.field219 = true;
    return field219;
  }
  const  ::cpp2::Struct13& get_field220() const&;
   ::cpp2::Struct13 get_field220() &&;

  template <typename T_Struct18_field220_struct_setter>
   ::cpp2::Struct13& set_field220(T_Struct18_field220_struct_setter&& field220_) {
    field220 = std::forward<T_Struct18_field220_struct_setter>(field220_);
    __isset.field220 = true;
    return field220;
  }

  const std::string& get_field221() const& {
    return field221;
  }

  std::string get_field221() && {
    return std::move(field221);
  }

  template <typename T_Struct18_field221_struct_setter>
  std::string& set_field221(T_Struct18_field221_struct_setter&& field221_) {
    field221 = std::forward<T_Struct18_field221_struct_setter>(field221_);
    __isset.field221 = true;
    return field221;
  }
  const  ::cpp2::Struct8& get_field222() const&;
   ::cpp2::Struct8 get_field222() &&;

  template <typename T_Struct18_field222_struct_setter>
   ::cpp2::Struct8& set_field222(T_Struct18_field222_struct_setter&& field222_) {
    field222 = std::forward<T_Struct18_field222_struct_setter>(field222_);
    __isset.field222 = true;
    return field222;
  }
  const std::set<int16_t>& get_field223() const&;
  std::set<int16_t> get_field223() &&;

  template <typename T_Struct18_field223_struct_setter>
  std::set<int16_t>& set_field223(T_Struct18_field223_struct_setter&& field223_) {
    field223 = std::forward<T_Struct18_field223_struct_setter>(field223_);
    __isset.field223 = true;
    return field223;
  }

  int16_t get_field224() const {
    return field224;
  }

  int16_t& set_field224(int16_t field224_) {
    field224 = field224_;
    __isset.field224 = true;
    return field224;
  }
  const std::vector<float>& get_field225() const&;
  std::vector<float> get_field225() &&;

  template <typename T_Struct18_field225_struct_setter>
  std::vector<float>& set_field225(T_Struct18_field225_struct_setter&& field225_) {
    field225 = std::forward<T_Struct18_field225_struct_setter>(field225_);
    __isset.field225 = true;
    return field225;
  }
  const std::vector<int16_t>& get_field226() const&;
  std::vector<int16_t> get_field226() &&;

  template <typename T_Struct18_field226_struct_setter>
  std::vector<int16_t>& set_field226(T_Struct18_field226_struct_setter&& field226_) {
    field226 = std::forward<T_Struct18_field226_struct_setter>(field226_);
    __isset.field226 = true;
    return field226;
  }
  const std::vector<std::map<int64_t, int16_t>>& get_field227() const&;
  std::vector<std::map<int64_t, int16_t>> get_field227() &&;

  template <typename T_Struct18_field227_struct_setter>
  std::vector<std::map<int64_t, int16_t>>& set_field227(T_Struct18_field227_struct_setter&& field227_) {
    field227 = std::forward<T_Struct18_field227_struct_setter>(field227_);
    __isset.field227 = true;
    return field227;
  }

  int64_t get_field228() const {
    return field228;
  }

  int64_t& set_field228(int64_t field228_) {
    field228 = field228_;
    __isset.field228 = true;
    return field228;
  }
  const  ::cpp2::Struct2& get_field229() const&;
   ::cpp2::Struct2 get_field229() &&;

  template <typename T_Struct18_field229_struct_setter>
   ::cpp2::Struct2& set_field229(T_Struct18_field229_struct_setter&& field229_) {
    field229 = std::forward<T_Struct18_field229_struct_setter>(field229_);
    __isset.field229 = true;
    return field229;
  }

  const std::string& get_field230() const& {
    return field230;
  }

  std::string get_field230() && {
    return std::move(field230);
  }

  template <typename T_Struct18_field230_struct_setter>
  std::string& set_field230(T_Struct18_field230_struct_setter&& field230_) {
    field230 = std::forward<T_Struct18_field230_struct_setter>(field230_);
    __isset.field230 = true;
    return field230;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct18& a, Struct18& b);
extern template uint32_t Struct18::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct18::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct18::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct18::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct18::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct18::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct18::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct18::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct18>::clear( ::cpp2::Struct18* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct18>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct18>::write(Protocol* proto,  ::cpp2::Struct18 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct18>::read(Protocol* proto,  ::cpp2::Struct18* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct18>::serializedSize(Protocol const* proto,  ::cpp2::Struct18 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct18>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct18 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct19 : private apache::thrift::detail::st::ComparisonOperators<Struct19> {
 public:

  Struct19() :
      field1(0),
      field4(0),
      field5(0),
      field9(0),
      field11(0),
      field13(0),
      field14(0),
      field25(0),
      field26(0),
      field29(0),
      field31(0),
      field32(0),
      field35(0),
      field38(0),
      field42(0),
      field46(0),
      field48(0),
      field49(0),
      field52(0),
      field53(0),
      field54(0),
      field55(0),
      field57(0),
      field62(0),
      field63(0),
      field65(0),
      field66(0),
      field68(0),
      field69(0),
      field70(0),
      field72(0),
      field78(0),
      field81(0),
      field84(0) {}
  // FragileConstructor for use in initialization lists only

  Struct19(apache::thrift::FragileConstructor, bool field1__arg, std::map<std::string, int16_t> field2__arg, std::set<int64_t> field3__arg, int64_t field4__arg, bool field5__arg, std::map<double, bool> field6__arg, std::map<std::string, std::set<int16_t>> field7__arg,  ::cpp2::Struct0 field8__arg, float field9__arg, std::vector<std::set<std::vector<int32_t>>> field10__arg, bool field11__arg, std::map<int32_t, bool> field12__arg, bool field13__arg, int8_t field14__arg,  ::cpp2::Struct7 field15__arg, std::vector<int16_t> field16__arg, std::map<std::vector<std::vector<std::string>>, int8_t> field17__arg, std::set<std::string> field18__arg, std::set<double> field19__arg, std::string field20__arg, std::vector<int16_t> field21__arg, std::set<std::set<double>> field22__arg, std::string field23__arg, std::string field24__arg, double field25__arg, bool field26__arg, std::string field27__arg, std::string field28__arg, bool field29__arg, std::string field30__arg, double field31__arg, int8_t field32__arg, std::vector<bool> field33__arg, std::set<std::vector<std::string>> field34__arg, int16_t field35__arg, std::map<float, int8_t> field36__arg, std::map<std::string, int32_t> field37__arg, int16_t field38__arg, std::set<int16_t> field39__arg, std::string field40__arg, std::vector<std::vector<int32_t>> field41__arg, bool field42__arg, std::set<int32_t> field43__arg, std::string field44__arg, std::set<float> field45__arg, int32_t field46__arg, std::string field47__arg, bool field48__arg, bool field49__arg, std::vector<std::string> field50__arg, std::string field51__arg, int64_t field52__arg, bool field53__arg, bool field54__arg, int8_t field55__arg, std::set<bool> field56__arg, int8_t field57__arg, std::set<std::vector<bool>> field58__arg, std::vector<std::vector<bool>> field59__arg, std::set<int16_t> field60__arg, std::set<std::string> field61__arg, bool field62__arg, double field63__arg, std::map<int8_t, std::string> field64__arg, int64_t field65__arg, float field66__arg,  ::cpp2::Struct3 field67__arg, int64_t field68__arg, int16_t field69__arg, double field70__arg,  ::cpp2::Struct8 field71__arg, int32_t field72__arg, std::set<std::string> field73__arg, std::set<std::string> field74__arg, std::set<float> field75__arg, std::map<std::vector<double>,  ::cpp2::Struct2> field76__arg, std::string field77__arg, int8_t field78__arg, std::vector<std::string> field79__arg, std::string field80__arg, double field81__arg, std::string field82__arg,  ::cpp2::Struct8 field83__arg, int16_t field84__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct19(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct19(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }

  Struct19(Struct19&&) = default;

  Struct19(const Struct19&) = default;

  Struct19& operator=(Struct19&&) = default;

  Struct19& operator=(const Struct19&) = default;
  void __clear();

  virtual ~Struct19() {}

  bool field1;
  std::map<std::string, int16_t> field2;
  std::set<int64_t> field3;
  int64_t field4;
  bool field5;
  std::map<double, bool> field6;
  std::map<std::string, std::set<int16_t>> field7;
   ::cpp2::Struct0 field8;
  float field9;
  std::vector<std::set<std::vector<int32_t>>> field10;
  bool field11;
  std::map<int32_t, bool> field12;
  bool field13;
  int8_t field14;
   ::cpp2::Struct7 field15;
  std::vector<int16_t> field16;
  std::map<std::vector<std::vector<std::string>>, int8_t> field17;
  std::set<std::string> field18;
  std::set<double> field19;
  std::string field20;
  std::vector<int16_t> field21;
  std::set<std::set<double>> field22;
  std::string field23;
  std::string field24;
  double field25;
  bool field26;
  std::string field27;
  std::string field28;
  bool field29;
  std::string field30;
  double field31;
  int8_t field32;
  std::vector<bool> field33;
  std::set<std::vector<std::string>> field34;
  int16_t field35;
  std::map<float, int8_t> field36;
  std::map<std::string, int32_t> field37;
  int16_t field38;
  std::set<int16_t> field39;
  std::string field40;
  std::vector<std::vector<int32_t>> field41;
  bool field42;
  std::set<int32_t> field43;
  std::string field44;
  std::set<float> field45;
  int32_t field46;
  std::string field47;
  bool field48;
  bool field49;
  std::vector<std::string> field50;
  std::string field51;
  int64_t field52;
  bool field53;
  bool field54;
  int8_t field55;
  std::set<bool> field56;
  int8_t field57;
  std::set<std::vector<bool>> field58;
  std::vector<std::vector<bool>> field59;
  std::set<int16_t> field60;
  std::set<std::string> field61;
  bool field62;
  double field63;
  std::map<int8_t, std::string> field64;
  int64_t field65;
  float field66;
   ::cpp2::Struct3 field67;
  int64_t field68;
  int16_t field69;
  double field70;
   ::cpp2::Struct8 field71;
  int32_t field72;
  std::set<std::string> field73;
  std::set<std::string> field74;
  std::set<float> field75;
  std::map<std::vector<double>,  ::cpp2::Struct2> field76;
  std::string field77;
  int8_t field78;
  std::vector<std::string> field79;
  std::string field80;
  double field81;
  std::string field82;
   ::cpp2::Struct8 field83;
  int16_t field84;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
  } __isset;
  bool operator==(const Struct19& rhs) const;

  bool operator < (const Struct19& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    (void)rhs;
    return false;
  }

  bool get_field1() const {
    return field1;
  }

  bool& set_field1(bool field1_) {
    field1 = field1_;
    __isset.field1 = true;
    return field1;
  }
  const std::map<std::string, int16_t>& get_field2() const&;
  std::map<std::string, int16_t> get_field2() &&;

  template <typename T_Struct19_field2_struct_setter>
  std::map<std::string, int16_t>& set_field2(T_Struct19_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct19_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const std::set<int64_t>& get_field3() const&;
  std::set<int64_t> get_field3() &&;

  template <typename T_Struct19_field3_struct_setter>
  std::set<int64_t>& set_field3(T_Struct19_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct19_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  int64_t get_field4() const {
    return field4;
  }

  int64_t& set_field4(int64_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }

  bool get_field5() const {
    return field5;
  }

  bool& set_field5(bool field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }
  const std::map<double, bool>& get_field6() const&;
  std::map<double, bool> get_field6() &&;

  template <typename T_Struct19_field6_struct_setter>
  std::map<double, bool>& set_field6(T_Struct19_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct19_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }
  const std::map<std::string, std::set<int16_t>>& get_field7() const&;
  std::map<std::string, std::set<int16_t>> get_field7() &&;

  template <typename T_Struct19_field7_struct_setter>
  std::map<std::string, std::set<int16_t>>& set_field7(T_Struct19_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct19_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }
  const  ::cpp2::Struct0& get_field8() const&;
   ::cpp2::Struct0 get_field8() &&;

  template <typename T_Struct19_field8_struct_setter>
   ::cpp2::Struct0& set_field8(T_Struct19_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct19_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }

  float get_field9() const {
    return field9;
  }

  float& set_field9(float field9_) {
    field9 = field9_;
    __isset.field9 = true;
    return field9;
  }
  const std::vector<std::set<std::vector<int32_t>>>& get_field10() const&;
  std::vector<std::set<std::vector<int32_t>>> get_field10() &&;

  template <typename T_Struct19_field10_struct_setter>
  std::vector<std::set<std::vector<int32_t>>>& set_field10(T_Struct19_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct19_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }

  bool get_field11() const {
    return field11;
  }

  bool& set_field11(bool field11_) {
    field11 = field11_;
    __isset.field11 = true;
    return field11;
  }
  const std::map<int32_t, bool>& get_field12() const&;
  std::map<int32_t, bool> get_field12() &&;

  template <typename T_Struct19_field12_struct_setter>
  std::map<int32_t, bool>& set_field12(T_Struct19_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct19_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }

  bool get_field13() const {
    return field13;
  }

  bool& set_field13(bool field13_) {
    field13 = field13_;
    __isset.field13 = true;
    return field13;
  }

  int8_t get_field14() const {
    return field14;
  }

  int8_t& set_field14(int8_t field14_) {
    field14 = field14_;
    __isset.field14 = true;
    return field14;
  }
  const  ::cpp2::Struct7& get_field15() const&;
   ::cpp2::Struct7 get_field15() &&;

  template <typename T_Struct19_field15_struct_setter>
   ::cpp2::Struct7& set_field15(T_Struct19_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct19_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }
  const std::vector<int16_t>& get_field16() const&;
  std::vector<int16_t> get_field16() &&;

  template <typename T_Struct19_field16_struct_setter>
  std::vector<int16_t>& set_field16(T_Struct19_field16_struct_setter&& field16_) {
    field16 = std::forward<T_Struct19_field16_struct_setter>(field16_);
    __isset.field16 = true;
    return field16;
  }
  const std::map<std::vector<std::vector<std::string>>, int8_t>& get_field17() const&;
  std::map<std::vector<std::vector<std::string>>, int8_t> get_field17() &&;

  template <typename T_Struct19_field17_struct_setter>
  std::map<std::vector<std::vector<std::string>>, int8_t>& set_field17(T_Struct19_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct19_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }
  const std::set<std::string>& get_field18() const&;
  std::set<std::string> get_field18() &&;

  template <typename T_Struct19_field18_struct_setter>
  std::set<std::string>& set_field18(T_Struct19_field18_struct_setter&& field18_) {
    field18 = std::forward<T_Struct19_field18_struct_setter>(field18_);
    __isset.field18 = true;
    return field18;
  }
  const std::set<double>& get_field19() const&;
  std::set<double> get_field19() &&;

  template <typename T_Struct19_field19_struct_setter>
  std::set<double>& set_field19(T_Struct19_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct19_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }

  const std::string& get_field20() const& {
    return field20;
  }

  std::string get_field20() && {
    return std::move(field20);
  }

  template <typename T_Struct19_field20_struct_setter>
  std::string& set_field20(T_Struct19_field20_struct_setter&& field20_) {
    field20 = std::forward<T_Struct19_field20_struct_setter>(field20_);
    __isset.field20 = true;
    return field20;
  }
  const std::vector<int16_t>& get_field21() const&;
  std::vector<int16_t> get_field21() &&;

  template <typename T_Struct19_field21_struct_setter>
  std::vector<int16_t>& set_field21(T_Struct19_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct19_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }
  const std::set<std::set<double>>& get_field22() const&;
  std::set<std::set<double>> get_field22() &&;

  template <typename T_Struct19_field22_struct_setter>
  std::set<std::set<double>>& set_field22(T_Struct19_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct19_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }

  const std::string& get_field23() const& {
    return field23;
  }

  std::string get_field23() && {
    return std::move(field23);
  }

  template <typename T_Struct19_field23_struct_setter>
  std::string& set_field23(T_Struct19_field23_struct_setter&& field23_) {
    field23 = std::forward<T_Struct19_field23_struct_setter>(field23_);
    __isset.field23 = true;
    return field23;
  }

  const std::string& get_field24() const& {
    return field24;
  }

  std::string get_field24() && {
    return std::move(field24);
  }

  template <typename T_Struct19_field24_struct_setter>
  std::string& set_field24(T_Struct19_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct19_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }

  double get_field25() const {
    return field25;
  }

  double& set_field25(double field25_) {
    field25 = field25_;
    __isset.field25 = true;
    return field25;
  }

  bool get_field26() const {
    return field26;
  }

  bool& set_field26(bool field26_) {
    field26 = field26_;
    __isset.field26 = true;
    return field26;
  }

  const std::string& get_field27() const& {
    return field27;
  }

  std::string get_field27() && {
    return std::move(field27);
  }

  template <typename T_Struct19_field27_struct_setter>
  std::string& set_field27(T_Struct19_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct19_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }

  const std::string& get_field28() const& {
    return field28;
  }

  std::string get_field28() && {
    return std::move(field28);
  }

  template <typename T_Struct19_field28_struct_setter>
  std::string& set_field28(T_Struct19_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct19_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }

  bool get_field29() const {
    return field29;
  }

  bool& set_field29(bool field29_) {
    field29 = field29_;
    __isset.field29 = true;
    return field29;
  }

  const std::string& get_field30() const& {
    return field30;
  }

  std::string get_field30() && {
    return std::move(field30);
  }

  template <typename T_Struct19_field30_struct_setter>
  std::string& set_field30(T_Struct19_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct19_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }

  double get_field31() const {
    return field31;
  }

  double& set_field31(double field31_) {
    field31 = field31_;
    __isset.field31 = true;
    return field31;
  }

  int8_t get_field32() const {
    return field32;
  }

  int8_t& set_field32(int8_t field32_) {
    field32 = field32_;
    __isset.field32 = true;
    return field32;
  }
  const std::vector<bool>& get_field33() const&;
  std::vector<bool> get_field33() &&;

  template <typename T_Struct19_field33_struct_setter>
  std::vector<bool>& set_field33(T_Struct19_field33_struct_setter&& field33_) {
    field33 = std::forward<T_Struct19_field33_struct_setter>(field33_);
    __isset.field33 = true;
    return field33;
  }
  const std::set<std::vector<std::string>>& get_field34() const&;
  std::set<std::vector<std::string>> get_field34() &&;

  template <typename T_Struct19_field34_struct_setter>
  std::set<std::vector<std::string>>& set_field34(T_Struct19_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct19_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }

  int16_t get_field35() const {
    return field35;
  }

  int16_t& set_field35(int16_t field35_) {
    field35 = field35_;
    __isset.field35 = true;
    return field35;
  }
  const std::map<float, int8_t>& get_field36() const&;
  std::map<float, int8_t> get_field36() &&;

  template <typename T_Struct19_field36_struct_setter>
  std::map<float, int8_t>& set_field36(T_Struct19_field36_struct_setter&& field36_) {
    field36 = std::forward<T_Struct19_field36_struct_setter>(field36_);
    __isset.field36 = true;
    return field36;
  }
  const std::map<std::string, int32_t>& get_field37() const&;
  std::map<std::string, int32_t> get_field37() &&;

  template <typename T_Struct19_field37_struct_setter>
  std::map<std::string, int32_t>& set_field37(T_Struct19_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct19_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }

  int16_t get_field38() const {
    return field38;
  }

  int16_t& set_field38(int16_t field38_) {
    field38 = field38_;
    __isset.field38 = true;
    return field38;
  }
  const std::set<int16_t>& get_field39() const&;
  std::set<int16_t> get_field39() &&;

  template <typename T_Struct19_field39_struct_setter>
  std::set<int16_t>& set_field39(T_Struct19_field39_struct_setter&& field39_) {
    field39 = std::forward<T_Struct19_field39_struct_setter>(field39_);
    __isset.field39 = true;
    return field39;
  }

  const std::string& get_field40() const& {
    return field40;
  }

  std::string get_field40() && {
    return std::move(field40);
  }

  template <typename T_Struct19_field40_struct_setter>
  std::string& set_field40(T_Struct19_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct19_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }
  const std::vector<std::vector<int32_t>>& get_field41() const&;
  std::vector<std::vector<int32_t>> get_field41() &&;

  template <typename T_Struct19_field41_struct_setter>
  std::vector<std::vector<int32_t>>& set_field41(T_Struct19_field41_struct_setter&& field41_) {
    field41 = std::forward<T_Struct19_field41_struct_setter>(field41_);
    __isset.field41 = true;
    return field41;
  }

  bool get_field42() const {
    return field42;
  }

  bool& set_field42(bool field42_) {
    field42 = field42_;
    __isset.field42 = true;
    return field42;
  }
  const std::set<int32_t>& get_field43() const&;
  std::set<int32_t> get_field43() &&;

  template <typename T_Struct19_field43_struct_setter>
  std::set<int32_t>& set_field43(T_Struct19_field43_struct_setter&& field43_) {
    field43 = std::forward<T_Struct19_field43_struct_setter>(field43_);
    __isset.field43 = true;
    return field43;
  }

  const std::string& get_field44() const& {
    return field44;
  }

  std::string get_field44() && {
    return std::move(field44);
  }

  template <typename T_Struct19_field44_struct_setter>
  std::string& set_field44(T_Struct19_field44_struct_setter&& field44_) {
    field44 = std::forward<T_Struct19_field44_struct_setter>(field44_);
    __isset.field44 = true;
    return field44;
  }
  const std::set<float>& get_field45() const&;
  std::set<float> get_field45() &&;

  template <typename T_Struct19_field45_struct_setter>
  std::set<float>& set_field45(T_Struct19_field45_struct_setter&& field45_) {
    field45 = std::forward<T_Struct19_field45_struct_setter>(field45_);
    __isset.field45 = true;
    return field45;
  }

  int32_t get_field46() const {
    return field46;
  }

  int32_t& set_field46(int32_t field46_) {
    field46 = field46_;
    __isset.field46 = true;
    return field46;
  }

  const std::string& get_field47() const& {
    return field47;
  }

  std::string get_field47() && {
    return std::move(field47);
  }

  template <typename T_Struct19_field47_struct_setter>
  std::string& set_field47(T_Struct19_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct19_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }

  bool get_field48() const {
    return field48;
  }

  bool& set_field48(bool field48_) {
    field48 = field48_;
    __isset.field48 = true;
    return field48;
  }

  bool get_field49() const {
    return field49;
  }

  bool& set_field49(bool field49_) {
    field49 = field49_;
    __isset.field49 = true;
    return field49;
  }
  const std::vector<std::string>& get_field50() const&;
  std::vector<std::string> get_field50() &&;

  template <typename T_Struct19_field50_struct_setter>
  std::vector<std::string>& set_field50(T_Struct19_field50_struct_setter&& field50_) {
    field50 = std::forward<T_Struct19_field50_struct_setter>(field50_);
    __isset.field50 = true;
    return field50;
  }

  const std::string& get_field51() const& {
    return field51;
  }

  std::string get_field51() && {
    return std::move(field51);
  }

  template <typename T_Struct19_field51_struct_setter>
  std::string& set_field51(T_Struct19_field51_struct_setter&& field51_) {
    field51 = std::forward<T_Struct19_field51_struct_setter>(field51_);
    __isset.field51 = true;
    return field51;
  }

  int64_t get_field52() const {
    return field52;
  }

  int64_t& set_field52(int64_t field52_) {
    field52 = field52_;
    __isset.field52 = true;
    return field52;
  }

  bool get_field53() const {
    return field53;
  }

  bool& set_field53(bool field53_) {
    field53 = field53_;
    __isset.field53 = true;
    return field53;
  }

  bool get_field54() const {
    return field54;
  }

  bool& set_field54(bool field54_) {
    field54 = field54_;
    __isset.field54 = true;
    return field54;
  }

  int8_t get_field55() const {
    return field55;
  }

  int8_t& set_field55(int8_t field55_) {
    field55 = field55_;
    __isset.field55 = true;
    return field55;
  }
  const std::set<bool>& get_field56() const&;
  std::set<bool> get_field56() &&;

  template <typename T_Struct19_field56_struct_setter>
  std::set<bool>& set_field56(T_Struct19_field56_struct_setter&& field56_) {
    field56 = std::forward<T_Struct19_field56_struct_setter>(field56_);
    __isset.field56 = true;
    return field56;
  }

  int8_t get_field57() const {
    return field57;
  }

  int8_t& set_field57(int8_t field57_) {
    field57 = field57_;
    __isset.field57 = true;
    return field57;
  }
  const std::set<std::vector<bool>>& get_field58() const&;
  std::set<std::vector<bool>> get_field58() &&;

  template <typename T_Struct19_field58_struct_setter>
  std::set<std::vector<bool>>& set_field58(T_Struct19_field58_struct_setter&& field58_) {
    field58 = std::forward<T_Struct19_field58_struct_setter>(field58_);
    __isset.field58 = true;
    return field58;
  }
  const std::vector<std::vector<bool>>& get_field59() const&;
  std::vector<std::vector<bool>> get_field59() &&;

  template <typename T_Struct19_field59_struct_setter>
  std::vector<std::vector<bool>>& set_field59(T_Struct19_field59_struct_setter&& field59_) {
    field59 = std::forward<T_Struct19_field59_struct_setter>(field59_);
    __isset.field59 = true;
    return field59;
  }
  const std::set<int16_t>& get_field60() const&;
  std::set<int16_t> get_field60() &&;

  template <typename T_Struct19_field60_struct_setter>
  std::set<int16_t>& set_field60(T_Struct19_field60_struct_setter&& field60_) {
    field60 = std::forward<T_Struct19_field60_struct_setter>(field60_);
    __isset.field60 = true;
    return field60;
  }
  const std::set<std::string>& get_field61() const&;
  std::set<std::string> get_field61() &&;

  template <typename T_Struct19_field61_struct_setter>
  std::set<std::string>& set_field61(T_Struct19_field61_struct_setter&& field61_) {
    field61 = std::forward<T_Struct19_field61_struct_setter>(field61_);
    __isset.field61 = true;
    return field61;
  }

  bool get_field62() const {
    return field62;
  }

  bool& set_field62(bool field62_) {
    field62 = field62_;
    __isset.field62 = true;
    return field62;
  }

  double get_field63() const {
    return field63;
  }

  double& set_field63(double field63_) {
    field63 = field63_;
    __isset.field63 = true;
    return field63;
  }
  const std::map<int8_t, std::string>& get_field64() const&;
  std::map<int8_t, std::string> get_field64() &&;

  template <typename T_Struct19_field64_struct_setter>
  std::map<int8_t, std::string>& set_field64(T_Struct19_field64_struct_setter&& field64_) {
    field64 = std::forward<T_Struct19_field64_struct_setter>(field64_);
    __isset.field64 = true;
    return field64;
  }

  int64_t get_field65() const {
    return field65;
  }

  int64_t& set_field65(int64_t field65_) {
    field65 = field65_;
    __isset.field65 = true;
    return field65;
  }

  float get_field66() const {
    return field66;
  }

  float& set_field66(float field66_) {
    field66 = field66_;
    __isset.field66 = true;
    return field66;
  }
  const  ::cpp2::Struct3& get_field67() const&;
   ::cpp2::Struct3 get_field67() &&;

  template <typename T_Struct19_field67_struct_setter>
   ::cpp2::Struct3& set_field67(T_Struct19_field67_struct_setter&& field67_) {
    field67 = std::forward<T_Struct19_field67_struct_setter>(field67_);
    __isset.field67 = true;
    return field67;
  }

  int64_t get_field68() const {
    return field68;
  }

  int64_t& set_field68(int64_t field68_) {
    field68 = field68_;
    __isset.field68 = true;
    return field68;
  }

  int16_t get_field69() const {
    return field69;
  }

  int16_t& set_field69(int16_t field69_) {
    field69 = field69_;
    __isset.field69 = true;
    return field69;
  }

  double get_field70() const {
    return field70;
  }

  double& set_field70(double field70_) {
    field70 = field70_;
    __isset.field70 = true;
    return field70;
  }
  const  ::cpp2::Struct8& get_field71() const&;
   ::cpp2::Struct8 get_field71() &&;

  template <typename T_Struct19_field71_struct_setter>
   ::cpp2::Struct8& set_field71(T_Struct19_field71_struct_setter&& field71_) {
    field71 = std::forward<T_Struct19_field71_struct_setter>(field71_);
    __isset.field71 = true;
    return field71;
  }

  int32_t get_field72() const {
    return field72;
  }

  int32_t& set_field72(int32_t field72_) {
    field72 = field72_;
    __isset.field72 = true;
    return field72;
  }
  const std::set<std::string>& get_field73() const&;
  std::set<std::string> get_field73() &&;

  template <typename T_Struct19_field73_struct_setter>
  std::set<std::string>& set_field73(T_Struct19_field73_struct_setter&& field73_) {
    field73 = std::forward<T_Struct19_field73_struct_setter>(field73_);
    __isset.field73 = true;
    return field73;
  }
  const std::set<std::string>& get_field74() const&;
  std::set<std::string> get_field74() &&;

  template <typename T_Struct19_field74_struct_setter>
  std::set<std::string>& set_field74(T_Struct19_field74_struct_setter&& field74_) {
    field74 = std::forward<T_Struct19_field74_struct_setter>(field74_);
    __isset.field74 = true;
    return field74;
  }
  const std::set<float>& get_field75() const&;
  std::set<float> get_field75() &&;

  template <typename T_Struct19_field75_struct_setter>
  std::set<float>& set_field75(T_Struct19_field75_struct_setter&& field75_) {
    field75 = std::forward<T_Struct19_field75_struct_setter>(field75_);
    __isset.field75 = true;
    return field75;
  }
  const std::map<std::vector<double>,  ::cpp2::Struct2>& get_field76() const&;
  std::map<std::vector<double>,  ::cpp2::Struct2> get_field76() &&;

  template <typename T_Struct19_field76_struct_setter>
  std::map<std::vector<double>,  ::cpp2::Struct2>& set_field76(T_Struct19_field76_struct_setter&& field76_) {
    field76 = std::forward<T_Struct19_field76_struct_setter>(field76_);
    __isset.field76 = true;
    return field76;
  }

  const std::string& get_field77() const& {
    return field77;
  }

  std::string get_field77() && {
    return std::move(field77);
  }

  template <typename T_Struct19_field77_struct_setter>
  std::string& set_field77(T_Struct19_field77_struct_setter&& field77_) {
    field77 = std::forward<T_Struct19_field77_struct_setter>(field77_);
    __isset.field77 = true;
    return field77;
  }

  int8_t get_field78() const {
    return field78;
  }

  int8_t& set_field78(int8_t field78_) {
    field78 = field78_;
    __isset.field78 = true;
    return field78;
  }
  const std::vector<std::string>& get_field79() const&;
  std::vector<std::string> get_field79() &&;

  template <typename T_Struct19_field79_struct_setter>
  std::vector<std::string>& set_field79(T_Struct19_field79_struct_setter&& field79_) {
    field79 = std::forward<T_Struct19_field79_struct_setter>(field79_);
    __isset.field79 = true;
    return field79;
  }

  const std::string& get_field80() const& {
    return field80;
  }

  std::string get_field80() && {
    return std::move(field80);
  }

  template <typename T_Struct19_field80_struct_setter>
  std::string& set_field80(T_Struct19_field80_struct_setter&& field80_) {
    field80 = std::forward<T_Struct19_field80_struct_setter>(field80_);
    __isset.field80 = true;
    return field80;
  }

  double get_field81() const {
    return field81;
  }

  double& set_field81(double field81_) {
    field81 = field81_;
    __isset.field81 = true;
    return field81;
  }

  const std::string& get_field82() const& {
    return field82;
  }

  std::string get_field82() && {
    return std::move(field82);
  }

  template <typename T_Struct19_field82_struct_setter>
  std::string& set_field82(T_Struct19_field82_struct_setter&& field82_) {
    field82 = std::forward<T_Struct19_field82_struct_setter>(field82_);
    __isset.field82 = true;
    return field82;
  }
  const  ::cpp2::Struct8& get_field83() const&;
   ::cpp2::Struct8 get_field83() &&;

  template <typename T_Struct19_field83_struct_setter>
   ::cpp2::Struct8& set_field83(T_Struct19_field83_struct_setter&& field83_) {
    field83 = std::forward<T_Struct19_field83_struct_setter>(field83_);
    __isset.field83 = true;
    return field83;
  }

  int16_t get_field84() const {
    return field84;
  }

  int16_t& set_field84(int16_t field84_) {
    field84 = field84_;
    __isset.field84 = true;
    return field84;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct19& a, Struct19& b);
extern template uint32_t Struct19::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct19::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct19::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct19::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct19::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct19::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct19::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct19::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct19>::clear( ::cpp2::Struct19* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct19>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct19>::write(Protocol* proto,  ::cpp2::Struct19 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct19>::read(Protocol* proto,  ::cpp2::Struct19* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct19>::serializedSize(Protocol const* proto,  ::cpp2::Struct19 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct19>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct19 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct20 : private apache::thrift::detail::st::ComparisonOperators<Struct20> {
 public:

  Struct20() :
      field3(0),
      field4(0),
      field5(0),
      field7(0),
      field10(0),
      field11(0),
      field14(0),
      field15(0),
      field16(0),
      field18(0),
      field19(0),
      field22(0),
      field28(0),
      field34(0),
      field35(0),
      field44(0),
      field45(0),
      field46(0),
      field47(0),
      field48(0),
      field50(0),
      field54(0),
      field55(0),
      field56(0),
      field58(0),
      field59(0),
      field63(0),
      field65(0),
      field67(0),
      field72(0),
      field82(0) {}
  // FragileConstructor for use in initialization lists only

  Struct20(apache::thrift::FragileConstructor,  ::cpp2::Struct0 field1__arg, std::set< ::cpp2::Struct13> field2__arg, float field3__arg, int8_t field4__arg, int32_t field5__arg, std::string field6__arg, int32_t field7__arg, std::vector<std::map<float, int16_t>> field8__arg,  ::cpp2::Struct7 field9__arg, bool field10__arg, int8_t field11__arg, std::set< ::cpp2::Struct6> field12__arg, std::map<std::vector<bool>, std::vector<bool>> field13__arg, bool field14__arg, bool field15__arg, int16_t field16__arg, std::set< ::cpp2::Struct3> field17__arg, int64_t field18__arg, double field19__arg, std::set<std::vector<int32_t>> field20__arg, std::map<int8_t, int8_t> field21__arg, double field22__arg, std::string field23__arg,  ::cpp2::Struct14 field24__arg, std::string field25__arg, std::set<int8_t> field26__arg,  ::cpp2::Struct9 field27__arg, int8_t field28__arg, std::map<int16_t, int64_t> field29__arg, std::set<std::set<std::vector<int8_t>>> field30__arg,  ::cpp2::Struct11 field31__arg, std::vector<std::string> field32__arg, std::map<int16_t, double> field33__arg, int32_t field34__arg, float field35__arg, std::vector<int64_t> field36__arg, std::set<bool> field37__arg, std::string field38__arg, std::vector<double> field39__arg, std::set<std::map<bool, std::set<std::string>>> field40__arg,  ::cpp2::Struct13 field41__arg, std::vector<std::string> field42__arg, std::vector<std::vector<bool>> field43__arg, int32_t field44__arg, int64_t field45__arg, double field46__arg, int64_t field47__arg, int16_t field48__arg,  ::cpp2::Struct7 field49__arg, double field50__arg,  ::cpp2::Struct0 field51__arg, std::set<std::string> field52__arg, std::string field53__arg, float field54__arg, float field55__arg, int32_t field56__arg, std::set<int64_t> field57__arg, int8_t field58__arg, int32_t field59__arg,  ::cpp2::Struct5 field60__arg,  ::cpp2::Struct3 field61__arg, std::set<int32_t> field62__arg, float field63__arg, std::vector< ::cpp2::Struct8> field64__arg, int32_t field65__arg, std::string field66__arg, double field67__arg, std::map<float, std::string> field68__arg, std::vector<std::vector<int64_t>> field69__arg,  ::cpp2::Struct3 field70__arg,  ::cpp2::Struct12 field71__arg, double field72__arg, std::string field73__arg, std::set<std::vector<float>> field74__arg, std::set<float> field75__arg, std::vector<bool> field76__arg, std::set<std::string> field77__arg,  ::cpp2::Struct8 field78__arg, std::map<std::vector<int16_t>,  ::cpp2::Struct6> field79__arg, std::set<std::string> field80__arg, std::set<double> field81__arg, int64_t field82__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct20(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct20(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }

  Struct20(Struct20&&) = default;

  Struct20(const Struct20&) = default;

  Struct20& operator=(Struct20&&) = default;

  Struct20& operator=(const Struct20&) = default;
  void __clear();

  virtual ~Struct20() {}

   ::cpp2::Struct0 field1;
  std::set< ::cpp2::Struct13> field2;
  float field3;
  int8_t field4;
  int32_t field5;
  std::string field6;
  int32_t field7;
  std::vector<std::map<float, int16_t>> field8;
   ::cpp2::Struct7 field9;
  bool field10;
  int8_t field11;
  std::set< ::cpp2::Struct6> field12;
  std::map<std::vector<bool>, std::vector<bool>> field13;
  bool field14;
  bool field15;
  int16_t field16;
  std::set< ::cpp2::Struct3> field17;
  int64_t field18;
  double field19;
  std::set<std::vector<int32_t>> field20;
  std::map<int8_t, int8_t> field21;
  double field22;
  std::string field23;
   ::cpp2::Struct14 field24;
  std::string field25;
  std::set<int8_t> field26;
   ::cpp2::Struct9 field27;
  int8_t field28;
  std::map<int16_t, int64_t> field29;
  std::set<std::set<std::vector<int8_t>>> field30;
   ::cpp2::Struct11 field31;
  std::vector<std::string> field32;
  std::map<int16_t, double> field33;
  int32_t field34;
  float field35;
  std::vector<int64_t> field36;
  std::set<bool> field37;
  std::string field38;
  std::vector<double> field39;
  std::set<std::map<bool, std::set<std::string>>> field40;
   ::cpp2::Struct13 field41;
  std::vector<std::string> field42;
  std::vector<std::vector<bool>> field43;
  int32_t field44;
  int64_t field45;
  double field46;
  int64_t field47;
  int16_t field48;
   ::cpp2::Struct7 field49;
  double field50;
   ::cpp2::Struct0 field51;
  std::set<std::string> field52;
  std::string field53;
  float field54;
  float field55;
  int32_t field56;
  std::set<int64_t> field57;
  int8_t field58;
  int32_t field59;
   ::cpp2::Struct5 field60;
   ::cpp2::Struct3 field61;
  std::set<int32_t> field62;
  float field63;
  std::vector< ::cpp2::Struct8> field64;
  int32_t field65;
  std::string field66;
  double field67;
  std::map<float, std::string> field68;
  std::vector<std::vector<int64_t>> field69;
   ::cpp2::Struct3 field70;
   ::cpp2::Struct12 field71;
  double field72;
  std::string field73;
  std::set<std::vector<float>> field74;
  std::set<float> field75;
  std::vector<bool> field76;
  std::set<std::string> field77;
   ::cpp2::Struct8 field78;
  std::map<std::vector<int16_t>,  ::cpp2::Struct6> field79;
  std::set<std::string> field80;
  std::set<double> field81;
  int64_t field82;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
  } __isset;
  bool operator==(const Struct20& rhs) const;

  bool operator < (const Struct20& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    (void)rhs;
    return false;
  }
  const  ::cpp2::Struct0& get_field1() const&;
   ::cpp2::Struct0 get_field1() &&;

  template <typename T_Struct20_field1_struct_setter>
   ::cpp2::Struct0& set_field1(T_Struct20_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct20_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const std::set< ::cpp2::Struct13>& get_field2() const&;
  std::set< ::cpp2::Struct13> get_field2() &&;

  template <typename T_Struct20_field2_struct_setter>
  std::set< ::cpp2::Struct13>& set_field2(T_Struct20_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct20_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  float get_field3() const {
    return field3;
  }

  float& set_field3(float field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }

  int8_t get_field4() const {
    return field4;
  }

  int8_t& set_field4(int8_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }

  int32_t get_field5() const {
    return field5;
  }

  int32_t& set_field5(int32_t field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }

  const std::string& get_field6() const& {
    return field6;
  }

  std::string get_field6() && {
    return std::move(field6);
  }

  template <typename T_Struct20_field6_struct_setter>
  std::string& set_field6(T_Struct20_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct20_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }

  int32_t get_field7() const {
    return field7;
  }

  int32_t& set_field7(int32_t field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }
  const std::vector<std::map<float, int16_t>>& get_field8() const&;
  std::vector<std::map<float, int16_t>> get_field8() &&;

  template <typename T_Struct20_field8_struct_setter>
  std::vector<std::map<float, int16_t>>& set_field8(T_Struct20_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct20_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }
  const  ::cpp2::Struct7& get_field9() const&;
   ::cpp2::Struct7 get_field9() &&;

  template <typename T_Struct20_field9_struct_setter>
   ::cpp2::Struct7& set_field9(T_Struct20_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct20_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }

  bool get_field10() const {
    return field10;
  }

  bool& set_field10(bool field10_) {
    field10 = field10_;
    __isset.field10 = true;
    return field10;
  }

  int8_t get_field11() const {
    return field11;
  }

  int8_t& set_field11(int8_t field11_) {
    field11 = field11_;
    __isset.field11 = true;
    return field11;
  }
  const std::set< ::cpp2::Struct6>& get_field12() const&;
  std::set< ::cpp2::Struct6> get_field12() &&;

  template <typename T_Struct20_field12_struct_setter>
  std::set< ::cpp2::Struct6>& set_field12(T_Struct20_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct20_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }
  const std::map<std::vector<bool>, std::vector<bool>>& get_field13() const&;
  std::map<std::vector<bool>, std::vector<bool>> get_field13() &&;

  template <typename T_Struct20_field13_struct_setter>
  std::map<std::vector<bool>, std::vector<bool>>& set_field13(T_Struct20_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct20_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }

  bool get_field14() const {
    return field14;
  }

  bool& set_field14(bool field14_) {
    field14 = field14_;
    __isset.field14 = true;
    return field14;
  }

  bool get_field15() const {
    return field15;
  }

  bool& set_field15(bool field15_) {
    field15 = field15_;
    __isset.field15 = true;
    return field15;
  }

  int16_t get_field16() const {
    return field16;
  }

  int16_t& set_field16(int16_t field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }
  const std::set< ::cpp2::Struct3>& get_field17() const&;
  std::set< ::cpp2::Struct3> get_field17() &&;

  template <typename T_Struct20_field17_struct_setter>
  std::set< ::cpp2::Struct3>& set_field17(T_Struct20_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct20_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }

  int64_t get_field18() const {
    return field18;
  }

  int64_t& set_field18(int64_t field18_) {
    field18 = field18_;
    __isset.field18 = true;
    return field18;
  }

  double get_field19() const {
    return field19;
  }

  double& set_field19(double field19_) {
    field19 = field19_;
    __isset.field19 = true;
    return field19;
  }
  const std::set<std::vector<int32_t>>& get_field20() const&;
  std::set<std::vector<int32_t>> get_field20() &&;

  template <typename T_Struct20_field20_struct_setter>
  std::set<std::vector<int32_t>>& set_field20(T_Struct20_field20_struct_setter&& field20_) {
    field20 = std::forward<T_Struct20_field20_struct_setter>(field20_);
    __isset.field20 = true;
    return field20;
  }
  const std::map<int8_t, int8_t>& get_field21() const&;
  std::map<int8_t, int8_t> get_field21() &&;

  template <typename T_Struct20_field21_struct_setter>
  std::map<int8_t, int8_t>& set_field21(T_Struct20_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct20_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }

  double get_field22() const {
    return field22;
  }

  double& set_field22(double field22_) {
    field22 = field22_;
    __isset.field22 = true;
    return field22;
  }

  const std::string& get_field23() const& {
    return field23;
  }

  std::string get_field23() && {
    return std::move(field23);
  }

  template <typename T_Struct20_field23_struct_setter>
  std::string& set_field23(T_Struct20_field23_struct_setter&& field23_) {
    field23 = std::forward<T_Struct20_field23_struct_setter>(field23_);
    __isset.field23 = true;
    return field23;
  }
  const  ::cpp2::Struct14& get_field24() const&;
   ::cpp2::Struct14 get_field24() &&;

  template <typename T_Struct20_field24_struct_setter>
   ::cpp2::Struct14& set_field24(T_Struct20_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct20_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }

  const std::string& get_field25() const& {
    return field25;
  }

  std::string get_field25() && {
    return std::move(field25);
  }

  template <typename T_Struct20_field25_struct_setter>
  std::string& set_field25(T_Struct20_field25_struct_setter&& field25_) {
    field25 = std::forward<T_Struct20_field25_struct_setter>(field25_);
    __isset.field25 = true;
    return field25;
  }
  const std::set<int8_t>& get_field26() const&;
  std::set<int8_t> get_field26() &&;

  template <typename T_Struct20_field26_struct_setter>
  std::set<int8_t>& set_field26(T_Struct20_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct20_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }
  const  ::cpp2::Struct9& get_field27() const&;
   ::cpp2::Struct9 get_field27() &&;

  template <typename T_Struct20_field27_struct_setter>
   ::cpp2::Struct9& set_field27(T_Struct20_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct20_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }

  int8_t get_field28() const {
    return field28;
  }

  int8_t& set_field28(int8_t field28_) {
    field28 = field28_;
    __isset.field28 = true;
    return field28;
  }
  const std::map<int16_t, int64_t>& get_field29() const&;
  std::map<int16_t, int64_t> get_field29() &&;

  template <typename T_Struct20_field29_struct_setter>
  std::map<int16_t, int64_t>& set_field29(T_Struct20_field29_struct_setter&& field29_) {
    field29 = std::forward<T_Struct20_field29_struct_setter>(field29_);
    __isset.field29 = true;
    return field29;
  }
  const std::set<std::set<std::vector<int8_t>>>& get_field30() const&;
  std::set<std::set<std::vector<int8_t>>> get_field30() &&;

  template <typename T_Struct20_field30_struct_setter>
  std::set<std::set<std::vector<int8_t>>>& set_field30(T_Struct20_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct20_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }
  const  ::cpp2::Struct11& get_field31() const&;
   ::cpp2::Struct11 get_field31() &&;

  template <typename T_Struct20_field31_struct_setter>
   ::cpp2::Struct11& set_field31(T_Struct20_field31_struct_setter&& field31_) {
    field31 = std::forward<T_Struct20_field31_struct_setter>(field31_);
    __isset.field31 = true;
    return field31;
  }
  const std::vector<std::string>& get_field32() const&;
  std::vector<std::string> get_field32() &&;

  template <typename T_Struct20_field32_struct_setter>
  std::vector<std::string>& set_field32(T_Struct20_field32_struct_setter&& field32_) {
    field32 = std::forward<T_Struct20_field32_struct_setter>(field32_);
    __isset.field32 = true;
    return field32;
  }
  const std::map<int16_t, double>& get_field33() const&;
  std::map<int16_t, double> get_field33() &&;

  template <typename T_Struct20_field33_struct_setter>
  std::map<int16_t, double>& set_field33(T_Struct20_field33_struct_setter&& field33_) {
    field33 = std::forward<T_Struct20_field33_struct_setter>(field33_);
    __isset.field33 = true;
    return field33;
  }

  int32_t get_field34() const {
    return field34;
  }

  int32_t& set_field34(int32_t field34_) {
    field34 = field34_;
    __isset.field34 = true;
    return field34;
  }

  float get_field35() const {
    return field35;
  }

  float& set_field35(float field35_) {
    field35 = field35_;
    __isset.field35 = true;
    return field35;
  }
  const std::vector<int64_t>& get_field36() const&;
  std::vector<int64_t> get_field36() &&;

  template <typename T_Struct20_field36_struct_setter>
  std::vector<int64_t>& set_field36(T_Struct20_field36_struct_setter&& field36_) {
    field36 = std::forward<T_Struct20_field36_struct_setter>(field36_);
    __isset.field36 = true;
    return field36;
  }
  const std::set<bool>& get_field37() const&;
  std::set<bool> get_field37() &&;

  template <typename T_Struct20_field37_struct_setter>
  std::set<bool>& set_field37(T_Struct20_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct20_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }

  const std::string& get_field38() const& {
    return field38;
  }

  std::string get_field38() && {
    return std::move(field38);
  }

  template <typename T_Struct20_field38_struct_setter>
  std::string& set_field38(T_Struct20_field38_struct_setter&& field38_) {
    field38 = std::forward<T_Struct20_field38_struct_setter>(field38_);
    __isset.field38 = true;
    return field38;
  }
  const std::vector<double>& get_field39() const&;
  std::vector<double> get_field39() &&;

  template <typename T_Struct20_field39_struct_setter>
  std::vector<double>& set_field39(T_Struct20_field39_struct_setter&& field39_) {
    field39 = std::forward<T_Struct20_field39_struct_setter>(field39_);
    __isset.field39 = true;
    return field39;
  }
  const std::set<std::map<bool, std::set<std::string>>>& get_field40() const&;
  std::set<std::map<bool, std::set<std::string>>> get_field40() &&;

  template <typename T_Struct20_field40_struct_setter>
  std::set<std::map<bool, std::set<std::string>>>& set_field40(T_Struct20_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct20_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }
  const  ::cpp2::Struct13& get_field41() const&;
   ::cpp2::Struct13 get_field41() &&;

  template <typename T_Struct20_field41_struct_setter>
   ::cpp2::Struct13& set_field41(T_Struct20_field41_struct_setter&& field41_) {
    field41 = std::forward<T_Struct20_field41_struct_setter>(field41_);
    __isset.field41 = true;
    return field41;
  }
  const std::vector<std::string>& get_field42() const&;
  std::vector<std::string> get_field42() &&;

  template <typename T_Struct20_field42_struct_setter>
  std::vector<std::string>& set_field42(T_Struct20_field42_struct_setter&& field42_) {
    field42 = std::forward<T_Struct20_field42_struct_setter>(field42_);
    __isset.field42 = true;
    return field42;
  }
  const std::vector<std::vector<bool>>& get_field43() const&;
  std::vector<std::vector<bool>> get_field43() &&;

  template <typename T_Struct20_field43_struct_setter>
  std::vector<std::vector<bool>>& set_field43(T_Struct20_field43_struct_setter&& field43_) {
    field43 = std::forward<T_Struct20_field43_struct_setter>(field43_);
    __isset.field43 = true;
    return field43;
  }

  int32_t get_field44() const {
    return field44;
  }

  int32_t& set_field44(int32_t field44_) {
    field44 = field44_;
    __isset.field44 = true;
    return field44;
  }

  int64_t get_field45() const {
    return field45;
  }

  int64_t& set_field45(int64_t field45_) {
    field45 = field45_;
    __isset.field45 = true;
    return field45;
  }

  double get_field46() const {
    return field46;
  }

  double& set_field46(double field46_) {
    field46 = field46_;
    __isset.field46 = true;
    return field46;
  }

  int64_t get_field47() const {
    return field47;
  }

  int64_t& set_field47(int64_t field47_) {
    field47 = field47_;
    __isset.field47 = true;
    return field47;
  }

  int16_t get_field48() const {
    return field48;
  }

  int16_t& set_field48(int16_t field48_) {
    field48 = field48_;
    __isset.field48 = true;
    return field48;
  }
  const  ::cpp2::Struct7& get_field49() const&;
   ::cpp2::Struct7 get_field49() &&;

  template <typename T_Struct20_field49_struct_setter>
   ::cpp2::Struct7& set_field49(T_Struct20_field49_struct_setter&& field49_) {
    field49 = std::forward<T_Struct20_field49_struct_setter>(field49_);
    __isset.field49 = true;
    return field49;
  }

  double get_field50() const {
    return field50;
  }

  double& set_field50(double field50_) {
    field50 = field50_;
    __isset.field50 = true;
    return field50;
  }
  const  ::cpp2::Struct0& get_field51() const&;
   ::cpp2::Struct0 get_field51() &&;

  template <typename T_Struct20_field51_struct_setter>
   ::cpp2::Struct0& set_field51(T_Struct20_field51_struct_setter&& field51_) {
    field51 = std::forward<T_Struct20_field51_struct_setter>(field51_);
    __isset.field51 = true;
    return field51;
  }
  const std::set<std::string>& get_field52() const&;
  std::set<std::string> get_field52() &&;

  template <typename T_Struct20_field52_struct_setter>
  std::set<std::string>& set_field52(T_Struct20_field52_struct_setter&& field52_) {
    field52 = std::forward<T_Struct20_field52_struct_setter>(field52_);
    __isset.field52 = true;
    return field52;
  }

  const std::string& get_field53() const& {
    return field53;
  }

  std::string get_field53() && {
    return std::move(field53);
  }

  template <typename T_Struct20_field53_struct_setter>
  std::string& set_field53(T_Struct20_field53_struct_setter&& field53_) {
    field53 = std::forward<T_Struct20_field53_struct_setter>(field53_);
    __isset.field53 = true;
    return field53;
  }

  float get_field54() const {
    return field54;
  }

  float& set_field54(float field54_) {
    field54 = field54_;
    __isset.field54 = true;
    return field54;
  }

  float get_field55() const {
    return field55;
  }

  float& set_field55(float field55_) {
    field55 = field55_;
    __isset.field55 = true;
    return field55;
  }

  int32_t get_field56() const {
    return field56;
  }

  int32_t& set_field56(int32_t field56_) {
    field56 = field56_;
    __isset.field56 = true;
    return field56;
  }
  const std::set<int64_t>& get_field57() const&;
  std::set<int64_t> get_field57() &&;

  template <typename T_Struct20_field57_struct_setter>
  std::set<int64_t>& set_field57(T_Struct20_field57_struct_setter&& field57_) {
    field57 = std::forward<T_Struct20_field57_struct_setter>(field57_);
    __isset.field57 = true;
    return field57;
  }

  int8_t get_field58() const {
    return field58;
  }

  int8_t& set_field58(int8_t field58_) {
    field58 = field58_;
    __isset.field58 = true;
    return field58;
  }

  int32_t get_field59() const {
    return field59;
  }

  int32_t& set_field59(int32_t field59_) {
    field59 = field59_;
    __isset.field59 = true;
    return field59;
  }
  const  ::cpp2::Struct5& get_field60() const&;
   ::cpp2::Struct5 get_field60() &&;

  template <typename T_Struct20_field60_struct_setter>
   ::cpp2::Struct5& set_field60(T_Struct20_field60_struct_setter&& field60_) {
    field60 = std::forward<T_Struct20_field60_struct_setter>(field60_);
    __isset.field60 = true;
    return field60;
  }
  const  ::cpp2::Struct3& get_field61() const&;
   ::cpp2::Struct3 get_field61() &&;

  template <typename T_Struct20_field61_struct_setter>
   ::cpp2::Struct3& set_field61(T_Struct20_field61_struct_setter&& field61_) {
    field61 = std::forward<T_Struct20_field61_struct_setter>(field61_);
    __isset.field61 = true;
    return field61;
  }
  const std::set<int32_t>& get_field62() const&;
  std::set<int32_t> get_field62() &&;

  template <typename T_Struct20_field62_struct_setter>
  std::set<int32_t>& set_field62(T_Struct20_field62_struct_setter&& field62_) {
    field62 = std::forward<T_Struct20_field62_struct_setter>(field62_);
    __isset.field62 = true;
    return field62;
  }

  float get_field63() const {
    return field63;
  }

  float& set_field63(float field63_) {
    field63 = field63_;
    __isset.field63 = true;
    return field63;
  }
  const std::vector< ::cpp2::Struct8>& get_field64() const&;
  std::vector< ::cpp2::Struct8> get_field64() &&;

  template <typename T_Struct20_field64_struct_setter>
  std::vector< ::cpp2::Struct8>& set_field64(T_Struct20_field64_struct_setter&& field64_) {
    field64 = std::forward<T_Struct20_field64_struct_setter>(field64_);
    __isset.field64 = true;
    return field64;
  }

  int32_t get_field65() const {
    return field65;
  }

  int32_t& set_field65(int32_t field65_) {
    field65 = field65_;
    __isset.field65 = true;
    return field65;
  }

  const std::string& get_field66() const& {
    return field66;
  }

  std::string get_field66() && {
    return std::move(field66);
  }

  template <typename T_Struct20_field66_struct_setter>
  std::string& set_field66(T_Struct20_field66_struct_setter&& field66_) {
    field66 = std::forward<T_Struct20_field66_struct_setter>(field66_);
    __isset.field66 = true;
    return field66;
  }

  double get_field67() const {
    return field67;
  }

  double& set_field67(double field67_) {
    field67 = field67_;
    __isset.field67 = true;
    return field67;
  }
  const std::map<float, std::string>& get_field68() const&;
  std::map<float, std::string> get_field68() &&;

  template <typename T_Struct20_field68_struct_setter>
  std::map<float, std::string>& set_field68(T_Struct20_field68_struct_setter&& field68_) {
    field68 = std::forward<T_Struct20_field68_struct_setter>(field68_);
    __isset.field68 = true;
    return field68;
  }
  const std::vector<std::vector<int64_t>>& get_field69() const&;
  std::vector<std::vector<int64_t>> get_field69() &&;

  template <typename T_Struct20_field69_struct_setter>
  std::vector<std::vector<int64_t>>& set_field69(T_Struct20_field69_struct_setter&& field69_) {
    field69 = std::forward<T_Struct20_field69_struct_setter>(field69_);
    __isset.field69 = true;
    return field69;
  }
  const  ::cpp2::Struct3& get_field70() const&;
   ::cpp2::Struct3 get_field70() &&;

  template <typename T_Struct20_field70_struct_setter>
   ::cpp2::Struct3& set_field70(T_Struct20_field70_struct_setter&& field70_) {
    field70 = std::forward<T_Struct20_field70_struct_setter>(field70_);
    __isset.field70 = true;
    return field70;
  }
  const  ::cpp2::Struct12& get_field71() const&;
   ::cpp2::Struct12 get_field71() &&;

  template <typename T_Struct20_field71_struct_setter>
   ::cpp2::Struct12& set_field71(T_Struct20_field71_struct_setter&& field71_) {
    field71 = std::forward<T_Struct20_field71_struct_setter>(field71_);
    __isset.field71 = true;
    return field71;
  }

  double get_field72() const {
    return field72;
  }

  double& set_field72(double field72_) {
    field72 = field72_;
    __isset.field72 = true;
    return field72;
  }

  const std::string& get_field73() const& {
    return field73;
  }

  std::string get_field73() && {
    return std::move(field73);
  }

  template <typename T_Struct20_field73_struct_setter>
  std::string& set_field73(T_Struct20_field73_struct_setter&& field73_) {
    field73 = std::forward<T_Struct20_field73_struct_setter>(field73_);
    __isset.field73 = true;
    return field73;
  }
  const std::set<std::vector<float>>& get_field74() const&;
  std::set<std::vector<float>> get_field74() &&;

  template <typename T_Struct20_field74_struct_setter>
  std::set<std::vector<float>>& set_field74(T_Struct20_field74_struct_setter&& field74_) {
    field74 = std::forward<T_Struct20_field74_struct_setter>(field74_);
    __isset.field74 = true;
    return field74;
  }
  const std::set<float>& get_field75() const&;
  std::set<float> get_field75() &&;

  template <typename T_Struct20_field75_struct_setter>
  std::set<float>& set_field75(T_Struct20_field75_struct_setter&& field75_) {
    field75 = std::forward<T_Struct20_field75_struct_setter>(field75_);
    __isset.field75 = true;
    return field75;
  }
  const std::vector<bool>& get_field76() const&;
  std::vector<bool> get_field76() &&;

  template <typename T_Struct20_field76_struct_setter>
  std::vector<bool>& set_field76(T_Struct20_field76_struct_setter&& field76_) {
    field76 = std::forward<T_Struct20_field76_struct_setter>(field76_);
    __isset.field76 = true;
    return field76;
  }
  const std::set<std::string>& get_field77() const&;
  std::set<std::string> get_field77() &&;

  template <typename T_Struct20_field77_struct_setter>
  std::set<std::string>& set_field77(T_Struct20_field77_struct_setter&& field77_) {
    field77 = std::forward<T_Struct20_field77_struct_setter>(field77_);
    __isset.field77 = true;
    return field77;
  }
  const  ::cpp2::Struct8& get_field78() const&;
   ::cpp2::Struct8 get_field78() &&;

  template <typename T_Struct20_field78_struct_setter>
   ::cpp2::Struct8& set_field78(T_Struct20_field78_struct_setter&& field78_) {
    field78 = std::forward<T_Struct20_field78_struct_setter>(field78_);
    __isset.field78 = true;
    return field78;
  }
  const std::map<std::vector<int16_t>,  ::cpp2::Struct6>& get_field79() const&;
  std::map<std::vector<int16_t>,  ::cpp2::Struct6> get_field79() &&;

  template <typename T_Struct20_field79_struct_setter>
  std::map<std::vector<int16_t>,  ::cpp2::Struct6>& set_field79(T_Struct20_field79_struct_setter&& field79_) {
    field79 = std::forward<T_Struct20_field79_struct_setter>(field79_);
    __isset.field79 = true;
    return field79;
  }
  const std::set<std::string>& get_field80() const&;
  std::set<std::string> get_field80() &&;

  template <typename T_Struct20_field80_struct_setter>
  std::set<std::string>& set_field80(T_Struct20_field80_struct_setter&& field80_) {
    field80 = std::forward<T_Struct20_field80_struct_setter>(field80_);
    __isset.field80 = true;
    return field80;
  }
  const std::set<double>& get_field81() const&;
  std::set<double> get_field81() &&;

  template <typename T_Struct20_field81_struct_setter>
  std::set<double>& set_field81(T_Struct20_field81_struct_setter&& field81_) {
    field81 = std::forward<T_Struct20_field81_struct_setter>(field81_);
    __isset.field81 = true;
    return field81;
  }

  int64_t get_field82() const {
    return field82;
  }

  int64_t& set_field82(int64_t field82_) {
    field82 = field82_;
    __isset.field82 = true;
    return field82;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct20& a, Struct20& b);
extern template uint32_t Struct20::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct20::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct20::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct20::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct20::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct20::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct20::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct20::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct20>::clear( ::cpp2::Struct20* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct20>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct20>::write(Protocol* proto,  ::cpp2::Struct20 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct20>::read(Protocol* proto,  ::cpp2::Struct20* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct20>::serializedSize(Protocol const* proto,  ::cpp2::Struct20 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct20>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct20 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct21 : private apache::thrift::detail::st::ComparisonOperators<Struct21> {
 public:

  Struct21() :
      field4(0),
      field5(0),
      field6(0),
      field8(0),
      field10(0),
      field12(0),
      field14(0),
      field15(0),
      field16(0),
      field18(0),
      field19(0),
      field20(0),
      field25(0),
      field28(0),
      field29(0),
      field31(0),
      field37(0),
      field40(0),
      field42(0),
      field48(0),
      field49(0),
      field50(0),
      field52(0),
      field58(0),
      field59(0),
      field62(0),
      field63(0),
      field64(0),
      field65(0),
      field67(0),
      field69(0),
      field71(0),
      field80(0),
      field81(0),
      field82(0),
      field88(0),
      field90(0),
      field91(0),
      field93(0),
      field94(0),
      field98(0),
      field101(0),
      field104(0),
      field109(0),
      field111(0),
      field114(0),
      field115(0),
      field116(0),
      field118(0),
      field120(0),
      field122(0),
      field125(0),
      field126(0),
      field127(0),
      field132(0),
      field133(0),
      field135(0),
      field140(0),
      field142(0),
      field143(0),
      field146(0),
      field149(0),
      field155(0),
      field156(0),
      field157(0),
      field159(0),
      field160(0),
      field161(0),
      field169(0) {}
  // FragileConstructor for use in initialization lists only

  Struct21(apache::thrift::FragileConstructor, std::vector<int8_t> field1__arg,  ::cpp2::Struct1 field2__arg, std::string field3__arg, int8_t field4__arg, float field5__arg, double field6__arg, std::map<int16_t, std::vector<float>> field7__arg, float field8__arg,  ::cpp2::Struct12 field9__arg, float field10__arg, std::string field11__arg, int8_t field12__arg, std::vector<bool> field13__arg, double field14__arg, int32_t field15__arg, int16_t field16__arg,  ::cpp2::Struct2 field17__arg, double field18__arg, int16_t field19__arg, int16_t field20__arg, std::map< ::cpp2::Struct10, std::vector<double>> field21__arg, std::set<int32_t> field22__arg, std::vector<bool> field23__arg, std::set<float> field24__arg, float field25__arg,  ::cpp2::Struct1 field26__arg, std::map<std::string, bool> field27__arg, int64_t field28__arg, float field29__arg, std::vector<int16_t> field30__arg, int8_t field31__arg, std::vector<int32_t> field32__arg, std::set<std::vector<int16_t>> field33__arg,  ::cpp2::Struct16 field34__arg, std::map<int16_t, std::string> field35__arg, std::map<bool, std::vector< ::cpp2::Struct5>> field36__arg, int16_t field37__arg, std::map<float, int16_t> field38__arg, std::set<int64_t> field39__arg, bool field40__arg, std::string field41__arg, int16_t field42__arg,  ::cpp2::Struct9 field43__arg, std::set<std::string> field44__arg, std::map<int32_t,  ::cpp2::Struct3> field45__arg, std::set<int64_t> field46__arg,  ::cpp2::Struct2 field47__arg, int32_t field48__arg, int8_t field49__arg, bool field50__arg, std::vector< ::cpp2::Struct10> field51__arg, float field52__arg, std::set<std::string> field53__arg, std::string field54__arg,  ::cpp2::Struct11 field55__arg, std::vector<bool> field56__arg, std::map<std::string, std::vector<std::string>> field57__arg, int64_t field58__arg, int8_t field59__arg,  ::cpp2::Struct11 field60__arg, std::set<int64_t> field61__arg, int16_t field62__arg, bool field63__arg, bool field64__arg, int32_t field65__arg, std::string field66__arg, int32_t field67__arg, std::set<int8_t> field68__arg, int32_t field69__arg, std::set<std::set<float>> field70__arg, int16_t field71__arg, std::vector<std::string> field72__arg, std::map< ::cpp2::Struct1, std::vector<int16_t>> field73__arg,  ::cpp2::Struct3 field74__arg, std::string field75__arg, std::vector<std::vector<double>> field76__arg, std::vector<bool> field77__arg, std::set< ::cpp2::Struct14> field78__arg, std::string field79__arg, int32_t field80__arg, int16_t field81__arg, bool field82__arg, std::map< ::cpp2::Struct2, double> field83__arg, std::vector<std::map< ::cpp2::Struct2, bool>> field84__arg, std::map<bool, std::vector<std::string>> field85__arg,  ::cpp2::Struct6 field86__arg, std::string field87__arg, float field88__arg, std::vector<bool> field89__arg, int64_t field90__arg, bool field91__arg, std::map<bool, std::vector<double>> field92__arg, float field93__arg, int8_t field94__arg, std::string field95__arg,  ::cpp2::Struct4 field96__arg, std::string field97__arg, int16_t field98__arg, std::set<std::string> field99__arg, std::map<double, int64_t> field100__arg, int16_t field101__arg, std::set<std::string> field102__arg, std::string field103__arg, int16_t field104__arg, std::map<int8_t, std::string> field105__arg, std::string field106__arg, std::set<std::string> field107__arg,  ::cpp2::Struct8 field108__arg, int16_t field109__arg, std::string field110__arg, int32_t field111__arg, std::set<double> field112__arg, std::vector<int16_t> field113__arg, int16_t field114__arg, int8_t field115__arg, int64_t field116__arg, std::map<int32_t, int16_t> field117__arg, int64_t field118__arg, std::vector<double> field119__arg, int64_t field120__arg, std::string field121__arg, int64_t field122__arg, std::map<std::string, std::map<int8_t, double>> field123__arg, std::string field124__arg, bool field125__arg, int8_t field126__arg, int16_t field127__arg, std::string field128__arg, std::map<std::string, std::set<int32_t>> field129__arg, std::map<int64_t, std::string> field130__arg, std::map< ::cpp2::Struct18, std::set<int8_t>> field131__arg, int8_t field132__arg, double field133__arg, std::map<int64_t, int8_t> field134__arg, int32_t field135__arg, std::map<int32_t, std::string> field136__arg, std::vector<std::string> field137__arg, std::map<std::string, int16_t> field138__arg,  ::cpp2::Struct5 field139__arg, int32_t field140__arg, std::string field141__arg, int8_t field142__arg, int32_t field143__arg, std::set<double> field144__arg, std::vector<int8_t> field145__arg, int64_t field146__arg, std::set<double> field147__arg, std::string field148__arg, int16_t field149__arg, std::set<std::map<int16_t, float>> field150__arg,  ::cpp2::Struct14 field151__arg,  ::cpp2::Struct3 field152__arg, std::set<std::string> field153__arg, std::vector<int8_t> field154__arg, int8_t field155__arg, int8_t field156__arg, float field157__arg,  ::cpp2::Struct2 field158__arg, int32_t field159__arg, double field160__arg, bool field161__arg, std::vector<std::string> field162__arg, std::map< ::cpp2::Struct7, std::map<int64_t,  ::cpp2::Struct4>> field163__arg, std::set<double> field164__arg, std::vector<int64_t> field165__arg, std::set<int8_t> field166__arg,  ::cpp2::Struct4 field167__arg, std::string field168__arg, int16_t field169__arg, std::string field170__arg, std::map<int16_t, int16_t> field171__arg, std::set<int32_t> field172__arg, std::set< ::cpp2::Struct5> field173__arg, std::string field174__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)),
      field97(std::move(field97__arg)),
      field98(std::move(field98__arg)),
      field99(std::move(field99__arg)),
      field100(std::move(field100__arg)),
      field101(std::move(field101__arg)),
      field102(std::move(field102__arg)),
      field103(std::move(field103__arg)),
      field104(std::move(field104__arg)),
      field105(std::move(field105__arg)),
      field106(std::move(field106__arg)),
      field107(std::move(field107__arg)),
      field108(std::move(field108__arg)),
      field109(std::move(field109__arg)),
      field110(std::move(field110__arg)),
      field111(std::move(field111__arg)),
      field112(std::move(field112__arg)),
      field113(std::move(field113__arg)),
      field114(std::move(field114__arg)),
      field115(std::move(field115__arg)),
      field116(std::move(field116__arg)),
      field117(std::move(field117__arg)),
      field118(std::move(field118__arg)),
      field119(std::move(field119__arg)),
      field120(std::move(field120__arg)),
      field121(std::move(field121__arg)),
      field122(std::move(field122__arg)),
      field123(std::move(field123__arg)),
      field124(std::move(field124__arg)),
      field125(std::move(field125__arg)),
      field126(std::move(field126__arg)),
      field127(std::move(field127__arg)),
      field128(std::move(field128__arg)),
      field129(std::move(field129__arg)),
      field130(std::move(field130__arg)),
      field131(std::move(field131__arg)),
      field132(std::move(field132__arg)),
      field133(std::move(field133__arg)),
      field134(std::move(field134__arg)),
      field135(std::move(field135__arg)),
      field136(std::move(field136__arg)),
      field137(std::move(field137__arg)),
      field138(std::move(field138__arg)),
      field139(std::move(field139__arg)),
      field140(std::move(field140__arg)),
      field141(std::move(field141__arg)),
      field142(std::move(field142__arg)),
      field143(std::move(field143__arg)),
      field144(std::move(field144__arg)),
      field145(std::move(field145__arg)),
      field146(std::move(field146__arg)),
      field147(std::move(field147__arg)),
      field148(std::move(field148__arg)),
      field149(std::move(field149__arg)),
      field150(std::move(field150__arg)),
      field151(std::move(field151__arg)),
      field152(std::move(field152__arg)),
      field153(std::move(field153__arg)),
      field154(std::move(field154__arg)),
      field155(std::move(field155__arg)),
      field156(std::move(field156__arg)),
      field157(std::move(field157__arg)),
      field158(std::move(field158__arg)),
      field159(std::move(field159__arg)),
      field160(std::move(field160__arg)),
      field161(std::move(field161__arg)),
      field162(std::move(field162__arg)),
      field163(std::move(field163__arg)),
      field164(std::move(field164__arg)),
      field165(std::move(field165__arg)),
      field166(std::move(field166__arg)),
      field167(std::move(field167__arg)),
      field168(std::move(field168__arg)),
      field169(std::move(field169__arg)),
      field170(std::move(field170__arg)),
      field171(std::move(field171__arg)),
      field172(std::move(field172__arg)),
      field173(std::move(field173__arg)),
      field174(std::move(field174__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
    __isset.field97 = true;
    __isset.field98 = true;
    __isset.field99 = true;
    __isset.field100 = true;
    __isset.field101 = true;
    __isset.field102 = true;
    __isset.field103 = true;
    __isset.field104 = true;
    __isset.field105 = true;
    __isset.field106 = true;
    __isset.field107 = true;
    __isset.field108 = true;
    __isset.field109 = true;
    __isset.field110 = true;
    __isset.field111 = true;
    __isset.field112 = true;
    __isset.field113 = true;
    __isset.field114 = true;
    __isset.field115 = true;
    __isset.field116 = true;
    __isset.field117 = true;
    __isset.field118 = true;
    __isset.field119 = true;
    __isset.field120 = true;
    __isset.field121 = true;
    __isset.field122 = true;
    __isset.field123 = true;
    __isset.field124 = true;
    __isset.field125 = true;
    __isset.field126 = true;
    __isset.field127 = true;
    __isset.field128 = true;
    __isset.field129 = true;
    __isset.field130 = true;
    __isset.field131 = true;
    __isset.field132 = true;
    __isset.field133 = true;
    __isset.field134 = true;
    __isset.field135 = true;
    __isset.field136 = true;
    __isset.field137 = true;
    __isset.field138 = true;
    __isset.field139 = true;
    __isset.field140 = true;
    __isset.field141 = true;
    __isset.field142 = true;
    __isset.field143 = true;
    __isset.field144 = true;
    __isset.field145 = true;
    __isset.field146 = true;
    __isset.field147 = true;
    __isset.field148 = true;
    __isset.field149 = true;
    __isset.field150 = true;
    __isset.field151 = true;
    __isset.field152 = true;
    __isset.field153 = true;
    __isset.field154 = true;
    __isset.field155 = true;
    __isset.field156 = true;
    __isset.field157 = true;
    __isset.field158 = true;
    __isset.field159 = true;
    __isset.field160 = true;
    __isset.field161 = true;
    __isset.field162 = true;
    __isset.field163 = true;
    __isset.field164 = true;
    __isset.field165 = true;
    __isset.field166 = true;
    __isset.field167 = true;
    __isset.field168 = true;
    __isset.field169 = true;
    __isset.field170 = true;
    __isset.field171 = true;
    __isset.field172 = true;
    __isset.field173 = true;
    __isset.field174 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<97, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field97 = arg.move();
    __isset.field97 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<98, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field98 = arg.move();
    __isset.field98 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<99, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field99 = arg.move();
    __isset.field99 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field100 = arg.move();
    __isset.field100 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field101 = arg.move();
    __isset.field101 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<102, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field102 = arg.move();
    __isset.field102 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<103, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field103 = arg.move();
    __isset.field103 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<104, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field104 = arg.move();
    __isset.field104 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<105, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field105 = arg.move();
    __isset.field105 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<106, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field106 = arg.move();
    __isset.field106 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<107, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field107 = arg.move();
    __isset.field107 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<108, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field108 = arg.move();
    __isset.field108 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<109, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field109 = arg.move();
    __isset.field109 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<110, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field110 = arg.move();
    __isset.field110 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<111, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field111 = arg.move();
    __isset.field111 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<112, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field112 = arg.move();
    __isset.field112 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<113, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field113 = arg.move();
    __isset.field113 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<114, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field114 = arg.move();
    __isset.field114 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<115, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field115 = arg.move();
    __isset.field115 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<116, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field116 = arg.move();
    __isset.field116 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<117, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field117 = arg.move();
    __isset.field117 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<118, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field118 = arg.move();
    __isset.field118 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<119, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field119 = arg.move();
    __isset.field119 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<120, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field120 = arg.move();
    __isset.field120 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<121, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field121 = arg.move();
    __isset.field121 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<122, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field122 = arg.move();
    __isset.field122 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<123, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field123 = arg.move();
    __isset.field123 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<124, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field124 = arg.move();
    __isset.field124 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<125, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field125 = arg.move();
    __isset.field125 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<126, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field126 = arg.move();
    __isset.field126 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<127, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field127 = arg.move();
    __isset.field127 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<128, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field128 = arg.move();
    __isset.field128 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<129, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field129 = arg.move();
    __isset.field129 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<130, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field130 = arg.move();
    __isset.field130 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<131, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field131 = arg.move();
    __isset.field131 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<132, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field132 = arg.move();
    __isset.field132 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<133, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field133 = arg.move();
    __isset.field133 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<134, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field134 = arg.move();
    __isset.field134 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<135, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field135 = arg.move();
    __isset.field135 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<136, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field136 = arg.move();
    __isset.field136 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<137, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field137 = arg.move();
    __isset.field137 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<138, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field138 = arg.move();
    __isset.field138 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<139, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field139 = arg.move();
    __isset.field139 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<140, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field140 = arg.move();
    __isset.field140 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<141, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field141 = arg.move();
    __isset.field141 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<142, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field142 = arg.move();
    __isset.field142 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<143, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field143 = arg.move();
    __isset.field143 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<144, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field144 = arg.move();
    __isset.field144 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<145, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field145 = arg.move();
    __isset.field145 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<146, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field146 = arg.move();
    __isset.field146 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<147, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field147 = arg.move();
    __isset.field147 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<148, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field148 = arg.move();
    __isset.field148 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<149, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field149 = arg.move();
    __isset.field149 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<150, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field150 = arg.move();
    __isset.field150 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<151, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field151 = arg.move();
    __isset.field151 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<152, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field152 = arg.move();
    __isset.field152 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<153, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field153 = arg.move();
    __isset.field153 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<154, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field154 = arg.move();
    __isset.field154 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<155, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field155 = arg.move();
    __isset.field155 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<156, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field156 = arg.move();
    __isset.field156 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<157, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field157 = arg.move();
    __isset.field157 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<158, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field158 = arg.move();
    __isset.field158 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<159, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field159 = arg.move();
    __isset.field159 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<160, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field160 = arg.move();
    __isset.field160 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<161, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field161 = arg.move();
    __isset.field161 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<162, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field162 = arg.move();
    __isset.field162 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<163, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field163 = arg.move();
    __isset.field163 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<164, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field164 = arg.move();
    __isset.field164 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<165, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field165 = arg.move();
    __isset.field165 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<166, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field166 = arg.move();
    __isset.field166 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<167, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field167 = arg.move();
    __isset.field167 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<168, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field168 = arg.move();
    __isset.field168 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<169, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field169 = arg.move();
    __isset.field169 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<170, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field170 = arg.move();
    __isset.field170 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<171, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field171 = arg.move();
    __isset.field171 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<172, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field172 = arg.move();
    __isset.field172 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<173, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field173 = arg.move();
    __isset.field173 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct21(::apache::thrift::detail::argument_wrapper<174, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct21(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field174 = arg.move();
    __isset.field174 = true;
  }

  Struct21(Struct21&&) = default;

  Struct21(const Struct21&) = default;

  Struct21& operator=(Struct21&&) = default;

  Struct21& operator=(const Struct21&) = default;
  void __clear();

  virtual ~Struct21() {}

  std::vector<int8_t> field1;
   ::cpp2::Struct1 field2;
  std::string field3;
  int8_t field4;
  float field5;
  double field6;
  std::map<int16_t, std::vector<float>> field7;
  float field8;
   ::cpp2::Struct12 field9;
  float field10;
  std::string field11;
  int8_t field12;
  std::vector<bool> field13;
  double field14;
  int32_t field15;
  int16_t field16;
   ::cpp2::Struct2 field17;
  double field18;
  int16_t field19;
  int16_t field20;
  std::map< ::cpp2::Struct10, std::vector<double>> field21;
  std::set<int32_t> field22;
  std::vector<bool> field23;
  std::set<float> field24;
  float field25;
   ::cpp2::Struct1 field26;
  std::map<std::string, bool> field27;
  int64_t field28;
  float field29;
  std::vector<int16_t> field30;
  int8_t field31;
  std::vector<int32_t> field32;
  std::set<std::vector<int16_t>> field33;
   ::cpp2::Struct16 field34;
  std::map<int16_t, std::string> field35;
  std::map<bool, std::vector< ::cpp2::Struct5>> field36;
  int16_t field37;
  std::map<float, int16_t> field38;
  std::set<int64_t> field39;
  bool field40;
  std::string field41;
  int16_t field42;
   ::cpp2::Struct9 field43;
  std::set<std::string> field44;
  std::map<int32_t,  ::cpp2::Struct3> field45;
  std::set<int64_t> field46;
   ::cpp2::Struct2 field47;
  int32_t field48;
  int8_t field49;
  bool field50;
  std::vector< ::cpp2::Struct10> field51;
  float field52;
  std::set<std::string> field53;
  std::string field54;
   ::cpp2::Struct11 field55;
  std::vector<bool> field56;
  std::map<std::string, std::vector<std::string>> field57;
  int64_t field58;
  int8_t field59;
   ::cpp2::Struct11 field60;
  std::set<int64_t> field61;
  int16_t field62;
  bool field63;
  bool field64;
  int32_t field65;
  std::string field66;
  int32_t field67;
  std::set<int8_t> field68;
  int32_t field69;
  std::set<std::set<float>> field70;
  int16_t field71;
  std::vector<std::string> field72;
  std::map< ::cpp2::Struct1, std::vector<int16_t>> field73;
   ::cpp2::Struct3 field74;
  std::string field75;
  std::vector<std::vector<double>> field76;
  std::vector<bool> field77;
  std::set< ::cpp2::Struct14> field78;
  std::string field79;
  int32_t field80;
  int16_t field81;
  bool field82;
  std::map< ::cpp2::Struct2, double> field83;
  std::vector<std::map< ::cpp2::Struct2, bool>> field84;
  std::map<bool, std::vector<std::string>> field85;
   ::cpp2::Struct6 field86;
  std::string field87;
  float field88;
  std::vector<bool> field89;
  int64_t field90;
  bool field91;
  std::map<bool, std::vector<double>> field92;
  float field93;
  int8_t field94;
  std::string field95;
   ::cpp2::Struct4 field96;
  std::string field97;
  int16_t field98;
  std::set<std::string> field99;
  std::map<double, int64_t> field100;
  int16_t field101;
  std::set<std::string> field102;
  std::string field103;
  int16_t field104;
  std::map<int8_t, std::string> field105;
  std::string field106;
  std::set<std::string> field107;
   ::cpp2::Struct8 field108;
  int16_t field109;
  std::string field110;
  int32_t field111;
  std::set<double> field112;
  std::vector<int16_t> field113;
  int16_t field114;
  int8_t field115;
  int64_t field116;
  std::map<int32_t, int16_t> field117;
  int64_t field118;
  std::vector<double> field119;
  int64_t field120;
  std::string field121;
  int64_t field122;
  std::map<std::string, std::map<int8_t, double>> field123;
  std::string field124;
  bool field125;
  int8_t field126;
  int16_t field127;
  std::string field128;
  std::map<std::string, std::set<int32_t>> field129;
  std::map<int64_t, std::string> field130;
  std::map< ::cpp2::Struct18, std::set<int8_t>> field131;
  int8_t field132;
  double field133;
  std::map<int64_t, int8_t> field134;
  int32_t field135;
  std::map<int32_t, std::string> field136;
  std::vector<std::string> field137;
  std::map<std::string, int16_t> field138;
   ::cpp2::Struct5 field139;
  int32_t field140;
  std::string field141;
  int8_t field142;
  int32_t field143;
  std::set<double> field144;
  std::vector<int8_t> field145;
  int64_t field146;
  std::set<double> field147;
  std::string field148;
  int16_t field149;
  std::set<std::map<int16_t, float>> field150;
   ::cpp2::Struct14 field151;
   ::cpp2::Struct3 field152;
  std::set<std::string> field153;
  std::vector<int8_t> field154;
  int8_t field155;
  int8_t field156;
  float field157;
   ::cpp2::Struct2 field158;
  int32_t field159;
  double field160;
  bool field161;
  std::vector<std::string> field162;
  std::map< ::cpp2::Struct7, std::map<int64_t,  ::cpp2::Struct4>> field163;
  std::set<double> field164;
  std::vector<int64_t> field165;
  std::set<int8_t> field166;
   ::cpp2::Struct4 field167;
  std::string field168;
  int16_t field169;
  std::string field170;
  std::map<int16_t, int16_t> field171;
  std::set<int32_t> field172;
  std::set< ::cpp2::Struct5> field173;
  std::string field174;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
      field97 = false;
      field98 = false;
      field99 = false;
      field100 = false;
      field101 = false;
      field102 = false;
      field103 = false;
      field104 = false;
      field105 = false;
      field106 = false;
      field107 = false;
      field108 = false;
      field109 = false;
      field110 = false;
      field111 = false;
      field112 = false;
      field113 = false;
      field114 = false;
      field115 = false;
      field116 = false;
      field117 = false;
      field118 = false;
      field119 = false;
      field120 = false;
      field121 = false;
      field122 = false;
      field123 = false;
      field124 = false;
      field125 = false;
      field126 = false;
      field127 = false;
      field128 = false;
      field129 = false;
      field130 = false;
      field131 = false;
      field132 = false;
      field133 = false;
      field134 = false;
      field135 = false;
      field136 = false;
      field137 = false;
      field138 = false;
      field139 = false;
      field140 = false;
      field141 = false;
      field142 = false;
      field143 = false;
      field144 = false;
      field145 = false;
      field146 = false;
      field147 = false;
      field148 = false;
      field149 = false;
      field150 = false;
      field151 = false;
      field152 = false;
      field153 = false;
      field154 = false;
      field155 = false;
      field156 = false;
      field157 = false;
      field158 = false;
      field159 = false;
      field160 = false;
      field161 = false;
      field162 = false;
      field163 = false;
      field164 = false;
      field165 = false;
      field166 = false;
      field167 = false;
      field168 = false;
      field169 = false;
      field170 = false;
      field171 = false;
      field172 = false;
      field173 = false;
      field174 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
    bool field97 = false;
    bool field98 = false;
    bool field99 = false;
    bool field100 = false;
    bool field101 = false;
    bool field102 = false;
    bool field103 = false;
    bool field104 = false;
    bool field105 = false;
    bool field106 = false;
    bool field107 = false;
    bool field108 = false;
    bool field109 = false;
    bool field110 = false;
    bool field111 = false;
    bool field112 = false;
    bool field113 = false;
    bool field114 = false;
    bool field115 = false;
    bool field116 = false;
    bool field117 = false;
    bool field118 = false;
    bool field119 = false;
    bool field120 = false;
    bool field121 = false;
    bool field122 = false;
    bool field123 = false;
    bool field124 = false;
    bool field125 = false;
    bool field126 = false;
    bool field127 = false;
    bool field128 = false;
    bool field129 = false;
    bool field130 = false;
    bool field131 = false;
    bool field132 = false;
    bool field133 = false;
    bool field134 = false;
    bool field135 = false;
    bool field136 = false;
    bool field137 = false;
    bool field138 = false;
    bool field139 = false;
    bool field140 = false;
    bool field141 = false;
    bool field142 = false;
    bool field143 = false;
    bool field144 = false;
    bool field145 = false;
    bool field146 = false;
    bool field147 = false;
    bool field148 = false;
    bool field149 = false;
    bool field150 = false;
    bool field151 = false;
    bool field152 = false;
    bool field153 = false;
    bool field154 = false;
    bool field155 = false;
    bool field156 = false;
    bool field157 = false;
    bool field158 = false;
    bool field159 = false;
    bool field160 = false;
    bool field161 = false;
    bool field162 = false;
    bool field163 = false;
    bool field164 = false;
    bool field165 = false;
    bool field166 = false;
    bool field167 = false;
    bool field168 = false;
    bool field169 = false;
    bool field170 = false;
    bool field171 = false;
    bool field172 = false;
    bool field173 = false;
    bool field174 = false;
  } __isset;
  bool operator==(const Struct21& rhs) const;

  bool operator < (const Struct21& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    if (!(field97 == rhs.field97)) {
      return field97 < rhs.field97;
    }
    if (!(field98 == rhs.field98)) {
      return field98 < rhs.field98;
    }
    if (!(field99 == rhs.field99)) {
      return field99 < rhs.field99;
    }
    if (!(field100 == rhs.field100)) {
      return field100 < rhs.field100;
    }
    if (!(field101 == rhs.field101)) {
      return field101 < rhs.field101;
    }
    if (!(field102 == rhs.field102)) {
      return field102 < rhs.field102;
    }
    if (!(field103 == rhs.field103)) {
      return field103 < rhs.field103;
    }
    if (!(field104 == rhs.field104)) {
      return field104 < rhs.field104;
    }
    if (!(field105 == rhs.field105)) {
      return field105 < rhs.field105;
    }
    if (!(field106 == rhs.field106)) {
      return field106 < rhs.field106;
    }
    if (!(field107 == rhs.field107)) {
      return field107 < rhs.field107;
    }
    if (!(field108 == rhs.field108)) {
      return field108 < rhs.field108;
    }
    if (!(field109 == rhs.field109)) {
      return field109 < rhs.field109;
    }
    if (!(field110 == rhs.field110)) {
      return field110 < rhs.field110;
    }
    if (!(field111 == rhs.field111)) {
      return field111 < rhs.field111;
    }
    if (!(field112 == rhs.field112)) {
      return field112 < rhs.field112;
    }
    if (!(field113 == rhs.field113)) {
      return field113 < rhs.field113;
    }
    if (!(field114 == rhs.field114)) {
      return field114 < rhs.field114;
    }
    if (!(field115 == rhs.field115)) {
      return field115 < rhs.field115;
    }
    if (!(field116 == rhs.field116)) {
      return field116 < rhs.field116;
    }
    if (!(field117 == rhs.field117)) {
      return field117 < rhs.field117;
    }
    if (!(field118 == rhs.field118)) {
      return field118 < rhs.field118;
    }
    if (!(field119 == rhs.field119)) {
      return field119 < rhs.field119;
    }
    if (!(field120 == rhs.field120)) {
      return field120 < rhs.field120;
    }
    if (!(field121 == rhs.field121)) {
      return field121 < rhs.field121;
    }
    if (!(field122 == rhs.field122)) {
      return field122 < rhs.field122;
    }
    if (!(field123 == rhs.field123)) {
      return field123 < rhs.field123;
    }
    if (!(field124 == rhs.field124)) {
      return field124 < rhs.field124;
    }
    if (!(field125 == rhs.field125)) {
      return field125 < rhs.field125;
    }
    if (!(field126 == rhs.field126)) {
      return field126 < rhs.field126;
    }
    if (!(field127 == rhs.field127)) {
      return field127 < rhs.field127;
    }
    if (!(field128 == rhs.field128)) {
      return field128 < rhs.field128;
    }
    if (!(field129 == rhs.field129)) {
      return field129 < rhs.field129;
    }
    if (!(field130 == rhs.field130)) {
      return field130 < rhs.field130;
    }
    if (!(field131 == rhs.field131)) {
      return field131 < rhs.field131;
    }
    if (!(field132 == rhs.field132)) {
      return field132 < rhs.field132;
    }
    if (!(field133 == rhs.field133)) {
      return field133 < rhs.field133;
    }
    if (!(field134 == rhs.field134)) {
      return field134 < rhs.field134;
    }
    if (!(field135 == rhs.field135)) {
      return field135 < rhs.field135;
    }
    if (!(field136 == rhs.field136)) {
      return field136 < rhs.field136;
    }
    if (!(field137 == rhs.field137)) {
      return field137 < rhs.field137;
    }
    if (!(field138 == rhs.field138)) {
      return field138 < rhs.field138;
    }
    if (!(field139 == rhs.field139)) {
      return field139 < rhs.field139;
    }
    if (!(field140 == rhs.field140)) {
      return field140 < rhs.field140;
    }
    if (!(field141 == rhs.field141)) {
      return field141 < rhs.field141;
    }
    if (!(field142 == rhs.field142)) {
      return field142 < rhs.field142;
    }
    if (!(field143 == rhs.field143)) {
      return field143 < rhs.field143;
    }
    if (!(field144 == rhs.field144)) {
      return field144 < rhs.field144;
    }
    if (!(field145 == rhs.field145)) {
      return field145 < rhs.field145;
    }
    if (!(field146 == rhs.field146)) {
      return field146 < rhs.field146;
    }
    if (!(field147 == rhs.field147)) {
      return field147 < rhs.field147;
    }
    if (!(field148 == rhs.field148)) {
      return field148 < rhs.field148;
    }
    if (!(field149 == rhs.field149)) {
      return field149 < rhs.field149;
    }
    if (!(field150 == rhs.field150)) {
      return field150 < rhs.field150;
    }
    if (!(field151 == rhs.field151)) {
      return field151 < rhs.field151;
    }
    if (!(field152 == rhs.field152)) {
      return field152 < rhs.field152;
    }
    if (!(field153 == rhs.field153)) {
      return field153 < rhs.field153;
    }
    if (!(field154 == rhs.field154)) {
      return field154 < rhs.field154;
    }
    if (!(field155 == rhs.field155)) {
      return field155 < rhs.field155;
    }
    if (!(field156 == rhs.field156)) {
      return field156 < rhs.field156;
    }
    if (!(field157 == rhs.field157)) {
      return field157 < rhs.field157;
    }
    if (!(field158 == rhs.field158)) {
      return field158 < rhs.field158;
    }
    if (!(field159 == rhs.field159)) {
      return field159 < rhs.field159;
    }
    if (!(field160 == rhs.field160)) {
      return field160 < rhs.field160;
    }
    if (!(field161 == rhs.field161)) {
      return field161 < rhs.field161;
    }
    if (!(field162 == rhs.field162)) {
      return field162 < rhs.field162;
    }
    if (!(field163 == rhs.field163)) {
      return field163 < rhs.field163;
    }
    if (!(field164 == rhs.field164)) {
      return field164 < rhs.field164;
    }
    if (!(field165 == rhs.field165)) {
      return field165 < rhs.field165;
    }
    if (!(field166 == rhs.field166)) {
      return field166 < rhs.field166;
    }
    if (!(field167 == rhs.field167)) {
      return field167 < rhs.field167;
    }
    if (!(field168 == rhs.field168)) {
      return field168 < rhs.field168;
    }
    if (!(field169 == rhs.field169)) {
      return field169 < rhs.field169;
    }
    if (!(field170 == rhs.field170)) {
      return field170 < rhs.field170;
    }
    if (!(field171 == rhs.field171)) {
      return field171 < rhs.field171;
    }
    if (!(field172 == rhs.field172)) {
      return field172 < rhs.field172;
    }
    if (!(field173 == rhs.field173)) {
      return field173 < rhs.field173;
    }
    if (!(field174 == rhs.field174)) {
      return field174 < rhs.field174;
    }
    (void)rhs;
    return false;
  }
  const std::vector<int8_t>& get_field1() const&;
  std::vector<int8_t> get_field1() &&;

  template <typename T_Struct21_field1_struct_setter>
  std::vector<int8_t>& set_field1(T_Struct21_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct21_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const  ::cpp2::Struct1& get_field2() const&;
   ::cpp2::Struct1 get_field2() &&;

  template <typename T_Struct21_field2_struct_setter>
   ::cpp2::Struct1& set_field2(T_Struct21_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct21_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  const std::string& get_field3() const& {
    return field3;
  }

  std::string get_field3() && {
    return std::move(field3);
  }

  template <typename T_Struct21_field3_struct_setter>
  std::string& set_field3(T_Struct21_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct21_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  int8_t get_field4() const {
    return field4;
  }

  int8_t& set_field4(int8_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }

  float get_field5() const {
    return field5;
  }

  float& set_field5(float field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }

  double get_field6() const {
    return field6;
  }

  double& set_field6(double field6_) {
    field6 = field6_;
    __isset.field6 = true;
    return field6;
  }
  const std::map<int16_t, std::vector<float>>& get_field7() const&;
  std::map<int16_t, std::vector<float>> get_field7() &&;

  template <typename T_Struct21_field7_struct_setter>
  std::map<int16_t, std::vector<float>>& set_field7(T_Struct21_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct21_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }

  float get_field8() const {
    return field8;
  }

  float& set_field8(float field8_) {
    field8 = field8_;
    __isset.field8 = true;
    return field8;
  }
  const  ::cpp2::Struct12& get_field9() const&;
   ::cpp2::Struct12 get_field9() &&;

  template <typename T_Struct21_field9_struct_setter>
   ::cpp2::Struct12& set_field9(T_Struct21_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct21_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }

  float get_field10() const {
    return field10;
  }

  float& set_field10(float field10_) {
    field10 = field10_;
    __isset.field10 = true;
    return field10;
  }

  const std::string& get_field11() const& {
    return field11;
  }

  std::string get_field11() && {
    return std::move(field11);
  }

  template <typename T_Struct21_field11_struct_setter>
  std::string& set_field11(T_Struct21_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct21_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }

  int8_t get_field12() const {
    return field12;
  }

  int8_t& set_field12(int8_t field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }
  const std::vector<bool>& get_field13() const&;
  std::vector<bool> get_field13() &&;

  template <typename T_Struct21_field13_struct_setter>
  std::vector<bool>& set_field13(T_Struct21_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct21_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }

  double get_field14() const {
    return field14;
  }

  double& set_field14(double field14_) {
    field14 = field14_;
    __isset.field14 = true;
    return field14;
  }

  int32_t get_field15() const {
    return field15;
  }

  int32_t& set_field15(int32_t field15_) {
    field15 = field15_;
    __isset.field15 = true;
    return field15;
  }

  int16_t get_field16() const {
    return field16;
  }

  int16_t& set_field16(int16_t field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }
  const  ::cpp2::Struct2& get_field17() const&;
   ::cpp2::Struct2 get_field17() &&;

  template <typename T_Struct21_field17_struct_setter>
   ::cpp2::Struct2& set_field17(T_Struct21_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct21_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }

  double get_field18() const {
    return field18;
  }

  double& set_field18(double field18_) {
    field18 = field18_;
    __isset.field18 = true;
    return field18;
  }

  int16_t get_field19() const {
    return field19;
  }

  int16_t& set_field19(int16_t field19_) {
    field19 = field19_;
    __isset.field19 = true;
    return field19;
  }

  int16_t get_field20() const {
    return field20;
  }

  int16_t& set_field20(int16_t field20_) {
    field20 = field20_;
    __isset.field20 = true;
    return field20;
  }
  const std::map< ::cpp2::Struct10, std::vector<double>>& get_field21() const&;
  std::map< ::cpp2::Struct10, std::vector<double>> get_field21() &&;

  template <typename T_Struct21_field21_struct_setter>
  std::map< ::cpp2::Struct10, std::vector<double>>& set_field21(T_Struct21_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct21_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }
  const std::set<int32_t>& get_field22() const&;
  std::set<int32_t> get_field22() &&;

  template <typename T_Struct21_field22_struct_setter>
  std::set<int32_t>& set_field22(T_Struct21_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct21_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }
  const std::vector<bool>& get_field23() const&;
  std::vector<bool> get_field23() &&;

  template <typename T_Struct21_field23_struct_setter>
  std::vector<bool>& set_field23(T_Struct21_field23_struct_setter&& field23_) {
    field23 = std::forward<T_Struct21_field23_struct_setter>(field23_);
    __isset.field23 = true;
    return field23;
  }
  const std::set<float>& get_field24() const&;
  std::set<float> get_field24() &&;

  template <typename T_Struct21_field24_struct_setter>
  std::set<float>& set_field24(T_Struct21_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct21_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }

  float get_field25() const {
    return field25;
  }

  float& set_field25(float field25_) {
    field25 = field25_;
    __isset.field25 = true;
    return field25;
  }
  const  ::cpp2::Struct1& get_field26() const&;
   ::cpp2::Struct1 get_field26() &&;

  template <typename T_Struct21_field26_struct_setter>
   ::cpp2::Struct1& set_field26(T_Struct21_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct21_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }
  const std::map<std::string, bool>& get_field27() const&;
  std::map<std::string, bool> get_field27() &&;

  template <typename T_Struct21_field27_struct_setter>
  std::map<std::string, bool>& set_field27(T_Struct21_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct21_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }

  int64_t get_field28() const {
    return field28;
  }

  int64_t& set_field28(int64_t field28_) {
    field28 = field28_;
    __isset.field28 = true;
    return field28;
  }

  float get_field29() const {
    return field29;
  }

  float& set_field29(float field29_) {
    field29 = field29_;
    __isset.field29 = true;
    return field29;
  }
  const std::vector<int16_t>& get_field30() const&;
  std::vector<int16_t> get_field30() &&;

  template <typename T_Struct21_field30_struct_setter>
  std::vector<int16_t>& set_field30(T_Struct21_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct21_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }

  int8_t get_field31() const {
    return field31;
  }

  int8_t& set_field31(int8_t field31_) {
    field31 = field31_;
    __isset.field31 = true;
    return field31;
  }
  const std::vector<int32_t>& get_field32() const&;
  std::vector<int32_t> get_field32() &&;

  template <typename T_Struct21_field32_struct_setter>
  std::vector<int32_t>& set_field32(T_Struct21_field32_struct_setter&& field32_) {
    field32 = std::forward<T_Struct21_field32_struct_setter>(field32_);
    __isset.field32 = true;
    return field32;
  }
  const std::set<std::vector<int16_t>>& get_field33() const&;
  std::set<std::vector<int16_t>> get_field33() &&;

  template <typename T_Struct21_field33_struct_setter>
  std::set<std::vector<int16_t>>& set_field33(T_Struct21_field33_struct_setter&& field33_) {
    field33 = std::forward<T_Struct21_field33_struct_setter>(field33_);
    __isset.field33 = true;
    return field33;
  }
  const  ::cpp2::Struct16& get_field34() const&;
   ::cpp2::Struct16 get_field34() &&;

  template <typename T_Struct21_field34_struct_setter>
   ::cpp2::Struct16& set_field34(T_Struct21_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct21_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }
  const std::map<int16_t, std::string>& get_field35() const&;
  std::map<int16_t, std::string> get_field35() &&;

  template <typename T_Struct21_field35_struct_setter>
  std::map<int16_t, std::string>& set_field35(T_Struct21_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct21_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }
  const std::map<bool, std::vector< ::cpp2::Struct5>>& get_field36() const&;
  std::map<bool, std::vector< ::cpp2::Struct5>> get_field36() &&;

  template <typename T_Struct21_field36_struct_setter>
  std::map<bool, std::vector< ::cpp2::Struct5>>& set_field36(T_Struct21_field36_struct_setter&& field36_) {
    field36 = std::forward<T_Struct21_field36_struct_setter>(field36_);
    __isset.field36 = true;
    return field36;
  }

  int16_t get_field37() const {
    return field37;
  }

  int16_t& set_field37(int16_t field37_) {
    field37 = field37_;
    __isset.field37 = true;
    return field37;
  }
  const std::map<float, int16_t>& get_field38() const&;
  std::map<float, int16_t> get_field38() &&;

  template <typename T_Struct21_field38_struct_setter>
  std::map<float, int16_t>& set_field38(T_Struct21_field38_struct_setter&& field38_) {
    field38 = std::forward<T_Struct21_field38_struct_setter>(field38_);
    __isset.field38 = true;
    return field38;
  }
  const std::set<int64_t>& get_field39() const&;
  std::set<int64_t> get_field39() &&;

  template <typename T_Struct21_field39_struct_setter>
  std::set<int64_t>& set_field39(T_Struct21_field39_struct_setter&& field39_) {
    field39 = std::forward<T_Struct21_field39_struct_setter>(field39_);
    __isset.field39 = true;
    return field39;
  }

  bool get_field40() const {
    return field40;
  }

  bool& set_field40(bool field40_) {
    field40 = field40_;
    __isset.field40 = true;
    return field40;
  }

  const std::string& get_field41() const& {
    return field41;
  }

  std::string get_field41() && {
    return std::move(field41);
  }

  template <typename T_Struct21_field41_struct_setter>
  std::string& set_field41(T_Struct21_field41_struct_setter&& field41_) {
    field41 = std::forward<T_Struct21_field41_struct_setter>(field41_);
    __isset.field41 = true;
    return field41;
  }

  int16_t get_field42() const {
    return field42;
  }

  int16_t& set_field42(int16_t field42_) {
    field42 = field42_;
    __isset.field42 = true;
    return field42;
  }
  const  ::cpp2::Struct9& get_field43() const&;
   ::cpp2::Struct9 get_field43() &&;

  template <typename T_Struct21_field43_struct_setter>
   ::cpp2::Struct9& set_field43(T_Struct21_field43_struct_setter&& field43_) {
    field43 = std::forward<T_Struct21_field43_struct_setter>(field43_);
    __isset.field43 = true;
    return field43;
  }
  const std::set<std::string>& get_field44() const&;
  std::set<std::string> get_field44() &&;

  template <typename T_Struct21_field44_struct_setter>
  std::set<std::string>& set_field44(T_Struct21_field44_struct_setter&& field44_) {
    field44 = std::forward<T_Struct21_field44_struct_setter>(field44_);
    __isset.field44 = true;
    return field44;
  }
  const std::map<int32_t,  ::cpp2::Struct3>& get_field45() const&;
  std::map<int32_t,  ::cpp2::Struct3> get_field45() &&;

  template <typename T_Struct21_field45_struct_setter>
  std::map<int32_t,  ::cpp2::Struct3>& set_field45(T_Struct21_field45_struct_setter&& field45_) {
    field45 = std::forward<T_Struct21_field45_struct_setter>(field45_);
    __isset.field45 = true;
    return field45;
  }
  const std::set<int64_t>& get_field46() const&;
  std::set<int64_t> get_field46() &&;

  template <typename T_Struct21_field46_struct_setter>
  std::set<int64_t>& set_field46(T_Struct21_field46_struct_setter&& field46_) {
    field46 = std::forward<T_Struct21_field46_struct_setter>(field46_);
    __isset.field46 = true;
    return field46;
  }
  const  ::cpp2::Struct2& get_field47() const&;
   ::cpp2::Struct2 get_field47() &&;

  template <typename T_Struct21_field47_struct_setter>
   ::cpp2::Struct2& set_field47(T_Struct21_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct21_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }

  int32_t get_field48() const {
    return field48;
  }

  int32_t& set_field48(int32_t field48_) {
    field48 = field48_;
    __isset.field48 = true;
    return field48;
  }

  int8_t get_field49() const {
    return field49;
  }

  int8_t& set_field49(int8_t field49_) {
    field49 = field49_;
    __isset.field49 = true;
    return field49;
  }

  bool get_field50() const {
    return field50;
  }

  bool& set_field50(bool field50_) {
    field50 = field50_;
    __isset.field50 = true;
    return field50;
  }
  const std::vector< ::cpp2::Struct10>& get_field51() const&;
  std::vector< ::cpp2::Struct10> get_field51() &&;

  template <typename T_Struct21_field51_struct_setter>
  std::vector< ::cpp2::Struct10>& set_field51(T_Struct21_field51_struct_setter&& field51_) {
    field51 = std::forward<T_Struct21_field51_struct_setter>(field51_);
    __isset.field51 = true;
    return field51;
  }

  float get_field52() const {
    return field52;
  }

  float& set_field52(float field52_) {
    field52 = field52_;
    __isset.field52 = true;
    return field52;
  }
  const std::set<std::string>& get_field53() const&;
  std::set<std::string> get_field53() &&;

  template <typename T_Struct21_field53_struct_setter>
  std::set<std::string>& set_field53(T_Struct21_field53_struct_setter&& field53_) {
    field53 = std::forward<T_Struct21_field53_struct_setter>(field53_);
    __isset.field53 = true;
    return field53;
  }

  const std::string& get_field54() const& {
    return field54;
  }

  std::string get_field54() && {
    return std::move(field54);
  }

  template <typename T_Struct21_field54_struct_setter>
  std::string& set_field54(T_Struct21_field54_struct_setter&& field54_) {
    field54 = std::forward<T_Struct21_field54_struct_setter>(field54_);
    __isset.field54 = true;
    return field54;
  }
  const  ::cpp2::Struct11& get_field55() const&;
   ::cpp2::Struct11 get_field55() &&;

  template <typename T_Struct21_field55_struct_setter>
   ::cpp2::Struct11& set_field55(T_Struct21_field55_struct_setter&& field55_) {
    field55 = std::forward<T_Struct21_field55_struct_setter>(field55_);
    __isset.field55 = true;
    return field55;
  }
  const std::vector<bool>& get_field56() const&;
  std::vector<bool> get_field56() &&;

  template <typename T_Struct21_field56_struct_setter>
  std::vector<bool>& set_field56(T_Struct21_field56_struct_setter&& field56_) {
    field56 = std::forward<T_Struct21_field56_struct_setter>(field56_);
    __isset.field56 = true;
    return field56;
  }
  const std::map<std::string, std::vector<std::string>>& get_field57() const&;
  std::map<std::string, std::vector<std::string>> get_field57() &&;

  template <typename T_Struct21_field57_struct_setter>
  std::map<std::string, std::vector<std::string>>& set_field57(T_Struct21_field57_struct_setter&& field57_) {
    field57 = std::forward<T_Struct21_field57_struct_setter>(field57_);
    __isset.field57 = true;
    return field57;
  }

  int64_t get_field58() const {
    return field58;
  }

  int64_t& set_field58(int64_t field58_) {
    field58 = field58_;
    __isset.field58 = true;
    return field58;
  }

  int8_t get_field59() const {
    return field59;
  }

  int8_t& set_field59(int8_t field59_) {
    field59 = field59_;
    __isset.field59 = true;
    return field59;
  }
  const  ::cpp2::Struct11& get_field60() const&;
   ::cpp2::Struct11 get_field60() &&;

  template <typename T_Struct21_field60_struct_setter>
   ::cpp2::Struct11& set_field60(T_Struct21_field60_struct_setter&& field60_) {
    field60 = std::forward<T_Struct21_field60_struct_setter>(field60_);
    __isset.field60 = true;
    return field60;
  }
  const std::set<int64_t>& get_field61() const&;
  std::set<int64_t> get_field61() &&;

  template <typename T_Struct21_field61_struct_setter>
  std::set<int64_t>& set_field61(T_Struct21_field61_struct_setter&& field61_) {
    field61 = std::forward<T_Struct21_field61_struct_setter>(field61_);
    __isset.field61 = true;
    return field61;
  }

  int16_t get_field62() const {
    return field62;
  }

  int16_t& set_field62(int16_t field62_) {
    field62 = field62_;
    __isset.field62 = true;
    return field62;
  }

  bool get_field63() const {
    return field63;
  }

  bool& set_field63(bool field63_) {
    field63 = field63_;
    __isset.field63 = true;
    return field63;
  }

  bool get_field64() const {
    return field64;
  }

  bool& set_field64(bool field64_) {
    field64 = field64_;
    __isset.field64 = true;
    return field64;
  }

  int32_t get_field65() const {
    return field65;
  }

  int32_t& set_field65(int32_t field65_) {
    field65 = field65_;
    __isset.field65 = true;
    return field65;
  }

  const std::string& get_field66() const& {
    return field66;
  }

  std::string get_field66() && {
    return std::move(field66);
  }

  template <typename T_Struct21_field66_struct_setter>
  std::string& set_field66(T_Struct21_field66_struct_setter&& field66_) {
    field66 = std::forward<T_Struct21_field66_struct_setter>(field66_);
    __isset.field66 = true;
    return field66;
  }

  int32_t get_field67() const {
    return field67;
  }

  int32_t& set_field67(int32_t field67_) {
    field67 = field67_;
    __isset.field67 = true;
    return field67;
  }
  const std::set<int8_t>& get_field68() const&;
  std::set<int8_t> get_field68() &&;

  template <typename T_Struct21_field68_struct_setter>
  std::set<int8_t>& set_field68(T_Struct21_field68_struct_setter&& field68_) {
    field68 = std::forward<T_Struct21_field68_struct_setter>(field68_);
    __isset.field68 = true;
    return field68;
  }

  int32_t get_field69() const {
    return field69;
  }

  int32_t& set_field69(int32_t field69_) {
    field69 = field69_;
    __isset.field69 = true;
    return field69;
  }
  const std::set<std::set<float>>& get_field70() const&;
  std::set<std::set<float>> get_field70() &&;

  template <typename T_Struct21_field70_struct_setter>
  std::set<std::set<float>>& set_field70(T_Struct21_field70_struct_setter&& field70_) {
    field70 = std::forward<T_Struct21_field70_struct_setter>(field70_);
    __isset.field70 = true;
    return field70;
  }

  int16_t get_field71() const {
    return field71;
  }

  int16_t& set_field71(int16_t field71_) {
    field71 = field71_;
    __isset.field71 = true;
    return field71;
  }
  const std::vector<std::string>& get_field72() const&;
  std::vector<std::string> get_field72() &&;

  template <typename T_Struct21_field72_struct_setter>
  std::vector<std::string>& set_field72(T_Struct21_field72_struct_setter&& field72_) {
    field72 = std::forward<T_Struct21_field72_struct_setter>(field72_);
    __isset.field72 = true;
    return field72;
  }
  const std::map< ::cpp2::Struct1, std::vector<int16_t>>& get_field73() const&;
  std::map< ::cpp2::Struct1, std::vector<int16_t>> get_field73() &&;

  template <typename T_Struct21_field73_struct_setter>
  std::map< ::cpp2::Struct1, std::vector<int16_t>>& set_field73(T_Struct21_field73_struct_setter&& field73_) {
    field73 = std::forward<T_Struct21_field73_struct_setter>(field73_);
    __isset.field73 = true;
    return field73;
  }
  const  ::cpp2::Struct3& get_field74() const&;
   ::cpp2::Struct3 get_field74() &&;

  template <typename T_Struct21_field74_struct_setter>
   ::cpp2::Struct3& set_field74(T_Struct21_field74_struct_setter&& field74_) {
    field74 = std::forward<T_Struct21_field74_struct_setter>(field74_);
    __isset.field74 = true;
    return field74;
  }

  const std::string& get_field75() const& {
    return field75;
  }

  std::string get_field75() && {
    return std::move(field75);
  }

  template <typename T_Struct21_field75_struct_setter>
  std::string& set_field75(T_Struct21_field75_struct_setter&& field75_) {
    field75 = std::forward<T_Struct21_field75_struct_setter>(field75_);
    __isset.field75 = true;
    return field75;
  }
  const std::vector<std::vector<double>>& get_field76() const&;
  std::vector<std::vector<double>> get_field76() &&;

  template <typename T_Struct21_field76_struct_setter>
  std::vector<std::vector<double>>& set_field76(T_Struct21_field76_struct_setter&& field76_) {
    field76 = std::forward<T_Struct21_field76_struct_setter>(field76_);
    __isset.field76 = true;
    return field76;
  }
  const std::vector<bool>& get_field77() const&;
  std::vector<bool> get_field77() &&;

  template <typename T_Struct21_field77_struct_setter>
  std::vector<bool>& set_field77(T_Struct21_field77_struct_setter&& field77_) {
    field77 = std::forward<T_Struct21_field77_struct_setter>(field77_);
    __isset.field77 = true;
    return field77;
  }
  const std::set< ::cpp2::Struct14>& get_field78() const&;
  std::set< ::cpp2::Struct14> get_field78() &&;

  template <typename T_Struct21_field78_struct_setter>
  std::set< ::cpp2::Struct14>& set_field78(T_Struct21_field78_struct_setter&& field78_) {
    field78 = std::forward<T_Struct21_field78_struct_setter>(field78_);
    __isset.field78 = true;
    return field78;
  }

  const std::string& get_field79() const& {
    return field79;
  }

  std::string get_field79() && {
    return std::move(field79);
  }

  template <typename T_Struct21_field79_struct_setter>
  std::string& set_field79(T_Struct21_field79_struct_setter&& field79_) {
    field79 = std::forward<T_Struct21_field79_struct_setter>(field79_);
    __isset.field79 = true;
    return field79;
  }

  int32_t get_field80() const {
    return field80;
  }

  int32_t& set_field80(int32_t field80_) {
    field80 = field80_;
    __isset.field80 = true;
    return field80;
  }

  int16_t get_field81() const {
    return field81;
  }

  int16_t& set_field81(int16_t field81_) {
    field81 = field81_;
    __isset.field81 = true;
    return field81;
  }

  bool get_field82() const {
    return field82;
  }

  bool& set_field82(bool field82_) {
    field82 = field82_;
    __isset.field82 = true;
    return field82;
  }
  const std::map< ::cpp2::Struct2, double>& get_field83() const&;
  std::map< ::cpp2::Struct2, double> get_field83() &&;

  template <typename T_Struct21_field83_struct_setter>
  std::map< ::cpp2::Struct2, double>& set_field83(T_Struct21_field83_struct_setter&& field83_) {
    field83 = std::forward<T_Struct21_field83_struct_setter>(field83_);
    __isset.field83 = true;
    return field83;
  }
  const std::vector<std::map< ::cpp2::Struct2, bool>>& get_field84() const&;
  std::vector<std::map< ::cpp2::Struct2, bool>> get_field84() &&;

  template <typename T_Struct21_field84_struct_setter>
  std::vector<std::map< ::cpp2::Struct2, bool>>& set_field84(T_Struct21_field84_struct_setter&& field84_) {
    field84 = std::forward<T_Struct21_field84_struct_setter>(field84_);
    __isset.field84 = true;
    return field84;
  }
  const std::map<bool, std::vector<std::string>>& get_field85() const&;
  std::map<bool, std::vector<std::string>> get_field85() &&;

  template <typename T_Struct21_field85_struct_setter>
  std::map<bool, std::vector<std::string>>& set_field85(T_Struct21_field85_struct_setter&& field85_) {
    field85 = std::forward<T_Struct21_field85_struct_setter>(field85_);
    __isset.field85 = true;
    return field85;
  }
  const  ::cpp2::Struct6& get_field86() const&;
   ::cpp2::Struct6 get_field86() &&;

  template <typename T_Struct21_field86_struct_setter>
   ::cpp2::Struct6& set_field86(T_Struct21_field86_struct_setter&& field86_) {
    field86 = std::forward<T_Struct21_field86_struct_setter>(field86_);
    __isset.field86 = true;
    return field86;
  }

  const std::string& get_field87() const& {
    return field87;
  }

  std::string get_field87() && {
    return std::move(field87);
  }

  template <typename T_Struct21_field87_struct_setter>
  std::string& set_field87(T_Struct21_field87_struct_setter&& field87_) {
    field87 = std::forward<T_Struct21_field87_struct_setter>(field87_);
    __isset.field87 = true;
    return field87;
  }

  float get_field88() const {
    return field88;
  }

  float& set_field88(float field88_) {
    field88 = field88_;
    __isset.field88 = true;
    return field88;
  }
  const std::vector<bool>& get_field89() const&;
  std::vector<bool> get_field89() &&;

  template <typename T_Struct21_field89_struct_setter>
  std::vector<bool>& set_field89(T_Struct21_field89_struct_setter&& field89_) {
    field89 = std::forward<T_Struct21_field89_struct_setter>(field89_);
    __isset.field89 = true;
    return field89;
  }

  int64_t get_field90() const {
    return field90;
  }

  int64_t& set_field90(int64_t field90_) {
    field90 = field90_;
    __isset.field90 = true;
    return field90;
  }

  bool get_field91() const {
    return field91;
  }

  bool& set_field91(bool field91_) {
    field91 = field91_;
    __isset.field91 = true;
    return field91;
  }
  const std::map<bool, std::vector<double>>& get_field92() const&;
  std::map<bool, std::vector<double>> get_field92() &&;

  template <typename T_Struct21_field92_struct_setter>
  std::map<bool, std::vector<double>>& set_field92(T_Struct21_field92_struct_setter&& field92_) {
    field92 = std::forward<T_Struct21_field92_struct_setter>(field92_);
    __isset.field92 = true;
    return field92;
  }

  float get_field93() const {
    return field93;
  }

  float& set_field93(float field93_) {
    field93 = field93_;
    __isset.field93 = true;
    return field93;
  }

  int8_t get_field94() const {
    return field94;
  }

  int8_t& set_field94(int8_t field94_) {
    field94 = field94_;
    __isset.field94 = true;
    return field94;
  }

  const std::string& get_field95() const& {
    return field95;
  }

  std::string get_field95() && {
    return std::move(field95);
  }

  template <typename T_Struct21_field95_struct_setter>
  std::string& set_field95(T_Struct21_field95_struct_setter&& field95_) {
    field95 = std::forward<T_Struct21_field95_struct_setter>(field95_);
    __isset.field95 = true;
    return field95;
  }
  const  ::cpp2::Struct4& get_field96() const&;
   ::cpp2::Struct4 get_field96() &&;

  template <typename T_Struct21_field96_struct_setter>
   ::cpp2::Struct4& set_field96(T_Struct21_field96_struct_setter&& field96_) {
    field96 = std::forward<T_Struct21_field96_struct_setter>(field96_);
    __isset.field96 = true;
    return field96;
  }

  const std::string& get_field97() const& {
    return field97;
  }

  std::string get_field97() && {
    return std::move(field97);
  }

  template <typename T_Struct21_field97_struct_setter>
  std::string& set_field97(T_Struct21_field97_struct_setter&& field97_) {
    field97 = std::forward<T_Struct21_field97_struct_setter>(field97_);
    __isset.field97 = true;
    return field97;
  }

  int16_t get_field98() const {
    return field98;
  }

  int16_t& set_field98(int16_t field98_) {
    field98 = field98_;
    __isset.field98 = true;
    return field98;
  }
  const std::set<std::string>& get_field99() const&;
  std::set<std::string> get_field99() &&;

  template <typename T_Struct21_field99_struct_setter>
  std::set<std::string>& set_field99(T_Struct21_field99_struct_setter&& field99_) {
    field99 = std::forward<T_Struct21_field99_struct_setter>(field99_);
    __isset.field99 = true;
    return field99;
  }
  const std::map<double, int64_t>& get_field100() const&;
  std::map<double, int64_t> get_field100() &&;

  template <typename T_Struct21_field100_struct_setter>
  std::map<double, int64_t>& set_field100(T_Struct21_field100_struct_setter&& field100_) {
    field100 = std::forward<T_Struct21_field100_struct_setter>(field100_);
    __isset.field100 = true;
    return field100;
  }

  int16_t get_field101() const {
    return field101;
  }

  int16_t& set_field101(int16_t field101_) {
    field101 = field101_;
    __isset.field101 = true;
    return field101;
  }
  const std::set<std::string>& get_field102() const&;
  std::set<std::string> get_field102() &&;

  template <typename T_Struct21_field102_struct_setter>
  std::set<std::string>& set_field102(T_Struct21_field102_struct_setter&& field102_) {
    field102 = std::forward<T_Struct21_field102_struct_setter>(field102_);
    __isset.field102 = true;
    return field102;
  }

  const std::string& get_field103() const& {
    return field103;
  }

  std::string get_field103() && {
    return std::move(field103);
  }

  template <typename T_Struct21_field103_struct_setter>
  std::string& set_field103(T_Struct21_field103_struct_setter&& field103_) {
    field103 = std::forward<T_Struct21_field103_struct_setter>(field103_);
    __isset.field103 = true;
    return field103;
  }

  int16_t get_field104() const {
    return field104;
  }

  int16_t& set_field104(int16_t field104_) {
    field104 = field104_;
    __isset.field104 = true;
    return field104;
  }
  const std::map<int8_t, std::string>& get_field105() const&;
  std::map<int8_t, std::string> get_field105() &&;

  template <typename T_Struct21_field105_struct_setter>
  std::map<int8_t, std::string>& set_field105(T_Struct21_field105_struct_setter&& field105_) {
    field105 = std::forward<T_Struct21_field105_struct_setter>(field105_);
    __isset.field105 = true;
    return field105;
  }

  const std::string& get_field106() const& {
    return field106;
  }

  std::string get_field106() && {
    return std::move(field106);
  }

  template <typename T_Struct21_field106_struct_setter>
  std::string& set_field106(T_Struct21_field106_struct_setter&& field106_) {
    field106 = std::forward<T_Struct21_field106_struct_setter>(field106_);
    __isset.field106 = true;
    return field106;
  }
  const std::set<std::string>& get_field107() const&;
  std::set<std::string> get_field107() &&;

  template <typename T_Struct21_field107_struct_setter>
  std::set<std::string>& set_field107(T_Struct21_field107_struct_setter&& field107_) {
    field107 = std::forward<T_Struct21_field107_struct_setter>(field107_);
    __isset.field107 = true;
    return field107;
  }
  const  ::cpp2::Struct8& get_field108() const&;
   ::cpp2::Struct8 get_field108() &&;

  template <typename T_Struct21_field108_struct_setter>
   ::cpp2::Struct8& set_field108(T_Struct21_field108_struct_setter&& field108_) {
    field108 = std::forward<T_Struct21_field108_struct_setter>(field108_);
    __isset.field108 = true;
    return field108;
  }

  int16_t get_field109() const {
    return field109;
  }

  int16_t& set_field109(int16_t field109_) {
    field109 = field109_;
    __isset.field109 = true;
    return field109;
  }

  const std::string& get_field110() const& {
    return field110;
  }

  std::string get_field110() && {
    return std::move(field110);
  }

  template <typename T_Struct21_field110_struct_setter>
  std::string& set_field110(T_Struct21_field110_struct_setter&& field110_) {
    field110 = std::forward<T_Struct21_field110_struct_setter>(field110_);
    __isset.field110 = true;
    return field110;
  }

  int32_t get_field111() const {
    return field111;
  }

  int32_t& set_field111(int32_t field111_) {
    field111 = field111_;
    __isset.field111 = true;
    return field111;
  }
  const std::set<double>& get_field112() const&;
  std::set<double> get_field112() &&;

  template <typename T_Struct21_field112_struct_setter>
  std::set<double>& set_field112(T_Struct21_field112_struct_setter&& field112_) {
    field112 = std::forward<T_Struct21_field112_struct_setter>(field112_);
    __isset.field112 = true;
    return field112;
  }
  const std::vector<int16_t>& get_field113() const&;
  std::vector<int16_t> get_field113() &&;

  template <typename T_Struct21_field113_struct_setter>
  std::vector<int16_t>& set_field113(T_Struct21_field113_struct_setter&& field113_) {
    field113 = std::forward<T_Struct21_field113_struct_setter>(field113_);
    __isset.field113 = true;
    return field113;
  }

  int16_t get_field114() const {
    return field114;
  }

  int16_t& set_field114(int16_t field114_) {
    field114 = field114_;
    __isset.field114 = true;
    return field114;
  }

  int8_t get_field115() const {
    return field115;
  }

  int8_t& set_field115(int8_t field115_) {
    field115 = field115_;
    __isset.field115 = true;
    return field115;
  }

  int64_t get_field116() const {
    return field116;
  }

  int64_t& set_field116(int64_t field116_) {
    field116 = field116_;
    __isset.field116 = true;
    return field116;
  }
  const std::map<int32_t, int16_t>& get_field117() const&;
  std::map<int32_t, int16_t> get_field117() &&;

  template <typename T_Struct21_field117_struct_setter>
  std::map<int32_t, int16_t>& set_field117(T_Struct21_field117_struct_setter&& field117_) {
    field117 = std::forward<T_Struct21_field117_struct_setter>(field117_);
    __isset.field117 = true;
    return field117;
  }

  int64_t get_field118() const {
    return field118;
  }

  int64_t& set_field118(int64_t field118_) {
    field118 = field118_;
    __isset.field118 = true;
    return field118;
  }
  const std::vector<double>& get_field119() const&;
  std::vector<double> get_field119() &&;

  template <typename T_Struct21_field119_struct_setter>
  std::vector<double>& set_field119(T_Struct21_field119_struct_setter&& field119_) {
    field119 = std::forward<T_Struct21_field119_struct_setter>(field119_);
    __isset.field119 = true;
    return field119;
  }

  int64_t get_field120() const {
    return field120;
  }

  int64_t& set_field120(int64_t field120_) {
    field120 = field120_;
    __isset.field120 = true;
    return field120;
  }

  const std::string& get_field121() const& {
    return field121;
  }

  std::string get_field121() && {
    return std::move(field121);
  }

  template <typename T_Struct21_field121_struct_setter>
  std::string& set_field121(T_Struct21_field121_struct_setter&& field121_) {
    field121 = std::forward<T_Struct21_field121_struct_setter>(field121_);
    __isset.field121 = true;
    return field121;
  }

  int64_t get_field122() const {
    return field122;
  }

  int64_t& set_field122(int64_t field122_) {
    field122 = field122_;
    __isset.field122 = true;
    return field122;
  }
  const std::map<std::string, std::map<int8_t, double>>& get_field123() const&;
  std::map<std::string, std::map<int8_t, double>> get_field123() &&;

  template <typename T_Struct21_field123_struct_setter>
  std::map<std::string, std::map<int8_t, double>>& set_field123(T_Struct21_field123_struct_setter&& field123_) {
    field123 = std::forward<T_Struct21_field123_struct_setter>(field123_);
    __isset.field123 = true;
    return field123;
  }

  const std::string& get_field124() const& {
    return field124;
  }

  std::string get_field124() && {
    return std::move(field124);
  }

  template <typename T_Struct21_field124_struct_setter>
  std::string& set_field124(T_Struct21_field124_struct_setter&& field124_) {
    field124 = std::forward<T_Struct21_field124_struct_setter>(field124_);
    __isset.field124 = true;
    return field124;
  }

  bool get_field125() const {
    return field125;
  }

  bool& set_field125(bool field125_) {
    field125 = field125_;
    __isset.field125 = true;
    return field125;
  }

  int8_t get_field126() const {
    return field126;
  }

  int8_t& set_field126(int8_t field126_) {
    field126 = field126_;
    __isset.field126 = true;
    return field126;
  }

  int16_t get_field127() const {
    return field127;
  }

  int16_t& set_field127(int16_t field127_) {
    field127 = field127_;
    __isset.field127 = true;
    return field127;
  }

  const std::string& get_field128() const& {
    return field128;
  }

  std::string get_field128() && {
    return std::move(field128);
  }

  template <typename T_Struct21_field128_struct_setter>
  std::string& set_field128(T_Struct21_field128_struct_setter&& field128_) {
    field128 = std::forward<T_Struct21_field128_struct_setter>(field128_);
    __isset.field128 = true;
    return field128;
  }
  const std::map<std::string, std::set<int32_t>>& get_field129() const&;
  std::map<std::string, std::set<int32_t>> get_field129() &&;

  template <typename T_Struct21_field129_struct_setter>
  std::map<std::string, std::set<int32_t>>& set_field129(T_Struct21_field129_struct_setter&& field129_) {
    field129 = std::forward<T_Struct21_field129_struct_setter>(field129_);
    __isset.field129 = true;
    return field129;
  }
  const std::map<int64_t, std::string>& get_field130() const&;
  std::map<int64_t, std::string> get_field130() &&;

  template <typename T_Struct21_field130_struct_setter>
  std::map<int64_t, std::string>& set_field130(T_Struct21_field130_struct_setter&& field130_) {
    field130 = std::forward<T_Struct21_field130_struct_setter>(field130_);
    __isset.field130 = true;
    return field130;
  }
  const std::map< ::cpp2::Struct18, std::set<int8_t>>& get_field131() const&;
  std::map< ::cpp2::Struct18, std::set<int8_t>> get_field131() &&;

  template <typename T_Struct21_field131_struct_setter>
  std::map< ::cpp2::Struct18, std::set<int8_t>>& set_field131(T_Struct21_field131_struct_setter&& field131_) {
    field131 = std::forward<T_Struct21_field131_struct_setter>(field131_);
    __isset.field131 = true;
    return field131;
  }

  int8_t get_field132() const {
    return field132;
  }

  int8_t& set_field132(int8_t field132_) {
    field132 = field132_;
    __isset.field132 = true;
    return field132;
  }

  double get_field133() const {
    return field133;
  }

  double& set_field133(double field133_) {
    field133 = field133_;
    __isset.field133 = true;
    return field133;
  }
  const std::map<int64_t, int8_t>& get_field134() const&;
  std::map<int64_t, int8_t> get_field134() &&;

  template <typename T_Struct21_field134_struct_setter>
  std::map<int64_t, int8_t>& set_field134(T_Struct21_field134_struct_setter&& field134_) {
    field134 = std::forward<T_Struct21_field134_struct_setter>(field134_);
    __isset.field134 = true;
    return field134;
  }

  int32_t get_field135() const {
    return field135;
  }

  int32_t& set_field135(int32_t field135_) {
    field135 = field135_;
    __isset.field135 = true;
    return field135;
  }
  const std::map<int32_t, std::string>& get_field136() const&;
  std::map<int32_t, std::string> get_field136() &&;

  template <typename T_Struct21_field136_struct_setter>
  std::map<int32_t, std::string>& set_field136(T_Struct21_field136_struct_setter&& field136_) {
    field136 = std::forward<T_Struct21_field136_struct_setter>(field136_);
    __isset.field136 = true;
    return field136;
  }
  const std::vector<std::string>& get_field137() const&;
  std::vector<std::string> get_field137() &&;

  template <typename T_Struct21_field137_struct_setter>
  std::vector<std::string>& set_field137(T_Struct21_field137_struct_setter&& field137_) {
    field137 = std::forward<T_Struct21_field137_struct_setter>(field137_);
    __isset.field137 = true;
    return field137;
  }
  const std::map<std::string, int16_t>& get_field138() const&;
  std::map<std::string, int16_t> get_field138() &&;

  template <typename T_Struct21_field138_struct_setter>
  std::map<std::string, int16_t>& set_field138(T_Struct21_field138_struct_setter&& field138_) {
    field138 = std::forward<T_Struct21_field138_struct_setter>(field138_);
    __isset.field138 = true;
    return field138;
  }
  const  ::cpp2::Struct5& get_field139() const&;
   ::cpp2::Struct5 get_field139() &&;

  template <typename T_Struct21_field139_struct_setter>
   ::cpp2::Struct5& set_field139(T_Struct21_field139_struct_setter&& field139_) {
    field139 = std::forward<T_Struct21_field139_struct_setter>(field139_);
    __isset.field139 = true;
    return field139;
  }

  int32_t get_field140() const {
    return field140;
  }

  int32_t& set_field140(int32_t field140_) {
    field140 = field140_;
    __isset.field140 = true;
    return field140;
  }

  const std::string& get_field141() const& {
    return field141;
  }

  std::string get_field141() && {
    return std::move(field141);
  }

  template <typename T_Struct21_field141_struct_setter>
  std::string& set_field141(T_Struct21_field141_struct_setter&& field141_) {
    field141 = std::forward<T_Struct21_field141_struct_setter>(field141_);
    __isset.field141 = true;
    return field141;
  }

  int8_t get_field142() const {
    return field142;
  }

  int8_t& set_field142(int8_t field142_) {
    field142 = field142_;
    __isset.field142 = true;
    return field142;
  }

  int32_t get_field143() const {
    return field143;
  }

  int32_t& set_field143(int32_t field143_) {
    field143 = field143_;
    __isset.field143 = true;
    return field143;
  }
  const std::set<double>& get_field144() const&;
  std::set<double> get_field144() &&;

  template <typename T_Struct21_field144_struct_setter>
  std::set<double>& set_field144(T_Struct21_field144_struct_setter&& field144_) {
    field144 = std::forward<T_Struct21_field144_struct_setter>(field144_);
    __isset.field144 = true;
    return field144;
  }
  const std::vector<int8_t>& get_field145() const&;
  std::vector<int8_t> get_field145() &&;

  template <typename T_Struct21_field145_struct_setter>
  std::vector<int8_t>& set_field145(T_Struct21_field145_struct_setter&& field145_) {
    field145 = std::forward<T_Struct21_field145_struct_setter>(field145_);
    __isset.field145 = true;
    return field145;
  }

  int64_t get_field146() const {
    return field146;
  }

  int64_t& set_field146(int64_t field146_) {
    field146 = field146_;
    __isset.field146 = true;
    return field146;
  }
  const std::set<double>& get_field147() const&;
  std::set<double> get_field147() &&;

  template <typename T_Struct21_field147_struct_setter>
  std::set<double>& set_field147(T_Struct21_field147_struct_setter&& field147_) {
    field147 = std::forward<T_Struct21_field147_struct_setter>(field147_);
    __isset.field147 = true;
    return field147;
  }

  const std::string& get_field148() const& {
    return field148;
  }

  std::string get_field148() && {
    return std::move(field148);
  }

  template <typename T_Struct21_field148_struct_setter>
  std::string& set_field148(T_Struct21_field148_struct_setter&& field148_) {
    field148 = std::forward<T_Struct21_field148_struct_setter>(field148_);
    __isset.field148 = true;
    return field148;
  }

  int16_t get_field149() const {
    return field149;
  }

  int16_t& set_field149(int16_t field149_) {
    field149 = field149_;
    __isset.field149 = true;
    return field149;
  }
  const std::set<std::map<int16_t, float>>& get_field150() const&;
  std::set<std::map<int16_t, float>> get_field150() &&;

  template <typename T_Struct21_field150_struct_setter>
  std::set<std::map<int16_t, float>>& set_field150(T_Struct21_field150_struct_setter&& field150_) {
    field150 = std::forward<T_Struct21_field150_struct_setter>(field150_);
    __isset.field150 = true;
    return field150;
  }
  const  ::cpp2::Struct14& get_field151() const&;
   ::cpp2::Struct14 get_field151() &&;

  template <typename T_Struct21_field151_struct_setter>
   ::cpp2::Struct14& set_field151(T_Struct21_field151_struct_setter&& field151_) {
    field151 = std::forward<T_Struct21_field151_struct_setter>(field151_);
    __isset.field151 = true;
    return field151;
  }
  const  ::cpp2::Struct3& get_field152() const&;
   ::cpp2::Struct3 get_field152() &&;

  template <typename T_Struct21_field152_struct_setter>
   ::cpp2::Struct3& set_field152(T_Struct21_field152_struct_setter&& field152_) {
    field152 = std::forward<T_Struct21_field152_struct_setter>(field152_);
    __isset.field152 = true;
    return field152;
  }
  const std::set<std::string>& get_field153() const&;
  std::set<std::string> get_field153() &&;

  template <typename T_Struct21_field153_struct_setter>
  std::set<std::string>& set_field153(T_Struct21_field153_struct_setter&& field153_) {
    field153 = std::forward<T_Struct21_field153_struct_setter>(field153_);
    __isset.field153 = true;
    return field153;
  }
  const std::vector<int8_t>& get_field154() const&;
  std::vector<int8_t> get_field154() &&;

  template <typename T_Struct21_field154_struct_setter>
  std::vector<int8_t>& set_field154(T_Struct21_field154_struct_setter&& field154_) {
    field154 = std::forward<T_Struct21_field154_struct_setter>(field154_);
    __isset.field154 = true;
    return field154;
  }

  int8_t get_field155() const {
    return field155;
  }

  int8_t& set_field155(int8_t field155_) {
    field155 = field155_;
    __isset.field155 = true;
    return field155;
  }

  int8_t get_field156() const {
    return field156;
  }

  int8_t& set_field156(int8_t field156_) {
    field156 = field156_;
    __isset.field156 = true;
    return field156;
  }

  float get_field157() const {
    return field157;
  }

  float& set_field157(float field157_) {
    field157 = field157_;
    __isset.field157 = true;
    return field157;
  }
  const  ::cpp2::Struct2& get_field158() const&;
   ::cpp2::Struct2 get_field158() &&;

  template <typename T_Struct21_field158_struct_setter>
   ::cpp2::Struct2& set_field158(T_Struct21_field158_struct_setter&& field158_) {
    field158 = std::forward<T_Struct21_field158_struct_setter>(field158_);
    __isset.field158 = true;
    return field158;
  }

  int32_t get_field159() const {
    return field159;
  }

  int32_t& set_field159(int32_t field159_) {
    field159 = field159_;
    __isset.field159 = true;
    return field159;
  }

  double get_field160() const {
    return field160;
  }

  double& set_field160(double field160_) {
    field160 = field160_;
    __isset.field160 = true;
    return field160;
  }

  bool get_field161() const {
    return field161;
  }

  bool& set_field161(bool field161_) {
    field161 = field161_;
    __isset.field161 = true;
    return field161;
  }
  const std::vector<std::string>& get_field162() const&;
  std::vector<std::string> get_field162() &&;

  template <typename T_Struct21_field162_struct_setter>
  std::vector<std::string>& set_field162(T_Struct21_field162_struct_setter&& field162_) {
    field162 = std::forward<T_Struct21_field162_struct_setter>(field162_);
    __isset.field162 = true;
    return field162;
  }
  const std::map< ::cpp2::Struct7, std::map<int64_t,  ::cpp2::Struct4>>& get_field163() const&;
  std::map< ::cpp2::Struct7, std::map<int64_t,  ::cpp2::Struct4>> get_field163() &&;

  template <typename T_Struct21_field163_struct_setter>
  std::map< ::cpp2::Struct7, std::map<int64_t,  ::cpp2::Struct4>>& set_field163(T_Struct21_field163_struct_setter&& field163_) {
    field163 = std::forward<T_Struct21_field163_struct_setter>(field163_);
    __isset.field163 = true;
    return field163;
  }
  const std::set<double>& get_field164() const&;
  std::set<double> get_field164() &&;

  template <typename T_Struct21_field164_struct_setter>
  std::set<double>& set_field164(T_Struct21_field164_struct_setter&& field164_) {
    field164 = std::forward<T_Struct21_field164_struct_setter>(field164_);
    __isset.field164 = true;
    return field164;
  }
  const std::vector<int64_t>& get_field165() const&;
  std::vector<int64_t> get_field165() &&;

  template <typename T_Struct21_field165_struct_setter>
  std::vector<int64_t>& set_field165(T_Struct21_field165_struct_setter&& field165_) {
    field165 = std::forward<T_Struct21_field165_struct_setter>(field165_);
    __isset.field165 = true;
    return field165;
  }
  const std::set<int8_t>& get_field166() const&;
  std::set<int8_t> get_field166() &&;

  template <typename T_Struct21_field166_struct_setter>
  std::set<int8_t>& set_field166(T_Struct21_field166_struct_setter&& field166_) {
    field166 = std::forward<T_Struct21_field166_struct_setter>(field166_);
    __isset.field166 = true;
    return field166;
  }
  const  ::cpp2::Struct4& get_field167() const&;
   ::cpp2::Struct4 get_field167() &&;

  template <typename T_Struct21_field167_struct_setter>
   ::cpp2::Struct4& set_field167(T_Struct21_field167_struct_setter&& field167_) {
    field167 = std::forward<T_Struct21_field167_struct_setter>(field167_);
    __isset.field167 = true;
    return field167;
  }

  const std::string& get_field168() const& {
    return field168;
  }

  std::string get_field168() && {
    return std::move(field168);
  }

  template <typename T_Struct21_field168_struct_setter>
  std::string& set_field168(T_Struct21_field168_struct_setter&& field168_) {
    field168 = std::forward<T_Struct21_field168_struct_setter>(field168_);
    __isset.field168 = true;
    return field168;
  }

  int16_t get_field169() const {
    return field169;
  }

  int16_t& set_field169(int16_t field169_) {
    field169 = field169_;
    __isset.field169 = true;
    return field169;
  }

  const std::string& get_field170() const& {
    return field170;
  }

  std::string get_field170() && {
    return std::move(field170);
  }

  template <typename T_Struct21_field170_struct_setter>
  std::string& set_field170(T_Struct21_field170_struct_setter&& field170_) {
    field170 = std::forward<T_Struct21_field170_struct_setter>(field170_);
    __isset.field170 = true;
    return field170;
  }
  const std::map<int16_t, int16_t>& get_field171() const&;
  std::map<int16_t, int16_t> get_field171() &&;

  template <typename T_Struct21_field171_struct_setter>
  std::map<int16_t, int16_t>& set_field171(T_Struct21_field171_struct_setter&& field171_) {
    field171 = std::forward<T_Struct21_field171_struct_setter>(field171_);
    __isset.field171 = true;
    return field171;
  }
  const std::set<int32_t>& get_field172() const&;
  std::set<int32_t> get_field172() &&;

  template <typename T_Struct21_field172_struct_setter>
  std::set<int32_t>& set_field172(T_Struct21_field172_struct_setter&& field172_) {
    field172 = std::forward<T_Struct21_field172_struct_setter>(field172_);
    __isset.field172 = true;
    return field172;
  }
  const std::set< ::cpp2::Struct5>& get_field173() const&;
  std::set< ::cpp2::Struct5> get_field173() &&;

  template <typename T_Struct21_field173_struct_setter>
  std::set< ::cpp2::Struct5>& set_field173(T_Struct21_field173_struct_setter&& field173_) {
    field173 = std::forward<T_Struct21_field173_struct_setter>(field173_);
    __isset.field173 = true;
    return field173;
  }

  const std::string& get_field174() const& {
    return field174;
  }

  std::string get_field174() && {
    return std::move(field174);
  }

  template <typename T_Struct21_field174_struct_setter>
  std::string& set_field174(T_Struct21_field174_struct_setter&& field174_) {
    field174 = std::forward<T_Struct21_field174_struct_setter>(field174_);
    __isset.field174 = true;
    return field174;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct21& a, Struct21& b);
extern template uint32_t Struct21::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct21::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct21::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct21::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct21::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct21::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct21::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct21::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct21>::clear( ::cpp2::Struct21* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct21>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct21>::write(Protocol* proto,  ::cpp2::Struct21 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct21>::read(Protocol* proto,  ::cpp2::Struct21* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct21>::serializedSize(Protocol const* proto,  ::cpp2::Struct21 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct21>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct21 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct22 : private apache::thrift::detail::st::ComparisonOperators<Struct22> {
 public:

  Struct22() :
      field1(0),
      field2(0),
      field6(0),
      field7(0),
      field11(0),
      field12(0),
      field14(0),
      field16(0),
      field19(0),
      field20(0),
      field21(0),
      field22(0),
      field23(0),
      field25(0),
      field27(0),
      field30(0),
      field33(0),
      field40(0),
      field43(0),
      field45(0),
      field46(0),
      field50(0),
      field53(0),
      field54(0),
      field55(0),
      field57(0),
      field59(0),
      field62(0),
      field64(0),
      field65(0),
      field67(0),
      field68(0),
      field69(0),
      field71(0),
      field72(0),
      field74(0),
      field80(0),
      field81(0),
      field82(0),
      field85(0),
      field88(0),
      field91(0),
      field93(0) {}
  // FragileConstructor for use in initialization lists only

  Struct22(apache::thrift::FragileConstructor, double field1__arg, int32_t field2__arg,  ::cpp2::Struct9 field3__arg, std::map<float, std::vector<bool>> field4__arg, std::map<std::string, bool> field5__arg, bool field6__arg, float field7__arg, std::set<int8_t> field8__arg, std::string field9__arg, std::map< ::cpp2::Struct3, bool> field10__arg, float field11__arg, float field12__arg, std::vector<std::vector<float>> field13__arg, float field14__arg, std::vector<std::string> field15__arg, int8_t field16__arg,  ::cpp2::Struct9 field17__arg, std::map<int64_t, int8_t> field18__arg, int32_t field19__arg, double field20__arg, float field21__arg, int8_t field22__arg, int8_t field23__arg,  ::cpp2::Struct12 field24__arg, float field25__arg, std::string field26__arg, int16_t field27__arg, std::vector<std::vector<std::string>> field28__arg, std::vector<int16_t> field29__arg, int8_t field30__arg, std::set<double> field31__arg,  ::cpp2::Struct0 field32__arg, int8_t field33__arg, std::map<std::string, std::string> field34__arg, std::vector<double> field35__arg, std::vector<int32_t> field36__arg, std::vector< ::cpp2::Struct2> field37__arg, std::string field38__arg, std::set<int32_t> field39__arg, bool field40__arg, std::map<int64_t, float> field41__arg, std::string field42__arg, int16_t field43__arg, std::map<int16_t, float> field44__arg, bool field45__arg, int16_t field46__arg, std::string field47__arg,  ::cpp2::Struct9 field48__arg, std::map<double, std::vector<std::string>> field49__arg, float field50__arg, std::set<bool> field51__arg, std::map<float, float> field52__arg, int16_t field53__arg, int64_t field54__arg, int8_t field55__arg,  ::cpp2::Struct9 field56__arg, double field57__arg, std::vector<std::string> field58__arg, int32_t field59__arg, std::string field60__arg, std::string field61__arg, double field62__arg, std::set<int16_t> field63__arg, bool field64__arg, float field65__arg, std::map<int8_t, std::string> field66__arg, int64_t field67__arg, int16_t field68__arg, int8_t field69__arg, std::map<int32_t, int8_t> field70__arg, int64_t field71__arg, float field72__arg, std::string field73__arg, int8_t field74__arg, std::vector<bool> field75__arg,  ::cpp2::Struct15 field76__arg, std::map<double, std::map<float, std::vector<int32_t>>> field77__arg, std::vector<std::string> field78__arg,  ::cpp2::Struct7 field79__arg, int16_t field80__arg, int64_t field81__arg, double field82__arg, std::vector<double> field83__arg, std::set<double> field84__arg, int64_t field85__arg,  ::cpp2::Struct3 field86__arg,  ::cpp2::Struct15 field87__arg, int8_t field88__arg, std::vector<std::vector<int8_t>> field89__arg, std::string field90__arg, int16_t field91__arg, std::set<std::vector<int16_t>> field92__arg, int64_t field93__arg, std::string field94__arg, std::map<float, std::set<int64_t>> field95__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct22(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct22(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }

  Struct22(Struct22&&) = default;

  Struct22(const Struct22&) = default;

  Struct22& operator=(Struct22&&) = default;

  Struct22& operator=(const Struct22&) = default;
  void __clear();

  virtual ~Struct22() {}

  double field1;
  int32_t field2;
   ::cpp2::Struct9 field3;
  std::map<float, std::vector<bool>> field4;
  std::map<std::string, bool> field5;
  bool field6;
  float field7;
  std::set<int8_t> field8;
  std::string field9;
  std::map< ::cpp2::Struct3, bool> field10;
  float field11;
  float field12;
  std::vector<std::vector<float>> field13;
  float field14;
  std::vector<std::string> field15;
  int8_t field16;
   ::cpp2::Struct9 field17;
  std::map<int64_t, int8_t> field18;
  int32_t field19;
  double field20;
  float field21;
  int8_t field22;
  int8_t field23;
   ::cpp2::Struct12 field24;
  float field25;
  std::string field26;
  int16_t field27;
  std::vector<std::vector<std::string>> field28;
  std::vector<int16_t> field29;
  int8_t field30;
  std::set<double> field31;
   ::cpp2::Struct0 field32;
  int8_t field33;
  std::map<std::string, std::string> field34;
  std::vector<double> field35;
  std::vector<int32_t> field36;
  std::vector< ::cpp2::Struct2> field37;
  std::string field38;
  std::set<int32_t> field39;
  bool field40;
  std::map<int64_t, float> field41;
  std::string field42;
  int16_t field43;
  std::map<int16_t, float> field44;
  bool field45;
  int16_t field46;
  std::string field47;
   ::cpp2::Struct9 field48;
  std::map<double, std::vector<std::string>> field49;
  float field50;
  std::set<bool> field51;
  std::map<float, float> field52;
  int16_t field53;
  int64_t field54;
  int8_t field55;
   ::cpp2::Struct9 field56;
  double field57;
  std::vector<std::string> field58;
  int32_t field59;
  std::string field60;
  std::string field61;
  double field62;
  std::set<int16_t> field63;
  bool field64;
  float field65;
  std::map<int8_t, std::string> field66;
  int64_t field67;
  int16_t field68;
  int8_t field69;
  std::map<int32_t, int8_t> field70;
  int64_t field71;
  float field72;
  std::string field73;
  int8_t field74;
  std::vector<bool> field75;
   ::cpp2::Struct15 field76;
  std::map<double, std::map<float, std::vector<int32_t>>> field77;
  std::vector<std::string> field78;
   ::cpp2::Struct7 field79;
  int16_t field80;
  int64_t field81;
  double field82;
  std::vector<double> field83;
  std::set<double> field84;
  int64_t field85;
   ::cpp2::Struct3 field86;
   ::cpp2::Struct15 field87;
  int8_t field88;
  std::vector<std::vector<int8_t>> field89;
  std::string field90;
  int16_t field91;
  std::set<std::vector<int16_t>> field92;
  int64_t field93;
  std::string field94;
  std::map<float, std::set<int64_t>> field95;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
  } __isset;
  bool operator==(const Struct22& rhs) const;

  bool operator < (const Struct22& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    (void)rhs;
    return false;
  }

  double get_field1() const {
    return field1;
  }

  double& set_field1(double field1_) {
    field1 = field1_;
    __isset.field1 = true;
    return field1;
  }

  int32_t get_field2() const {
    return field2;
  }

  int32_t& set_field2(int32_t field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }
  const  ::cpp2::Struct9& get_field3() const&;
   ::cpp2::Struct9 get_field3() &&;

  template <typename T_Struct22_field3_struct_setter>
   ::cpp2::Struct9& set_field3(T_Struct22_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct22_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }
  const std::map<float, std::vector<bool>>& get_field4() const&;
  std::map<float, std::vector<bool>> get_field4() &&;

  template <typename T_Struct22_field4_struct_setter>
  std::map<float, std::vector<bool>>& set_field4(T_Struct22_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct22_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }
  const std::map<std::string, bool>& get_field5() const&;
  std::map<std::string, bool> get_field5() &&;

  template <typename T_Struct22_field5_struct_setter>
  std::map<std::string, bool>& set_field5(T_Struct22_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct22_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }

  bool get_field6() const {
    return field6;
  }

  bool& set_field6(bool field6_) {
    field6 = field6_;
    __isset.field6 = true;
    return field6;
  }

  float get_field7() const {
    return field7;
  }

  float& set_field7(float field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }
  const std::set<int8_t>& get_field8() const&;
  std::set<int8_t> get_field8() &&;

  template <typename T_Struct22_field8_struct_setter>
  std::set<int8_t>& set_field8(T_Struct22_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct22_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }

  const std::string& get_field9() const& {
    return field9;
  }

  std::string get_field9() && {
    return std::move(field9);
  }

  template <typename T_Struct22_field9_struct_setter>
  std::string& set_field9(T_Struct22_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct22_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }
  const std::map< ::cpp2::Struct3, bool>& get_field10() const&;
  std::map< ::cpp2::Struct3, bool> get_field10() &&;

  template <typename T_Struct22_field10_struct_setter>
  std::map< ::cpp2::Struct3, bool>& set_field10(T_Struct22_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct22_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }

  float get_field11() const {
    return field11;
  }

  float& set_field11(float field11_) {
    field11 = field11_;
    __isset.field11 = true;
    return field11;
  }

  float get_field12() const {
    return field12;
  }

  float& set_field12(float field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }
  const std::vector<std::vector<float>>& get_field13() const&;
  std::vector<std::vector<float>> get_field13() &&;

  template <typename T_Struct22_field13_struct_setter>
  std::vector<std::vector<float>>& set_field13(T_Struct22_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct22_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }

  float get_field14() const {
    return field14;
  }

  float& set_field14(float field14_) {
    field14 = field14_;
    __isset.field14 = true;
    return field14;
  }
  const std::vector<std::string>& get_field15() const&;
  std::vector<std::string> get_field15() &&;

  template <typename T_Struct22_field15_struct_setter>
  std::vector<std::string>& set_field15(T_Struct22_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct22_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }

  int8_t get_field16() const {
    return field16;
  }

  int8_t& set_field16(int8_t field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }
  const  ::cpp2::Struct9& get_field17() const&;
   ::cpp2::Struct9 get_field17() &&;

  template <typename T_Struct22_field17_struct_setter>
   ::cpp2::Struct9& set_field17(T_Struct22_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct22_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }
  const std::map<int64_t, int8_t>& get_field18() const&;
  std::map<int64_t, int8_t> get_field18() &&;

  template <typename T_Struct22_field18_struct_setter>
  std::map<int64_t, int8_t>& set_field18(T_Struct22_field18_struct_setter&& field18_) {
    field18 = std::forward<T_Struct22_field18_struct_setter>(field18_);
    __isset.field18 = true;
    return field18;
  }

  int32_t get_field19() const {
    return field19;
  }

  int32_t& set_field19(int32_t field19_) {
    field19 = field19_;
    __isset.field19 = true;
    return field19;
  }

  double get_field20() const {
    return field20;
  }

  double& set_field20(double field20_) {
    field20 = field20_;
    __isset.field20 = true;
    return field20;
  }

  float get_field21() const {
    return field21;
  }

  float& set_field21(float field21_) {
    field21 = field21_;
    __isset.field21 = true;
    return field21;
  }

  int8_t get_field22() const {
    return field22;
  }

  int8_t& set_field22(int8_t field22_) {
    field22 = field22_;
    __isset.field22 = true;
    return field22;
  }

  int8_t get_field23() const {
    return field23;
  }

  int8_t& set_field23(int8_t field23_) {
    field23 = field23_;
    __isset.field23 = true;
    return field23;
  }
  const  ::cpp2::Struct12& get_field24() const&;
   ::cpp2::Struct12 get_field24() &&;

  template <typename T_Struct22_field24_struct_setter>
   ::cpp2::Struct12& set_field24(T_Struct22_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct22_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }

  float get_field25() const {
    return field25;
  }

  float& set_field25(float field25_) {
    field25 = field25_;
    __isset.field25 = true;
    return field25;
  }

  const std::string& get_field26() const& {
    return field26;
  }

  std::string get_field26() && {
    return std::move(field26);
  }

  template <typename T_Struct22_field26_struct_setter>
  std::string& set_field26(T_Struct22_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct22_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }

  int16_t get_field27() const {
    return field27;
  }

  int16_t& set_field27(int16_t field27_) {
    field27 = field27_;
    __isset.field27 = true;
    return field27;
  }
  const std::vector<std::vector<std::string>>& get_field28() const&;
  std::vector<std::vector<std::string>> get_field28() &&;

  template <typename T_Struct22_field28_struct_setter>
  std::vector<std::vector<std::string>>& set_field28(T_Struct22_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct22_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }
  const std::vector<int16_t>& get_field29() const&;
  std::vector<int16_t> get_field29() &&;

  template <typename T_Struct22_field29_struct_setter>
  std::vector<int16_t>& set_field29(T_Struct22_field29_struct_setter&& field29_) {
    field29 = std::forward<T_Struct22_field29_struct_setter>(field29_);
    __isset.field29 = true;
    return field29;
  }

  int8_t get_field30() const {
    return field30;
  }

  int8_t& set_field30(int8_t field30_) {
    field30 = field30_;
    __isset.field30 = true;
    return field30;
  }
  const std::set<double>& get_field31() const&;
  std::set<double> get_field31() &&;

  template <typename T_Struct22_field31_struct_setter>
  std::set<double>& set_field31(T_Struct22_field31_struct_setter&& field31_) {
    field31 = std::forward<T_Struct22_field31_struct_setter>(field31_);
    __isset.field31 = true;
    return field31;
  }
  const  ::cpp2::Struct0& get_field32() const&;
   ::cpp2::Struct0 get_field32() &&;

  template <typename T_Struct22_field32_struct_setter>
   ::cpp2::Struct0& set_field32(T_Struct22_field32_struct_setter&& field32_) {
    field32 = std::forward<T_Struct22_field32_struct_setter>(field32_);
    __isset.field32 = true;
    return field32;
  }

  int8_t get_field33() const {
    return field33;
  }

  int8_t& set_field33(int8_t field33_) {
    field33 = field33_;
    __isset.field33 = true;
    return field33;
  }
  const std::map<std::string, std::string>& get_field34() const&;
  std::map<std::string, std::string> get_field34() &&;

  template <typename T_Struct22_field34_struct_setter>
  std::map<std::string, std::string>& set_field34(T_Struct22_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct22_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }
  const std::vector<double>& get_field35() const&;
  std::vector<double> get_field35() &&;

  template <typename T_Struct22_field35_struct_setter>
  std::vector<double>& set_field35(T_Struct22_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct22_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }
  const std::vector<int32_t>& get_field36() const&;
  std::vector<int32_t> get_field36() &&;

  template <typename T_Struct22_field36_struct_setter>
  std::vector<int32_t>& set_field36(T_Struct22_field36_struct_setter&& field36_) {
    field36 = std::forward<T_Struct22_field36_struct_setter>(field36_);
    __isset.field36 = true;
    return field36;
  }
  const std::vector< ::cpp2::Struct2>& get_field37() const&;
  std::vector< ::cpp2::Struct2> get_field37() &&;

  template <typename T_Struct22_field37_struct_setter>
  std::vector< ::cpp2::Struct2>& set_field37(T_Struct22_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct22_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }

  const std::string& get_field38() const& {
    return field38;
  }

  std::string get_field38() && {
    return std::move(field38);
  }

  template <typename T_Struct22_field38_struct_setter>
  std::string& set_field38(T_Struct22_field38_struct_setter&& field38_) {
    field38 = std::forward<T_Struct22_field38_struct_setter>(field38_);
    __isset.field38 = true;
    return field38;
  }
  const std::set<int32_t>& get_field39() const&;
  std::set<int32_t> get_field39() &&;

  template <typename T_Struct22_field39_struct_setter>
  std::set<int32_t>& set_field39(T_Struct22_field39_struct_setter&& field39_) {
    field39 = std::forward<T_Struct22_field39_struct_setter>(field39_);
    __isset.field39 = true;
    return field39;
  }

  bool get_field40() const {
    return field40;
  }

  bool& set_field40(bool field40_) {
    field40 = field40_;
    __isset.field40 = true;
    return field40;
  }
  const std::map<int64_t, float>& get_field41() const&;
  std::map<int64_t, float> get_field41() &&;

  template <typename T_Struct22_field41_struct_setter>
  std::map<int64_t, float>& set_field41(T_Struct22_field41_struct_setter&& field41_) {
    field41 = std::forward<T_Struct22_field41_struct_setter>(field41_);
    __isset.field41 = true;
    return field41;
  }

  const std::string& get_field42() const& {
    return field42;
  }

  std::string get_field42() && {
    return std::move(field42);
  }

  template <typename T_Struct22_field42_struct_setter>
  std::string& set_field42(T_Struct22_field42_struct_setter&& field42_) {
    field42 = std::forward<T_Struct22_field42_struct_setter>(field42_);
    __isset.field42 = true;
    return field42;
  }

  int16_t get_field43() const {
    return field43;
  }

  int16_t& set_field43(int16_t field43_) {
    field43 = field43_;
    __isset.field43 = true;
    return field43;
  }
  const std::map<int16_t, float>& get_field44() const&;
  std::map<int16_t, float> get_field44() &&;

  template <typename T_Struct22_field44_struct_setter>
  std::map<int16_t, float>& set_field44(T_Struct22_field44_struct_setter&& field44_) {
    field44 = std::forward<T_Struct22_field44_struct_setter>(field44_);
    __isset.field44 = true;
    return field44;
  }

  bool get_field45() const {
    return field45;
  }

  bool& set_field45(bool field45_) {
    field45 = field45_;
    __isset.field45 = true;
    return field45;
  }

  int16_t get_field46() const {
    return field46;
  }

  int16_t& set_field46(int16_t field46_) {
    field46 = field46_;
    __isset.field46 = true;
    return field46;
  }

  const std::string& get_field47() const& {
    return field47;
  }

  std::string get_field47() && {
    return std::move(field47);
  }

  template <typename T_Struct22_field47_struct_setter>
  std::string& set_field47(T_Struct22_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct22_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }
  const  ::cpp2::Struct9& get_field48() const&;
   ::cpp2::Struct9 get_field48() &&;

  template <typename T_Struct22_field48_struct_setter>
   ::cpp2::Struct9& set_field48(T_Struct22_field48_struct_setter&& field48_) {
    field48 = std::forward<T_Struct22_field48_struct_setter>(field48_);
    __isset.field48 = true;
    return field48;
  }
  const std::map<double, std::vector<std::string>>& get_field49() const&;
  std::map<double, std::vector<std::string>> get_field49() &&;

  template <typename T_Struct22_field49_struct_setter>
  std::map<double, std::vector<std::string>>& set_field49(T_Struct22_field49_struct_setter&& field49_) {
    field49 = std::forward<T_Struct22_field49_struct_setter>(field49_);
    __isset.field49 = true;
    return field49;
  }

  float get_field50() const {
    return field50;
  }

  float& set_field50(float field50_) {
    field50 = field50_;
    __isset.field50 = true;
    return field50;
  }
  const std::set<bool>& get_field51() const&;
  std::set<bool> get_field51() &&;

  template <typename T_Struct22_field51_struct_setter>
  std::set<bool>& set_field51(T_Struct22_field51_struct_setter&& field51_) {
    field51 = std::forward<T_Struct22_field51_struct_setter>(field51_);
    __isset.field51 = true;
    return field51;
  }
  const std::map<float, float>& get_field52() const&;
  std::map<float, float> get_field52() &&;

  template <typename T_Struct22_field52_struct_setter>
  std::map<float, float>& set_field52(T_Struct22_field52_struct_setter&& field52_) {
    field52 = std::forward<T_Struct22_field52_struct_setter>(field52_);
    __isset.field52 = true;
    return field52;
  }

  int16_t get_field53() const {
    return field53;
  }

  int16_t& set_field53(int16_t field53_) {
    field53 = field53_;
    __isset.field53 = true;
    return field53;
  }

  int64_t get_field54() const {
    return field54;
  }

  int64_t& set_field54(int64_t field54_) {
    field54 = field54_;
    __isset.field54 = true;
    return field54;
  }

  int8_t get_field55() const {
    return field55;
  }

  int8_t& set_field55(int8_t field55_) {
    field55 = field55_;
    __isset.field55 = true;
    return field55;
  }
  const  ::cpp2::Struct9& get_field56() const&;
   ::cpp2::Struct9 get_field56() &&;

  template <typename T_Struct22_field56_struct_setter>
   ::cpp2::Struct9& set_field56(T_Struct22_field56_struct_setter&& field56_) {
    field56 = std::forward<T_Struct22_field56_struct_setter>(field56_);
    __isset.field56 = true;
    return field56;
  }

  double get_field57() const {
    return field57;
  }

  double& set_field57(double field57_) {
    field57 = field57_;
    __isset.field57 = true;
    return field57;
  }
  const std::vector<std::string>& get_field58() const&;
  std::vector<std::string> get_field58() &&;

  template <typename T_Struct22_field58_struct_setter>
  std::vector<std::string>& set_field58(T_Struct22_field58_struct_setter&& field58_) {
    field58 = std::forward<T_Struct22_field58_struct_setter>(field58_);
    __isset.field58 = true;
    return field58;
  }

  int32_t get_field59() const {
    return field59;
  }

  int32_t& set_field59(int32_t field59_) {
    field59 = field59_;
    __isset.field59 = true;
    return field59;
  }

  const std::string& get_field60() const& {
    return field60;
  }

  std::string get_field60() && {
    return std::move(field60);
  }

  template <typename T_Struct22_field60_struct_setter>
  std::string& set_field60(T_Struct22_field60_struct_setter&& field60_) {
    field60 = std::forward<T_Struct22_field60_struct_setter>(field60_);
    __isset.field60 = true;
    return field60;
  }

  const std::string& get_field61() const& {
    return field61;
  }

  std::string get_field61() && {
    return std::move(field61);
  }

  template <typename T_Struct22_field61_struct_setter>
  std::string& set_field61(T_Struct22_field61_struct_setter&& field61_) {
    field61 = std::forward<T_Struct22_field61_struct_setter>(field61_);
    __isset.field61 = true;
    return field61;
  }

  double get_field62() const {
    return field62;
  }

  double& set_field62(double field62_) {
    field62 = field62_;
    __isset.field62 = true;
    return field62;
  }
  const std::set<int16_t>& get_field63() const&;
  std::set<int16_t> get_field63() &&;

  template <typename T_Struct22_field63_struct_setter>
  std::set<int16_t>& set_field63(T_Struct22_field63_struct_setter&& field63_) {
    field63 = std::forward<T_Struct22_field63_struct_setter>(field63_);
    __isset.field63 = true;
    return field63;
  }

  bool get_field64() const {
    return field64;
  }

  bool& set_field64(bool field64_) {
    field64 = field64_;
    __isset.field64 = true;
    return field64;
  }

  float get_field65() const {
    return field65;
  }

  float& set_field65(float field65_) {
    field65 = field65_;
    __isset.field65 = true;
    return field65;
  }
  const std::map<int8_t, std::string>& get_field66() const&;
  std::map<int8_t, std::string> get_field66() &&;

  template <typename T_Struct22_field66_struct_setter>
  std::map<int8_t, std::string>& set_field66(T_Struct22_field66_struct_setter&& field66_) {
    field66 = std::forward<T_Struct22_field66_struct_setter>(field66_);
    __isset.field66 = true;
    return field66;
  }

  int64_t get_field67() const {
    return field67;
  }

  int64_t& set_field67(int64_t field67_) {
    field67 = field67_;
    __isset.field67 = true;
    return field67;
  }

  int16_t get_field68() const {
    return field68;
  }

  int16_t& set_field68(int16_t field68_) {
    field68 = field68_;
    __isset.field68 = true;
    return field68;
  }

  int8_t get_field69() const {
    return field69;
  }

  int8_t& set_field69(int8_t field69_) {
    field69 = field69_;
    __isset.field69 = true;
    return field69;
  }
  const std::map<int32_t, int8_t>& get_field70() const&;
  std::map<int32_t, int8_t> get_field70() &&;

  template <typename T_Struct22_field70_struct_setter>
  std::map<int32_t, int8_t>& set_field70(T_Struct22_field70_struct_setter&& field70_) {
    field70 = std::forward<T_Struct22_field70_struct_setter>(field70_);
    __isset.field70 = true;
    return field70;
  }

  int64_t get_field71() const {
    return field71;
  }

  int64_t& set_field71(int64_t field71_) {
    field71 = field71_;
    __isset.field71 = true;
    return field71;
  }

  float get_field72() const {
    return field72;
  }

  float& set_field72(float field72_) {
    field72 = field72_;
    __isset.field72 = true;
    return field72;
  }

  const std::string& get_field73() const& {
    return field73;
  }

  std::string get_field73() && {
    return std::move(field73);
  }

  template <typename T_Struct22_field73_struct_setter>
  std::string& set_field73(T_Struct22_field73_struct_setter&& field73_) {
    field73 = std::forward<T_Struct22_field73_struct_setter>(field73_);
    __isset.field73 = true;
    return field73;
  }

  int8_t get_field74() const {
    return field74;
  }

  int8_t& set_field74(int8_t field74_) {
    field74 = field74_;
    __isset.field74 = true;
    return field74;
  }
  const std::vector<bool>& get_field75() const&;
  std::vector<bool> get_field75() &&;

  template <typename T_Struct22_field75_struct_setter>
  std::vector<bool>& set_field75(T_Struct22_field75_struct_setter&& field75_) {
    field75 = std::forward<T_Struct22_field75_struct_setter>(field75_);
    __isset.field75 = true;
    return field75;
  }
  const  ::cpp2::Struct15& get_field76() const&;
   ::cpp2::Struct15 get_field76() &&;

  template <typename T_Struct22_field76_struct_setter>
   ::cpp2::Struct15& set_field76(T_Struct22_field76_struct_setter&& field76_) {
    field76 = std::forward<T_Struct22_field76_struct_setter>(field76_);
    __isset.field76 = true;
    return field76;
  }
  const std::map<double, std::map<float, std::vector<int32_t>>>& get_field77() const&;
  std::map<double, std::map<float, std::vector<int32_t>>> get_field77() &&;

  template <typename T_Struct22_field77_struct_setter>
  std::map<double, std::map<float, std::vector<int32_t>>>& set_field77(T_Struct22_field77_struct_setter&& field77_) {
    field77 = std::forward<T_Struct22_field77_struct_setter>(field77_);
    __isset.field77 = true;
    return field77;
  }
  const std::vector<std::string>& get_field78() const&;
  std::vector<std::string> get_field78() &&;

  template <typename T_Struct22_field78_struct_setter>
  std::vector<std::string>& set_field78(T_Struct22_field78_struct_setter&& field78_) {
    field78 = std::forward<T_Struct22_field78_struct_setter>(field78_);
    __isset.field78 = true;
    return field78;
  }
  const  ::cpp2::Struct7& get_field79() const&;
   ::cpp2::Struct7 get_field79() &&;

  template <typename T_Struct22_field79_struct_setter>
   ::cpp2::Struct7& set_field79(T_Struct22_field79_struct_setter&& field79_) {
    field79 = std::forward<T_Struct22_field79_struct_setter>(field79_);
    __isset.field79 = true;
    return field79;
  }

  int16_t get_field80() const {
    return field80;
  }

  int16_t& set_field80(int16_t field80_) {
    field80 = field80_;
    __isset.field80 = true;
    return field80;
  }

  int64_t get_field81() const {
    return field81;
  }

  int64_t& set_field81(int64_t field81_) {
    field81 = field81_;
    __isset.field81 = true;
    return field81;
  }

  double get_field82() const {
    return field82;
  }

  double& set_field82(double field82_) {
    field82 = field82_;
    __isset.field82 = true;
    return field82;
  }
  const std::vector<double>& get_field83() const&;
  std::vector<double> get_field83() &&;

  template <typename T_Struct22_field83_struct_setter>
  std::vector<double>& set_field83(T_Struct22_field83_struct_setter&& field83_) {
    field83 = std::forward<T_Struct22_field83_struct_setter>(field83_);
    __isset.field83 = true;
    return field83;
  }
  const std::set<double>& get_field84() const&;
  std::set<double> get_field84() &&;

  template <typename T_Struct22_field84_struct_setter>
  std::set<double>& set_field84(T_Struct22_field84_struct_setter&& field84_) {
    field84 = std::forward<T_Struct22_field84_struct_setter>(field84_);
    __isset.field84 = true;
    return field84;
  }

  int64_t get_field85() const {
    return field85;
  }

  int64_t& set_field85(int64_t field85_) {
    field85 = field85_;
    __isset.field85 = true;
    return field85;
  }
  const  ::cpp2::Struct3& get_field86() const&;
   ::cpp2::Struct3 get_field86() &&;

  template <typename T_Struct22_field86_struct_setter>
   ::cpp2::Struct3& set_field86(T_Struct22_field86_struct_setter&& field86_) {
    field86 = std::forward<T_Struct22_field86_struct_setter>(field86_);
    __isset.field86 = true;
    return field86;
  }
  const  ::cpp2::Struct15& get_field87() const&;
   ::cpp2::Struct15 get_field87() &&;

  template <typename T_Struct22_field87_struct_setter>
   ::cpp2::Struct15& set_field87(T_Struct22_field87_struct_setter&& field87_) {
    field87 = std::forward<T_Struct22_field87_struct_setter>(field87_);
    __isset.field87 = true;
    return field87;
  }

  int8_t get_field88() const {
    return field88;
  }

  int8_t& set_field88(int8_t field88_) {
    field88 = field88_;
    __isset.field88 = true;
    return field88;
  }
  const std::vector<std::vector<int8_t>>& get_field89() const&;
  std::vector<std::vector<int8_t>> get_field89() &&;

  template <typename T_Struct22_field89_struct_setter>
  std::vector<std::vector<int8_t>>& set_field89(T_Struct22_field89_struct_setter&& field89_) {
    field89 = std::forward<T_Struct22_field89_struct_setter>(field89_);
    __isset.field89 = true;
    return field89;
  }

  const std::string& get_field90() const& {
    return field90;
  }

  std::string get_field90() && {
    return std::move(field90);
  }

  template <typename T_Struct22_field90_struct_setter>
  std::string& set_field90(T_Struct22_field90_struct_setter&& field90_) {
    field90 = std::forward<T_Struct22_field90_struct_setter>(field90_);
    __isset.field90 = true;
    return field90;
  }

  int16_t get_field91() const {
    return field91;
  }

  int16_t& set_field91(int16_t field91_) {
    field91 = field91_;
    __isset.field91 = true;
    return field91;
  }
  const std::set<std::vector<int16_t>>& get_field92() const&;
  std::set<std::vector<int16_t>> get_field92() &&;

  template <typename T_Struct22_field92_struct_setter>
  std::set<std::vector<int16_t>>& set_field92(T_Struct22_field92_struct_setter&& field92_) {
    field92 = std::forward<T_Struct22_field92_struct_setter>(field92_);
    __isset.field92 = true;
    return field92;
  }

  int64_t get_field93() const {
    return field93;
  }

  int64_t& set_field93(int64_t field93_) {
    field93 = field93_;
    __isset.field93 = true;
    return field93;
  }

  const std::string& get_field94() const& {
    return field94;
  }

  std::string get_field94() && {
    return std::move(field94);
  }

  template <typename T_Struct22_field94_struct_setter>
  std::string& set_field94(T_Struct22_field94_struct_setter&& field94_) {
    field94 = std::forward<T_Struct22_field94_struct_setter>(field94_);
    __isset.field94 = true;
    return field94;
  }
  const std::map<float, std::set<int64_t>>& get_field95() const&;
  std::map<float, std::set<int64_t>> get_field95() &&;

  template <typename T_Struct22_field95_struct_setter>
  std::map<float, std::set<int64_t>>& set_field95(T_Struct22_field95_struct_setter&& field95_) {
    field95 = std::forward<T_Struct22_field95_struct_setter>(field95_);
    __isset.field95 = true;
    return field95;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct22& a, Struct22& b);
extern template uint32_t Struct22::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct22::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct22::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct22::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct22::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct22::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct22::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct22::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct22>::clear( ::cpp2::Struct22* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct22>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct22>::write(Protocol* proto,  ::cpp2::Struct22 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct22>::read(Protocol* proto,  ::cpp2::Struct22* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct22>::serializedSize(Protocol const* proto,  ::cpp2::Struct22 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct22>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct22 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct23 : private apache::thrift::detail::st::ComparisonOperators<Struct23> {
 public:

  Struct23() :
      field1(0),
      field6(0),
      field10(0),
      field11(0),
      field12(0),
      field19(0),
      field22(0),
      field25(0),
      field29(0),
      field30(0),
      field31(0),
      field32(0),
      field36(0),
      field41(0) {}
  // FragileConstructor for use in initialization lists only

  Struct23(apache::thrift::FragileConstructor, int16_t field1__arg,  ::cpp2::Struct15 field2__arg,  ::cpp2::Struct15 field3__arg, std::string field4__arg, std::string field5__arg, int64_t field6__arg,  ::cpp2::Struct6 field7__arg, std::vector<std::string> field8__arg, std::map<std::set<int16_t>, std::string> field9__arg, int8_t field10__arg, int64_t field11__arg, int64_t field12__arg, std::string field13__arg,  ::cpp2::Struct6 field14__arg, std::vector<std::set<std::string>> field15__arg,  ::cpp2::Struct1 field16__arg, std::string field17__arg, std::map<int8_t, int64_t> field18__arg, int8_t field19__arg, std::vector<std::map<int8_t, bool>> field20__arg, std::set<std::string> field21__arg, int64_t field22__arg, std::vector<int8_t> field23__arg, std::map<std::map<double, float>, float> field24__arg, int8_t field25__arg, std::set<std::string> field26__arg, std::map< ::cpp2::Struct1, int64_t> field27__arg, std::vector<std::string> field28__arg, int64_t field29__arg, bool field30__arg, bool field31__arg, int32_t field32__arg, std::set<std::string> field33__arg,  ::cpp2::Struct1 field34__arg, std::map<int32_t, int16_t> field35__arg, float field36__arg, std::vector<double> field37__arg, std::vector<int32_t> field38__arg,  ::cpp2::Struct4 field39__arg,  ::cpp2::Struct9 field40__arg, int64_t field41__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct23(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct23(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }

  Struct23(Struct23&&) = default;

  Struct23(const Struct23&) = default;

  Struct23& operator=(Struct23&&) = default;

  Struct23& operator=(const Struct23&) = default;
  void __clear();

  virtual ~Struct23() {}

  int16_t field1;
   ::cpp2::Struct15 field2;
   ::cpp2::Struct15 field3;
  std::string field4;
  std::string field5;
  int64_t field6;
   ::cpp2::Struct6 field7;
  std::vector<std::string> field8;
  std::map<std::set<int16_t>, std::string> field9;
  int8_t field10;
  int64_t field11;
  int64_t field12;
  std::string field13;
   ::cpp2::Struct6 field14;
  std::vector<std::set<std::string>> field15;
   ::cpp2::Struct1 field16;
  std::string field17;
  std::map<int8_t, int64_t> field18;
  int8_t field19;
  std::vector<std::map<int8_t, bool>> field20;
  std::set<std::string> field21;
  int64_t field22;
  std::vector<int8_t> field23;
  std::map<std::map<double, float>, float> field24;
  int8_t field25;
  std::set<std::string> field26;
  std::map< ::cpp2::Struct1, int64_t> field27;
  std::vector<std::string> field28;
  int64_t field29;
  bool field30;
  bool field31;
  int32_t field32;
  std::set<std::string> field33;
   ::cpp2::Struct1 field34;
  std::map<int32_t, int16_t> field35;
  float field36;
  std::vector<double> field37;
  std::vector<int32_t> field38;
   ::cpp2::Struct4 field39;
   ::cpp2::Struct9 field40;
  int64_t field41;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
  } __isset;
  bool operator==(const Struct23& rhs) const;

  bool operator < (const Struct23& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    (void)rhs;
    return false;
  }

  int16_t get_field1() const {
    return field1;
  }

  int16_t& set_field1(int16_t field1_) {
    field1 = field1_;
    __isset.field1 = true;
    return field1;
  }
  const  ::cpp2::Struct15& get_field2() const&;
   ::cpp2::Struct15 get_field2() &&;

  template <typename T_Struct23_field2_struct_setter>
   ::cpp2::Struct15& set_field2(T_Struct23_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct23_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const  ::cpp2::Struct15& get_field3() const&;
   ::cpp2::Struct15 get_field3() &&;

  template <typename T_Struct23_field3_struct_setter>
   ::cpp2::Struct15& set_field3(T_Struct23_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct23_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  const std::string& get_field4() const& {
    return field4;
  }

  std::string get_field4() && {
    return std::move(field4);
  }

  template <typename T_Struct23_field4_struct_setter>
  std::string& set_field4(T_Struct23_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct23_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }

  const std::string& get_field5() const& {
    return field5;
  }

  std::string get_field5() && {
    return std::move(field5);
  }

  template <typename T_Struct23_field5_struct_setter>
  std::string& set_field5(T_Struct23_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct23_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }

  int64_t get_field6() const {
    return field6;
  }

  int64_t& set_field6(int64_t field6_) {
    field6 = field6_;
    __isset.field6 = true;
    return field6;
  }
  const  ::cpp2::Struct6& get_field7() const&;
   ::cpp2::Struct6 get_field7() &&;

  template <typename T_Struct23_field7_struct_setter>
   ::cpp2::Struct6& set_field7(T_Struct23_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct23_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }
  const std::vector<std::string>& get_field8() const&;
  std::vector<std::string> get_field8() &&;

  template <typename T_Struct23_field8_struct_setter>
  std::vector<std::string>& set_field8(T_Struct23_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct23_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }
  const std::map<std::set<int16_t>, std::string>& get_field9() const&;
  std::map<std::set<int16_t>, std::string> get_field9() &&;

  template <typename T_Struct23_field9_struct_setter>
  std::map<std::set<int16_t>, std::string>& set_field9(T_Struct23_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct23_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }

  int8_t get_field10() const {
    return field10;
  }

  int8_t& set_field10(int8_t field10_) {
    field10 = field10_;
    __isset.field10 = true;
    return field10;
  }

  int64_t get_field11() const {
    return field11;
  }

  int64_t& set_field11(int64_t field11_) {
    field11 = field11_;
    __isset.field11 = true;
    return field11;
  }

  int64_t get_field12() const {
    return field12;
  }

  int64_t& set_field12(int64_t field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }

  const std::string& get_field13() const& {
    return field13;
  }

  std::string get_field13() && {
    return std::move(field13);
  }

  template <typename T_Struct23_field13_struct_setter>
  std::string& set_field13(T_Struct23_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct23_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }
  const  ::cpp2::Struct6& get_field14() const&;
   ::cpp2::Struct6 get_field14() &&;

  template <typename T_Struct23_field14_struct_setter>
   ::cpp2::Struct6& set_field14(T_Struct23_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct23_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }
  const std::vector<std::set<std::string>>& get_field15() const&;
  std::vector<std::set<std::string>> get_field15() &&;

  template <typename T_Struct23_field15_struct_setter>
  std::vector<std::set<std::string>>& set_field15(T_Struct23_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct23_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }
  const  ::cpp2::Struct1& get_field16() const&;
   ::cpp2::Struct1 get_field16() &&;

  template <typename T_Struct23_field16_struct_setter>
   ::cpp2::Struct1& set_field16(T_Struct23_field16_struct_setter&& field16_) {
    field16 = std::forward<T_Struct23_field16_struct_setter>(field16_);
    __isset.field16 = true;
    return field16;
  }

  const std::string& get_field17() const& {
    return field17;
  }

  std::string get_field17() && {
    return std::move(field17);
  }

  template <typename T_Struct23_field17_struct_setter>
  std::string& set_field17(T_Struct23_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct23_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }
  const std::map<int8_t, int64_t>& get_field18() const&;
  std::map<int8_t, int64_t> get_field18() &&;

  template <typename T_Struct23_field18_struct_setter>
  std::map<int8_t, int64_t>& set_field18(T_Struct23_field18_struct_setter&& field18_) {
    field18 = std::forward<T_Struct23_field18_struct_setter>(field18_);
    __isset.field18 = true;
    return field18;
  }

  int8_t get_field19() const {
    return field19;
  }

  int8_t& set_field19(int8_t field19_) {
    field19 = field19_;
    __isset.field19 = true;
    return field19;
  }
  const std::vector<std::map<int8_t, bool>>& get_field20() const&;
  std::vector<std::map<int8_t, bool>> get_field20() &&;

  template <typename T_Struct23_field20_struct_setter>
  std::vector<std::map<int8_t, bool>>& set_field20(T_Struct23_field20_struct_setter&& field20_) {
    field20 = std::forward<T_Struct23_field20_struct_setter>(field20_);
    __isset.field20 = true;
    return field20;
  }
  const std::set<std::string>& get_field21() const&;
  std::set<std::string> get_field21() &&;

  template <typename T_Struct23_field21_struct_setter>
  std::set<std::string>& set_field21(T_Struct23_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct23_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }

  int64_t get_field22() const {
    return field22;
  }

  int64_t& set_field22(int64_t field22_) {
    field22 = field22_;
    __isset.field22 = true;
    return field22;
  }
  const std::vector<int8_t>& get_field23() const&;
  std::vector<int8_t> get_field23() &&;

  template <typename T_Struct23_field23_struct_setter>
  std::vector<int8_t>& set_field23(T_Struct23_field23_struct_setter&& field23_) {
    field23 = std::forward<T_Struct23_field23_struct_setter>(field23_);
    __isset.field23 = true;
    return field23;
  }
  const std::map<std::map<double, float>, float>& get_field24() const&;
  std::map<std::map<double, float>, float> get_field24() &&;

  template <typename T_Struct23_field24_struct_setter>
  std::map<std::map<double, float>, float>& set_field24(T_Struct23_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct23_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }

  int8_t get_field25() const {
    return field25;
  }

  int8_t& set_field25(int8_t field25_) {
    field25 = field25_;
    __isset.field25 = true;
    return field25;
  }
  const std::set<std::string>& get_field26() const&;
  std::set<std::string> get_field26() &&;

  template <typename T_Struct23_field26_struct_setter>
  std::set<std::string>& set_field26(T_Struct23_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct23_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }
  const std::map< ::cpp2::Struct1, int64_t>& get_field27() const&;
  std::map< ::cpp2::Struct1, int64_t> get_field27() &&;

  template <typename T_Struct23_field27_struct_setter>
  std::map< ::cpp2::Struct1, int64_t>& set_field27(T_Struct23_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct23_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }
  const std::vector<std::string>& get_field28() const&;
  std::vector<std::string> get_field28() &&;

  template <typename T_Struct23_field28_struct_setter>
  std::vector<std::string>& set_field28(T_Struct23_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct23_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }

  int64_t get_field29() const {
    return field29;
  }

  int64_t& set_field29(int64_t field29_) {
    field29 = field29_;
    __isset.field29 = true;
    return field29;
  }

  bool get_field30() const {
    return field30;
  }

  bool& set_field30(bool field30_) {
    field30 = field30_;
    __isset.field30 = true;
    return field30;
  }

  bool get_field31() const {
    return field31;
  }

  bool& set_field31(bool field31_) {
    field31 = field31_;
    __isset.field31 = true;
    return field31;
  }

  int32_t get_field32() const {
    return field32;
  }

  int32_t& set_field32(int32_t field32_) {
    field32 = field32_;
    __isset.field32 = true;
    return field32;
  }
  const std::set<std::string>& get_field33() const&;
  std::set<std::string> get_field33() &&;

  template <typename T_Struct23_field33_struct_setter>
  std::set<std::string>& set_field33(T_Struct23_field33_struct_setter&& field33_) {
    field33 = std::forward<T_Struct23_field33_struct_setter>(field33_);
    __isset.field33 = true;
    return field33;
  }
  const  ::cpp2::Struct1& get_field34() const&;
   ::cpp2::Struct1 get_field34() &&;

  template <typename T_Struct23_field34_struct_setter>
   ::cpp2::Struct1& set_field34(T_Struct23_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct23_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }
  const std::map<int32_t, int16_t>& get_field35() const&;
  std::map<int32_t, int16_t> get_field35() &&;

  template <typename T_Struct23_field35_struct_setter>
  std::map<int32_t, int16_t>& set_field35(T_Struct23_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct23_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }

  float get_field36() const {
    return field36;
  }

  float& set_field36(float field36_) {
    field36 = field36_;
    __isset.field36 = true;
    return field36;
  }
  const std::vector<double>& get_field37() const&;
  std::vector<double> get_field37() &&;

  template <typename T_Struct23_field37_struct_setter>
  std::vector<double>& set_field37(T_Struct23_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct23_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }
  const std::vector<int32_t>& get_field38() const&;
  std::vector<int32_t> get_field38() &&;

  template <typename T_Struct23_field38_struct_setter>
  std::vector<int32_t>& set_field38(T_Struct23_field38_struct_setter&& field38_) {
    field38 = std::forward<T_Struct23_field38_struct_setter>(field38_);
    __isset.field38 = true;
    return field38;
  }
  const  ::cpp2::Struct4& get_field39() const&;
   ::cpp2::Struct4 get_field39() &&;

  template <typename T_Struct23_field39_struct_setter>
   ::cpp2::Struct4& set_field39(T_Struct23_field39_struct_setter&& field39_) {
    field39 = std::forward<T_Struct23_field39_struct_setter>(field39_);
    __isset.field39 = true;
    return field39;
  }
  const  ::cpp2::Struct9& get_field40() const&;
   ::cpp2::Struct9 get_field40() &&;

  template <typename T_Struct23_field40_struct_setter>
   ::cpp2::Struct9& set_field40(T_Struct23_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct23_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }

  int64_t get_field41() const {
    return field41;
  }

  int64_t& set_field41(int64_t field41_) {
    field41 = field41_;
    __isset.field41 = true;
    return field41;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct23& a, Struct23& b);
extern template uint32_t Struct23::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct23::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct23::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct23::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct23::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct23::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct23::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct23::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct23>::clear( ::cpp2::Struct23* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct23>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct23>::write(Protocol* proto,  ::cpp2::Struct23 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct23>::read(Protocol* proto,  ::cpp2::Struct23* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct23>::serializedSize(Protocol const* proto,  ::cpp2::Struct23 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct23>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct23 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct24 : private apache::thrift::detail::st::ComparisonOperators<Struct24> {
 public:

  Struct24() :
      field3(0),
      field4(0),
      field5(0),
      field7(0),
      field9(0),
      field10(0),
      field16(0),
      field23(0),
      field24(0),
      field27(0),
      field29(0),
      field30(0),
      field31(0),
      field39(0),
      field41(0),
      field45(0),
      field46(0),
      field47(0),
      field49(0),
      field50(0),
      field54(0) {}
  // FragileConstructor for use in initialization lists only

  Struct24(apache::thrift::FragileConstructor, std::set<std::string> field1__arg,  ::cpp2::Struct4 field2__arg, bool field3__arg, int64_t field4__arg, int16_t field5__arg, std::vector<std::string> field6__arg, double field7__arg, std::string field8__arg, int16_t field9__arg, float field10__arg, std::string field11__arg, std::set<int8_t> field12__arg, std::set<int32_t> field13__arg, std::map<int64_t, int64_t> field14__arg, std::set<int32_t> field15__arg, int16_t field16__arg, std::map<std::map<double, int8_t>, int16_t> field17__arg, std::set<bool> field18__arg, std::map<std::string, std::map<double, int16_t>> field19__arg, std::map<float, double> field20__arg,  ::cpp2::Struct7 field21__arg, std::set<float> field22__arg, bool field23__arg, int16_t field24__arg, std::vector<std::vector<bool>> field25__arg, std::string field26__arg, int32_t field27__arg, std::map<std::set<bool>, bool> field28__arg, int16_t field29__arg, int8_t field30__arg, bool field31__arg, std::vector<int32_t> field32__arg, std::set<int64_t> field33__arg,  ::cpp2::Struct4 field34__arg,  ::cpp2::Struct0 field35__arg,  ::cpp2::Struct9 field36__arg,  ::cpp2::Struct9 field37__arg,  ::cpp2::Struct1 field38__arg, bool field39__arg, std::vector<bool> field40__arg, double field41__arg,  ::cpp2::Struct3 field42__arg,  ::cpp2::Struct8 field43__arg, std::string field44__arg, int8_t field45__arg, int64_t field46__arg, int32_t field47__arg, std::set< ::cpp2::Struct18> field48__arg, float field49__arg, int8_t field50__arg,  ::cpp2::Struct5 field51__arg, std::set<std::vector<int64_t>> field52__arg, std::string field53__arg, int8_t field54__arg, std::map<int8_t, bool> field55__arg, std::vector<std::vector<double>> field56__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct24(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct24(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }

  Struct24(Struct24&&) = default;

  Struct24(const Struct24&) = default;

  Struct24& operator=(Struct24&&) = default;

  Struct24& operator=(const Struct24&) = default;
  void __clear();

  virtual ~Struct24() {}

  std::set<std::string> field1;
   ::cpp2::Struct4 field2;
  bool field3;
  int64_t field4;
  int16_t field5;
  std::vector<std::string> field6;
  double field7;
  std::string field8;
  int16_t field9;
  float field10;
  std::string field11;
  std::set<int8_t> field12;
  std::set<int32_t> field13;
  std::map<int64_t, int64_t> field14;
  std::set<int32_t> field15;
  int16_t field16;
  std::map<std::map<double, int8_t>, int16_t> field17;
  std::set<bool> field18;
  std::map<std::string, std::map<double, int16_t>> field19;
  std::map<float, double> field20;
   ::cpp2::Struct7 field21;
  std::set<float> field22;
  bool field23;
  int16_t field24;
  std::vector<std::vector<bool>> field25;
  std::string field26;
  int32_t field27;
  std::map<std::set<bool>, bool> field28;
  int16_t field29;
  int8_t field30;
  bool field31;
  std::vector<int32_t> field32;
  std::set<int64_t> field33;
   ::cpp2::Struct4 field34;
   ::cpp2::Struct0 field35;
   ::cpp2::Struct9 field36;
   ::cpp2::Struct9 field37;
   ::cpp2::Struct1 field38;
  bool field39;
  std::vector<bool> field40;
  double field41;
   ::cpp2::Struct3 field42;
   ::cpp2::Struct8 field43;
  std::string field44;
  int8_t field45;
  int64_t field46;
  int32_t field47;
  std::set< ::cpp2::Struct18> field48;
  float field49;
  int8_t field50;
   ::cpp2::Struct5 field51;
  std::set<std::vector<int64_t>> field52;
  std::string field53;
  int8_t field54;
  std::map<int8_t, bool> field55;
  std::vector<std::vector<double>> field56;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
  } __isset;
  bool operator==(const Struct24& rhs) const;

  bool operator < (const Struct24& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    (void)rhs;
    return false;
  }
  const std::set<std::string>& get_field1() const&;
  std::set<std::string> get_field1() &&;

  template <typename T_Struct24_field1_struct_setter>
  std::set<std::string>& set_field1(T_Struct24_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct24_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const  ::cpp2::Struct4& get_field2() const&;
   ::cpp2::Struct4 get_field2() &&;

  template <typename T_Struct24_field2_struct_setter>
   ::cpp2::Struct4& set_field2(T_Struct24_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct24_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }

  bool get_field3() const {
    return field3;
  }

  bool& set_field3(bool field3_) {
    field3 = field3_;
    __isset.field3 = true;
    return field3;
  }

  int64_t get_field4() const {
    return field4;
  }

  int64_t& set_field4(int64_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }

  int16_t get_field5() const {
    return field5;
  }

  int16_t& set_field5(int16_t field5_) {
    field5 = field5_;
    __isset.field5 = true;
    return field5;
  }
  const std::vector<std::string>& get_field6() const&;
  std::vector<std::string> get_field6() &&;

  template <typename T_Struct24_field6_struct_setter>
  std::vector<std::string>& set_field6(T_Struct24_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct24_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }

  double get_field7() const {
    return field7;
  }

  double& set_field7(double field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }

  const std::string& get_field8() const& {
    return field8;
  }

  std::string get_field8() && {
    return std::move(field8);
  }

  template <typename T_Struct24_field8_struct_setter>
  std::string& set_field8(T_Struct24_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct24_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }

  int16_t get_field9() const {
    return field9;
  }

  int16_t& set_field9(int16_t field9_) {
    field9 = field9_;
    __isset.field9 = true;
    return field9;
  }

  float get_field10() const {
    return field10;
  }

  float& set_field10(float field10_) {
    field10 = field10_;
    __isset.field10 = true;
    return field10;
  }

  const std::string& get_field11() const& {
    return field11;
  }

  std::string get_field11() && {
    return std::move(field11);
  }

  template <typename T_Struct24_field11_struct_setter>
  std::string& set_field11(T_Struct24_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct24_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }
  const std::set<int8_t>& get_field12() const&;
  std::set<int8_t> get_field12() &&;

  template <typename T_Struct24_field12_struct_setter>
  std::set<int8_t>& set_field12(T_Struct24_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct24_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }
  const std::set<int32_t>& get_field13() const&;
  std::set<int32_t> get_field13() &&;

  template <typename T_Struct24_field13_struct_setter>
  std::set<int32_t>& set_field13(T_Struct24_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct24_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }
  const std::map<int64_t, int64_t>& get_field14() const&;
  std::map<int64_t, int64_t> get_field14() &&;

  template <typename T_Struct24_field14_struct_setter>
  std::map<int64_t, int64_t>& set_field14(T_Struct24_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct24_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }
  const std::set<int32_t>& get_field15() const&;
  std::set<int32_t> get_field15() &&;

  template <typename T_Struct24_field15_struct_setter>
  std::set<int32_t>& set_field15(T_Struct24_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct24_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }

  int16_t get_field16() const {
    return field16;
  }

  int16_t& set_field16(int16_t field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }
  const std::map<std::map<double, int8_t>, int16_t>& get_field17() const&;
  std::map<std::map<double, int8_t>, int16_t> get_field17() &&;

  template <typename T_Struct24_field17_struct_setter>
  std::map<std::map<double, int8_t>, int16_t>& set_field17(T_Struct24_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct24_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }
  const std::set<bool>& get_field18() const&;
  std::set<bool> get_field18() &&;

  template <typename T_Struct24_field18_struct_setter>
  std::set<bool>& set_field18(T_Struct24_field18_struct_setter&& field18_) {
    field18 = std::forward<T_Struct24_field18_struct_setter>(field18_);
    __isset.field18 = true;
    return field18;
  }
  const std::map<std::string, std::map<double, int16_t>>& get_field19() const&;
  std::map<std::string, std::map<double, int16_t>> get_field19() &&;

  template <typename T_Struct24_field19_struct_setter>
  std::map<std::string, std::map<double, int16_t>>& set_field19(T_Struct24_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct24_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }
  const std::map<float, double>& get_field20() const&;
  std::map<float, double> get_field20() &&;

  template <typename T_Struct24_field20_struct_setter>
  std::map<float, double>& set_field20(T_Struct24_field20_struct_setter&& field20_) {
    field20 = std::forward<T_Struct24_field20_struct_setter>(field20_);
    __isset.field20 = true;
    return field20;
  }
  const  ::cpp2::Struct7& get_field21() const&;
   ::cpp2::Struct7 get_field21() &&;

  template <typename T_Struct24_field21_struct_setter>
   ::cpp2::Struct7& set_field21(T_Struct24_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct24_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }
  const std::set<float>& get_field22() const&;
  std::set<float> get_field22() &&;

  template <typename T_Struct24_field22_struct_setter>
  std::set<float>& set_field22(T_Struct24_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct24_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }

  bool get_field23() const {
    return field23;
  }

  bool& set_field23(bool field23_) {
    field23 = field23_;
    __isset.field23 = true;
    return field23;
  }

  int16_t get_field24() const {
    return field24;
  }

  int16_t& set_field24(int16_t field24_) {
    field24 = field24_;
    __isset.field24 = true;
    return field24;
  }
  const std::vector<std::vector<bool>>& get_field25() const&;
  std::vector<std::vector<bool>> get_field25() &&;

  template <typename T_Struct24_field25_struct_setter>
  std::vector<std::vector<bool>>& set_field25(T_Struct24_field25_struct_setter&& field25_) {
    field25 = std::forward<T_Struct24_field25_struct_setter>(field25_);
    __isset.field25 = true;
    return field25;
  }

  const std::string& get_field26() const& {
    return field26;
  }

  std::string get_field26() && {
    return std::move(field26);
  }

  template <typename T_Struct24_field26_struct_setter>
  std::string& set_field26(T_Struct24_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct24_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }

  int32_t get_field27() const {
    return field27;
  }

  int32_t& set_field27(int32_t field27_) {
    field27 = field27_;
    __isset.field27 = true;
    return field27;
  }
  const std::map<std::set<bool>, bool>& get_field28() const&;
  std::map<std::set<bool>, bool> get_field28() &&;

  template <typename T_Struct24_field28_struct_setter>
  std::map<std::set<bool>, bool>& set_field28(T_Struct24_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct24_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }

  int16_t get_field29() const {
    return field29;
  }

  int16_t& set_field29(int16_t field29_) {
    field29 = field29_;
    __isset.field29 = true;
    return field29;
  }

  int8_t get_field30() const {
    return field30;
  }

  int8_t& set_field30(int8_t field30_) {
    field30 = field30_;
    __isset.field30 = true;
    return field30;
  }

  bool get_field31() const {
    return field31;
  }

  bool& set_field31(bool field31_) {
    field31 = field31_;
    __isset.field31 = true;
    return field31;
  }
  const std::vector<int32_t>& get_field32() const&;
  std::vector<int32_t> get_field32() &&;

  template <typename T_Struct24_field32_struct_setter>
  std::vector<int32_t>& set_field32(T_Struct24_field32_struct_setter&& field32_) {
    field32 = std::forward<T_Struct24_field32_struct_setter>(field32_);
    __isset.field32 = true;
    return field32;
  }
  const std::set<int64_t>& get_field33() const&;
  std::set<int64_t> get_field33() &&;

  template <typename T_Struct24_field33_struct_setter>
  std::set<int64_t>& set_field33(T_Struct24_field33_struct_setter&& field33_) {
    field33 = std::forward<T_Struct24_field33_struct_setter>(field33_);
    __isset.field33 = true;
    return field33;
  }
  const  ::cpp2::Struct4& get_field34() const&;
   ::cpp2::Struct4 get_field34() &&;

  template <typename T_Struct24_field34_struct_setter>
   ::cpp2::Struct4& set_field34(T_Struct24_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct24_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }
  const  ::cpp2::Struct0& get_field35() const&;
   ::cpp2::Struct0 get_field35() &&;

  template <typename T_Struct24_field35_struct_setter>
   ::cpp2::Struct0& set_field35(T_Struct24_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct24_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }
  const  ::cpp2::Struct9& get_field36() const&;
   ::cpp2::Struct9 get_field36() &&;

  template <typename T_Struct24_field36_struct_setter>
   ::cpp2::Struct9& set_field36(T_Struct24_field36_struct_setter&& field36_) {
    field36 = std::forward<T_Struct24_field36_struct_setter>(field36_);
    __isset.field36 = true;
    return field36;
  }
  const  ::cpp2::Struct9& get_field37() const&;
   ::cpp2::Struct9 get_field37() &&;

  template <typename T_Struct24_field37_struct_setter>
   ::cpp2::Struct9& set_field37(T_Struct24_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct24_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }
  const  ::cpp2::Struct1& get_field38() const&;
   ::cpp2::Struct1 get_field38() &&;

  template <typename T_Struct24_field38_struct_setter>
   ::cpp2::Struct1& set_field38(T_Struct24_field38_struct_setter&& field38_) {
    field38 = std::forward<T_Struct24_field38_struct_setter>(field38_);
    __isset.field38 = true;
    return field38;
  }

  bool get_field39() const {
    return field39;
  }

  bool& set_field39(bool field39_) {
    field39 = field39_;
    __isset.field39 = true;
    return field39;
  }
  const std::vector<bool>& get_field40() const&;
  std::vector<bool> get_field40() &&;

  template <typename T_Struct24_field40_struct_setter>
  std::vector<bool>& set_field40(T_Struct24_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct24_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }

  double get_field41() const {
    return field41;
  }

  double& set_field41(double field41_) {
    field41 = field41_;
    __isset.field41 = true;
    return field41;
  }
  const  ::cpp2::Struct3& get_field42() const&;
   ::cpp2::Struct3 get_field42() &&;

  template <typename T_Struct24_field42_struct_setter>
   ::cpp2::Struct3& set_field42(T_Struct24_field42_struct_setter&& field42_) {
    field42 = std::forward<T_Struct24_field42_struct_setter>(field42_);
    __isset.field42 = true;
    return field42;
  }
  const  ::cpp2::Struct8& get_field43() const&;
   ::cpp2::Struct8 get_field43() &&;

  template <typename T_Struct24_field43_struct_setter>
   ::cpp2::Struct8& set_field43(T_Struct24_field43_struct_setter&& field43_) {
    field43 = std::forward<T_Struct24_field43_struct_setter>(field43_);
    __isset.field43 = true;
    return field43;
  }

  const std::string& get_field44() const& {
    return field44;
  }

  std::string get_field44() && {
    return std::move(field44);
  }

  template <typename T_Struct24_field44_struct_setter>
  std::string& set_field44(T_Struct24_field44_struct_setter&& field44_) {
    field44 = std::forward<T_Struct24_field44_struct_setter>(field44_);
    __isset.field44 = true;
    return field44;
  }

  int8_t get_field45() const {
    return field45;
  }

  int8_t& set_field45(int8_t field45_) {
    field45 = field45_;
    __isset.field45 = true;
    return field45;
  }

  int64_t get_field46() const {
    return field46;
  }

  int64_t& set_field46(int64_t field46_) {
    field46 = field46_;
    __isset.field46 = true;
    return field46;
  }

  int32_t get_field47() const {
    return field47;
  }

  int32_t& set_field47(int32_t field47_) {
    field47 = field47_;
    __isset.field47 = true;
    return field47;
  }
  const std::set< ::cpp2::Struct18>& get_field48() const&;
  std::set< ::cpp2::Struct18> get_field48() &&;

  template <typename T_Struct24_field48_struct_setter>
  std::set< ::cpp2::Struct18>& set_field48(T_Struct24_field48_struct_setter&& field48_) {
    field48 = std::forward<T_Struct24_field48_struct_setter>(field48_);
    __isset.field48 = true;
    return field48;
  }

  float get_field49() const {
    return field49;
  }

  float& set_field49(float field49_) {
    field49 = field49_;
    __isset.field49 = true;
    return field49;
  }

  int8_t get_field50() const {
    return field50;
  }

  int8_t& set_field50(int8_t field50_) {
    field50 = field50_;
    __isset.field50 = true;
    return field50;
  }
  const  ::cpp2::Struct5& get_field51() const&;
   ::cpp2::Struct5 get_field51() &&;

  template <typename T_Struct24_field51_struct_setter>
   ::cpp2::Struct5& set_field51(T_Struct24_field51_struct_setter&& field51_) {
    field51 = std::forward<T_Struct24_field51_struct_setter>(field51_);
    __isset.field51 = true;
    return field51;
  }
  const std::set<std::vector<int64_t>>& get_field52() const&;
  std::set<std::vector<int64_t>> get_field52() &&;

  template <typename T_Struct24_field52_struct_setter>
  std::set<std::vector<int64_t>>& set_field52(T_Struct24_field52_struct_setter&& field52_) {
    field52 = std::forward<T_Struct24_field52_struct_setter>(field52_);
    __isset.field52 = true;
    return field52;
  }

  const std::string& get_field53() const& {
    return field53;
  }

  std::string get_field53() && {
    return std::move(field53);
  }

  template <typename T_Struct24_field53_struct_setter>
  std::string& set_field53(T_Struct24_field53_struct_setter&& field53_) {
    field53 = std::forward<T_Struct24_field53_struct_setter>(field53_);
    __isset.field53 = true;
    return field53;
  }

  int8_t get_field54() const {
    return field54;
  }

  int8_t& set_field54(int8_t field54_) {
    field54 = field54_;
    __isset.field54 = true;
    return field54;
  }
  const std::map<int8_t, bool>& get_field55() const&;
  std::map<int8_t, bool> get_field55() &&;

  template <typename T_Struct24_field55_struct_setter>
  std::map<int8_t, bool>& set_field55(T_Struct24_field55_struct_setter&& field55_) {
    field55 = std::forward<T_Struct24_field55_struct_setter>(field55_);
    __isset.field55 = true;
    return field55;
  }
  const std::vector<std::vector<double>>& get_field56() const&;
  std::vector<std::vector<double>> get_field56() &&;

  template <typename T_Struct24_field56_struct_setter>
  std::vector<std::vector<double>>& set_field56(T_Struct24_field56_struct_setter&& field56_) {
    field56 = std::forward<T_Struct24_field56_struct_setter>(field56_);
    __isset.field56 = true;
    return field56;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct24& a, Struct24& b);
extern template uint32_t Struct24::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct24::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct24::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct24::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct24::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct24::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct24::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct24::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct24>::clear( ::cpp2::Struct24* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct24>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct24>::write(Protocol* proto,  ::cpp2::Struct24 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct24>::read(Protocol* proto,  ::cpp2::Struct24* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct24>::serializedSize(Protocol const* proto,  ::cpp2::Struct24 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct24>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct24 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct25 : private apache::thrift::detail::st::ComparisonOperators<Struct25> {
 public:

  Struct25() :
      field1(0),
      field6(0),
      field9(0),
      field10(0),
      field13(0),
      field18(0),
      field19(0),
      field21(0),
      field25(0),
      field26(0),
      field28(0),
      field29(0),
      field33(0),
      field40(0),
      field41(0),
      field46(0),
      field48(0),
      field49(0),
      field52(0),
      field56(0),
      field58(0),
      field60(0),
      field61(0),
      field62(0),
      field63(0),
      field66(0),
      field71(0),
      field75(0),
      field76(0),
      field77(0) {}
  // FragileConstructor for use in initialization lists only

  Struct25(apache::thrift::FragileConstructor, bool field1__arg, std::map<int8_t, int64_t> field2__arg, std::set<int8_t> field3__arg, std::map<std::string,  ::cpp2::Struct6> field4__arg, std::set<int8_t> field5__arg, int32_t field6__arg, std::string field7__arg, std::string field8__arg, int16_t field9__arg, double field10__arg, std::map<std::string,  ::cpp2::Struct15> field11__arg, std::map<std::string,  ::cpp2::Struct20> field12__arg, float field13__arg, std::set<int16_t> field14__arg, std::set<float> field15__arg, std::string field16__arg, std::map<std::vector<std::vector<std::string>>, int16_t> field17__arg, bool field18__arg, int64_t field19__arg, std::vector<std::vector<bool>> field20__arg, int16_t field21__arg, std::set<std::vector<int32_t>> field22__arg, std::set<bool> field23__arg, std::map<std::set<int64_t>, int16_t> field24__arg, int64_t field25__arg, int16_t field26__arg, std::set< ::cpp2::Struct12> field27__arg, int64_t field28__arg, int8_t field29__arg, std::set<std::string> field30__arg,  ::cpp2::Struct3 field31__arg,  ::cpp2::Struct10 field32__arg, int8_t field33__arg, std::map<std::set<std::string>, int8_t> field34__arg,  ::cpp2::Struct1 field35__arg, std::string field36__arg, std::set<std::string> field37__arg, std::vector< ::cpp2::Struct3> field38__arg, std::set<std::string> field39__arg, int32_t field40__arg, float field41__arg, std::map<int16_t, std::map<std::vector<double>, double>> field42__arg, std::vector<double> field43__arg, std::string field44__arg, std::set< ::cpp2::Struct9> field45__arg, int64_t field46__arg,  ::cpp2::Struct10 field47__arg, double field48__arg, bool field49__arg, std::map<int32_t, std::string> field50__arg,  ::cpp2::Struct10 field51__arg, int8_t field52__arg, std::vector<std::vector<double>> field53__arg, std::vector<double> field54__arg, std::map<double, float> field55__arg, float field56__arg, std::map< ::cpp2::Struct4, int8_t> field57__arg, double field58__arg, std::vector<std::map<std::vector<bool>, int64_t>> field59__arg, int8_t field60__arg, bool field61__arg, bool field62__arg, bool field63__arg, std::map<std::string, std::vector<double>> field64__arg, std::vector<double> field65__arg, double field66__arg, std::set<std::map<float, float>> field67__arg, std::string field68__arg, std::vector<std::string> field69__arg,  ::cpp2::Struct15 field70__arg, int8_t field71__arg, std::set<int16_t> field72__arg, std::vector<float> field73__arg, std::map<std::map<std::string, int16_t>, double> field74__arg, int32_t field75__arg, double field76__arg, int16_t field77__arg, std::string field78__arg, std::set<int8_t> field79__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct25(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct25(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }

  Struct25(Struct25&&) = default;

  Struct25(const Struct25&) = default;

  Struct25& operator=(Struct25&&) = default;

  Struct25& operator=(const Struct25&) = default;
  void __clear();

  virtual ~Struct25() {}

  bool field1;
  std::map<int8_t, int64_t> field2;
  std::set<int8_t> field3;
  std::map<std::string,  ::cpp2::Struct6> field4;
  std::set<int8_t> field5;
  int32_t field6;
  std::string field7;
  std::string field8;
  int16_t field9;
  double field10;
  std::map<std::string,  ::cpp2::Struct15> field11;
  std::map<std::string,  ::cpp2::Struct20> field12;
  float field13;
  std::set<int16_t> field14;
  std::set<float> field15;
  std::string field16;
  std::map<std::vector<std::vector<std::string>>, int16_t> field17;
  bool field18;
  int64_t field19;
  std::vector<std::vector<bool>> field20;
  int16_t field21;
  std::set<std::vector<int32_t>> field22;
  std::set<bool> field23;
  std::map<std::set<int64_t>, int16_t> field24;
  int64_t field25;
  int16_t field26;
  std::set< ::cpp2::Struct12> field27;
  int64_t field28;
  int8_t field29;
  std::set<std::string> field30;
   ::cpp2::Struct3 field31;
   ::cpp2::Struct10 field32;
  int8_t field33;
  std::map<std::set<std::string>, int8_t> field34;
   ::cpp2::Struct1 field35;
  std::string field36;
  std::set<std::string> field37;
  std::vector< ::cpp2::Struct3> field38;
  std::set<std::string> field39;
  int32_t field40;
  float field41;
  std::map<int16_t, std::map<std::vector<double>, double>> field42;
  std::vector<double> field43;
  std::string field44;
  std::set< ::cpp2::Struct9> field45;
  int64_t field46;
   ::cpp2::Struct10 field47;
  double field48;
  bool field49;
  std::map<int32_t, std::string> field50;
   ::cpp2::Struct10 field51;
  int8_t field52;
  std::vector<std::vector<double>> field53;
  std::vector<double> field54;
  std::map<double, float> field55;
  float field56;
  std::map< ::cpp2::Struct4, int8_t> field57;
  double field58;
  std::vector<std::map<std::vector<bool>, int64_t>> field59;
  int8_t field60;
  bool field61;
  bool field62;
  bool field63;
  std::map<std::string, std::vector<double>> field64;
  std::vector<double> field65;
  double field66;
  std::set<std::map<float, float>> field67;
  std::string field68;
  std::vector<std::string> field69;
   ::cpp2::Struct15 field70;
  int8_t field71;
  std::set<int16_t> field72;
  std::vector<float> field73;
  std::map<std::map<std::string, int16_t>, double> field74;
  int32_t field75;
  double field76;
  int16_t field77;
  std::string field78;
  std::set<int8_t> field79;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
  } __isset;
  bool operator==(const Struct25& rhs) const;

  bool operator < (const Struct25& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    (void)rhs;
    return false;
  }

  bool get_field1() const {
    return field1;
  }

  bool& set_field1(bool field1_) {
    field1 = field1_;
    __isset.field1 = true;
    return field1;
  }
  const std::map<int8_t, int64_t>& get_field2() const&;
  std::map<int8_t, int64_t> get_field2() &&;

  template <typename T_Struct25_field2_struct_setter>
  std::map<int8_t, int64_t>& set_field2(T_Struct25_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct25_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const std::set<int8_t>& get_field3() const&;
  std::set<int8_t> get_field3() &&;

  template <typename T_Struct25_field3_struct_setter>
  std::set<int8_t>& set_field3(T_Struct25_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct25_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }
  const std::map<std::string,  ::cpp2::Struct6>& get_field4() const&;
  std::map<std::string,  ::cpp2::Struct6> get_field4() &&;

  template <typename T_Struct25_field4_struct_setter>
  std::map<std::string,  ::cpp2::Struct6>& set_field4(T_Struct25_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct25_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }
  const std::set<int8_t>& get_field5() const&;
  std::set<int8_t> get_field5() &&;

  template <typename T_Struct25_field5_struct_setter>
  std::set<int8_t>& set_field5(T_Struct25_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct25_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }

  int32_t get_field6() const {
    return field6;
  }

  int32_t& set_field6(int32_t field6_) {
    field6 = field6_;
    __isset.field6 = true;
    return field6;
  }

  const std::string& get_field7() const& {
    return field7;
  }

  std::string get_field7() && {
    return std::move(field7);
  }

  template <typename T_Struct25_field7_struct_setter>
  std::string& set_field7(T_Struct25_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct25_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }

  const std::string& get_field8() const& {
    return field8;
  }

  std::string get_field8() && {
    return std::move(field8);
  }

  template <typename T_Struct25_field8_struct_setter>
  std::string& set_field8(T_Struct25_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct25_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }

  int16_t get_field9() const {
    return field9;
  }

  int16_t& set_field9(int16_t field9_) {
    field9 = field9_;
    __isset.field9 = true;
    return field9;
  }

  double get_field10() const {
    return field10;
  }

  double& set_field10(double field10_) {
    field10 = field10_;
    __isset.field10 = true;
    return field10;
  }
  const std::map<std::string,  ::cpp2::Struct15>& get_field11() const&;
  std::map<std::string,  ::cpp2::Struct15> get_field11() &&;

  template <typename T_Struct25_field11_struct_setter>
  std::map<std::string,  ::cpp2::Struct15>& set_field11(T_Struct25_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct25_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }
  const std::map<std::string,  ::cpp2::Struct20>& get_field12() const&;
  std::map<std::string,  ::cpp2::Struct20> get_field12() &&;

  template <typename T_Struct25_field12_struct_setter>
  std::map<std::string,  ::cpp2::Struct20>& set_field12(T_Struct25_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct25_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }

  float get_field13() const {
    return field13;
  }

  float& set_field13(float field13_) {
    field13 = field13_;
    __isset.field13 = true;
    return field13;
  }
  const std::set<int16_t>& get_field14() const&;
  std::set<int16_t> get_field14() &&;

  template <typename T_Struct25_field14_struct_setter>
  std::set<int16_t>& set_field14(T_Struct25_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct25_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }
  const std::set<float>& get_field15() const&;
  std::set<float> get_field15() &&;

  template <typename T_Struct25_field15_struct_setter>
  std::set<float>& set_field15(T_Struct25_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct25_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }

  const std::string& get_field16() const& {
    return field16;
  }

  std::string get_field16() && {
    return std::move(field16);
  }

  template <typename T_Struct25_field16_struct_setter>
  std::string& set_field16(T_Struct25_field16_struct_setter&& field16_) {
    field16 = std::forward<T_Struct25_field16_struct_setter>(field16_);
    __isset.field16 = true;
    return field16;
  }
  const std::map<std::vector<std::vector<std::string>>, int16_t>& get_field17() const&;
  std::map<std::vector<std::vector<std::string>>, int16_t> get_field17() &&;

  template <typename T_Struct25_field17_struct_setter>
  std::map<std::vector<std::vector<std::string>>, int16_t>& set_field17(T_Struct25_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct25_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }

  bool get_field18() const {
    return field18;
  }

  bool& set_field18(bool field18_) {
    field18 = field18_;
    __isset.field18 = true;
    return field18;
  }

  int64_t get_field19() const {
    return field19;
  }

  int64_t& set_field19(int64_t field19_) {
    field19 = field19_;
    __isset.field19 = true;
    return field19;
  }
  const std::vector<std::vector<bool>>& get_field20() const&;
  std::vector<std::vector<bool>> get_field20() &&;

  template <typename T_Struct25_field20_struct_setter>
  std::vector<std::vector<bool>>& set_field20(T_Struct25_field20_struct_setter&& field20_) {
    field20 = std::forward<T_Struct25_field20_struct_setter>(field20_);
    __isset.field20 = true;
    return field20;
  }

  int16_t get_field21() const {
    return field21;
  }

  int16_t& set_field21(int16_t field21_) {
    field21 = field21_;
    __isset.field21 = true;
    return field21;
  }
  const std::set<std::vector<int32_t>>& get_field22() const&;
  std::set<std::vector<int32_t>> get_field22() &&;

  template <typename T_Struct25_field22_struct_setter>
  std::set<std::vector<int32_t>>& set_field22(T_Struct25_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct25_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }
  const std::set<bool>& get_field23() const&;
  std::set<bool> get_field23() &&;

  template <typename T_Struct25_field23_struct_setter>
  std::set<bool>& set_field23(T_Struct25_field23_struct_setter&& field23_) {
    field23 = std::forward<T_Struct25_field23_struct_setter>(field23_);
    __isset.field23 = true;
    return field23;
  }
  const std::map<std::set<int64_t>, int16_t>& get_field24() const&;
  std::map<std::set<int64_t>, int16_t> get_field24() &&;

  template <typename T_Struct25_field24_struct_setter>
  std::map<std::set<int64_t>, int16_t>& set_field24(T_Struct25_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct25_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }

  int64_t get_field25() const {
    return field25;
  }

  int64_t& set_field25(int64_t field25_) {
    field25 = field25_;
    __isset.field25 = true;
    return field25;
  }

  int16_t get_field26() const {
    return field26;
  }

  int16_t& set_field26(int16_t field26_) {
    field26 = field26_;
    __isset.field26 = true;
    return field26;
  }
  const std::set< ::cpp2::Struct12>& get_field27() const&;
  std::set< ::cpp2::Struct12> get_field27() &&;

  template <typename T_Struct25_field27_struct_setter>
  std::set< ::cpp2::Struct12>& set_field27(T_Struct25_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct25_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }

  int64_t get_field28() const {
    return field28;
  }

  int64_t& set_field28(int64_t field28_) {
    field28 = field28_;
    __isset.field28 = true;
    return field28;
  }

  int8_t get_field29() const {
    return field29;
  }

  int8_t& set_field29(int8_t field29_) {
    field29 = field29_;
    __isset.field29 = true;
    return field29;
  }
  const std::set<std::string>& get_field30() const&;
  std::set<std::string> get_field30() &&;

  template <typename T_Struct25_field30_struct_setter>
  std::set<std::string>& set_field30(T_Struct25_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct25_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }
  const  ::cpp2::Struct3& get_field31() const&;
   ::cpp2::Struct3 get_field31() &&;

  template <typename T_Struct25_field31_struct_setter>
   ::cpp2::Struct3& set_field31(T_Struct25_field31_struct_setter&& field31_) {
    field31 = std::forward<T_Struct25_field31_struct_setter>(field31_);
    __isset.field31 = true;
    return field31;
  }
  const  ::cpp2::Struct10& get_field32() const&;
   ::cpp2::Struct10 get_field32() &&;

  template <typename T_Struct25_field32_struct_setter>
   ::cpp2::Struct10& set_field32(T_Struct25_field32_struct_setter&& field32_) {
    field32 = std::forward<T_Struct25_field32_struct_setter>(field32_);
    __isset.field32 = true;
    return field32;
  }

  int8_t get_field33() const {
    return field33;
  }

  int8_t& set_field33(int8_t field33_) {
    field33 = field33_;
    __isset.field33 = true;
    return field33;
  }
  const std::map<std::set<std::string>, int8_t>& get_field34() const&;
  std::map<std::set<std::string>, int8_t> get_field34() &&;

  template <typename T_Struct25_field34_struct_setter>
  std::map<std::set<std::string>, int8_t>& set_field34(T_Struct25_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct25_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }
  const  ::cpp2::Struct1& get_field35() const&;
   ::cpp2::Struct1 get_field35() &&;

  template <typename T_Struct25_field35_struct_setter>
   ::cpp2::Struct1& set_field35(T_Struct25_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct25_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }

  const std::string& get_field36() const& {
    return field36;
  }

  std::string get_field36() && {
    return std::move(field36);
  }

  template <typename T_Struct25_field36_struct_setter>
  std::string& set_field36(T_Struct25_field36_struct_setter&& field36_) {
    field36 = std::forward<T_Struct25_field36_struct_setter>(field36_);
    __isset.field36 = true;
    return field36;
  }
  const std::set<std::string>& get_field37() const&;
  std::set<std::string> get_field37() &&;

  template <typename T_Struct25_field37_struct_setter>
  std::set<std::string>& set_field37(T_Struct25_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct25_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }
  const std::vector< ::cpp2::Struct3>& get_field38() const&;
  std::vector< ::cpp2::Struct3> get_field38() &&;

  template <typename T_Struct25_field38_struct_setter>
  std::vector< ::cpp2::Struct3>& set_field38(T_Struct25_field38_struct_setter&& field38_) {
    field38 = std::forward<T_Struct25_field38_struct_setter>(field38_);
    __isset.field38 = true;
    return field38;
  }
  const std::set<std::string>& get_field39() const&;
  std::set<std::string> get_field39() &&;

  template <typename T_Struct25_field39_struct_setter>
  std::set<std::string>& set_field39(T_Struct25_field39_struct_setter&& field39_) {
    field39 = std::forward<T_Struct25_field39_struct_setter>(field39_);
    __isset.field39 = true;
    return field39;
  }

  int32_t get_field40() const {
    return field40;
  }

  int32_t& set_field40(int32_t field40_) {
    field40 = field40_;
    __isset.field40 = true;
    return field40;
  }

  float get_field41() const {
    return field41;
  }

  float& set_field41(float field41_) {
    field41 = field41_;
    __isset.field41 = true;
    return field41;
  }
  const std::map<int16_t, std::map<std::vector<double>, double>>& get_field42() const&;
  std::map<int16_t, std::map<std::vector<double>, double>> get_field42() &&;

  template <typename T_Struct25_field42_struct_setter>
  std::map<int16_t, std::map<std::vector<double>, double>>& set_field42(T_Struct25_field42_struct_setter&& field42_) {
    field42 = std::forward<T_Struct25_field42_struct_setter>(field42_);
    __isset.field42 = true;
    return field42;
  }
  const std::vector<double>& get_field43() const&;
  std::vector<double> get_field43() &&;

  template <typename T_Struct25_field43_struct_setter>
  std::vector<double>& set_field43(T_Struct25_field43_struct_setter&& field43_) {
    field43 = std::forward<T_Struct25_field43_struct_setter>(field43_);
    __isset.field43 = true;
    return field43;
  }

  const std::string& get_field44() const& {
    return field44;
  }

  std::string get_field44() && {
    return std::move(field44);
  }

  template <typename T_Struct25_field44_struct_setter>
  std::string& set_field44(T_Struct25_field44_struct_setter&& field44_) {
    field44 = std::forward<T_Struct25_field44_struct_setter>(field44_);
    __isset.field44 = true;
    return field44;
  }
  const std::set< ::cpp2::Struct9>& get_field45() const&;
  std::set< ::cpp2::Struct9> get_field45() &&;

  template <typename T_Struct25_field45_struct_setter>
  std::set< ::cpp2::Struct9>& set_field45(T_Struct25_field45_struct_setter&& field45_) {
    field45 = std::forward<T_Struct25_field45_struct_setter>(field45_);
    __isset.field45 = true;
    return field45;
  }

  int64_t get_field46() const {
    return field46;
  }

  int64_t& set_field46(int64_t field46_) {
    field46 = field46_;
    __isset.field46 = true;
    return field46;
  }
  const  ::cpp2::Struct10& get_field47() const&;
   ::cpp2::Struct10 get_field47() &&;

  template <typename T_Struct25_field47_struct_setter>
   ::cpp2::Struct10& set_field47(T_Struct25_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct25_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }

  double get_field48() const {
    return field48;
  }

  double& set_field48(double field48_) {
    field48 = field48_;
    __isset.field48 = true;
    return field48;
  }

  bool get_field49() const {
    return field49;
  }

  bool& set_field49(bool field49_) {
    field49 = field49_;
    __isset.field49 = true;
    return field49;
  }
  const std::map<int32_t, std::string>& get_field50() const&;
  std::map<int32_t, std::string> get_field50() &&;

  template <typename T_Struct25_field50_struct_setter>
  std::map<int32_t, std::string>& set_field50(T_Struct25_field50_struct_setter&& field50_) {
    field50 = std::forward<T_Struct25_field50_struct_setter>(field50_);
    __isset.field50 = true;
    return field50;
  }
  const  ::cpp2::Struct10& get_field51() const&;
   ::cpp2::Struct10 get_field51() &&;

  template <typename T_Struct25_field51_struct_setter>
   ::cpp2::Struct10& set_field51(T_Struct25_field51_struct_setter&& field51_) {
    field51 = std::forward<T_Struct25_field51_struct_setter>(field51_);
    __isset.field51 = true;
    return field51;
  }

  int8_t get_field52() const {
    return field52;
  }

  int8_t& set_field52(int8_t field52_) {
    field52 = field52_;
    __isset.field52 = true;
    return field52;
  }
  const std::vector<std::vector<double>>& get_field53() const&;
  std::vector<std::vector<double>> get_field53() &&;

  template <typename T_Struct25_field53_struct_setter>
  std::vector<std::vector<double>>& set_field53(T_Struct25_field53_struct_setter&& field53_) {
    field53 = std::forward<T_Struct25_field53_struct_setter>(field53_);
    __isset.field53 = true;
    return field53;
  }
  const std::vector<double>& get_field54() const&;
  std::vector<double> get_field54() &&;

  template <typename T_Struct25_field54_struct_setter>
  std::vector<double>& set_field54(T_Struct25_field54_struct_setter&& field54_) {
    field54 = std::forward<T_Struct25_field54_struct_setter>(field54_);
    __isset.field54 = true;
    return field54;
  }
  const std::map<double, float>& get_field55() const&;
  std::map<double, float> get_field55() &&;

  template <typename T_Struct25_field55_struct_setter>
  std::map<double, float>& set_field55(T_Struct25_field55_struct_setter&& field55_) {
    field55 = std::forward<T_Struct25_field55_struct_setter>(field55_);
    __isset.field55 = true;
    return field55;
  }

  float get_field56() const {
    return field56;
  }

  float& set_field56(float field56_) {
    field56 = field56_;
    __isset.field56 = true;
    return field56;
  }
  const std::map< ::cpp2::Struct4, int8_t>& get_field57() const&;
  std::map< ::cpp2::Struct4, int8_t> get_field57() &&;

  template <typename T_Struct25_field57_struct_setter>
  std::map< ::cpp2::Struct4, int8_t>& set_field57(T_Struct25_field57_struct_setter&& field57_) {
    field57 = std::forward<T_Struct25_field57_struct_setter>(field57_);
    __isset.field57 = true;
    return field57;
  }

  double get_field58() const {
    return field58;
  }

  double& set_field58(double field58_) {
    field58 = field58_;
    __isset.field58 = true;
    return field58;
  }
  const std::vector<std::map<std::vector<bool>, int64_t>>& get_field59() const&;
  std::vector<std::map<std::vector<bool>, int64_t>> get_field59() &&;

  template <typename T_Struct25_field59_struct_setter>
  std::vector<std::map<std::vector<bool>, int64_t>>& set_field59(T_Struct25_field59_struct_setter&& field59_) {
    field59 = std::forward<T_Struct25_field59_struct_setter>(field59_);
    __isset.field59 = true;
    return field59;
  }

  int8_t get_field60() const {
    return field60;
  }

  int8_t& set_field60(int8_t field60_) {
    field60 = field60_;
    __isset.field60 = true;
    return field60;
  }

  bool get_field61() const {
    return field61;
  }

  bool& set_field61(bool field61_) {
    field61 = field61_;
    __isset.field61 = true;
    return field61;
  }

  bool get_field62() const {
    return field62;
  }

  bool& set_field62(bool field62_) {
    field62 = field62_;
    __isset.field62 = true;
    return field62;
  }

  bool get_field63() const {
    return field63;
  }

  bool& set_field63(bool field63_) {
    field63 = field63_;
    __isset.field63 = true;
    return field63;
  }
  const std::map<std::string, std::vector<double>>& get_field64() const&;
  std::map<std::string, std::vector<double>> get_field64() &&;

  template <typename T_Struct25_field64_struct_setter>
  std::map<std::string, std::vector<double>>& set_field64(T_Struct25_field64_struct_setter&& field64_) {
    field64 = std::forward<T_Struct25_field64_struct_setter>(field64_);
    __isset.field64 = true;
    return field64;
  }
  const std::vector<double>& get_field65() const&;
  std::vector<double> get_field65() &&;

  template <typename T_Struct25_field65_struct_setter>
  std::vector<double>& set_field65(T_Struct25_field65_struct_setter&& field65_) {
    field65 = std::forward<T_Struct25_field65_struct_setter>(field65_);
    __isset.field65 = true;
    return field65;
  }

  double get_field66() const {
    return field66;
  }

  double& set_field66(double field66_) {
    field66 = field66_;
    __isset.field66 = true;
    return field66;
  }
  const std::set<std::map<float, float>>& get_field67() const&;
  std::set<std::map<float, float>> get_field67() &&;

  template <typename T_Struct25_field67_struct_setter>
  std::set<std::map<float, float>>& set_field67(T_Struct25_field67_struct_setter&& field67_) {
    field67 = std::forward<T_Struct25_field67_struct_setter>(field67_);
    __isset.field67 = true;
    return field67;
  }

  const std::string& get_field68() const& {
    return field68;
  }

  std::string get_field68() && {
    return std::move(field68);
  }

  template <typename T_Struct25_field68_struct_setter>
  std::string& set_field68(T_Struct25_field68_struct_setter&& field68_) {
    field68 = std::forward<T_Struct25_field68_struct_setter>(field68_);
    __isset.field68 = true;
    return field68;
  }
  const std::vector<std::string>& get_field69() const&;
  std::vector<std::string> get_field69() &&;

  template <typename T_Struct25_field69_struct_setter>
  std::vector<std::string>& set_field69(T_Struct25_field69_struct_setter&& field69_) {
    field69 = std::forward<T_Struct25_field69_struct_setter>(field69_);
    __isset.field69 = true;
    return field69;
  }
  const  ::cpp2::Struct15& get_field70() const&;
   ::cpp2::Struct15 get_field70() &&;

  template <typename T_Struct25_field70_struct_setter>
   ::cpp2::Struct15& set_field70(T_Struct25_field70_struct_setter&& field70_) {
    field70 = std::forward<T_Struct25_field70_struct_setter>(field70_);
    __isset.field70 = true;
    return field70;
  }

  int8_t get_field71() const {
    return field71;
  }

  int8_t& set_field71(int8_t field71_) {
    field71 = field71_;
    __isset.field71 = true;
    return field71;
  }
  const std::set<int16_t>& get_field72() const&;
  std::set<int16_t> get_field72() &&;

  template <typename T_Struct25_field72_struct_setter>
  std::set<int16_t>& set_field72(T_Struct25_field72_struct_setter&& field72_) {
    field72 = std::forward<T_Struct25_field72_struct_setter>(field72_);
    __isset.field72 = true;
    return field72;
  }
  const std::vector<float>& get_field73() const&;
  std::vector<float> get_field73() &&;

  template <typename T_Struct25_field73_struct_setter>
  std::vector<float>& set_field73(T_Struct25_field73_struct_setter&& field73_) {
    field73 = std::forward<T_Struct25_field73_struct_setter>(field73_);
    __isset.field73 = true;
    return field73;
  }
  const std::map<std::map<std::string, int16_t>, double>& get_field74() const&;
  std::map<std::map<std::string, int16_t>, double> get_field74() &&;

  template <typename T_Struct25_field74_struct_setter>
  std::map<std::map<std::string, int16_t>, double>& set_field74(T_Struct25_field74_struct_setter&& field74_) {
    field74 = std::forward<T_Struct25_field74_struct_setter>(field74_);
    __isset.field74 = true;
    return field74;
  }

  int32_t get_field75() const {
    return field75;
  }

  int32_t& set_field75(int32_t field75_) {
    field75 = field75_;
    __isset.field75 = true;
    return field75;
  }

  double get_field76() const {
    return field76;
  }

  double& set_field76(double field76_) {
    field76 = field76_;
    __isset.field76 = true;
    return field76;
  }

  int16_t get_field77() const {
    return field77;
  }

  int16_t& set_field77(int16_t field77_) {
    field77 = field77_;
    __isset.field77 = true;
    return field77;
  }

  const std::string& get_field78() const& {
    return field78;
  }

  std::string get_field78() && {
    return std::move(field78);
  }

  template <typename T_Struct25_field78_struct_setter>
  std::string& set_field78(T_Struct25_field78_struct_setter&& field78_) {
    field78 = std::forward<T_Struct25_field78_struct_setter>(field78_);
    __isset.field78 = true;
    return field78;
  }
  const std::set<int8_t>& get_field79() const&;
  std::set<int8_t> get_field79() &&;

  template <typename T_Struct25_field79_struct_setter>
  std::set<int8_t>& set_field79(T_Struct25_field79_struct_setter&& field79_) {
    field79 = std::forward<T_Struct25_field79_struct_setter>(field79_);
    __isset.field79 = true;
    return field79;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct25& a, Struct25& b);
extern template uint32_t Struct25::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct25::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct25::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct25::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct25::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct25::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct25::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct25::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct25>::clear( ::cpp2::Struct25* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct25>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct25>::write(Protocol* proto,  ::cpp2::Struct25 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct25>::read(Protocol* proto,  ::cpp2::Struct25* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct25>::serializedSize(Protocol const* proto,  ::cpp2::Struct25 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct25>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct25 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct26 : private apache::thrift::detail::st::ComparisonOperators<Struct26> {
 public:

  Struct26() :
      field2(0),
      field4(0),
      field7(0),
      field9(0),
      field13(0),
      field15(0),
      field18(0),
      field20(0),
      field21(0),
      field22(0),
      field23(0),
      field24(0),
      field25(0),
      field26(0),
      field29(0),
      field31(0),
      field34(0),
      field35(0),
      field36(0),
      field38(0),
      field39(0),
      field41(0),
      field44(0),
      field48(0),
      field49(0),
      field54(0),
      field56(0),
      field60(0),
      field62(0),
      field66(0),
      field69(0),
      field71(0),
      field74(0),
      field76(0),
      field77(0),
      field79(0),
      field81(0),
      field82(0),
      field83(0),
      field91(0),
      field92(0),
      field93(0),
      field94(0),
      field95(0),
      field97(0),
      field100(0),
      field104(0) {}
  // FragileConstructor for use in initialization lists only

  Struct26(apache::thrift::FragileConstructor, std::set<double> field1__arg, double field2__arg, std::map<int8_t, float> field3__arg, int8_t field4__arg, std::map<std::set<double>, int16_t> field5__arg, std::set<int16_t> field6__arg, int16_t field7__arg, std::string field8__arg, int16_t field9__arg, std::map<double, std::map<std::map<double, int32_t>, bool>> field10__arg, std::set<std::set<int32_t>> field11__arg, std::vector<std::string> field12__arg, int32_t field13__arg,  ::cpp2::Struct10 field14__arg, bool field15__arg, std::string field16__arg, std::set<int8_t> field17__arg, int16_t field18__arg, std::set<double> field19__arg, float field20__arg, int16_t field21__arg, int16_t field22__arg, int16_t field23__arg, int8_t field24__arg, int16_t field25__arg, double field26__arg, std::set<std::string> field27__arg, std::vector<double> field28__arg, double field29__arg, std::vector<int16_t> field30__arg, int8_t field31__arg,  ::cpp2::Struct17 field32__arg, std::vector<int16_t> field33__arg, int32_t field34__arg, bool field35__arg, int8_t field36__arg, std::set<int8_t> field37__arg, bool field38__arg, float field39__arg, std::map<float, bool> field40__arg, int8_t field41__arg,  ::cpp2::Struct14 field42__arg, std::map<int32_t, bool> field43__arg, double field44__arg,  ::cpp2::Struct7 field45__arg, std::set<int16_t> field46__arg, std::map<std::string, std::map<std::string, bool>> field47__arg, int8_t field48__arg, int64_t field49__arg, std::string field50__arg,  ::cpp2::Struct10 field51__arg, std::string field52__arg,  ::cpp2::Struct5 field53__arg, double field54__arg,  ::cpp2::Struct0 field55__arg, double field56__arg, std::set<double> field57__arg, std::string field58__arg,  ::cpp2::Struct4 field59__arg, double field60__arg, std::vector<std::set<float>> field61__arg, int16_t field62__arg, std::set<std::map<int8_t, int32_t>> field63__arg, std::vector<int64_t> field64__arg, std::set<std::vector<double>> field65__arg, float field66__arg, std::set<std::string> field67__arg, std::string field68__arg, int32_t field69__arg, std::map<int8_t, std::map<float, std::string>> field70__arg, int32_t field71__arg, std::set<int8_t> field72__arg, std::string field73__arg, int32_t field74__arg, std::map<bool, std::map<std::vector<std::string>, int64_t>> field75__arg, float field76__arg, bool field77__arg,  ::cpp2::Struct9 field78__arg, int16_t field79__arg, std::set<int64_t> field80__arg, double field81__arg, int8_t field82__arg, float field83__arg, std::vector< ::cpp2::Struct15> field84__arg,  ::cpp2::Struct2 field85__arg,  ::cpp2::Struct9 field86__arg, std::vector<std::string> field87__arg, std::string field88__arg, std::map<int8_t, std::string> field89__arg,  ::cpp2::Struct19 field90__arg, double field91__arg, int8_t field92__arg, int64_t field93__arg, float field94__arg, int8_t field95__arg,  ::cpp2::Struct5 field96__arg, int32_t field97__arg,  ::cpp2::Struct6 field98__arg, std::set<bool> field99__arg, int8_t field100__arg, std::string field101__arg, std::map<int64_t, int64_t> field102__arg, std::string field103__arg, float field104__arg, std::string field105__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)),
      field97(std::move(field97__arg)),
      field98(std::move(field98__arg)),
      field99(std::move(field99__arg)),
      field100(std::move(field100__arg)),
      field101(std::move(field101__arg)),
      field102(std::move(field102__arg)),
      field103(std::move(field103__arg)),
      field104(std::move(field104__arg)),
      field105(std::move(field105__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
    __isset.field97 = true;
    __isset.field98 = true;
    __isset.field99 = true;
    __isset.field100 = true;
    __isset.field101 = true;
    __isset.field102 = true;
    __isset.field103 = true;
    __isset.field104 = true;
    __isset.field105 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<97, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field97 = arg.move();
    __isset.field97 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<98, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field98 = arg.move();
    __isset.field98 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<99, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field99 = arg.move();
    __isset.field99 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field100 = arg.move();
    __isset.field100 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field101 = arg.move();
    __isset.field101 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<102, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field102 = arg.move();
    __isset.field102 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<103, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field103 = arg.move();
    __isset.field103 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<104, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field104 = arg.move();
    __isset.field104 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct26(::apache::thrift::detail::argument_wrapper<105, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct26(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field105 = arg.move();
    __isset.field105 = true;
  }

  Struct26(Struct26&&) = default;

  Struct26(const Struct26&) = default;

  Struct26& operator=(Struct26&&) = default;

  Struct26& operator=(const Struct26&) = default;
  void __clear();

  virtual ~Struct26() {}

  std::set<double> field1;
  double field2;
  std::map<int8_t, float> field3;
  int8_t field4;
  std::map<std::set<double>, int16_t> field5;
  std::set<int16_t> field6;
  int16_t field7;
  std::string field8;
  int16_t field9;
  std::map<double, std::map<std::map<double, int32_t>, bool>> field10;
  std::set<std::set<int32_t>> field11;
  std::vector<std::string> field12;
  int32_t field13;
   ::cpp2::Struct10 field14;
  bool field15;
  std::string field16;
  std::set<int8_t> field17;
  int16_t field18;
  std::set<double> field19;
  float field20;
  int16_t field21;
  int16_t field22;
  int16_t field23;
  int8_t field24;
  int16_t field25;
  double field26;
  std::set<std::string> field27;
  std::vector<double> field28;
  double field29;
  std::vector<int16_t> field30;
  int8_t field31;
   ::cpp2::Struct17 field32;
  std::vector<int16_t> field33;
  int32_t field34;
  bool field35;
  int8_t field36;
  std::set<int8_t> field37;
  bool field38;
  float field39;
  std::map<float, bool> field40;
  int8_t field41;
   ::cpp2::Struct14 field42;
  std::map<int32_t, bool> field43;
  double field44;
   ::cpp2::Struct7 field45;
  std::set<int16_t> field46;
  std::map<std::string, std::map<std::string, bool>> field47;
  int8_t field48;
  int64_t field49;
  std::string field50;
   ::cpp2::Struct10 field51;
  std::string field52;
   ::cpp2::Struct5 field53;
  double field54;
   ::cpp2::Struct0 field55;
  double field56;
  std::set<double> field57;
  std::string field58;
   ::cpp2::Struct4 field59;
  double field60;
  std::vector<std::set<float>> field61;
  int16_t field62;
  std::set<std::map<int8_t, int32_t>> field63;
  std::vector<int64_t> field64;
  std::set<std::vector<double>> field65;
  float field66;
  std::set<std::string> field67;
  std::string field68;
  int32_t field69;
  std::map<int8_t, std::map<float, std::string>> field70;
  int32_t field71;
  std::set<int8_t> field72;
  std::string field73;
  int32_t field74;
  std::map<bool, std::map<std::vector<std::string>, int64_t>> field75;
  float field76;
  bool field77;
   ::cpp2::Struct9 field78;
  int16_t field79;
  std::set<int64_t> field80;
  double field81;
  int8_t field82;
  float field83;
  std::vector< ::cpp2::Struct15> field84;
   ::cpp2::Struct2 field85;
   ::cpp2::Struct9 field86;
  std::vector<std::string> field87;
  std::string field88;
  std::map<int8_t, std::string> field89;
   ::cpp2::Struct19 field90;
  double field91;
  int8_t field92;
  int64_t field93;
  float field94;
  int8_t field95;
   ::cpp2::Struct5 field96;
  int32_t field97;
   ::cpp2::Struct6 field98;
  std::set<bool> field99;
  int8_t field100;
  std::string field101;
  std::map<int64_t, int64_t> field102;
  std::string field103;
  float field104;
  std::string field105;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
      field97 = false;
      field98 = false;
      field99 = false;
      field100 = false;
      field101 = false;
      field102 = false;
      field103 = false;
      field104 = false;
      field105 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
    bool field97 = false;
    bool field98 = false;
    bool field99 = false;
    bool field100 = false;
    bool field101 = false;
    bool field102 = false;
    bool field103 = false;
    bool field104 = false;
    bool field105 = false;
  } __isset;
  bool operator==(const Struct26& rhs) const;

  bool operator < (const Struct26& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    if (!(field97 == rhs.field97)) {
      return field97 < rhs.field97;
    }
    if (!(field98 == rhs.field98)) {
      return field98 < rhs.field98;
    }
    if (!(field99 == rhs.field99)) {
      return field99 < rhs.field99;
    }
    if (!(field100 == rhs.field100)) {
      return field100 < rhs.field100;
    }
    if (!(field101 == rhs.field101)) {
      return field101 < rhs.field101;
    }
    if (!(field102 == rhs.field102)) {
      return field102 < rhs.field102;
    }
    if (!(field103 == rhs.field103)) {
      return field103 < rhs.field103;
    }
    if (!(field104 == rhs.field104)) {
      return field104 < rhs.field104;
    }
    if (!(field105 == rhs.field105)) {
      return field105 < rhs.field105;
    }
    (void)rhs;
    return false;
  }
  const std::set<double>& get_field1() const&;
  std::set<double> get_field1() &&;

  template <typename T_Struct26_field1_struct_setter>
  std::set<double>& set_field1(T_Struct26_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct26_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  double get_field2() const {
    return field2;
  }

  double& set_field2(double field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }
  const std::map<int8_t, float>& get_field3() const&;
  std::map<int8_t, float> get_field3() &&;

  template <typename T_Struct26_field3_struct_setter>
  std::map<int8_t, float>& set_field3(T_Struct26_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct26_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  int8_t get_field4() const {
    return field4;
  }

  int8_t& set_field4(int8_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }
  const std::map<std::set<double>, int16_t>& get_field5() const&;
  std::map<std::set<double>, int16_t> get_field5() &&;

  template <typename T_Struct26_field5_struct_setter>
  std::map<std::set<double>, int16_t>& set_field5(T_Struct26_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct26_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }
  const std::set<int16_t>& get_field6() const&;
  std::set<int16_t> get_field6() &&;

  template <typename T_Struct26_field6_struct_setter>
  std::set<int16_t>& set_field6(T_Struct26_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct26_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }

  int16_t get_field7() const {
    return field7;
  }

  int16_t& set_field7(int16_t field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }

  const std::string& get_field8() const& {
    return field8;
  }

  std::string get_field8() && {
    return std::move(field8);
  }

  template <typename T_Struct26_field8_struct_setter>
  std::string& set_field8(T_Struct26_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct26_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }

  int16_t get_field9() const {
    return field9;
  }

  int16_t& set_field9(int16_t field9_) {
    field9 = field9_;
    __isset.field9 = true;
    return field9;
  }
  const std::map<double, std::map<std::map<double, int32_t>, bool>>& get_field10() const&;
  std::map<double, std::map<std::map<double, int32_t>, bool>> get_field10() &&;

  template <typename T_Struct26_field10_struct_setter>
  std::map<double, std::map<std::map<double, int32_t>, bool>>& set_field10(T_Struct26_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct26_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }
  const std::set<std::set<int32_t>>& get_field11() const&;
  std::set<std::set<int32_t>> get_field11() &&;

  template <typename T_Struct26_field11_struct_setter>
  std::set<std::set<int32_t>>& set_field11(T_Struct26_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct26_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }
  const std::vector<std::string>& get_field12() const&;
  std::vector<std::string> get_field12() &&;

  template <typename T_Struct26_field12_struct_setter>
  std::vector<std::string>& set_field12(T_Struct26_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct26_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }

  int32_t get_field13() const {
    return field13;
  }

  int32_t& set_field13(int32_t field13_) {
    field13 = field13_;
    __isset.field13 = true;
    return field13;
  }
  const  ::cpp2::Struct10& get_field14() const&;
   ::cpp2::Struct10 get_field14() &&;

  template <typename T_Struct26_field14_struct_setter>
   ::cpp2::Struct10& set_field14(T_Struct26_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct26_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }

  bool get_field15() const {
    return field15;
  }

  bool& set_field15(bool field15_) {
    field15 = field15_;
    __isset.field15 = true;
    return field15;
  }

  const std::string& get_field16() const& {
    return field16;
  }

  std::string get_field16() && {
    return std::move(field16);
  }

  template <typename T_Struct26_field16_struct_setter>
  std::string& set_field16(T_Struct26_field16_struct_setter&& field16_) {
    field16 = std::forward<T_Struct26_field16_struct_setter>(field16_);
    __isset.field16 = true;
    return field16;
  }
  const std::set<int8_t>& get_field17() const&;
  std::set<int8_t> get_field17() &&;

  template <typename T_Struct26_field17_struct_setter>
  std::set<int8_t>& set_field17(T_Struct26_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct26_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }

  int16_t get_field18() const {
    return field18;
  }

  int16_t& set_field18(int16_t field18_) {
    field18 = field18_;
    __isset.field18 = true;
    return field18;
  }
  const std::set<double>& get_field19() const&;
  std::set<double> get_field19() &&;

  template <typename T_Struct26_field19_struct_setter>
  std::set<double>& set_field19(T_Struct26_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct26_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }

  float get_field20() const {
    return field20;
  }

  float& set_field20(float field20_) {
    field20 = field20_;
    __isset.field20 = true;
    return field20;
  }

  int16_t get_field21() const {
    return field21;
  }

  int16_t& set_field21(int16_t field21_) {
    field21 = field21_;
    __isset.field21 = true;
    return field21;
  }

  int16_t get_field22() const {
    return field22;
  }

  int16_t& set_field22(int16_t field22_) {
    field22 = field22_;
    __isset.field22 = true;
    return field22;
  }

  int16_t get_field23() const {
    return field23;
  }

  int16_t& set_field23(int16_t field23_) {
    field23 = field23_;
    __isset.field23 = true;
    return field23;
  }

  int8_t get_field24() const {
    return field24;
  }

  int8_t& set_field24(int8_t field24_) {
    field24 = field24_;
    __isset.field24 = true;
    return field24;
  }

  int16_t get_field25() const {
    return field25;
  }

  int16_t& set_field25(int16_t field25_) {
    field25 = field25_;
    __isset.field25 = true;
    return field25;
  }

  double get_field26() const {
    return field26;
  }

  double& set_field26(double field26_) {
    field26 = field26_;
    __isset.field26 = true;
    return field26;
  }
  const std::set<std::string>& get_field27() const&;
  std::set<std::string> get_field27() &&;

  template <typename T_Struct26_field27_struct_setter>
  std::set<std::string>& set_field27(T_Struct26_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct26_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }
  const std::vector<double>& get_field28() const&;
  std::vector<double> get_field28() &&;

  template <typename T_Struct26_field28_struct_setter>
  std::vector<double>& set_field28(T_Struct26_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct26_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }

  double get_field29() const {
    return field29;
  }

  double& set_field29(double field29_) {
    field29 = field29_;
    __isset.field29 = true;
    return field29;
  }
  const std::vector<int16_t>& get_field30() const&;
  std::vector<int16_t> get_field30() &&;

  template <typename T_Struct26_field30_struct_setter>
  std::vector<int16_t>& set_field30(T_Struct26_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct26_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }

  int8_t get_field31() const {
    return field31;
  }

  int8_t& set_field31(int8_t field31_) {
    field31 = field31_;
    __isset.field31 = true;
    return field31;
  }
  const  ::cpp2::Struct17& get_field32() const&;
   ::cpp2::Struct17 get_field32() &&;

  template <typename T_Struct26_field32_struct_setter>
   ::cpp2::Struct17& set_field32(T_Struct26_field32_struct_setter&& field32_) {
    field32 = std::forward<T_Struct26_field32_struct_setter>(field32_);
    __isset.field32 = true;
    return field32;
  }
  const std::vector<int16_t>& get_field33() const&;
  std::vector<int16_t> get_field33() &&;

  template <typename T_Struct26_field33_struct_setter>
  std::vector<int16_t>& set_field33(T_Struct26_field33_struct_setter&& field33_) {
    field33 = std::forward<T_Struct26_field33_struct_setter>(field33_);
    __isset.field33 = true;
    return field33;
  }

  int32_t get_field34() const {
    return field34;
  }

  int32_t& set_field34(int32_t field34_) {
    field34 = field34_;
    __isset.field34 = true;
    return field34;
  }

  bool get_field35() const {
    return field35;
  }

  bool& set_field35(bool field35_) {
    field35 = field35_;
    __isset.field35 = true;
    return field35;
  }

  int8_t get_field36() const {
    return field36;
  }

  int8_t& set_field36(int8_t field36_) {
    field36 = field36_;
    __isset.field36 = true;
    return field36;
  }
  const std::set<int8_t>& get_field37() const&;
  std::set<int8_t> get_field37() &&;

  template <typename T_Struct26_field37_struct_setter>
  std::set<int8_t>& set_field37(T_Struct26_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct26_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }

  bool get_field38() const {
    return field38;
  }

  bool& set_field38(bool field38_) {
    field38 = field38_;
    __isset.field38 = true;
    return field38;
  }

  float get_field39() const {
    return field39;
  }

  float& set_field39(float field39_) {
    field39 = field39_;
    __isset.field39 = true;
    return field39;
  }
  const std::map<float, bool>& get_field40() const&;
  std::map<float, bool> get_field40() &&;

  template <typename T_Struct26_field40_struct_setter>
  std::map<float, bool>& set_field40(T_Struct26_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct26_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }

  int8_t get_field41() const {
    return field41;
  }

  int8_t& set_field41(int8_t field41_) {
    field41 = field41_;
    __isset.field41 = true;
    return field41;
  }
  const  ::cpp2::Struct14& get_field42() const&;
   ::cpp2::Struct14 get_field42() &&;

  template <typename T_Struct26_field42_struct_setter>
   ::cpp2::Struct14& set_field42(T_Struct26_field42_struct_setter&& field42_) {
    field42 = std::forward<T_Struct26_field42_struct_setter>(field42_);
    __isset.field42 = true;
    return field42;
  }
  const std::map<int32_t, bool>& get_field43() const&;
  std::map<int32_t, bool> get_field43() &&;

  template <typename T_Struct26_field43_struct_setter>
  std::map<int32_t, bool>& set_field43(T_Struct26_field43_struct_setter&& field43_) {
    field43 = std::forward<T_Struct26_field43_struct_setter>(field43_);
    __isset.field43 = true;
    return field43;
  }

  double get_field44() const {
    return field44;
  }

  double& set_field44(double field44_) {
    field44 = field44_;
    __isset.field44 = true;
    return field44;
  }
  const  ::cpp2::Struct7& get_field45() const&;
   ::cpp2::Struct7 get_field45() &&;

  template <typename T_Struct26_field45_struct_setter>
   ::cpp2::Struct7& set_field45(T_Struct26_field45_struct_setter&& field45_) {
    field45 = std::forward<T_Struct26_field45_struct_setter>(field45_);
    __isset.field45 = true;
    return field45;
  }
  const std::set<int16_t>& get_field46() const&;
  std::set<int16_t> get_field46() &&;

  template <typename T_Struct26_field46_struct_setter>
  std::set<int16_t>& set_field46(T_Struct26_field46_struct_setter&& field46_) {
    field46 = std::forward<T_Struct26_field46_struct_setter>(field46_);
    __isset.field46 = true;
    return field46;
  }
  const std::map<std::string, std::map<std::string, bool>>& get_field47() const&;
  std::map<std::string, std::map<std::string, bool>> get_field47() &&;

  template <typename T_Struct26_field47_struct_setter>
  std::map<std::string, std::map<std::string, bool>>& set_field47(T_Struct26_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct26_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }

  int8_t get_field48() const {
    return field48;
  }

  int8_t& set_field48(int8_t field48_) {
    field48 = field48_;
    __isset.field48 = true;
    return field48;
  }

  int64_t get_field49() const {
    return field49;
  }

  int64_t& set_field49(int64_t field49_) {
    field49 = field49_;
    __isset.field49 = true;
    return field49;
  }

  const std::string& get_field50() const& {
    return field50;
  }

  std::string get_field50() && {
    return std::move(field50);
  }

  template <typename T_Struct26_field50_struct_setter>
  std::string& set_field50(T_Struct26_field50_struct_setter&& field50_) {
    field50 = std::forward<T_Struct26_field50_struct_setter>(field50_);
    __isset.field50 = true;
    return field50;
  }
  const  ::cpp2::Struct10& get_field51() const&;
   ::cpp2::Struct10 get_field51() &&;

  template <typename T_Struct26_field51_struct_setter>
   ::cpp2::Struct10& set_field51(T_Struct26_field51_struct_setter&& field51_) {
    field51 = std::forward<T_Struct26_field51_struct_setter>(field51_);
    __isset.field51 = true;
    return field51;
  }

  const std::string& get_field52() const& {
    return field52;
  }

  std::string get_field52() && {
    return std::move(field52);
  }

  template <typename T_Struct26_field52_struct_setter>
  std::string& set_field52(T_Struct26_field52_struct_setter&& field52_) {
    field52 = std::forward<T_Struct26_field52_struct_setter>(field52_);
    __isset.field52 = true;
    return field52;
  }
  const  ::cpp2::Struct5& get_field53() const&;
   ::cpp2::Struct5 get_field53() &&;

  template <typename T_Struct26_field53_struct_setter>
   ::cpp2::Struct5& set_field53(T_Struct26_field53_struct_setter&& field53_) {
    field53 = std::forward<T_Struct26_field53_struct_setter>(field53_);
    __isset.field53 = true;
    return field53;
  }

  double get_field54() const {
    return field54;
  }

  double& set_field54(double field54_) {
    field54 = field54_;
    __isset.field54 = true;
    return field54;
  }
  const  ::cpp2::Struct0& get_field55() const&;
   ::cpp2::Struct0 get_field55() &&;

  template <typename T_Struct26_field55_struct_setter>
   ::cpp2::Struct0& set_field55(T_Struct26_field55_struct_setter&& field55_) {
    field55 = std::forward<T_Struct26_field55_struct_setter>(field55_);
    __isset.field55 = true;
    return field55;
  }

  double get_field56() const {
    return field56;
  }

  double& set_field56(double field56_) {
    field56 = field56_;
    __isset.field56 = true;
    return field56;
  }
  const std::set<double>& get_field57() const&;
  std::set<double> get_field57() &&;

  template <typename T_Struct26_field57_struct_setter>
  std::set<double>& set_field57(T_Struct26_field57_struct_setter&& field57_) {
    field57 = std::forward<T_Struct26_field57_struct_setter>(field57_);
    __isset.field57 = true;
    return field57;
  }

  const std::string& get_field58() const& {
    return field58;
  }

  std::string get_field58() && {
    return std::move(field58);
  }

  template <typename T_Struct26_field58_struct_setter>
  std::string& set_field58(T_Struct26_field58_struct_setter&& field58_) {
    field58 = std::forward<T_Struct26_field58_struct_setter>(field58_);
    __isset.field58 = true;
    return field58;
  }
  const  ::cpp2::Struct4& get_field59() const&;
   ::cpp2::Struct4 get_field59() &&;

  template <typename T_Struct26_field59_struct_setter>
   ::cpp2::Struct4& set_field59(T_Struct26_field59_struct_setter&& field59_) {
    field59 = std::forward<T_Struct26_field59_struct_setter>(field59_);
    __isset.field59 = true;
    return field59;
  }

  double get_field60() const {
    return field60;
  }

  double& set_field60(double field60_) {
    field60 = field60_;
    __isset.field60 = true;
    return field60;
  }
  const std::vector<std::set<float>>& get_field61() const&;
  std::vector<std::set<float>> get_field61() &&;

  template <typename T_Struct26_field61_struct_setter>
  std::vector<std::set<float>>& set_field61(T_Struct26_field61_struct_setter&& field61_) {
    field61 = std::forward<T_Struct26_field61_struct_setter>(field61_);
    __isset.field61 = true;
    return field61;
  }

  int16_t get_field62() const {
    return field62;
  }

  int16_t& set_field62(int16_t field62_) {
    field62 = field62_;
    __isset.field62 = true;
    return field62;
  }
  const std::set<std::map<int8_t, int32_t>>& get_field63() const&;
  std::set<std::map<int8_t, int32_t>> get_field63() &&;

  template <typename T_Struct26_field63_struct_setter>
  std::set<std::map<int8_t, int32_t>>& set_field63(T_Struct26_field63_struct_setter&& field63_) {
    field63 = std::forward<T_Struct26_field63_struct_setter>(field63_);
    __isset.field63 = true;
    return field63;
  }
  const std::vector<int64_t>& get_field64() const&;
  std::vector<int64_t> get_field64() &&;

  template <typename T_Struct26_field64_struct_setter>
  std::vector<int64_t>& set_field64(T_Struct26_field64_struct_setter&& field64_) {
    field64 = std::forward<T_Struct26_field64_struct_setter>(field64_);
    __isset.field64 = true;
    return field64;
  }
  const std::set<std::vector<double>>& get_field65() const&;
  std::set<std::vector<double>> get_field65() &&;

  template <typename T_Struct26_field65_struct_setter>
  std::set<std::vector<double>>& set_field65(T_Struct26_field65_struct_setter&& field65_) {
    field65 = std::forward<T_Struct26_field65_struct_setter>(field65_);
    __isset.field65 = true;
    return field65;
  }

  float get_field66() const {
    return field66;
  }

  float& set_field66(float field66_) {
    field66 = field66_;
    __isset.field66 = true;
    return field66;
  }
  const std::set<std::string>& get_field67() const&;
  std::set<std::string> get_field67() &&;

  template <typename T_Struct26_field67_struct_setter>
  std::set<std::string>& set_field67(T_Struct26_field67_struct_setter&& field67_) {
    field67 = std::forward<T_Struct26_field67_struct_setter>(field67_);
    __isset.field67 = true;
    return field67;
  }

  const std::string& get_field68() const& {
    return field68;
  }

  std::string get_field68() && {
    return std::move(field68);
  }

  template <typename T_Struct26_field68_struct_setter>
  std::string& set_field68(T_Struct26_field68_struct_setter&& field68_) {
    field68 = std::forward<T_Struct26_field68_struct_setter>(field68_);
    __isset.field68 = true;
    return field68;
  }

  int32_t get_field69() const {
    return field69;
  }

  int32_t& set_field69(int32_t field69_) {
    field69 = field69_;
    __isset.field69 = true;
    return field69;
  }
  const std::map<int8_t, std::map<float, std::string>>& get_field70() const&;
  std::map<int8_t, std::map<float, std::string>> get_field70() &&;

  template <typename T_Struct26_field70_struct_setter>
  std::map<int8_t, std::map<float, std::string>>& set_field70(T_Struct26_field70_struct_setter&& field70_) {
    field70 = std::forward<T_Struct26_field70_struct_setter>(field70_);
    __isset.field70 = true;
    return field70;
  }

  int32_t get_field71() const {
    return field71;
  }

  int32_t& set_field71(int32_t field71_) {
    field71 = field71_;
    __isset.field71 = true;
    return field71;
  }
  const std::set<int8_t>& get_field72() const&;
  std::set<int8_t> get_field72() &&;

  template <typename T_Struct26_field72_struct_setter>
  std::set<int8_t>& set_field72(T_Struct26_field72_struct_setter&& field72_) {
    field72 = std::forward<T_Struct26_field72_struct_setter>(field72_);
    __isset.field72 = true;
    return field72;
  }

  const std::string& get_field73() const& {
    return field73;
  }

  std::string get_field73() && {
    return std::move(field73);
  }

  template <typename T_Struct26_field73_struct_setter>
  std::string& set_field73(T_Struct26_field73_struct_setter&& field73_) {
    field73 = std::forward<T_Struct26_field73_struct_setter>(field73_);
    __isset.field73 = true;
    return field73;
  }

  int32_t get_field74() const {
    return field74;
  }

  int32_t& set_field74(int32_t field74_) {
    field74 = field74_;
    __isset.field74 = true;
    return field74;
  }
  const std::map<bool, std::map<std::vector<std::string>, int64_t>>& get_field75() const&;
  std::map<bool, std::map<std::vector<std::string>, int64_t>> get_field75() &&;

  template <typename T_Struct26_field75_struct_setter>
  std::map<bool, std::map<std::vector<std::string>, int64_t>>& set_field75(T_Struct26_field75_struct_setter&& field75_) {
    field75 = std::forward<T_Struct26_field75_struct_setter>(field75_);
    __isset.field75 = true;
    return field75;
  }

  float get_field76() const {
    return field76;
  }

  float& set_field76(float field76_) {
    field76 = field76_;
    __isset.field76 = true;
    return field76;
  }

  bool get_field77() const {
    return field77;
  }

  bool& set_field77(bool field77_) {
    field77 = field77_;
    __isset.field77 = true;
    return field77;
  }
  const  ::cpp2::Struct9& get_field78() const&;
   ::cpp2::Struct9 get_field78() &&;

  template <typename T_Struct26_field78_struct_setter>
   ::cpp2::Struct9& set_field78(T_Struct26_field78_struct_setter&& field78_) {
    field78 = std::forward<T_Struct26_field78_struct_setter>(field78_);
    __isset.field78 = true;
    return field78;
  }

  int16_t get_field79() const {
    return field79;
  }

  int16_t& set_field79(int16_t field79_) {
    field79 = field79_;
    __isset.field79 = true;
    return field79;
  }
  const std::set<int64_t>& get_field80() const&;
  std::set<int64_t> get_field80() &&;

  template <typename T_Struct26_field80_struct_setter>
  std::set<int64_t>& set_field80(T_Struct26_field80_struct_setter&& field80_) {
    field80 = std::forward<T_Struct26_field80_struct_setter>(field80_);
    __isset.field80 = true;
    return field80;
  }

  double get_field81() const {
    return field81;
  }

  double& set_field81(double field81_) {
    field81 = field81_;
    __isset.field81 = true;
    return field81;
  }

  int8_t get_field82() const {
    return field82;
  }

  int8_t& set_field82(int8_t field82_) {
    field82 = field82_;
    __isset.field82 = true;
    return field82;
  }

  float get_field83() const {
    return field83;
  }

  float& set_field83(float field83_) {
    field83 = field83_;
    __isset.field83 = true;
    return field83;
  }
  const std::vector< ::cpp2::Struct15>& get_field84() const&;
  std::vector< ::cpp2::Struct15> get_field84() &&;

  template <typename T_Struct26_field84_struct_setter>
  std::vector< ::cpp2::Struct15>& set_field84(T_Struct26_field84_struct_setter&& field84_) {
    field84 = std::forward<T_Struct26_field84_struct_setter>(field84_);
    __isset.field84 = true;
    return field84;
  }
  const  ::cpp2::Struct2& get_field85() const&;
   ::cpp2::Struct2 get_field85() &&;

  template <typename T_Struct26_field85_struct_setter>
   ::cpp2::Struct2& set_field85(T_Struct26_field85_struct_setter&& field85_) {
    field85 = std::forward<T_Struct26_field85_struct_setter>(field85_);
    __isset.field85 = true;
    return field85;
  }
  const  ::cpp2::Struct9& get_field86() const&;
   ::cpp2::Struct9 get_field86() &&;

  template <typename T_Struct26_field86_struct_setter>
   ::cpp2::Struct9& set_field86(T_Struct26_field86_struct_setter&& field86_) {
    field86 = std::forward<T_Struct26_field86_struct_setter>(field86_);
    __isset.field86 = true;
    return field86;
  }
  const std::vector<std::string>& get_field87() const&;
  std::vector<std::string> get_field87() &&;

  template <typename T_Struct26_field87_struct_setter>
  std::vector<std::string>& set_field87(T_Struct26_field87_struct_setter&& field87_) {
    field87 = std::forward<T_Struct26_field87_struct_setter>(field87_);
    __isset.field87 = true;
    return field87;
  }

  const std::string& get_field88() const& {
    return field88;
  }

  std::string get_field88() && {
    return std::move(field88);
  }

  template <typename T_Struct26_field88_struct_setter>
  std::string& set_field88(T_Struct26_field88_struct_setter&& field88_) {
    field88 = std::forward<T_Struct26_field88_struct_setter>(field88_);
    __isset.field88 = true;
    return field88;
  }
  const std::map<int8_t, std::string>& get_field89() const&;
  std::map<int8_t, std::string> get_field89() &&;

  template <typename T_Struct26_field89_struct_setter>
  std::map<int8_t, std::string>& set_field89(T_Struct26_field89_struct_setter&& field89_) {
    field89 = std::forward<T_Struct26_field89_struct_setter>(field89_);
    __isset.field89 = true;
    return field89;
  }
  const  ::cpp2::Struct19& get_field90() const&;
   ::cpp2::Struct19 get_field90() &&;

  template <typename T_Struct26_field90_struct_setter>
   ::cpp2::Struct19& set_field90(T_Struct26_field90_struct_setter&& field90_) {
    field90 = std::forward<T_Struct26_field90_struct_setter>(field90_);
    __isset.field90 = true;
    return field90;
  }

  double get_field91() const {
    return field91;
  }

  double& set_field91(double field91_) {
    field91 = field91_;
    __isset.field91 = true;
    return field91;
  }

  int8_t get_field92() const {
    return field92;
  }

  int8_t& set_field92(int8_t field92_) {
    field92 = field92_;
    __isset.field92 = true;
    return field92;
  }

  int64_t get_field93() const {
    return field93;
  }

  int64_t& set_field93(int64_t field93_) {
    field93 = field93_;
    __isset.field93 = true;
    return field93;
  }

  float get_field94() const {
    return field94;
  }

  float& set_field94(float field94_) {
    field94 = field94_;
    __isset.field94 = true;
    return field94;
  }

  int8_t get_field95() const {
    return field95;
  }

  int8_t& set_field95(int8_t field95_) {
    field95 = field95_;
    __isset.field95 = true;
    return field95;
  }
  const  ::cpp2::Struct5& get_field96() const&;
   ::cpp2::Struct5 get_field96() &&;

  template <typename T_Struct26_field96_struct_setter>
   ::cpp2::Struct5& set_field96(T_Struct26_field96_struct_setter&& field96_) {
    field96 = std::forward<T_Struct26_field96_struct_setter>(field96_);
    __isset.field96 = true;
    return field96;
  }

  int32_t get_field97() const {
    return field97;
  }

  int32_t& set_field97(int32_t field97_) {
    field97 = field97_;
    __isset.field97 = true;
    return field97;
  }
  const  ::cpp2::Struct6& get_field98() const&;
   ::cpp2::Struct6 get_field98() &&;

  template <typename T_Struct26_field98_struct_setter>
   ::cpp2::Struct6& set_field98(T_Struct26_field98_struct_setter&& field98_) {
    field98 = std::forward<T_Struct26_field98_struct_setter>(field98_);
    __isset.field98 = true;
    return field98;
  }
  const std::set<bool>& get_field99() const&;
  std::set<bool> get_field99() &&;

  template <typename T_Struct26_field99_struct_setter>
  std::set<bool>& set_field99(T_Struct26_field99_struct_setter&& field99_) {
    field99 = std::forward<T_Struct26_field99_struct_setter>(field99_);
    __isset.field99 = true;
    return field99;
  }

  int8_t get_field100() const {
    return field100;
  }

  int8_t& set_field100(int8_t field100_) {
    field100 = field100_;
    __isset.field100 = true;
    return field100;
  }

  const std::string& get_field101() const& {
    return field101;
  }

  std::string get_field101() && {
    return std::move(field101);
  }

  template <typename T_Struct26_field101_struct_setter>
  std::string& set_field101(T_Struct26_field101_struct_setter&& field101_) {
    field101 = std::forward<T_Struct26_field101_struct_setter>(field101_);
    __isset.field101 = true;
    return field101;
  }
  const std::map<int64_t, int64_t>& get_field102() const&;
  std::map<int64_t, int64_t> get_field102() &&;

  template <typename T_Struct26_field102_struct_setter>
  std::map<int64_t, int64_t>& set_field102(T_Struct26_field102_struct_setter&& field102_) {
    field102 = std::forward<T_Struct26_field102_struct_setter>(field102_);
    __isset.field102 = true;
    return field102;
  }

  const std::string& get_field103() const& {
    return field103;
  }

  std::string get_field103() && {
    return std::move(field103);
  }

  template <typename T_Struct26_field103_struct_setter>
  std::string& set_field103(T_Struct26_field103_struct_setter&& field103_) {
    field103 = std::forward<T_Struct26_field103_struct_setter>(field103_);
    __isset.field103 = true;
    return field103;
  }

  float get_field104() const {
    return field104;
  }

  float& set_field104(float field104_) {
    field104 = field104_;
    __isset.field104 = true;
    return field104;
  }

  const std::string& get_field105() const& {
    return field105;
  }

  std::string get_field105() && {
    return std::move(field105);
  }

  template <typename T_Struct26_field105_struct_setter>
  std::string& set_field105(T_Struct26_field105_struct_setter&& field105_) {
    field105 = std::forward<T_Struct26_field105_struct_setter>(field105_);
    __isset.field105 = true;
    return field105;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct26& a, Struct26& b);
extern template uint32_t Struct26::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct26::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct26::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct26::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct26::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct26::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct26::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct26::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct26>::clear( ::cpp2::Struct26* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct26>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct26>::write(Protocol* proto,  ::cpp2::Struct26 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct26>::read(Protocol* proto,  ::cpp2::Struct26* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct26>::serializedSize(Protocol const* proto,  ::cpp2::Struct26 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct26>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct26 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct27 : private apache::thrift::detail::st::ComparisonOperators<Struct27> {
 public:

  Struct27() :
      field2(0),
      field7(0),
      field11(0),
      field14(0),
      field15(0),
      field16(0),
      field20(0),
      field23(0),
      field28(0),
      field30(0),
      field32(0),
      field36(0),
      field37(0),
      field38(0),
      field42(0),
      field45(0),
      field46(0),
      field48(0),
      field55(0),
      field56(0),
      field61(0),
      field64(0),
      field65(0),
      field67(0),
      field68(0),
      field70(0),
      field71(0),
      field73(0),
      field74(0),
      field75(0),
      field79(0),
      field81(0),
      field84(0),
      field86(0),
      field87(0),
      field89(0),
      field90(0),
      field94(0),
      field96(0),
      field101(0),
      field102(0),
      field103(0),
      field104(0),
      field105(0),
      field109(0),
      field110(0),
      field112(0),
      field113(0),
      field116(0),
      field118(0),
      field122(0),
      field124(0),
      field127(0),
      field129(0),
      field136(0),
      field142(0),
      field145(0),
      field148(0),
      field149(0),
      field152(0),
      field154(0),
      field157(0),
      field161(0),
      field162(0),
      field167(0),
      field170(0),
      field174(0),
      field175(0),
      field181(0),
      field185(0),
      field186(0),
      field187(0),
      field192(0),
      field194(0),
      field197(0),
      field201(0),
      field202(0),
      field205(0),
      field207(0),
      field209(0),
      field211(0),
      field216(0),
      field218(0),
      field222(0),
      field226(0),
      field229(0),
      field230(0) {}
  // FragileConstructor for use in initialization lists only

  Struct27(apache::thrift::FragileConstructor,  ::cpp2::Struct8 field1__arg, float field2__arg, std::set<double> field3__arg, std::string field4__arg, std::map<int8_t, std::string> field5__arg, std::vector<double> field6__arg, int64_t field7__arg, std::set<double> field8__arg, std::set< ::cpp2::Struct1> field9__arg, std::set<std::string> field10__arg, int64_t field11__arg, std::set<std::set<float>> field12__arg, std::map<bool, std::string> field13__arg, bool field14__arg, float field15__arg, bool field16__arg,  ::cpp2::Struct3 field17__arg,  ::cpp2::Struct6 field18__arg, std::set<bool> field19__arg, int16_t field20__arg, std::set<int64_t> field21__arg, std::string field22__arg, int8_t field23__arg, std::map<int16_t, float> field24__arg,  ::cpp2::Struct0 field25__arg, std::map<std::string, std::map<std::string, std::map<int32_t, float>>> field26__arg, std::set<int64_t> field27__arg, float field28__arg, std::vector<int32_t> field29__arg, int32_t field30__arg, std::vector<bool> field31__arg, int64_t field32__arg,  ::cpp2::Struct9 field33__arg, std::set<int8_t> field34__arg,  ::cpp2::Struct15 field35__arg, int8_t field36__arg, int64_t field37__arg, bool field38__arg, std::map<std::map<std::vector<float>, int8_t>, int32_t> field39__arg, std::vector<std::string> field40__arg,  ::cpp2::Struct4 field41__arg, double field42__arg,  ::cpp2::Struct7 field43__arg, std::string field44__arg, int16_t field45__arg, int32_t field46__arg, std::map<double, std::string> field47__arg, int8_t field48__arg,  ::cpp2::Struct5 field49__arg,  ::cpp2::Struct19 field50__arg, std::string field51__arg,  ::cpp2::Struct16 field52__arg, std::set<std::string> field53__arg, std::set<std::vector<std::string>> field54__arg, double field55__arg, bool field56__arg, std::vector<int32_t> field57__arg, std::set<std::string> field58__arg, std::map<std::map<std::map<int32_t, int64_t>, std::string>, float> field59__arg,  ::cpp2::Struct2 field60__arg, float field61__arg,  ::cpp2::Struct16 field62__arg, std::set<int16_t> field63__arg, int64_t field64__arg, int32_t field65__arg, std::vector<bool> field66__arg, bool field67__arg, bool field68__arg,  ::cpp2::Struct6 field69__arg, int8_t field70__arg, int32_t field71__arg,  ::cpp2::Struct6 field72__arg, int16_t field73__arg, double field74__arg, int64_t field75__arg, std::vector<int8_t> field76__arg, std::vector<bool> field77__arg, std::vector<std::string> field78__arg, int8_t field79__arg,  ::cpp2::Struct4 field80__arg, int8_t field81__arg, std::string field82__arg, std::vector<std::map<std::map<float, bool>, int8_t>> field83__arg, float field84__arg, std::string field85__arg, int32_t field86__arg, int16_t field87__arg, std::set<int64_t> field88__arg, bool field89__arg, bool field90__arg, std::vector<std::vector<std::vector<int64_t>>> field91__arg, std::string field92__arg, std::set<std::set<int64_t>> field93__arg, double field94__arg, std::string field95__arg, bool field96__arg, std::string field97__arg, std::string field98__arg, std::string field99__arg,  ::cpp2::Struct13 field100__arg, bool field101__arg, float field102__arg, int16_t field103__arg, int32_t field104__arg, int32_t field105__arg, std::set<double> field106__arg,  ::cpp2::Struct9 field107__arg, std::map<int64_t, std::vector<bool>> field108__arg, bool field109__arg, int16_t field110__arg, std::vector<int8_t> field111__arg, float field112__arg, int32_t field113__arg,  ::cpp2::Struct4 field114__arg,  ::cpp2::Struct2 field115__arg, int64_t field116__arg, std::set<std::string> field117__arg, int8_t field118__arg, std::vector<double> field119__arg,  ::cpp2::Struct8 field120__arg,  ::cpp2::Struct14 field121__arg, int64_t field122__arg, std::map<int32_t, std::string> field123__arg, int64_t field124__arg, std::string field125__arg, std::vector<bool> field126__arg, float field127__arg, std::set<float> field128__arg, int16_t field129__arg, std::set<bool> field130__arg, std::vector<int16_t> field131__arg, std::map<std::set<std::string>, float> field132__arg, std::vector<std::map<std::vector<std::vector<float>>, int32_t>> field133__arg, std::vector<int64_t> field134__arg, std::map< ::cpp2::Struct13, double> field135__arg, float field136__arg, std::map<int8_t, float> field137__arg, std::map<double,  ::cpp2::Struct7> field138__arg, std::vector<std::set<std::string>> field139__arg, std::map<std::set<double>, std::string> field140__arg,  ::cpp2::Struct12 field141__arg, int16_t field142__arg, std::string field143__arg, std::set<double> field144__arg, double field145__arg,  ::cpp2::Struct17 field146__arg, std::string field147__arg, float field148__arg, float field149__arg, std::set<bool> field150__arg,  ::cpp2::Struct18 field151__arg, int8_t field152__arg, std::string field153__arg, double field154__arg, std::vector<std::string> field155__arg,  ::cpp2::Struct3 field156__arg, int32_t field157__arg, std::map<int16_t, int16_t> field158__arg,  ::cpp2::Struct8 field159__arg, std::string field160__arg, int8_t field161__arg, int32_t field162__arg, std::set<double> field163__arg, std::vector<std::map<int64_t, int32_t>> field164__arg, std::vector<int64_t> field165__arg, std::string field166__arg, double field167__arg, std::map<std::string, std::string> field168__arg, std::map<int8_t, int8_t> field169__arg, double field170__arg, std::map<std::string, std::string> field171__arg, std::map< ::cpp2::Struct3, float> field172__arg, std::string field173__arg, int16_t field174__arg, int64_t field175__arg, std::string field176__arg, std::map<float, int16_t> field177__arg,  ::cpp2::Struct0 field178__arg, std::map<int64_t, std::set<int64_t>> field179__arg, std::map<double, std::string> field180__arg, int32_t field181__arg,  ::cpp2::Struct21 field182__arg, std::string field183__arg, std::set<std::string> field184__arg, int8_t field185__arg, float field186__arg, int16_t field187__arg, std::set<std::set<double>> field188__arg, std::string field189__arg, std::set<double> field190__arg, std::set<bool> field191__arg, float field192__arg, std::string field193__arg, float field194__arg, std::map<int64_t, int8_t> field195__arg,  ::cpp2::Struct5 field196__arg, bool field197__arg, std::map<double, int32_t> field198__arg, std::set<int16_t> field199__arg,  ::cpp2::Struct18 field200__arg, int32_t field201__arg, int8_t field202__arg,  ::cpp2::Struct16 field203__arg, std::map<std::vector<bool>, std::string> field204__arg, int32_t field205__arg, std::vector<int8_t> field206__arg, bool field207__arg, std::map<int8_t, int32_t> field208__arg, float field209__arg, std::vector<int32_t> field210__arg, float field211__arg, std::string field212__arg, std::set<float> field213__arg, std::vector<std::string> field214__arg, std::map<std::string,  ::cpp2::Struct5> field215__arg, int64_t field216__arg, std::map<int64_t, double> field217__arg, int64_t field218__arg, std::string field219__arg, std::set<int8_t> field220__arg, std::map<std::vector<std::vector<std::string>>, std::vector<float>> field221__arg, double field222__arg, std::vector<int8_t> field223__arg, std::set<std::string> field224__arg, std::map<float, bool> field225__arg, int64_t field226__arg, std::string field227__arg, std::vector<double> field228__arg, int64_t field229__arg, int8_t field230__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)),
      field97(std::move(field97__arg)),
      field98(std::move(field98__arg)),
      field99(std::move(field99__arg)),
      field100(std::move(field100__arg)),
      field101(std::move(field101__arg)),
      field102(std::move(field102__arg)),
      field103(std::move(field103__arg)),
      field104(std::move(field104__arg)),
      field105(std::move(field105__arg)),
      field106(std::move(field106__arg)),
      field107(std::move(field107__arg)),
      field108(std::move(field108__arg)),
      field109(std::move(field109__arg)),
      field110(std::move(field110__arg)),
      field111(std::move(field111__arg)),
      field112(std::move(field112__arg)),
      field113(std::move(field113__arg)),
      field114(std::move(field114__arg)),
      field115(std::move(field115__arg)),
      field116(std::move(field116__arg)),
      field117(std::move(field117__arg)),
      field118(std::move(field118__arg)),
      field119(std::move(field119__arg)),
      field120(std::move(field120__arg)),
      field121(std::move(field121__arg)),
      field122(std::move(field122__arg)),
      field123(std::move(field123__arg)),
      field124(std::move(field124__arg)),
      field125(std::move(field125__arg)),
      field126(std::move(field126__arg)),
      field127(std::move(field127__arg)),
      field128(std::move(field128__arg)),
      field129(std::move(field129__arg)),
      field130(std::move(field130__arg)),
      field131(std::move(field131__arg)),
      field132(std::move(field132__arg)),
      field133(std::move(field133__arg)),
      field134(std::move(field134__arg)),
      field135(std::move(field135__arg)),
      field136(std::move(field136__arg)),
      field137(std::move(field137__arg)),
      field138(std::move(field138__arg)),
      field139(std::move(field139__arg)),
      field140(std::move(field140__arg)),
      field141(std::move(field141__arg)),
      field142(std::move(field142__arg)),
      field143(std::move(field143__arg)),
      field144(std::move(field144__arg)),
      field145(std::move(field145__arg)),
      field146(std::move(field146__arg)),
      field147(std::move(field147__arg)),
      field148(std::move(field148__arg)),
      field149(std::move(field149__arg)),
      field150(std::move(field150__arg)),
      field151(std::move(field151__arg)),
      field152(std::move(field152__arg)),
      field153(std::move(field153__arg)),
      field154(std::move(field154__arg)),
      field155(std::move(field155__arg)),
      field156(std::move(field156__arg)),
      field157(std::move(field157__arg)),
      field158(std::move(field158__arg)),
      field159(std::move(field159__arg)),
      field160(std::move(field160__arg)),
      field161(std::move(field161__arg)),
      field162(std::move(field162__arg)),
      field163(std::move(field163__arg)),
      field164(std::move(field164__arg)),
      field165(std::move(field165__arg)),
      field166(std::move(field166__arg)),
      field167(std::move(field167__arg)),
      field168(std::move(field168__arg)),
      field169(std::move(field169__arg)),
      field170(std::move(field170__arg)),
      field171(std::move(field171__arg)),
      field172(std::move(field172__arg)),
      field173(std::move(field173__arg)),
      field174(std::move(field174__arg)),
      field175(std::move(field175__arg)),
      field176(std::move(field176__arg)),
      field177(std::move(field177__arg)),
      field178(std::move(field178__arg)),
      field179(std::move(field179__arg)),
      field180(std::move(field180__arg)),
      field181(std::move(field181__arg)),
      field182(std::move(field182__arg)),
      field183(std::move(field183__arg)),
      field184(std::move(field184__arg)),
      field185(std::move(field185__arg)),
      field186(std::move(field186__arg)),
      field187(std::move(field187__arg)),
      field188(std::move(field188__arg)),
      field189(std::move(field189__arg)),
      field190(std::move(field190__arg)),
      field191(std::move(field191__arg)),
      field192(std::move(field192__arg)),
      field193(std::move(field193__arg)),
      field194(std::move(field194__arg)),
      field195(std::move(field195__arg)),
      field196(std::move(field196__arg)),
      field197(std::move(field197__arg)),
      field198(std::move(field198__arg)),
      field199(std::move(field199__arg)),
      field200(std::move(field200__arg)),
      field201(std::move(field201__arg)),
      field202(std::move(field202__arg)),
      field203(std::move(field203__arg)),
      field204(std::move(field204__arg)),
      field205(std::move(field205__arg)),
      field206(std::move(field206__arg)),
      field207(std::move(field207__arg)),
      field208(std::move(field208__arg)),
      field209(std::move(field209__arg)),
      field210(std::move(field210__arg)),
      field211(std::move(field211__arg)),
      field212(std::move(field212__arg)),
      field213(std::move(field213__arg)),
      field214(std::move(field214__arg)),
      field215(std::move(field215__arg)),
      field216(std::move(field216__arg)),
      field217(std::move(field217__arg)),
      field218(std::move(field218__arg)),
      field219(std::move(field219__arg)),
      field220(std::move(field220__arg)),
      field221(std::move(field221__arg)),
      field222(std::move(field222__arg)),
      field223(std::move(field223__arg)),
      field224(std::move(field224__arg)),
      field225(std::move(field225__arg)),
      field226(std::move(field226__arg)),
      field227(std::move(field227__arg)),
      field228(std::move(field228__arg)),
      field229(std::move(field229__arg)),
      field230(std::move(field230__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
    __isset.field97 = true;
    __isset.field98 = true;
    __isset.field99 = true;
    __isset.field100 = true;
    __isset.field101 = true;
    __isset.field102 = true;
    __isset.field103 = true;
    __isset.field104 = true;
    __isset.field105 = true;
    __isset.field106 = true;
    __isset.field107 = true;
    __isset.field108 = true;
    __isset.field109 = true;
    __isset.field110 = true;
    __isset.field111 = true;
    __isset.field112 = true;
    __isset.field113 = true;
    __isset.field114 = true;
    __isset.field115 = true;
    __isset.field116 = true;
    __isset.field117 = true;
    __isset.field118 = true;
    __isset.field119 = true;
    __isset.field120 = true;
    __isset.field121 = true;
    __isset.field122 = true;
    __isset.field123 = true;
    __isset.field124 = true;
    __isset.field125 = true;
    __isset.field126 = true;
    __isset.field127 = true;
    __isset.field128 = true;
    __isset.field129 = true;
    __isset.field130 = true;
    __isset.field131 = true;
    __isset.field132 = true;
    __isset.field133 = true;
    __isset.field134 = true;
    __isset.field135 = true;
    __isset.field136 = true;
    __isset.field137 = true;
    __isset.field138 = true;
    __isset.field139 = true;
    __isset.field140 = true;
    __isset.field141 = true;
    __isset.field142 = true;
    __isset.field143 = true;
    __isset.field144 = true;
    __isset.field145 = true;
    __isset.field146 = true;
    __isset.field147 = true;
    __isset.field148 = true;
    __isset.field149 = true;
    __isset.field150 = true;
    __isset.field151 = true;
    __isset.field152 = true;
    __isset.field153 = true;
    __isset.field154 = true;
    __isset.field155 = true;
    __isset.field156 = true;
    __isset.field157 = true;
    __isset.field158 = true;
    __isset.field159 = true;
    __isset.field160 = true;
    __isset.field161 = true;
    __isset.field162 = true;
    __isset.field163 = true;
    __isset.field164 = true;
    __isset.field165 = true;
    __isset.field166 = true;
    __isset.field167 = true;
    __isset.field168 = true;
    __isset.field169 = true;
    __isset.field170 = true;
    __isset.field171 = true;
    __isset.field172 = true;
    __isset.field173 = true;
    __isset.field174 = true;
    __isset.field175 = true;
    __isset.field176 = true;
    __isset.field177 = true;
    __isset.field178 = true;
    __isset.field179 = true;
    __isset.field180 = true;
    __isset.field181 = true;
    __isset.field182 = true;
    __isset.field183 = true;
    __isset.field184 = true;
    __isset.field185 = true;
    __isset.field186 = true;
    __isset.field187 = true;
    __isset.field188 = true;
    __isset.field189 = true;
    __isset.field190 = true;
    __isset.field191 = true;
    __isset.field192 = true;
    __isset.field193 = true;
    __isset.field194 = true;
    __isset.field195 = true;
    __isset.field196 = true;
    __isset.field197 = true;
    __isset.field198 = true;
    __isset.field199 = true;
    __isset.field200 = true;
    __isset.field201 = true;
    __isset.field202 = true;
    __isset.field203 = true;
    __isset.field204 = true;
    __isset.field205 = true;
    __isset.field206 = true;
    __isset.field207 = true;
    __isset.field208 = true;
    __isset.field209 = true;
    __isset.field210 = true;
    __isset.field211 = true;
    __isset.field212 = true;
    __isset.field213 = true;
    __isset.field214 = true;
    __isset.field215 = true;
    __isset.field216 = true;
    __isset.field217 = true;
    __isset.field218 = true;
    __isset.field219 = true;
    __isset.field220 = true;
    __isset.field221 = true;
    __isset.field222 = true;
    __isset.field223 = true;
    __isset.field224 = true;
    __isset.field225 = true;
    __isset.field226 = true;
    __isset.field227 = true;
    __isset.field228 = true;
    __isset.field229 = true;
    __isset.field230 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<97, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field97 = arg.move();
    __isset.field97 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<98, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field98 = arg.move();
    __isset.field98 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<99, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field99 = arg.move();
    __isset.field99 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field100 = arg.move();
    __isset.field100 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field101 = arg.move();
    __isset.field101 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<102, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field102 = arg.move();
    __isset.field102 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<103, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field103 = arg.move();
    __isset.field103 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<104, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field104 = arg.move();
    __isset.field104 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<105, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field105 = arg.move();
    __isset.field105 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<106, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field106 = arg.move();
    __isset.field106 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<107, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field107 = arg.move();
    __isset.field107 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<108, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field108 = arg.move();
    __isset.field108 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<109, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field109 = arg.move();
    __isset.field109 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<110, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field110 = arg.move();
    __isset.field110 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<111, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field111 = arg.move();
    __isset.field111 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<112, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field112 = arg.move();
    __isset.field112 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<113, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field113 = arg.move();
    __isset.field113 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<114, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field114 = arg.move();
    __isset.field114 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<115, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field115 = arg.move();
    __isset.field115 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<116, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field116 = arg.move();
    __isset.field116 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<117, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field117 = arg.move();
    __isset.field117 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<118, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field118 = arg.move();
    __isset.field118 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<119, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field119 = arg.move();
    __isset.field119 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<120, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field120 = arg.move();
    __isset.field120 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<121, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field121 = arg.move();
    __isset.field121 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<122, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field122 = arg.move();
    __isset.field122 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<123, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field123 = arg.move();
    __isset.field123 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<124, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field124 = arg.move();
    __isset.field124 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<125, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field125 = arg.move();
    __isset.field125 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<126, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field126 = arg.move();
    __isset.field126 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<127, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field127 = arg.move();
    __isset.field127 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<128, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field128 = arg.move();
    __isset.field128 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<129, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field129 = arg.move();
    __isset.field129 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<130, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field130 = arg.move();
    __isset.field130 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<131, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field131 = arg.move();
    __isset.field131 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<132, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field132 = arg.move();
    __isset.field132 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<133, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field133 = arg.move();
    __isset.field133 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<134, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field134 = arg.move();
    __isset.field134 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<135, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field135 = arg.move();
    __isset.field135 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<136, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field136 = arg.move();
    __isset.field136 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<137, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field137 = arg.move();
    __isset.field137 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<138, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field138 = arg.move();
    __isset.field138 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<139, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field139 = arg.move();
    __isset.field139 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<140, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field140 = arg.move();
    __isset.field140 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<141, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field141 = arg.move();
    __isset.field141 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<142, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field142 = arg.move();
    __isset.field142 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<143, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field143 = arg.move();
    __isset.field143 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<144, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field144 = arg.move();
    __isset.field144 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<145, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field145 = arg.move();
    __isset.field145 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<146, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field146 = arg.move();
    __isset.field146 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<147, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field147 = arg.move();
    __isset.field147 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<148, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field148 = arg.move();
    __isset.field148 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<149, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field149 = arg.move();
    __isset.field149 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<150, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field150 = arg.move();
    __isset.field150 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<151, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field151 = arg.move();
    __isset.field151 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<152, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field152 = arg.move();
    __isset.field152 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<153, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field153 = arg.move();
    __isset.field153 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<154, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field154 = arg.move();
    __isset.field154 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<155, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field155 = arg.move();
    __isset.field155 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<156, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field156 = arg.move();
    __isset.field156 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<157, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field157 = arg.move();
    __isset.field157 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<158, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field158 = arg.move();
    __isset.field158 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<159, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field159 = arg.move();
    __isset.field159 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<160, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field160 = arg.move();
    __isset.field160 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<161, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field161 = arg.move();
    __isset.field161 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<162, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field162 = arg.move();
    __isset.field162 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<163, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field163 = arg.move();
    __isset.field163 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<164, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field164 = arg.move();
    __isset.field164 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<165, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field165 = arg.move();
    __isset.field165 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<166, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field166 = arg.move();
    __isset.field166 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<167, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field167 = arg.move();
    __isset.field167 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<168, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field168 = arg.move();
    __isset.field168 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<169, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field169 = arg.move();
    __isset.field169 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<170, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field170 = arg.move();
    __isset.field170 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<171, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field171 = arg.move();
    __isset.field171 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<172, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field172 = arg.move();
    __isset.field172 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<173, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field173 = arg.move();
    __isset.field173 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<174, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field174 = arg.move();
    __isset.field174 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<175, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field175 = arg.move();
    __isset.field175 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<176, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field176 = arg.move();
    __isset.field176 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<177, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field177 = arg.move();
    __isset.field177 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<178, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field178 = arg.move();
    __isset.field178 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<179, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field179 = arg.move();
    __isset.field179 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<180, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field180 = arg.move();
    __isset.field180 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<181, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field181 = arg.move();
    __isset.field181 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<182, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field182 = arg.move();
    __isset.field182 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<183, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field183 = arg.move();
    __isset.field183 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<184, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field184 = arg.move();
    __isset.field184 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<185, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field185 = arg.move();
    __isset.field185 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<186, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field186 = arg.move();
    __isset.field186 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<187, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field187 = arg.move();
    __isset.field187 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<188, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field188 = arg.move();
    __isset.field188 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<189, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field189 = arg.move();
    __isset.field189 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<190, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field190 = arg.move();
    __isset.field190 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<191, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field191 = arg.move();
    __isset.field191 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<192, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field192 = arg.move();
    __isset.field192 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<193, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field193 = arg.move();
    __isset.field193 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<194, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field194 = arg.move();
    __isset.field194 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<195, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field195 = arg.move();
    __isset.field195 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<196, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field196 = arg.move();
    __isset.field196 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<197, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field197 = arg.move();
    __isset.field197 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<198, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field198 = arg.move();
    __isset.field198 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<199, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field199 = arg.move();
    __isset.field199 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<200, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field200 = arg.move();
    __isset.field200 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<201, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field201 = arg.move();
    __isset.field201 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<202, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field202 = arg.move();
    __isset.field202 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<203, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field203 = arg.move();
    __isset.field203 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<204, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field204 = arg.move();
    __isset.field204 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<205, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field205 = arg.move();
    __isset.field205 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<206, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field206 = arg.move();
    __isset.field206 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<207, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field207 = arg.move();
    __isset.field207 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<208, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field208 = arg.move();
    __isset.field208 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<209, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field209 = arg.move();
    __isset.field209 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<210, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field210 = arg.move();
    __isset.field210 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<211, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field211 = arg.move();
    __isset.field211 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<212, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field212 = arg.move();
    __isset.field212 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<213, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field213 = arg.move();
    __isset.field213 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<214, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field214 = arg.move();
    __isset.field214 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<215, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field215 = arg.move();
    __isset.field215 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<216, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field216 = arg.move();
    __isset.field216 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<217, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field217 = arg.move();
    __isset.field217 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<218, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field218 = arg.move();
    __isset.field218 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<219, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field219 = arg.move();
    __isset.field219 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<220, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field220 = arg.move();
    __isset.field220 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<221, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field221 = arg.move();
    __isset.field221 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<222, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field222 = arg.move();
    __isset.field222 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<223, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field223 = arg.move();
    __isset.field223 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<224, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field224 = arg.move();
    __isset.field224 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<225, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field225 = arg.move();
    __isset.field225 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<226, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field226 = arg.move();
    __isset.field226 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<227, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field227 = arg.move();
    __isset.field227 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<228, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field228 = arg.move();
    __isset.field228 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<229, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field229 = arg.move();
    __isset.field229 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct27(::apache::thrift::detail::argument_wrapper<230, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct27(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field230 = arg.move();
    __isset.field230 = true;
  }

  Struct27(Struct27&&) = default;

  Struct27(const Struct27&) = default;

  Struct27& operator=(Struct27&&) = default;

  Struct27& operator=(const Struct27&) = default;
  void __clear();

  virtual ~Struct27() {}

   ::cpp2::Struct8 field1;
  float field2;
  std::set<double> field3;
  std::string field4;
  std::map<int8_t, std::string> field5;
  std::vector<double> field6;
  int64_t field7;
  std::set<double> field8;
  std::set< ::cpp2::Struct1> field9;
  std::set<std::string> field10;
  int64_t field11;
  std::set<std::set<float>> field12;
  std::map<bool, std::string> field13;
  bool field14;
  float field15;
  bool field16;
   ::cpp2::Struct3 field17;
   ::cpp2::Struct6 field18;
  std::set<bool> field19;
  int16_t field20;
  std::set<int64_t> field21;
  std::string field22;
  int8_t field23;
  std::map<int16_t, float> field24;
   ::cpp2::Struct0 field25;
  std::map<std::string, std::map<std::string, std::map<int32_t, float>>> field26;
  std::set<int64_t> field27;
  float field28;
  std::vector<int32_t> field29;
  int32_t field30;
  std::vector<bool> field31;
  int64_t field32;
   ::cpp2::Struct9 field33;
  std::set<int8_t> field34;
   ::cpp2::Struct15 field35;
  int8_t field36;
  int64_t field37;
  bool field38;
  std::map<std::map<std::vector<float>, int8_t>, int32_t> field39;
  std::vector<std::string> field40;
   ::cpp2::Struct4 field41;
  double field42;
   ::cpp2::Struct7 field43;
  std::string field44;
  int16_t field45;
  int32_t field46;
  std::map<double, std::string> field47;
  int8_t field48;
   ::cpp2::Struct5 field49;
   ::cpp2::Struct19 field50;
  std::string field51;
   ::cpp2::Struct16 field52;
  std::set<std::string> field53;
  std::set<std::vector<std::string>> field54;
  double field55;
  bool field56;
  std::vector<int32_t> field57;
  std::set<std::string> field58;
  std::map<std::map<std::map<int32_t, int64_t>, std::string>, float> field59;
   ::cpp2::Struct2 field60;
  float field61;
   ::cpp2::Struct16 field62;
  std::set<int16_t> field63;
  int64_t field64;
  int32_t field65;
  std::vector<bool> field66;
  bool field67;
  bool field68;
   ::cpp2::Struct6 field69;
  int8_t field70;
  int32_t field71;
   ::cpp2::Struct6 field72;
  int16_t field73;
  double field74;
  int64_t field75;
  std::vector<int8_t> field76;
  std::vector<bool> field77;
  std::vector<std::string> field78;
  int8_t field79;
   ::cpp2::Struct4 field80;
  int8_t field81;
  std::string field82;
  std::vector<std::map<std::map<float, bool>, int8_t>> field83;
  float field84;
  std::string field85;
  int32_t field86;
  int16_t field87;
  std::set<int64_t> field88;
  bool field89;
  bool field90;
  std::vector<std::vector<std::vector<int64_t>>> field91;
  std::string field92;
  std::set<std::set<int64_t>> field93;
  double field94;
  std::string field95;
  bool field96;
  std::string field97;
  std::string field98;
  std::string field99;
   ::cpp2::Struct13 field100;
  bool field101;
  float field102;
  int16_t field103;
  int32_t field104;
  int32_t field105;
  std::set<double> field106;
   ::cpp2::Struct9 field107;
  std::map<int64_t, std::vector<bool>> field108;
  bool field109;
  int16_t field110;
  std::vector<int8_t> field111;
  float field112;
  int32_t field113;
   ::cpp2::Struct4 field114;
   ::cpp2::Struct2 field115;
  int64_t field116;
  std::set<std::string> field117;
  int8_t field118;
  std::vector<double> field119;
   ::cpp2::Struct8 field120;
   ::cpp2::Struct14 field121;
  int64_t field122;
  std::map<int32_t, std::string> field123;
  int64_t field124;
  std::string field125;
  std::vector<bool> field126;
  float field127;
  std::set<float> field128;
  int16_t field129;
  std::set<bool> field130;
  std::vector<int16_t> field131;
  std::map<std::set<std::string>, float> field132;
  std::vector<std::map<std::vector<std::vector<float>>, int32_t>> field133;
  std::vector<int64_t> field134;
  std::map< ::cpp2::Struct13, double> field135;
  float field136;
  std::map<int8_t, float> field137;
  std::map<double,  ::cpp2::Struct7> field138;
  std::vector<std::set<std::string>> field139;
  std::map<std::set<double>, std::string> field140;
   ::cpp2::Struct12 field141;
  int16_t field142;
  std::string field143;
  std::set<double> field144;
  double field145;
   ::cpp2::Struct17 field146;
  std::string field147;
  float field148;
  float field149;
  std::set<bool> field150;
   ::cpp2::Struct18 field151;
  int8_t field152;
  std::string field153;
  double field154;
  std::vector<std::string> field155;
   ::cpp2::Struct3 field156;
  int32_t field157;
  std::map<int16_t, int16_t> field158;
   ::cpp2::Struct8 field159;
  std::string field160;
  int8_t field161;
  int32_t field162;
  std::set<double> field163;
  std::vector<std::map<int64_t, int32_t>> field164;
  std::vector<int64_t> field165;
  std::string field166;
  double field167;
  std::map<std::string, std::string> field168;
  std::map<int8_t, int8_t> field169;
  double field170;
  std::map<std::string, std::string> field171;
  std::map< ::cpp2::Struct3, float> field172;
  std::string field173;
  int16_t field174;
  int64_t field175;
  std::string field176;
  std::map<float, int16_t> field177;
   ::cpp2::Struct0 field178;
  std::map<int64_t, std::set<int64_t>> field179;
  std::map<double, std::string> field180;
  int32_t field181;
   ::cpp2::Struct21 field182;
  std::string field183;
  std::set<std::string> field184;
  int8_t field185;
  float field186;
  int16_t field187;
  std::set<std::set<double>> field188;
  std::string field189;
  std::set<double> field190;
  std::set<bool> field191;
  float field192;
  std::string field193;
  float field194;
  std::map<int64_t, int8_t> field195;
   ::cpp2::Struct5 field196;
  bool field197;
  std::map<double, int32_t> field198;
  std::set<int16_t> field199;
   ::cpp2::Struct18 field200;
  int32_t field201;
  int8_t field202;
   ::cpp2::Struct16 field203;
  std::map<std::vector<bool>, std::string> field204;
  int32_t field205;
  std::vector<int8_t> field206;
  bool field207;
  std::map<int8_t, int32_t> field208;
  float field209;
  std::vector<int32_t> field210;
  float field211;
  std::string field212;
  std::set<float> field213;
  std::vector<std::string> field214;
  std::map<std::string,  ::cpp2::Struct5> field215;
  int64_t field216;
  std::map<int64_t, double> field217;
  int64_t field218;
  std::string field219;
  std::set<int8_t> field220;
  std::map<std::vector<std::vector<std::string>>, std::vector<float>> field221;
  double field222;
  std::vector<int8_t> field223;
  std::set<std::string> field224;
  std::map<float, bool> field225;
  int64_t field226;
  std::string field227;
  std::vector<double> field228;
  int64_t field229;
  int8_t field230;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
      field97 = false;
      field98 = false;
      field99 = false;
      field100 = false;
      field101 = false;
      field102 = false;
      field103 = false;
      field104 = false;
      field105 = false;
      field106 = false;
      field107 = false;
      field108 = false;
      field109 = false;
      field110 = false;
      field111 = false;
      field112 = false;
      field113 = false;
      field114 = false;
      field115 = false;
      field116 = false;
      field117 = false;
      field118 = false;
      field119 = false;
      field120 = false;
      field121 = false;
      field122 = false;
      field123 = false;
      field124 = false;
      field125 = false;
      field126 = false;
      field127 = false;
      field128 = false;
      field129 = false;
      field130 = false;
      field131 = false;
      field132 = false;
      field133 = false;
      field134 = false;
      field135 = false;
      field136 = false;
      field137 = false;
      field138 = false;
      field139 = false;
      field140 = false;
      field141 = false;
      field142 = false;
      field143 = false;
      field144 = false;
      field145 = false;
      field146 = false;
      field147 = false;
      field148 = false;
      field149 = false;
      field150 = false;
      field151 = false;
      field152 = false;
      field153 = false;
      field154 = false;
      field155 = false;
      field156 = false;
      field157 = false;
      field158 = false;
      field159 = false;
      field160 = false;
      field161 = false;
      field162 = false;
      field163 = false;
      field164 = false;
      field165 = false;
      field166 = false;
      field167 = false;
      field168 = false;
      field169 = false;
      field170 = false;
      field171 = false;
      field172 = false;
      field173 = false;
      field174 = false;
      field175 = false;
      field176 = false;
      field177 = false;
      field178 = false;
      field179 = false;
      field180 = false;
      field181 = false;
      field182 = false;
      field183 = false;
      field184 = false;
      field185 = false;
      field186 = false;
      field187 = false;
      field188 = false;
      field189 = false;
      field190 = false;
      field191 = false;
      field192 = false;
      field193 = false;
      field194 = false;
      field195 = false;
      field196 = false;
      field197 = false;
      field198 = false;
      field199 = false;
      field200 = false;
      field201 = false;
      field202 = false;
      field203 = false;
      field204 = false;
      field205 = false;
      field206 = false;
      field207 = false;
      field208 = false;
      field209 = false;
      field210 = false;
      field211 = false;
      field212 = false;
      field213 = false;
      field214 = false;
      field215 = false;
      field216 = false;
      field217 = false;
      field218 = false;
      field219 = false;
      field220 = false;
      field221 = false;
      field222 = false;
      field223 = false;
      field224 = false;
      field225 = false;
      field226 = false;
      field227 = false;
      field228 = false;
      field229 = false;
      field230 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
    bool field97 = false;
    bool field98 = false;
    bool field99 = false;
    bool field100 = false;
    bool field101 = false;
    bool field102 = false;
    bool field103 = false;
    bool field104 = false;
    bool field105 = false;
    bool field106 = false;
    bool field107 = false;
    bool field108 = false;
    bool field109 = false;
    bool field110 = false;
    bool field111 = false;
    bool field112 = false;
    bool field113 = false;
    bool field114 = false;
    bool field115 = false;
    bool field116 = false;
    bool field117 = false;
    bool field118 = false;
    bool field119 = false;
    bool field120 = false;
    bool field121 = false;
    bool field122 = false;
    bool field123 = false;
    bool field124 = false;
    bool field125 = false;
    bool field126 = false;
    bool field127 = false;
    bool field128 = false;
    bool field129 = false;
    bool field130 = false;
    bool field131 = false;
    bool field132 = false;
    bool field133 = false;
    bool field134 = false;
    bool field135 = false;
    bool field136 = false;
    bool field137 = false;
    bool field138 = false;
    bool field139 = false;
    bool field140 = false;
    bool field141 = false;
    bool field142 = false;
    bool field143 = false;
    bool field144 = false;
    bool field145 = false;
    bool field146 = false;
    bool field147 = false;
    bool field148 = false;
    bool field149 = false;
    bool field150 = false;
    bool field151 = false;
    bool field152 = false;
    bool field153 = false;
    bool field154 = false;
    bool field155 = false;
    bool field156 = false;
    bool field157 = false;
    bool field158 = false;
    bool field159 = false;
    bool field160 = false;
    bool field161 = false;
    bool field162 = false;
    bool field163 = false;
    bool field164 = false;
    bool field165 = false;
    bool field166 = false;
    bool field167 = false;
    bool field168 = false;
    bool field169 = false;
    bool field170 = false;
    bool field171 = false;
    bool field172 = false;
    bool field173 = false;
    bool field174 = false;
    bool field175 = false;
    bool field176 = false;
    bool field177 = false;
    bool field178 = false;
    bool field179 = false;
    bool field180 = false;
    bool field181 = false;
    bool field182 = false;
    bool field183 = false;
    bool field184 = false;
    bool field185 = false;
    bool field186 = false;
    bool field187 = false;
    bool field188 = false;
    bool field189 = false;
    bool field190 = false;
    bool field191 = false;
    bool field192 = false;
    bool field193 = false;
    bool field194 = false;
    bool field195 = false;
    bool field196 = false;
    bool field197 = false;
    bool field198 = false;
    bool field199 = false;
    bool field200 = false;
    bool field201 = false;
    bool field202 = false;
    bool field203 = false;
    bool field204 = false;
    bool field205 = false;
    bool field206 = false;
    bool field207 = false;
    bool field208 = false;
    bool field209 = false;
    bool field210 = false;
    bool field211 = false;
    bool field212 = false;
    bool field213 = false;
    bool field214 = false;
    bool field215 = false;
    bool field216 = false;
    bool field217 = false;
    bool field218 = false;
    bool field219 = false;
    bool field220 = false;
    bool field221 = false;
    bool field222 = false;
    bool field223 = false;
    bool field224 = false;
    bool field225 = false;
    bool field226 = false;
    bool field227 = false;
    bool field228 = false;
    bool field229 = false;
    bool field230 = false;
  } __isset;
  bool operator==(const Struct27& rhs) const;

  bool operator < (const Struct27& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    if (!(field97 == rhs.field97)) {
      return field97 < rhs.field97;
    }
    if (!(field98 == rhs.field98)) {
      return field98 < rhs.field98;
    }
    if (!(field99 == rhs.field99)) {
      return field99 < rhs.field99;
    }
    if (!(field100 == rhs.field100)) {
      return field100 < rhs.field100;
    }
    if (!(field101 == rhs.field101)) {
      return field101 < rhs.field101;
    }
    if (!(field102 == rhs.field102)) {
      return field102 < rhs.field102;
    }
    if (!(field103 == rhs.field103)) {
      return field103 < rhs.field103;
    }
    if (!(field104 == rhs.field104)) {
      return field104 < rhs.field104;
    }
    if (!(field105 == rhs.field105)) {
      return field105 < rhs.field105;
    }
    if (!(field106 == rhs.field106)) {
      return field106 < rhs.field106;
    }
    if (!(field107 == rhs.field107)) {
      return field107 < rhs.field107;
    }
    if (!(field108 == rhs.field108)) {
      return field108 < rhs.field108;
    }
    if (!(field109 == rhs.field109)) {
      return field109 < rhs.field109;
    }
    if (!(field110 == rhs.field110)) {
      return field110 < rhs.field110;
    }
    if (!(field111 == rhs.field111)) {
      return field111 < rhs.field111;
    }
    if (!(field112 == rhs.field112)) {
      return field112 < rhs.field112;
    }
    if (!(field113 == rhs.field113)) {
      return field113 < rhs.field113;
    }
    if (!(field114 == rhs.field114)) {
      return field114 < rhs.field114;
    }
    if (!(field115 == rhs.field115)) {
      return field115 < rhs.field115;
    }
    if (!(field116 == rhs.field116)) {
      return field116 < rhs.field116;
    }
    if (!(field117 == rhs.field117)) {
      return field117 < rhs.field117;
    }
    if (!(field118 == rhs.field118)) {
      return field118 < rhs.field118;
    }
    if (!(field119 == rhs.field119)) {
      return field119 < rhs.field119;
    }
    if (!(field120 == rhs.field120)) {
      return field120 < rhs.field120;
    }
    if (!(field121 == rhs.field121)) {
      return field121 < rhs.field121;
    }
    if (!(field122 == rhs.field122)) {
      return field122 < rhs.field122;
    }
    if (!(field123 == rhs.field123)) {
      return field123 < rhs.field123;
    }
    if (!(field124 == rhs.field124)) {
      return field124 < rhs.field124;
    }
    if (!(field125 == rhs.field125)) {
      return field125 < rhs.field125;
    }
    if (!(field126 == rhs.field126)) {
      return field126 < rhs.field126;
    }
    if (!(field127 == rhs.field127)) {
      return field127 < rhs.field127;
    }
    if (!(field128 == rhs.field128)) {
      return field128 < rhs.field128;
    }
    if (!(field129 == rhs.field129)) {
      return field129 < rhs.field129;
    }
    if (!(field130 == rhs.field130)) {
      return field130 < rhs.field130;
    }
    if (!(field131 == rhs.field131)) {
      return field131 < rhs.field131;
    }
    if (!(field132 == rhs.field132)) {
      return field132 < rhs.field132;
    }
    if (!(field133 == rhs.field133)) {
      return field133 < rhs.field133;
    }
    if (!(field134 == rhs.field134)) {
      return field134 < rhs.field134;
    }
    if (!(field135 == rhs.field135)) {
      return field135 < rhs.field135;
    }
    if (!(field136 == rhs.field136)) {
      return field136 < rhs.field136;
    }
    if (!(field137 == rhs.field137)) {
      return field137 < rhs.field137;
    }
    if (!(field138 == rhs.field138)) {
      return field138 < rhs.field138;
    }
    if (!(field139 == rhs.field139)) {
      return field139 < rhs.field139;
    }
    if (!(field140 == rhs.field140)) {
      return field140 < rhs.field140;
    }
    if (!(field141 == rhs.field141)) {
      return field141 < rhs.field141;
    }
    if (!(field142 == rhs.field142)) {
      return field142 < rhs.field142;
    }
    if (!(field143 == rhs.field143)) {
      return field143 < rhs.field143;
    }
    if (!(field144 == rhs.field144)) {
      return field144 < rhs.field144;
    }
    if (!(field145 == rhs.field145)) {
      return field145 < rhs.field145;
    }
    if (!(field146 == rhs.field146)) {
      return field146 < rhs.field146;
    }
    if (!(field147 == rhs.field147)) {
      return field147 < rhs.field147;
    }
    if (!(field148 == rhs.field148)) {
      return field148 < rhs.field148;
    }
    if (!(field149 == rhs.field149)) {
      return field149 < rhs.field149;
    }
    if (!(field150 == rhs.field150)) {
      return field150 < rhs.field150;
    }
    if (!(field151 == rhs.field151)) {
      return field151 < rhs.field151;
    }
    if (!(field152 == rhs.field152)) {
      return field152 < rhs.field152;
    }
    if (!(field153 == rhs.field153)) {
      return field153 < rhs.field153;
    }
    if (!(field154 == rhs.field154)) {
      return field154 < rhs.field154;
    }
    if (!(field155 == rhs.field155)) {
      return field155 < rhs.field155;
    }
    if (!(field156 == rhs.field156)) {
      return field156 < rhs.field156;
    }
    if (!(field157 == rhs.field157)) {
      return field157 < rhs.field157;
    }
    if (!(field158 == rhs.field158)) {
      return field158 < rhs.field158;
    }
    if (!(field159 == rhs.field159)) {
      return field159 < rhs.field159;
    }
    if (!(field160 == rhs.field160)) {
      return field160 < rhs.field160;
    }
    if (!(field161 == rhs.field161)) {
      return field161 < rhs.field161;
    }
    if (!(field162 == rhs.field162)) {
      return field162 < rhs.field162;
    }
    if (!(field163 == rhs.field163)) {
      return field163 < rhs.field163;
    }
    if (!(field164 == rhs.field164)) {
      return field164 < rhs.field164;
    }
    if (!(field165 == rhs.field165)) {
      return field165 < rhs.field165;
    }
    if (!(field166 == rhs.field166)) {
      return field166 < rhs.field166;
    }
    if (!(field167 == rhs.field167)) {
      return field167 < rhs.field167;
    }
    if (!(field168 == rhs.field168)) {
      return field168 < rhs.field168;
    }
    if (!(field169 == rhs.field169)) {
      return field169 < rhs.field169;
    }
    if (!(field170 == rhs.field170)) {
      return field170 < rhs.field170;
    }
    if (!(field171 == rhs.field171)) {
      return field171 < rhs.field171;
    }
    if (!(field172 == rhs.field172)) {
      return field172 < rhs.field172;
    }
    if (!(field173 == rhs.field173)) {
      return field173 < rhs.field173;
    }
    if (!(field174 == rhs.field174)) {
      return field174 < rhs.field174;
    }
    if (!(field175 == rhs.field175)) {
      return field175 < rhs.field175;
    }
    if (!(field176 == rhs.field176)) {
      return field176 < rhs.field176;
    }
    if (!(field177 == rhs.field177)) {
      return field177 < rhs.field177;
    }
    if (!(field178 == rhs.field178)) {
      return field178 < rhs.field178;
    }
    if (!(field179 == rhs.field179)) {
      return field179 < rhs.field179;
    }
    if (!(field180 == rhs.field180)) {
      return field180 < rhs.field180;
    }
    if (!(field181 == rhs.field181)) {
      return field181 < rhs.field181;
    }
    if (!(field182 == rhs.field182)) {
      return field182 < rhs.field182;
    }
    if (!(field183 == rhs.field183)) {
      return field183 < rhs.field183;
    }
    if (!(field184 == rhs.field184)) {
      return field184 < rhs.field184;
    }
    if (!(field185 == rhs.field185)) {
      return field185 < rhs.field185;
    }
    if (!(field186 == rhs.field186)) {
      return field186 < rhs.field186;
    }
    if (!(field187 == rhs.field187)) {
      return field187 < rhs.field187;
    }
    if (!(field188 == rhs.field188)) {
      return field188 < rhs.field188;
    }
    if (!(field189 == rhs.field189)) {
      return field189 < rhs.field189;
    }
    if (!(field190 == rhs.field190)) {
      return field190 < rhs.field190;
    }
    if (!(field191 == rhs.field191)) {
      return field191 < rhs.field191;
    }
    if (!(field192 == rhs.field192)) {
      return field192 < rhs.field192;
    }
    if (!(field193 == rhs.field193)) {
      return field193 < rhs.field193;
    }
    if (!(field194 == rhs.field194)) {
      return field194 < rhs.field194;
    }
    if (!(field195 == rhs.field195)) {
      return field195 < rhs.field195;
    }
    if (!(field196 == rhs.field196)) {
      return field196 < rhs.field196;
    }
    if (!(field197 == rhs.field197)) {
      return field197 < rhs.field197;
    }
    if (!(field198 == rhs.field198)) {
      return field198 < rhs.field198;
    }
    if (!(field199 == rhs.field199)) {
      return field199 < rhs.field199;
    }
    if (!(field200 == rhs.field200)) {
      return field200 < rhs.field200;
    }
    if (!(field201 == rhs.field201)) {
      return field201 < rhs.field201;
    }
    if (!(field202 == rhs.field202)) {
      return field202 < rhs.field202;
    }
    if (!(field203 == rhs.field203)) {
      return field203 < rhs.field203;
    }
    if (!(field204 == rhs.field204)) {
      return field204 < rhs.field204;
    }
    if (!(field205 == rhs.field205)) {
      return field205 < rhs.field205;
    }
    if (!(field206 == rhs.field206)) {
      return field206 < rhs.field206;
    }
    if (!(field207 == rhs.field207)) {
      return field207 < rhs.field207;
    }
    if (!(field208 == rhs.field208)) {
      return field208 < rhs.field208;
    }
    if (!(field209 == rhs.field209)) {
      return field209 < rhs.field209;
    }
    if (!(field210 == rhs.field210)) {
      return field210 < rhs.field210;
    }
    if (!(field211 == rhs.field211)) {
      return field211 < rhs.field211;
    }
    if (!(field212 == rhs.field212)) {
      return field212 < rhs.field212;
    }
    if (!(field213 == rhs.field213)) {
      return field213 < rhs.field213;
    }
    if (!(field214 == rhs.field214)) {
      return field214 < rhs.field214;
    }
    if (!(field215 == rhs.field215)) {
      return field215 < rhs.field215;
    }
    if (!(field216 == rhs.field216)) {
      return field216 < rhs.field216;
    }
    if (!(field217 == rhs.field217)) {
      return field217 < rhs.field217;
    }
    if (!(field218 == rhs.field218)) {
      return field218 < rhs.field218;
    }
    if (!(field219 == rhs.field219)) {
      return field219 < rhs.field219;
    }
    if (!(field220 == rhs.field220)) {
      return field220 < rhs.field220;
    }
    if (!(field221 == rhs.field221)) {
      return field221 < rhs.field221;
    }
    if (!(field222 == rhs.field222)) {
      return field222 < rhs.field222;
    }
    if (!(field223 == rhs.field223)) {
      return field223 < rhs.field223;
    }
    if (!(field224 == rhs.field224)) {
      return field224 < rhs.field224;
    }
    if (!(field225 == rhs.field225)) {
      return field225 < rhs.field225;
    }
    if (!(field226 == rhs.field226)) {
      return field226 < rhs.field226;
    }
    if (!(field227 == rhs.field227)) {
      return field227 < rhs.field227;
    }
    if (!(field228 == rhs.field228)) {
      return field228 < rhs.field228;
    }
    if (!(field229 == rhs.field229)) {
      return field229 < rhs.field229;
    }
    if (!(field230 == rhs.field230)) {
      return field230 < rhs.field230;
    }
    (void)rhs;
    return false;
  }
  const  ::cpp2::Struct8& get_field1() const&;
   ::cpp2::Struct8 get_field1() &&;

  template <typename T_Struct27_field1_struct_setter>
   ::cpp2::Struct8& set_field1(T_Struct27_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct27_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }

  float get_field2() const {
    return field2;
  }

  float& set_field2(float field2_) {
    field2 = field2_;
    __isset.field2 = true;
    return field2;
  }
  const std::set<double>& get_field3() const&;
  std::set<double> get_field3() &&;

  template <typename T_Struct27_field3_struct_setter>
  std::set<double>& set_field3(T_Struct27_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct27_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  const std::string& get_field4() const& {
    return field4;
  }

  std::string get_field4() && {
    return std::move(field4);
  }

  template <typename T_Struct27_field4_struct_setter>
  std::string& set_field4(T_Struct27_field4_struct_setter&& field4_) {
    field4 = std::forward<T_Struct27_field4_struct_setter>(field4_);
    __isset.field4 = true;
    return field4;
  }
  const std::map<int8_t, std::string>& get_field5() const&;
  std::map<int8_t, std::string> get_field5() &&;

  template <typename T_Struct27_field5_struct_setter>
  std::map<int8_t, std::string>& set_field5(T_Struct27_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct27_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }
  const std::vector<double>& get_field6() const&;
  std::vector<double> get_field6() &&;

  template <typename T_Struct27_field6_struct_setter>
  std::vector<double>& set_field6(T_Struct27_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct27_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }

  int64_t get_field7() const {
    return field7;
  }

  int64_t& set_field7(int64_t field7_) {
    field7 = field7_;
    __isset.field7 = true;
    return field7;
  }
  const std::set<double>& get_field8() const&;
  std::set<double> get_field8() &&;

  template <typename T_Struct27_field8_struct_setter>
  std::set<double>& set_field8(T_Struct27_field8_struct_setter&& field8_) {
    field8 = std::forward<T_Struct27_field8_struct_setter>(field8_);
    __isset.field8 = true;
    return field8;
  }
  const std::set< ::cpp2::Struct1>& get_field9() const&;
  std::set< ::cpp2::Struct1> get_field9() &&;

  template <typename T_Struct27_field9_struct_setter>
  std::set< ::cpp2::Struct1>& set_field9(T_Struct27_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct27_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }
  const std::set<std::string>& get_field10() const&;
  std::set<std::string> get_field10() &&;

  template <typename T_Struct27_field10_struct_setter>
  std::set<std::string>& set_field10(T_Struct27_field10_struct_setter&& field10_) {
    field10 = std::forward<T_Struct27_field10_struct_setter>(field10_);
    __isset.field10 = true;
    return field10;
  }

  int64_t get_field11() const {
    return field11;
  }

  int64_t& set_field11(int64_t field11_) {
    field11 = field11_;
    __isset.field11 = true;
    return field11;
  }
  const std::set<std::set<float>>& get_field12() const&;
  std::set<std::set<float>> get_field12() &&;

  template <typename T_Struct27_field12_struct_setter>
  std::set<std::set<float>>& set_field12(T_Struct27_field12_struct_setter&& field12_) {
    field12 = std::forward<T_Struct27_field12_struct_setter>(field12_);
    __isset.field12 = true;
    return field12;
  }
  const std::map<bool, std::string>& get_field13() const&;
  std::map<bool, std::string> get_field13() &&;

  template <typename T_Struct27_field13_struct_setter>
  std::map<bool, std::string>& set_field13(T_Struct27_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct27_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }

  bool get_field14() const {
    return field14;
  }

  bool& set_field14(bool field14_) {
    field14 = field14_;
    __isset.field14 = true;
    return field14;
  }

  float get_field15() const {
    return field15;
  }

  float& set_field15(float field15_) {
    field15 = field15_;
    __isset.field15 = true;
    return field15;
  }

  bool get_field16() const {
    return field16;
  }

  bool& set_field16(bool field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }
  const  ::cpp2::Struct3& get_field17() const&;
   ::cpp2::Struct3 get_field17() &&;

  template <typename T_Struct27_field17_struct_setter>
   ::cpp2::Struct3& set_field17(T_Struct27_field17_struct_setter&& field17_) {
    field17 = std::forward<T_Struct27_field17_struct_setter>(field17_);
    __isset.field17 = true;
    return field17;
  }
  const  ::cpp2::Struct6& get_field18() const&;
   ::cpp2::Struct6 get_field18() &&;

  template <typename T_Struct27_field18_struct_setter>
   ::cpp2::Struct6& set_field18(T_Struct27_field18_struct_setter&& field18_) {
    field18 = std::forward<T_Struct27_field18_struct_setter>(field18_);
    __isset.field18 = true;
    return field18;
  }
  const std::set<bool>& get_field19() const&;
  std::set<bool> get_field19() &&;

  template <typename T_Struct27_field19_struct_setter>
  std::set<bool>& set_field19(T_Struct27_field19_struct_setter&& field19_) {
    field19 = std::forward<T_Struct27_field19_struct_setter>(field19_);
    __isset.field19 = true;
    return field19;
  }

  int16_t get_field20() const {
    return field20;
  }

  int16_t& set_field20(int16_t field20_) {
    field20 = field20_;
    __isset.field20 = true;
    return field20;
  }
  const std::set<int64_t>& get_field21() const&;
  std::set<int64_t> get_field21() &&;

  template <typename T_Struct27_field21_struct_setter>
  std::set<int64_t>& set_field21(T_Struct27_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct27_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }

  const std::string& get_field22() const& {
    return field22;
  }

  std::string get_field22() && {
    return std::move(field22);
  }

  template <typename T_Struct27_field22_struct_setter>
  std::string& set_field22(T_Struct27_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct27_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }

  int8_t get_field23() const {
    return field23;
  }

  int8_t& set_field23(int8_t field23_) {
    field23 = field23_;
    __isset.field23 = true;
    return field23;
  }
  const std::map<int16_t, float>& get_field24() const&;
  std::map<int16_t, float> get_field24() &&;

  template <typename T_Struct27_field24_struct_setter>
  std::map<int16_t, float>& set_field24(T_Struct27_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct27_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }
  const  ::cpp2::Struct0& get_field25() const&;
   ::cpp2::Struct0 get_field25() &&;

  template <typename T_Struct27_field25_struct_setter>
   ::cpp2::Struct0& set_field25(T_Struct27_field25_struct_setter&& field25_) {
    field25 = std::forward<T_Struct27_field25_struct_setter>(field25_);
    __isset.field25 = true;
    return field25;
  }
  const std::map<std::string, std::map<std::string, std::map<int32_t, float>>>& get_field26() const&;
  std::map<std::string, std::map<std::string, std::map<int32_t, float>>> get_field26() &&;

  template <typename T_Struct27_field26_struct_setter>
  std::map<std::string, std::map<std::string, std::map<int32_t, float>>>& set_field26(T_Struct27_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct27_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }
  const std::set<int64_t>& get_field27() const&;
  std::set<int64_t> get_field27() &&;

  template <typename T_Struct27_field27_struct_setter>
  std::set<int64_t>& set_field27(T_Struct27_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct27_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }

  float get_field28() const {
    return field28;
  }

  float& set_field28(float field28_) {
    field28 = field28_;
    __isset.field28 = true;
    return field28;
  }
  const std::vector<int32_t>& get_field29() const&;
  std::vector<int32_t> get_field29() &&;

  template <typename T_Struct27_field29_struct_setter>
  std::vector<int32_t>& set_field29(T_Struct27_field29_struct_setter&& field29_) {
    field29 = std::forward<T_Struct27_field29_struct_setter>(field29_);
    __isset.field29 = true;
    return field29;
  }

  int32_t get_field30() const {
    return field30;
  }

  int32_t& set_field30(int32_t field30_) {
    field30 = field30_;
    __isset.field30 = true;
    return field30;
  }
  const std::vector<bool>& get_field31() const&;
  std::vector<bool> get_field31() &&;

  template <typename T_Struct27_field31_struct_setter>
  std::vector<bool>& set_field31(T_Struct27_field31_struct_setter&& field31_) {
    field31 = std::forward<T_Struct27_field31_struct_setter>(field31_);
    __isset.field31 = true;
    return field31;
  }

  int64_t get_field32() const {
    return field32;
  }

  int64_t& set_field32(int64_t field32_) {
    field32 = field32_;
    __isset.field32 = true;
    return field32;
  }
  const  ::cpp2::Struct9& get_field33() const&;
   ::cpp2::Struct9 get_field33() &&;

  template <typename T_Struct27_field33_struct_setter>
   ::cpp2::Struct9& set_field33(T_Struct27_field33_struct_setter&& field33_) {
    field33 = std::forward<T_Struct27_field33_struct_setter>(field33_);
    __isset.field33 = true;
    return field33;
  }
  const std::set<int8_t>& get_field34() const&;
  std::set<int8_t> get_field34() &&;

  template <typename T_Struct27_field34_struct_setter>
  std::set<int8_t>& set_field34(T_Struct27_field34_struct_setter&& field34_) {
    field34 = std::forward<T_Struct27_field34_struct_setter>(field34_);
    __isset.field34 = true;
    return field34;
  }
  const  ::cpp2::Struct15& get_field35() const&;
   ::cpp2::Struct15 get_field35() &&;

  template <typename T_Struct27_field35_struct_setter>
   ::cpp2::Struct15& set_field35(T_Struct27_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct27_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }

  int8_t get_field36() const {
    return field36;
  }

  int8_t& set_field36(int8_t field36_) {
    field36 = field36_;
    __isset.field36 = true;
    return field36;
  }

  int64_t get_field37() const {
    return field37;
  }

  int64_t& set_field37(int64_t field37_) {
    field37 = field37_;
    __isset.field37 = true;
    return field37;
  }

  bool get_field38() const {
    return field38;
  }

  bool& set_field38(bool field38_) {
    field38 = field38_;
    __isset.field38 = true;
    return field38;
  }
  const std::map<std::map<std::vector<float>, int8_t>, int32_t>& get_field39() const&;
  std::map<std::map<std::vector<float>, int8_t>, int32_t> get_field39() &&;

  template <typename T_Struct27_field39_struct_setter>
  std::map<std::map<std::vector<float>, int8_t>, int32_t>& set_field39(T_Struct27_field39_struct_setter&& field39_) {
    field39 = std::forward<T_Struct27_field39_struct_setter>(field39_);
    __isset.field39 = true;
    return field39;
  }
  const std::vector<std::string>& get_field40() const&;
  std::vector<std::string> get_field40() &&;

  template <typename T_Struct27_field40_struct_setter>
  std::vector<std::string>& set_field40(T_Struct27_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct27_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }
  const  ::cpp2::Struct4& get_field41() const&;
   ::cpp2::Struct4 get_field41() &&;

  template <typename T_Struct27_field41_struct_setter>
   ::cpp2::Struct4& set_field41(T_Struct27_field41_struct_setter&& field41_) {
    field41 = std::forward<T_Struct27_field41_struct_setter>(field41_);
    __isset.field41 = true;
    return field41;
  }

  double get_field42() const {
    return field42;
  }

  double& set_field42(double field42_) {
    field42 = field42_;
    __isset.field42 = true;
    return field42;
  }
  const  ::cpp2::Struct7& get_field43() const&;
   ::cpp2::Struct7 get_field43() &&;

  template <typename T_Struct27_field43_struct_setter>
   ::cpp2::Struct7& set_field43(T_Struct27_field43_struct_setter&& field43_) {
    field43 = std::forward<T_Struct27_field43_struct_setter>(field43_);
    __isset.field43 = true;
    return field43;
  }

  const std::string& get_field44() const& {
    return field44;
  }

  std::string get_field44() && {
    return std::move(field44);
  }

  template <typename T_Struct27_field44_struct_setter>
  std::string& set_field44(T_Struct27_field44_struct_setter&& field44_) {
    field44 = std::forward<T_Struct27_field44_struct_setter>(field44_);
    __isset.field44 = true;
    return field44;
  }

  int16_t get_field45() const {
    return field45;
  }

  int16_t& set_field45(int16_t field45_) {
    field45 = field45_;
    __isset.field45 = true;
    return field45;
  }

  int32_t get_field46() const {
    return field46;
  }

  int32_t& set_field46(int32_t field46_) {
    field46 = field46_;
    __isset.field46 = true;
    return field46;
  }
  const std::map<double, std::string>& get_field47() const&;
  std::map<double, std::string> get_field47() &&;

  template <typename T_Struct27_field47_struct_setter>
  std::map<double, std::string>& set_field47(T_Struct27_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct27_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }

  int8_t get_field48() const {
    return field48;
  }

  int8_t& set_field48(int8_t field48_) {
    field48 = field48_;
    __isset.field48 = true;
    return field48;
  }
  const  ::cpp2::Struct5& get_field49() const&;
   ::cpp2::Struct5 get_field49() &&;

  template <typename T_Struct27_field49_struct_setter>
   ::cpp2::Struct5& set_field49(T_Struct27_field49_struct_setter&& field49_) {
    field49 = std::forward<T_Struct27_field49_struct_setter>(field49_);
    __isset.field49 = true;
    return field49;
  }
  const  ::cpp2::Struct19& get_field50() const&;
   ::cpp2::Struct19 get_field50() &&;

  template <typename T_Struct27_field50_struct_setter>
   ::cpp2::Struct19& set_field50(T_Struct27_field50_struct_setter&& field50_) {
    field50 = std::forward<T_Struct27_field50_struct_setter>(field50_);
    __isset.field50 = true;
    return field50;
  }

  const std::string& get_field51() const& {
    return field51;
  }

  std::string get_field51() && {
    return std::move(field51);
  }

  template <typename T_Struct27_field51_struct_setter>
  std::string& set_field51(T_Struct27_field51_struct_setter&& field51_) {
    field51 = std::forward<T_Struct27_field51_struct_setter>(field51_);
    __isset.field51 = true;
    return field51;
  }
  const  ::cpp2::Struct16& get_field52() const&;
   ::cpp2::Struct16 get_field52() &&;

  template <typename T_Struct27_field52_struct_setter>
   ::cpp2::Struct16& set_field52(T_Struct27_field52_struct_setter&& field52_) {
    field52 = std::forward<T_Struct27_field52_struct_setter>(field52_);
    __isset.field52 = true;
    return field52;
  }
  const std::set<std::string>& get_field53() const&;
  std::set<std::string> get_field53() &&;

  template <typename T_Struct27_field53_struct_setter>
  std::set<std::string>& set_field53(T_Struct27_field53_struct_setter&& field53_) {
    field53 = std::forward<T_Struct27_field53_struct_setter>(field53_);
    __isset.field53 = true;
    return field53;
  }
  const std::set<std::vector<std::string>>& get_field54() const&;
  std::set<std::vector<std::string>> get_field54() &&;

  template <typename T_Struct27_field54_struct_setter>
  std::set<std::vector<std::string>>& set_field54(T_Struct27_field54_struct_setter&& field54_) {
    field54 = std::forward<T_Struct27_field54_struct_setter>(field54_);
    __isset.field54 = true;
    return field54;
  }

  double get_field55() const {
    return field55;
  }

  double& set_field55(double field55_) {
    field55 = field55_;
    __isset.field55 = true;
    return field55;
  }

  bool get_field56() const {
    return field56;
  }

  bool& set_field56(bool field56_) {
    field56 = field56_;
    __isset.field56 = true;
    return field56;
  }
  const std::vector<int32_t>& get_field57() const&;
  std::vector<int32_t> get_field57() &&;

  template <typename T_Struct27_field57_struct_setter>
  std::vector<int32_t>& set_field57(T_Struct27_field57_struct_setter&& field57_) {
    field57 = std::forward<T_Struct27_field57_struct_setter>(field57_);
    __isset.field57 = true;
    return field57;
  }
  const std::set<std::string>& get_field58() const&;
  std::set<std::string> get_field58() &&;

  template <typename T_Struct27_field58_struct_setter>
  std::set<std::string>& set_field58(T_Struct27_field58_struct_setter&& field58_) {
    field58 = std::forward<T_Struct27_field58_struct_setter>(field58_);
    __isset.field58 = true;
    return field58;
  }
  const std::map<std::map<std::map<int32_t, int64_t>, std::string>, float>& get_field59() const&;
  std::map<std::map<std::map<int32_t, int64_t>, std::string>, float> get_field59() &&;

  template <typename T_Struct27_field59_struct_setter>
  std::map<std::map<std::map<int32_t, int64_t>, std::string>, float>& set_field59(T_Struct27_field59_struct_setter&& field59_) {
    field59 = std::forward<T_Struct27_field59_struct_setter>(field59_);
    __isset.field59 = true;
    return field59;
  }
  const  ::cpp2::Struct2& get_field60() const&;
   ::cpp2::Struct2 get_field60() &&;

  template <typename T_Struct27_field60_struct_setter>
   ::cpp2::Struct2& set_field60(T_Struct27_field60_struct_setter&& field60_) {
    field60 = std::forward<T_Struct27_field60_struct_setter>(field60_);
    __isset.field60 = true;
    return field60;
  }

  float get_field61() const {
    return field61;
  }

  float& set_field61(float field61_) {
    field61 = field61_;
    __isset.field61 = true;
    return field61;
  }
  const  ::cpp2::Struct16& get_field62() const&;
   ::cpp2::Struct16 get_field62() &&;

  template <typename T_Struct27_field62_struct_setter>
   ::cpp2::Struct16& set_field62(T_Struct27_field62_struct_setter&& field62_) {
    field62 = std::forward<T_Struct27_field62_struct_setter>(field62_);
    __isset.field62 = true;
    return field62;
  }
  const std::set<int16_t>& get_field63() const&;
  std::set<int16_t> get_field63() &&;

  template <typename T_Struct27_field63_struct_setter>
  std::set<int16_t>& set_field63(T_Struct27_field63_struct_setter&& field63_) {
    field63 = std::forward<T_Struct27_field63_struct_setter>(field63_);
    __isset.field63 = true;
    return field63;
  }

  int64_t get_field64() const {
    return field64;
  }

  int64_t& set_field64(int64_t field64_) {
    field64 = field64_;
    __isset.field64 = true;
    return field64;
  }

  int32_t get_field65() const {
    return field65;
  }

  int32_t& set_field65(int32_t field65_) {
    field65 = field65_;
    __isset.field65 = true;
    return field65;
  }
  const std::vector<bool>& get_field66() const&;
  std::vector<bool> get_field66() &&;

  template <typename T_Struct27_field66_struct_setter>
  std::vector<bool>& set_field66(T_Struct27_field66_struct_setter&& field66_) {
    field66 = std::forward<T_Struct27_field66_struct_setter>(field66_);
    __isset.field66 = true;
    return field66;
  }

  bool get_field67() const {
    return field67;
  }

  bool& set_field67(bool field67_) {
    field67 = field67_;
    __isset.field67 = true;
    return field67;
  }

  bool get_field68() const {
    return field68;
  }

  bool& set_field68(bool field68_) {
    field68 = field68_;
    __isset.field68 = true;
    return field68;
  }
  const  ::cpp2::Struct6& get_field69() const&;
   ::cpp2::Struct6 get_field69() &&;

  template <typename T_Struct27_field69_struct_setter>
   ::cpp2::Struct6& set_field69(T_Struct27_field69_struct_setter&& field69_) {
    field69 = std::forward<T_Struct27_field69_struct_setter>(field69_);
    __isset.field69 = true;
    return field69;
  }

  int8_t get_field70() const {
    return field70;
  }

  int8_t& set_field70(int8_t field70_) {
    field70 = field70_;
    __isset.field70 = true;
    return field70;
  }

  int32_t get_field71() const {
    return field71;
  }

  int32_t& set_field71(int32_t field71_) {
    field71 = field71_;
    __isset.field71 = true;
    return field71;
  }
  const  ::cpp2::Struct6& get_field72() const&;
   ::cpp2::Struct6 get_field72() &&;

  template <typename T_Struct27_field72_struct_setter>
   ::cpp2::Struct6& set_field72(T_Struct27_field72_struct_setter&& field72_) {
    field72 = std::forward<T_Struct27_field72_struct_setter>(field72_);
    __isset.field72 = true;
    return field72;
  }

  int16_t get_field73() const {
    return field73;
  }

  int16_t& set_field73(int16_t field73_) {
    field73 = field73_;
    __isset.field73 = true;
    return field73;
  }

  double get_field74() const {
    return field74;
  }

  double& set_field74(double field74_) {
    field74 = field74_;
    __isset.field74 = true;
    return field74;
  }

  int64_t get_field75() const {
    return field75;
  }

  int64_t& set_field75(int64_t field75_) {
    field75 = field75_;
    __isset.field75 = true;
    return field75;
  }
  const std::vector<int8_t>& get_field76() const&;
  std::vector<int8_t> get_field76() &&;

  template <typename T_Struct27_field76_struct_setter>
  std::vector<int8_t>& set_field76(T_Struct27_field76_struct_setter&& field76_) {
    field76 = std::forward<T_Struct27_field76_struct_setter>(field76_);
    __isset.field76 = true;
    return field76;
  }
  const std::vector<bool>& get_field77() const&;
  std::vector<bool> get_field77() &&;

  template <typename T_Struct27_field77_struct_setter>
  std::vector<bool>& set_field77(T_Struct27_field77_struct_setter&& field77_) {
    field77 = std::forward<T_Struct27_field77_struct_setter>(field77_);
    __isset.field77 = true;
    return field77;
  }
  const std::vector<std::string>& get_field78() const&;
  std::vector<std::string> get_field78() &&;

  template <typename T_Struct27_field78_struct_setter>
  std::vector<std::string>& set_field78(T_Struct27_field78_struct_setter&& field78_) {
    field78 = std::forward<T_Struct27_field78_struct_setter>(field78_);
    __isset.field78 = true;
    return field78;
  }

  int8_t get_field79() const {
    return field79;
  }

  int8_t& set_field79(int8_t field79_) {
    field79 = field79_;
    __isset.field79 = true;
    return field79;
  }
  const  ::cpp2::Struct4& get_field80() const&;
   ::cpp2::Struct4 get_field80() &&;

  template <typename T_Struct27_field80_struct_setter>
   ::cpp2::Struct4& set_field80(T_Struct27_field80_struct_setter&& field80_) {
    field80 = std::forward<T_Struct27_field80_struct_setter>(field80_);
    __isset.field80 = true;
    return field80;
  }

  int8_t get_field81() const {
    return field81;
  }

  int8_t& set_field81(int8_t field81_) {
    field81 = field81_;
    __isset.field81 = true;
    return field81;
  }

  const std::string& get_field82() const& {
    return field82;
  }

  std::string get_field82() && {
    return std::move(field82);
  }

  template <typename T_Struct27_field82_struct_setter>
  std::string& set_field82(T_Struct27_field82_struct_setter&& field82_) {
    field82 = std::forward<T_Struct27_field82_struct_setter>(field82_);
    __isset.field82 = true;
    return field82;
  }
  const std::vector<std::map<std::map<float, bool>, int8_t>>& get_field83() const&;
  std::vector<std::map<std::map<float, bool>, int8_t>> get_field83() &&;

  template <typename T_Struct27_field83_struct_setter>
  std::vector<std::map<std::map<float, bool>, int8_t>>& set_field83(T_Struct27_field83_struct_setter&& field83_) {
    field83 = std::forward<T_Struct27_field83_struct_setter>(field83_);
    __isset.field83 = true;
    return field83;
  }

  float get_field84() const {
    return field84;
  }

  float& set_field84(float field84_) {
    field84 = field84_;
    __isset.field84 = true;
    return field84;
  }

  const std::string& get_field85() const& {
    return field85;
  }

  std::string get_field85() && {
    return std::move(field85);
  }

  template <typename T_Struct27_field85_struct_setter>
  std::string& set_field85(T_Struct27_field85_struct_setter&& field85_) {
    field85 = std::forward<T_Struct27_field85_struct_setter>(field85_);
    __isset.field85 = true;
    return field85;
  }

  int32_t get_field86() const {
    return field86;
  }

  int32_t& set_field86(int32_t field86_) {
    field86 = field86_;
    __isset.field86 = true;
    return field86;
  }

  int16_t get_field87() const {
    return field87;
  }

  int16_t& set_field87(int16_t field87_) {
    field87 = field87_;
    __isset.field87 = true;
    return field87;
  }
  const std::set<int64_t>& get_field88() const&;
  std::set<int64_t> get_field88() &&;

  template <typename T_Struct27_field88_struct_setter>
  std::set<int64_t>& set_field88(T_Struct27_field88_struct_setter&& field88_) {
    field88 = std::forward<T_Struct27_field88_struct_setter>(field88_);
    __isset.field88 = true;
    return field88;
  }

  bool get_field89() const {
    return field89;
  }

  bool& set_field89(bool field89_) {
    field89 = field89_;
    __isset.field89 = true;
    return field89;
  }

  bool get_field90() const {
    return field90;
  }

  bool& set_field90(bool field90_) {
    field90 = field90_;
    __isset.field90 = true;
    return field90;
  }
  const std::vector<std::vector<std::vector<int64_t>>>& get_field91() const&;
  std::vector<std::vector<std::vector<int64_t>>> get_field91() &&;

  template <typename T_Struct27_field91_struct_setter>
  std::vector<std::vector<std::vector<int64_t>>>& set_field91(T_Struct27_field91_struct_setter&& field91_) {
    field91 = std::forward<T_Struct27_field91_struct_setter>(field91_);
    __isset.field91 = true;
    return field91;
  }

  const std::string& get_field92() const& {
    return field92;
  }

  std::string get_field92() && {
    return std::move(field92);
  }

  template <typename T_Struct27_field92_struct_setter>
  std::string& set_field92(T_Struct27_field92_struct_setter&& field92_) {
    field92 = std::forward<T_Struct27_field92_struct_setter>(field92_);
    __isset.field92 = true;
    return field92;
  }
  const std::set<std::set<int64_t>>& get_field93() const&;
  std::set<std::set<int64_t>> get_field93() &&;

  template <typename T_Struct27_field93_struct_setter>
  std::set<std::set<int64_t>>& set_field93(T_Struct27_field93_struct_setter&& field93_) {
    field93 = std::forward<T_Struct27_field93_struct_setter>(field93_);
    __isset.field93 = true;
    return field93;
  }

  double get_field94() const {
    return field94;
  }

  double& set_field94(double field94_) {
    field94 = field94_;
    __isset.field94 = true;
    return field94;
  }

  const std::string& get_field95() const& {
    return field95;
  }

  std::string get_field95() && {
    return std::move(field95);
  }

  template <typename T_Struct27_field95_struct_setter>
  std::string& set_field95(T_Struct27_field95_struct_setter&& field95_) {
    field95 = std::forward<T_Struct27_field95_struct_setter>(field95_);
    __isset.field95 = true;
    return field95;
  }

  bool get_field96() const {
    return field96;
  }

  bool& set_field96(bool field96_) {
    field96 = field96_;
    __isset.field96 = true;
    return field96;
  }

  const std::string& get_field97() const& {
    return field97;
  }

  std::string get_field97() && {
    return std::move(field97);
  }

  template <typename T_Struct27_field97_struct_setter>
  std::string& set_field97(T_Struct27_field97_struct_setter&& field97_) {
    field97 = std::forward<T_Struct27_field97_struct_setter>(field97_);
    __isset.field97 = true;
    return field97;
  }

  const std::string& get_field98() const& {
    return field98;
  }

  std::string get_field98() && {
    return std::move(field98);
  }

  template <typename T_Struct27_field98_struct_setter>
  std::string& set_field98(T_Struct27_field98_struct_setter&& field98_) {
    field98 = std::forward<T_Struct27_field98_struct_setter>(field98_);
    __isset.field98 = true;
    return field98;
  }

  const std::string& get_field99() const& {
    return field99;
  }

  std::string get_field99() && {
    return std::move(field99);
  }

  template <typename T_Struct27_field99_struct_setter>
  std::string& set_field99(T_Struct27_field99_struct_setter&& field99_) {
    field99 = std::forward<T_Struct27_field99_struct_setter>(field99_);
    __isset.field99 = true;
    return field99;
  }
  const  ::cpp2::Struct13& get_field100() const&;
   ::cpp2::Struct13 get_field100() &&;

  template <typename T_Struct27_field100_struct_setter>
   ::cpp2::Struct13& set_field100(T_Struct27_field100_struct_setter&& field100_) {
    field100 = std::forward<T_Struct27_field100_struct_setter>(field100_);
    __isset.field100 = true;
    return field100;
  }

  bool get_field101() const {
    return field101;
  }

  bool& set_field101(bool field101_) {
    field101 = field101_;
    __isset.field101 = true;
    return field101;
  }

  float get_field102() const {
    return field102;
  }

  float& set_field102(float field102_) {
    field102 = field102_;
    __isset.field102 = true;
    return field102;
  }

  int16_t get_field103() const {
    return field103;
  }

  int16_t& set_field103(int16_t field103_) {
    field103 = field103_;
    __isset.field103 = true;
    return field103;
  }

  int32_t get_field104() const {
    return field104;
  }

  int32_t& set_field104(int32_t field104_) {
    field104 = field104_;
    __isset.field104 = true;
    return field104;
  }

  int32_t get_field105() const {
    return field105;
  }

  int32_t& set_field105(int32_t field105_) {
    field105 = field105_;
    __isset.field105 = true;
    return field105;
  }
  const std::set<double>& get_field106() const&;
  std::set<double> get_field106() &&;

  template <typename T_Struct27_field106_struct_setter>
  std::set<double>& set_field106(T_Struct27_field106_struct_setter&& field106_) {
    field106 = std::forward<T_Struct27_field106_struct_setter>(field106_);
    __isset.field106 = true;
    return field106;
  }
  const  ::cpp2::Struct9& get_field107() const&;
   ::cpp2::Struct9 get_field107() &&;

  template <typename T_Struct27_field107_struct_setter>
   ::cpp2::Struct9& set_field107(T_Struct27_field107_struct_setter&& field107_) {
    field107 = std::forward<T_Struct27_field107_struct_setter>(field107_);
    __isset.field107 = true;
    return field107;
  }
  const std::map<int64_t, std::vector<bool>>& get_field108() const&;
  std::map<int64_t, std::vector<bool>> get_field108() &&;

  template <typename T_Struct27_field108_struct_setter>
  std::map<int64_t, std::vector<bool>>& set_field108(T_Struct27_field108_struct_setter&& field108_) {
    field108 = std::forward<T_Struct27_field108_struct_setter>(field108_);
    __isset.field108 = true;
    return field108;
  }

  bool get_field109() const {
    return field109;
  }

  bool& set_field109(bool field109_) {
    field109 = field109_;
    __isset.field109 = true;
    return field109;
  }

  int16_t get_field110() const {
    return field110;
  }

  int16_t& set_field110(int16_t field110_) {
    field110 = field110_;
    __isset.field110 = true;
    return field110;
  }
  const std::vector<int8_t>& get_field111() const&;
  std::vector<int8_t> get_field111() &&;

  template <typename T_Struct27_field111_struct_setter>
  std::vector<int8_t>& set_field111(T_Struct27_field111_struct_setter&& field111_) {
    field111 = std::forward<T_Struct27_field111_struct_setter>(field111_);
    __isset.field111 = true;
    return field111;
  }

  float get_field112() const {
    return field112;
  }

  float& set_field112(float field112_) {
    field112 = field112_;
    __isset.field112 = true;
    return field112;
  }

  int32_t get_field113() const {
    return field113;
  }

  int32_t& set_field113(int32_t field113_) {
    field113 = field113_;
    __isset.field113 = true;
    return field113;
  }
  const  ::cpp2::Struct4& get_field114() const&;
   ::cpp2::Struct4 get_field114() &&;

  template <typename T_Struct27_field114_struct_setter>
   ::cpp2::Struct4& set_field114(T_Struct27_field114_struct_setter&& field114_) {
    field114 = std::forward<T_Struct27_field114_struct_setter>(field114_);
    __isset.field114 = true;
    return field114;
  }
  const  ::cpp2::Struct2& get_field115() const&;
   ::cpp2::Struct2 get_field115() &&;

  template <typename T_Struct27_field115_struct_setter>
   ::cpp2::Struct2& set_field115(T_Struct27_field115_struct_setter&& field115_) {
    field115 = std::forward<T_Struct27_field115_struct_setter>(field115_);
    __isset.field115 = true;
    return field115;
  }

  int64_t get_field116() const {
    return field116;
  }

  int64_t& set_field116(int64_t field116_) {
    field116 = field116_;
    __isset.field116 = true;
    return field116;
  }
  const std::set<std::string>& get_field117() const&;
  std::set<std::string> get_field117() &&;

  template <typename T_Struct27_field117_struct_setter>
  std::set<std::string>& set_field117(T_Struct27_field117_struct_setter&& field117_) {
    field117 = std::forward<T_Struct27_field117_struct_setter>(field117_);
    __isset.field117 = true;
    return field117;
  }

  int8_t get_field118() const {
    return field118;
  }

  int8_t& set_field118(int8_t field118_) {
    field118 = field118_;
    __isset.field118 = true;
    return field118;
  }
  const std::vector<double>& get_field119() const&;
  std::vector<double> get_field119() &&;

  template <typename T_Struct27_field119_struct_setter>
  std::vector<double>& set_field119(T_Struct27_field119_struct_setter&& field119_) {
    field119 = std::forward<T_Struct27_field119_struct_setter>(field119_);
    __isset.field119 = true;
    return field119;
  }
  const  ::cpp2::Struct8& get_field120() const&;
   ::cpp2::Struct8 get_field120() &&;

  template <typename T_Struct27_field120_struct_setter>
   ::cpp2::Struct8& set_field120(T_Struct27_field120_struct_setter&& field120_) {
    field120 = std::forward<T_Struct27_field120_struct_setter>(field120_);
    __isset.field120 = true;
    return field120;
  }
  const  ::cpp2::Struct14& get_field121() const&;
   ::cpp2::Struct14 get_field121() &&;

  template <typename T_Struct27_field121_struct_setter>
   ::cpp2::Struct14& set_field121(T_Struct27_field121_struct_setter&& field121_) {
    field121 = std::forward<T_Struct27_field121_struct_setter>(field121_);
    __isset.field121 = true;
    return field121;
  }

  int64_t get_field122() const {
    return field122;
  }

  int64_t& set_field122(int64_t field122_) {
    field122 = field122_;
    __isset.field122 = true;
    return field122;
  }
  const std::map<int32_t, std::string>& get_field123() const&;
  std::map<int32_t, std::string> get_field123() &&;

  template <typename T_Struct27_field123_struct_setter>
  std::map<int32_t, std::string>& set_field123(T_Struct27_field123_struct_setter&& field123_) {
    field123 = std::forward<T_Struct27_field123_struct_setter>(field123_);
    __isset.field123 = true;
    return field123;
  }

  int64_t get_field124() const {
    return field124;
  }

  int64_t& set_field124(int64_t field124_) {
    field124 = field124_;
    __isset.field124 = true;
    return field124;
  }

  const std::string& get_field125() const& {
    return field125;
  }

  std::string get_field125() && {
    return std::move(field125);
  }

  template <typename T_Struct27_field125_struct_setter>
  std::string& set_field125(T_Struct27_field125_struct_setter&& field125_) {
    field125 = std::forward<T_Struct27_field125_struct_setter>(field125_);
    __isset.field125 = true;
    return field125;
  }
  const std::vector<bool>& get_field126() const&;
  std::vector<bool> get_field126() &&;

  template <typename T_Struct27_field126_struct_setter>
  std::vector<bool>& set_field126(T_Struct27_field126_struct_setter&& field126_) {
    field126 = std::forward<T_Struct27_field126_struct_setter>(field126_);
    __isset.field126 = true;
    return field126;
  }

  float get_field127() const {
    return field127;
  }

  float& set_field127(float field127_) {
    field127 = field127_;
    __isset.field127 = true;
    return field127;
  }
  const std::set<float>& get_field128() const&;
  std::set<float> get_field128() &&;

  template <typename T_Struct27_field128_struct_setter>
  std::set<float>& set_field128(T_Struct27_field128_struct_setter&& field128_) {
    field128 = std::forward<T_Struct27_field128_struct_setter>(field128_);
    __isset.field128 = true;
    return field128;
  }

  int16_t get_field129() const {
    return field129;
  }

  int16_t& set_field129(int16_t field129_) {
    field129 = field129_;
    __isset.field129 = true;
    return field129;
  }
  const std::set<bool>& get_field130() const&;
  std::set<bool> get_field130() &&;

  template <typename T_Struct27_field130_struct_setter>
  std::set<bool>& set_field130(T_Struct27_field130_struct_setter&& field130_) {
    field130 = std::forward<T_Struct27_field130_struct_setter>(field130_);
    __isset.field130 = true;
    return field130;
  }
  const std::vector<int16_t>& get_field131() const&;
  std::vector<int16_t> get_field131() &&;

  template <typename T_Struct27_field131_struct_setter>
  std::vector<int16_t>& set_field131(T_Struct27_field131_struct_setter&& field131_) {
    field131 = std::forward<T_Struct27_field131_struct_setter>(field131_);
    __isset.field131 = true;
    return field131;
  }
  const std::map<std::set<std::string>, float>& get_field132() const&;
  std::map<std::set<std::string>, float> get_field132() &&;

  template <typename T_Struct27_field132_struct_setter>
  std::map<std::set<std::string>, float>& set_field132(T_Struct27_field132_struct_setter&& field132_) {
    field132 = std::forward<T_Struct27_field132_struct_setter>(field132_);
    __isset.field132 = true;
    return field132;
  }
  const std::vector<std::map<std::vector<std::vector<float>>, int32_t>>& get_field133() const&;
  std::vector<std::map<std::vector<std::vector<float>>, int32_t>> get_field133() &&;

  template <typename T_Struct27_field133_struct_setter>
  std::vector<std::map<std::vector<std::vector<float>>, int32_t>>& set_field133(T_Struct27_field133_struct_setter&& field133_) {
    field133 = std::forward<T_Struct27_field133_struct_setter>(field133_);
    __isset.field133 = true;
    return field133;
  }
  const std::vector<int64_t>& get_field134() const&;
  std::vector<int64_t> get_field134() &&;

  template <typename T_Struct27_field134_struct_setter>
  std::vector<int64_t>& set_field134(T_Struct27_field134_struct_setter&& field134_) {
    field134 = std::forward<T_Struct27_field134_struct_setter>(field134_);
    __isset.field134 = true;
    return field134;
  }
  const std::map< ::cpp2::Struct13, double>& get_field135() const&;
  std::map< ::cpp2::Struct13, double> get_field135() &&;

  template <typename T_Struct27_field135_struct_setter>
  std::map< ::cpp2::Struct13, double>& set_field135(T_Struct27_field135_struct_setter&& field135_) {
    field135 = std::forward<T_Struct27_field135_struct_setter>(field135_);
    __isset.field135 = true;
    return field135;
  }

  float get_field136() const {
    return field136;
  }

  float& set_field136(float field136_) {
    field136 = field136_;
    __isset.field136 = true;
    return field136;
  }
  const std::map<int8_t, float>& get_field137() const&;
  std::map<int8_t, float> get_field137() &&;

  template <typename T_Struct27_field137_struct_setter>
  std::map<int8_t, float>& set_field137(T_Struct27_field137_struct_setter&& field137_) {
    field137 = std::forward<T_Struct27_field137_struct_setter>(field137_);
    __isset.field137 = true;
    return field137;
  }
  const std::map<double,  ::cpp2::Struct7>& get_field138() const&;
  std::map<double,  ::cpp2::Struct7> get_field138() &&;

  template <typename T_Struct27_field138_struct_setter>
  std::map<double,  ::cpp2::Struct7>& set_field138(T_Struct27_field138_struct_setter&& field138_) {
    field138 = std::forward<T_Struct27_field138_struct_setter>(field138_);
    __isset.field138 = true;
    return field138;
  }
  const std::vector<std::set<std::string>>& get_field139() const&;
  std::vector<std::set<std::string>> get_field139() &&;

  template <typename T_Struct27_field139_struct_setter>
  std::vector<std::set<std::string>>& set_field139(T_Struct27_field139_struct_setter&& field139_) {
    field139 = std::forward<T_Struct27_field139_struct_setter>(field139_);
    __isset.field139 = true;
    return field139;
  }
  const std::map<std::set<double>, std::string>& get_field140() const&;
  std::map<std::set<double>, std::string> get_field140() &&;

  template <typename T_Struct27_field140_struct_setter>
  std::map<std::set<double>, std::string>& set_field140(T_Struct27_field140_struct_setter&& field140_) {
    field140 = std::forward<T_Struct27_field140_struct_setter>(field140_);
    __isset.field140 = true;
    return field140;
  }
  const  ::cpp2::Struct12& get_field141() const&;
   ::cpp2::Struct12 get_field141() &&;

  template <typename T_Struct27_field141_struct_setter>
   ::cpp2::Struct12& set_field141(T_Struct27_field141_struct_setter&& field141_) {
    field141 = std::forward<T_Struct27_field141_struct_setter>(field141_);
    __isset.field141 = true;
    return field141;
  }

  int16_t get_field142() const {
    return field142;
  }

  int16_t& set_field142(int16_t field142_) {
    field142 = field142_;
    __isset.field142 = true;
    return field142;
  }

  const std::string& get_field143() const& {
    return field143;
  }

  std::string get_field143() && {
    return std::move(field143);
  }

  template <typename T_Struct27_field143_struct_setter>
  std::string& set_field143(T_Struct27_field143_struct_setter&& field143_) {
    field143 = std::forward<T_Struct27_field143_struct_setter>(field143_);
    __isset.field143 = true;
    return field143;
  }
  const std::set<double>& get_field144() const&;
  std::set<double> get_field144() &&;

  template <typename T_Struct27_field144_struct_setter>
  std::set<double>& set_field144(T_Struct27_field144_struct_setter&& field144_) {
    field144 = std::forward<T_Struct27_field144_struct_setter>(field144_);
    __isset.field144 = true;
    return field144;
  }

  double get_field145() const {
    return field145;
  }

  double& set_field145(double field145_) {
    field145 = field145_;
    __isset.field145 = true;
    return field145;
  }
  const  ::cpp2::Struct17& get_field146() const&;
   ::cpp2::Struct17 get_field146() &&;

  template <typename T_Struct27_field146_struct_setter>
   ::cpp2::Struct17& set_field146(T_Struct27_field146_struct_setter&& field146_) {
    field146 = std::forward<T_Struct27_field146_struct_setter>(field146_);
    __isset.field146 = true;
    return field146;
  }

  const std::string& get_field147() const& {
    return field147;
  }

  std::string get_field147() && {
    return std::move(field147);
  }

  template <typename T_Struct27_field147_struct_setter>
  std::string& set_field147(T_Struct27_field147_struct_setter&& field147_) {
    field147 = std::forward<T_Struct27_field147_struct_setter>(field147_);
    __isset.field147 = true;
    return field147;
  }

  float get_field148() const {
    return field148;
  }

  float& set_field148(float field148_) {
    field148 = field148_;
    __isset.field148 = true;
    return field148;
  }

  float get_field149() const {
    return field149;
  }

  float& set_field149(float field149_) {
    field149 = field149_;
    __isset.field149 = true;
    return field149;
  }
  const std::set<bool>& get_field150() const&;
  std::set<bool> get_field150() &&;

  template <typename T_Struct27_field150_struct_setter>
  std::set<bool>& set_field150(T_Struct27_field150_struct_setter&& field150_) {
    field150 = std::forward<T_Struct27_field150_struct_setter>(field150_);
    __isset.field150 = true;
    return field150;
  }
  const  ::cpp2::Struct18& get_field151() const&;
   ::cpp2::Struct18 get_field151() &&;

  template <typename T_Struct27_field151_struct_setter>
   ::cpp2::Struct18& set_field151(T_Struct27_field151_struct_setter&& field151_) {
    field151 = std::forward<T_Struct27_field151_struct_setter>(field151_);
    __isset.field151 = true;
    return field151;
  }

  int8_t get_field152() const {
    return field152;
  }

  int8_t& set_field152(int8_t field152_) {
    field152 = field152_;
    __isset.field152 = true;
    return field152;
  }

  const std::string& get_field153() const& {
    return field153;
  }

  std::string get_field153() && {
    return std::move(field153);
  }

  template <typename T_Struct27_field153_struct_setter>
  std::string& set_field153(T_Struct27_field153_struct_setter&& field153_) {
    field153 = std::forward<T_Struct27_field153_struct_setter>(field153_);
    __isset.field153 = true;
    return field153;
  }

  double get_field154() const {
    return field154;
  }

  double& set_field154(double field154_) {
    field154 = field154_;
    __isset.field154 = true;
    return field154;
  }
  const std::vector<std::string>& get_field155() const&;
  std::vector<std::string> get_field155() &&;

  template <typename T_Struct27_field155_struct_setter>
  std::vector<std::string>& set_field155(T_Struct27_field155_struct_setter&& field155_) {
    field155 = std::forward<T_Struct27_field155_struct_setter>(field155_);
    __isset.field155 = true;
    return field155;
  }
  const  ::cpp2::Struct3& get_field156() const&;
   ::cpp2::Struct3 get_field156() &&;

  template <typename T_Struct27_field156_struct_setter>
   ::cpp2::Struct3& set_field156(T_Struct27_field156_struct_setter&& field156_) {
    field156 = std::forward<T_Struct27_field156_struct_setter>(field156_);
    __isset.field156 = true;
    return field156;
  }

  int32_t get_field157() const {
    return field157;
  }

  int32_t& set_field157(int32_t field157_) {
    field157 = field157_;
    __isset.field157 = true;
    return field157;
  }
  const std::map<int16_t, int16_t>& get_field158() const&;
  std::map<int16_t, int16_t> get_field158() &&;

  template <typename T_Struct27_field158_struct_setter>
  std::map<int16_t, int16_t>& set_field158(T_Struct27_field158_struct_setter&& field158_) {
    field158 = std::forward<T_Struct27_field158_struct_setter>(field158_);
    __isset.field158 = true;
    return field158;
  }
  const  ::cpp2::Struct8& get_field159() const&;
   ::cpp2::Struct8 get_field159() &&;

  template <typename T_Struct27_field159_struct_setter>
   ::cpp2::Struct8& set_field159(T_Struct27_field159_struct_setter&& field159_) {
    field159 = std::forward<T_Struct27_field159_struct_setter>(field159_);
    __isset.field159 = true;
    return field159;
  }

  const std::string& get_field160() const& {
    return field160;
  }

  std::string get_field160() && {
    return std::move(field160);
  }

  template <typename T_Struct27_field160_struct_setter>
  std::string& set_field160(T_Struct27_field160_struct_setter&& field160_) {
    field160 = std::forward<T_Struct27_field160_struct_setter>(field160_);
    __isset.field160 = true;
    return field160;
  }

  int8_t get_field161() const {
    return field161;
  }

  int8_t& set_field161(int8_t field161_) {
    field161 = field161_;
    __isset.field161 = true;
    return field161;
  }

  int32_t get_field162() const {
    return field162;
  }

  int32_t& set_field162(int32_t field162_) {
    field162 = field162_;
    __isset.field162 = true;
    return field162;
  }
  const std::set<double>& get_field163() const&;
  std::set<double> get_field163() &&;

  template <typename T_Struct27_field163_struct_setter>
  std::set<double>& set_field163(T_Struct27_field163_struct_setter&& field163_) {
    field163 = std::forward<T_Struct27_field163_struct_setter>(field163_);
    __isset.field163 = true;
    return field163;
  }
  const std::vector<std::map<int64_t, int32_t>>& get_field164() const&;
  std::vector<std::map<int64_t, int32_t>> get_field164() &&;

  template <typename T_Struct27_field164_struct_setter>
  std::vector<std::map<int64_t, int32_t>>& set_field164(T_Struct27_field164_struct_setter&& field164_) {
    field164 = std::forward<T_Struct27_field164_struct_setter>(field164_);
    __isset.field164 = true;
    return field164;
  }
  const std::vector<int64_t>& get_field165() const&;
  std::vector<int64_t> get_field165() &&;

  template <typename T_Struct27_field165_struct_setter>
  std::vector<int64_t>& set_field165(T_Struct27_field165_struct_setter&& field165_) {
    field165 = std::forward<T_Struct27_field165_struct_setter>(field165_);
    __isset.field165 = true;
    return field165;
  }

  const std::string& get_field166() const& {
    return field166;
  }

  std::string get_field166() && {
    return std::move(field166);
  }

  template <typename T_Struct27_field166_struct_setter>
  std::string& set_field166(T_Struct27_field166_struct_setter&& field166_) {
    field166 = std::forward<T_Struct27_field166_struct_setter>(field166_);
    __isset.field166 = true;
    return field166;
  }

  double get_field167() const {
    return field167;
  }

  double& set_field167(double field167_) {
    field167 = field167_;
    __isset.field167 = true;
    return field167;
  }
  const std::map<std::string, std::string>& get_field168() const&;
  std::map<std::string, std::string> get_field168() &&;

  template <typename T_Struct27_field168_struct_setter>
  std::map<std::string, std::string>& set_field168(T_Struct27_field168_struct_setter&& field168_) {
    field168 = std::forward<T_Struct27_field168_struct_setter>(field168_);
    __isset.field168 = true;
    return field168;
  }
  const std::map<int8_t, int8_t>& get_field169() const&;
  std::map<int8_t, int8_t> get_field169() &&;

  template <typename T_Struct27_field169_struct_setter>
  std::map<int8_t, int8_t>& set_field169(T_Struct27_field169_struct_setter&& field169_) {
    field169 = std::forward<T_Struct27_field169_struct_setter>(field169_);
    __isset.field169 = true;
    return field169;
  }

  double get_field170() const {
    return field170;
  }

  double& set_field170(double field170_) {
    field170 = field170_;
    __isset.field170 = true;
    return field170;
  }
  const std::map<std::string, std::string>& get_field171() const&;
  std::map<std::string, std::string> get_field171() &&;

  template <typename T_Struct27_field171_struct_setter>
  std::map<std::string, std::string>& set_field171(T_Struct27_field171_struct_setter&& field171_) {
    field171 = std::forward<T_Struct27_field171_struct_setter>(field171_);
    __isset.field171 = true;
    return field171;
  }
  const std::map< ::cpp2::Struct3, float>& get_field172() const&;
  std::map< ::cpp2::Struct3, float> get_field172() &&;

  template <typename T_Struct27_field172_struct_setter>
  std::map< ::cpp2::Struct3, float>& set_field172(T_Struct27_field172_struct_setter&& field172_) {
    field172 = std::forward<T_Struct27_field172_struct_setter>(field172_);
    __isset.field172 = true;
    return field172;
  }

  const std::string& get_field173() const& {
    return field173;
  }

  std::string get_field173() && {
    return std::move(field173);
  }

  template <typename T_Struct27_field173_struct_setter>
  std::string& set_field173(T_Struct27_field173_struct_setter&& field173_) {
    field173 = std::forward<T_Struct27_field173_struct_setter>(field173_);
    __isset.field173 = true;
    return field173;
  }

  int16_t get_field174() const {
    return field174;
  }

  int16_t& set_field174(int16_t field174_) {
    field174 = field174_;
    __isset.field174 = true;
    return field174;
  }

  int64_t get_field175() const {
    return field175;
  }

  int64_t& set_field175(int64_t field175_) {
    field175 = field175_;
    __isset.field175 = true;
    return field175;
  }

  const std::string& get_field176() const& {
    return field176;
  }

  std::string get_field176() && {
    return std::move(field176);
  }

  template <typename T_Struct27_field176_struct_setter>
  std::string& set_field176(T_Struct27_field176_struct_setter&& field176_) {
    field176 = std::forward<T_Struct27_field176_struct_setter>(field176_);
    __isset.field176 = true;
    return field176;
  }
  const std::map<float, int16_t>& get_field177() const&;
  std::map<float, int16_t> get_field177() &&;

  template <typename T_Struct27_field177_struct_setter>
  std::map<float, int16_t>& set_field177(T_Struct27_field177_struct_setter&& field177_) {
    field177 = std::forward<T_Struct27_field177_struct_setter>(field177_);
    __isset.field177 = true;
    return field177;
  }
  const  ::cpp2::Struct0& get_field178() const&;
   ::cpp2::Struct0 get_field178() &&;

  template <typename T_Struct27_field178_struct_setter>
   ::cpp2::Struct0& set_field178(T_Struct27_field178_struct_setter&& field178_) {
    field178 = std::forward<T_Struct27_field178_struct_setter>(field178_);
    __isset.field178 = true;
    return field178;
  }
  const std::map<int64_t, std::set<int64_t>>& get_field179() const&;
  std::map<int64_t, std::set<int64_t>> get_field179() &&;

  template <typename T_Struct27_field179_struct_setter>
  std::map<int64_t, std::set<int64_t>>& set_field179(T_Struct27_field179_struct_setter&& field179_) {
    field179 = std::forward<T_Struct27_field179_struct_setter>(field179_);
    __isset.field179 = true;
    return field179;
  }
  const std::map<double, std::string>& get_field180() const&;
  std::map<double, std::string> get_field180() &&;

  template <typename T_Struct27_field180_struct_setter>
  std::map<double, std::string>& set_field180(T_Struct27_field180_struct_setter&& field180_) {
    field180 = std::forward<T_Struct27_field180_struct_setter>(field180_);
    __isset.field180 = true;
    return field180;
  }

  int32_t get_field181() const {
    return field181;
  }

  int32_t& set_field181(int32_t field181_) {
    field181 = field181_;
    __isset.field181 = true;
    return field181;
  }
  const  ::cpp2::Struct21& get_field182() const&;
   ::cpp2::Struct21 get_field182() &&;

  template <typename T_Struct27_field182_struct_setter>
   ::cpp2::Struct21& set_field182(T_Struct27_field182_struct_setter&& field182_) {
    field182 = std::forward<T_Struct27_field182_struct_setter>(field182_);
    __isset.field182 = true;
    return field182;
  }

  const std::string& get_field183() const& {
    return field183;
  }

  std::string get_field183() && {
    return std::move(field183);
  }

  template <typename T_Struct27_field183_struct_setter>
  std::string& set_field183(T_Struct27_field183_struct_setter&& field183_) {
    field183 = std::forward<T_Struct27_field183_struct_setter>(field183_);
    __isset.field183 = true;
    return field183;
  }
  const std::set<std::string>& get_field184() const&;
  std::set<std::string> get_field184() &&;

  template <typename T_Struct27_field184_struct_setter>
  std::set<std::string>& set_field184(T_Struct27_field184_struct_setter&& field184_) {
    field184 = std::forward<T_Struct27_field184_struct_setter>(field184_);
    __isset.field184 = true;
    return field184;
  }

  int8_t get_field185() const {
    return field185;
  }

  int8_t& set_field185(int8_t field185_) {
    field185 = field185_;
    __isset.field185 = true;
    return field185;
  }

  float get_field186() const {
    return field186;
  }

  float& set_field186(float field186_) {
    field186 = field186_;
    __isset.field186 = true;
    return field186;
  }

  int16_t get_field187() const {
    return field187;
  }

  int16_t& set_field187(int16_t field187_) {
    field187 = field187_;
    __isset.field187 = true;
    return field187;
  }
  const std::set<std::set<double>>& get_field188() const&;
  std::set<std::set<double>> get_field188() &&;

  template <typename T_Struct27_field188_struct_setter>
  std::set<std::set<double>>& set_field188(T_Struct27_field188_struct_setter&& field188_) {
    field188 = std::forward<T_Struct27_field188_struct_setter>(field188_);
    __isset.field188 = true;
    return field188;
  }

  const std::string& get_field189() const& {
    return field189;
  }

  std::string get_field189() && {
    return std::move(field189);
  }

  template <typename T_Struct27_field189_struct_setter>
  std::string& set_field189(T_Struct27_field189_struct_setter&& field189_) {
    field189 = std::forward<T_Struct27_field189_struct_setter>(field189_);
    __isset.field189 = true;
    return field189;
  }
  const std::set<double>& get_field190() const&;
  std::set<double> get_field190() &&;

  template <typename T_Struct27_field190_struct_setter>
  std::set<double>& set_field190(T_Struct27_field190_struct_setter&& field190_) {
    field190 = std::forward<T_Struct27_field190_struct_setter>(field190_);
    __isset.field190 = true;
    return field190;
  }
  const std::set<bool>& get_field191() const&;
  std::set<bool> get_field191() &&;

  template <typename T_Struct27_field191_struct_setter>
  std::set<bool>& set_field191(T_Struct27_field191_struct_setter&& field191_) {
    field191 = std::forward<T_Struct27_field191_struct_setter>(field191_);
    __isset.field191 = true;
    return field191;
  }

  float get_field192() const {
    return field192;
  }

  float& set_field192(float field192_) {
    field192 = field192_;
    __isset.field192 = true;
    return field192;
  }

  const std::string& get_field193() const& {
    return field193;
  }

  std::string get_field193() && {
    return std::move(field193);
  }

  template <typename T_Struct27_field193_struct_setter>
  std::string& set_field193(T_Struct27_field193_struct_setter&& field193_) {
    field193 = std::forward<T_Struct27_field193_struct_setter>(field193_);
    __isset.field193 = true;
    return field193;
  }

  float get_field194() const {
    return field194;
  }

  float& set_field194(float field194_) {
    field194 = field194_;
    __isset.field194 = true;
    return field194;
  }
  const std::map<int64_t, int8_t>& get_field195() const&;
  std::map<int64_t, int8_t> get_field195() &&;

  template <typename T_Struct27_field195_struct_setter>
  std::map<int64_t, int8_t>& set_field195(T_Struct27_field195_struct_setter&& field195_) {
    field195 = std::forward<T_Struct27_field195_struct_setter>(field195_);
    __isset.field195 = true;
    return field195;
  }
  const  ::cpp2::Struct5& get_field196() const&;
   ::cpp2::Struct5 get_field196() &&;

  template <typename T_Struct27_field196_struct_setter>
   ::cpp2::Struct5& set_field196(T_Struct27_field196_struct_setter&& field196_) {
    field196 = std::forward<T_Struct27_field196_struct_setter>(field196_);
    __isset.field196 = true;
    return field196;
  }

  bool get_field197() const {
    return field197;
  }

  bool& set_field197(bool field197_) {
    field197 = field197_;
    __isset.field197 = true;
    return field197;
  }
  const std::map<double, int32_t>& get_field198() const&;
  std::map<double, int32_t> get_field198() &&;

  template <typename T_Struct27_field198_struct_setter>
  std::map<double, int32_t>& set_field198(T_Struct27_field198_struct_setter&& field198_) {
    field198 = std::forward<T_Struct27_field198_struct_setter>(field198_);
    __isset.field198 = true;
    return field198;
  }
  const std::set<int16_t>& get_field199() const&;
  std::set<int16_t> get_field199() &&;

  template <typename T_Struct27_field199_struct_setter>
  std::set<int16_t>& set_field199(T_Struct27_field199_struct_setter&& field199_) {
    field199 = std::forward<T_Struct27_field199_struct_setter>(field199_);
    __isset.field199 = true;
    return field199;
  }
  const  ::cpp2::Struct18& get_field200() const&;
   ::cpp2::Struct18 get_field200() &&;

  template <typename T_Struct27_field200_struct_setter>
   ::cpp2::Struct18& set_field200(T_Struct27_field200_struct_setter&& field200_) {
    field200 = std::forward<T_Struct27_field200_struct_setter>(field200_);
    __isset.field200 = true;
    return field200;
  }

  int32_t get_field201() const {
    return field201;
  }

  int32_t& set_field201(int32_t field201_) {
    field201 = field201_;
    __isset.field201 = true;
    return field201;
  }

  int8_t get_field202() const {
    return field202;
  }

  int8_t& set_field202(int8_t field202_) {
    field202 = field202_;
    __isset.field202 = true;
    return field202;
  }
  const  ::cpp2::Struct16& get_field203() const&;
   ::cpp2::Struct16 get_field203() &&;

  template <typename T_Struct27_field203_struct_setter>
   ::cpp2::Struct16& set_field203(T_Struct27_field203_struct_setter&& field203_) {
    field203 = std::forward<T_Struct27_field203_struct_setter>(field203_);
    __isset.field203 = true;
    return field203;
  }
  const std::map<std::vector<bool>, std::string>& get_field204() const&;
  std::map<std::vector<bool>, std::string> get_field204() &&;

  template <typename T_Struct27_field204_struct_setter>
  std::map<std::vector<bool>, std::string>& set_field204(T_Struct27_field204_struct_setter&& field204_) {
    field204 = std::forward<T_Struct27_field204_struct_setter>(field204_);
    __isset.field204 = true;
    return field204;
  }

  int32_t get_field205() const {
    return field205;
  }

  int32_t& set_field205(int32_t field205_) {
    field205 = field205_;
    __isset.field205 = true;
    return field205;
  }
  const std::vector<int8_t>& get_field206() const&;
  std::vector<int8_t> get_field206() &&;

  template <typename T_Struct27_field206_struct_setter>
  std::vector<int8_t>& set_field206(T_Struct27_field206_struct_setter&& field206_) {
    field206 = std::forward<T_Struct27_field206_struct_setter>(field206_);
    __isset.field206 = true;
    return field206;
  }

  bool get_field207() const {
    return field207;
  }

  bool& set_field207(bool field207_) {
    field207 = field207_;
    __isset.field207 = true;
    return field207;
  }
  const std::map<int8_t, int32_t>& get_field208() const&;
  std::map<int8_t, int32_t> get_field208() &&;

  template <typename T_Struct27_field208_struct_setter>
  std::map<int8_t, int32_t>& set_field208(T_Struct27_field208_struct_setter&& field208_) {
    field208 = std::forward<T_Struct27_field208_struct_setter>(field208_);
    __isset.field208 = true;
    return field208;
  }

  float get_field209() const {
    return field209;
  }

  float& set_field209(float field209_) {
    field209 = field209_;
    __isset.field209 = true;
    return field209;
  }
  const std::vector<int32_t>& get_field210() const&;
  std::vector<int32_t> get_field210() &&;

  template <typename T_Struct27_field210_struct_setter>
  std::vector<int32_t>& set_field210(T_Struct27_field210_struct_setter&& field210_) {
    field210 = std::forward<T_Struct27_field210_struct_setter>(field210_);
    __isset.field210 = true;
    return field210;
  }

  float get_field211() const {
    return field211;
  }

  float& set_field211(float field211_) {
    field211 = field211_;
    __isset.field211 = true;
    return field211;
  }

  const std::string& get_field212() const& {
    return field212;
  }

  std::string get_field212() && {
    return std::move(field212);
  }

  template <typename T_Struct27_field212_struct_setter>
  std::string& set_field212(T_Struct27_field212_struct_setter&& field212_) {
    field212 = std::forward<T_Struct27_field212_struct_setter>(field212_);
    __isset.field212 = true;
    return field212;
  }
  const std::set<float>& get_field213() const&;
  std::set<float> get_field213() &&;

  template <typename T_Struct27_field213_struct_setter>
  std::set<float>& set_field213(T_Struct27_field213_struct_setter&& field213_) {
    field213 = std::forward<T_Struct27_field213_struct_setter>(field213_);
    __isset.field213 = true;
    return field213;
  }
  const std::vector<std::string>& get_field214() const&;
  std::vector<std::string> get_field214() &&;

  template <typename T_Struct27_field214_struct_setter>
  std::vector<std::string>& set_field214(T_Struct27_field214_struct_setter&& field214_) {
    field214 = std::forward<T_Struct27_field214_struct_setter>(field214_);
    __isset.field214 = true;
    return field214;
  }
  const std::map<std::string,  ::cpp2::Struct5>& get_field215() const&;
  std::map<std::string,  ::cpp2::Struct5> get_field215() &&;

  template <typename T_Struct27_field215_struct_setter>
  std::map<std::string,  ::cpp2::Struct5>& set_field215(T_Struct27_field215_struct_setter&& field215_) {
    field215 = std::forward<T_Struct27_field215_struct_setter>(field215_);
    __isset.field215 = true;
    return field215;
  }

  int64_t get_field216() const {
    return field216;
  }

  int64_t& set_field216(int64_t field216_) {
    field216 = field216_;
    __isset.field216 = true;
    return field216;
  }
  const std::map<int64_t, double>& get_field217() const&;
  std::map<int64_t, double> get_field217() &&;

  template <typename T_Struct27_field217_struct_setter>
  std::map<int64_t, double>& set_field217(T_Struct27_field217_struct_setter&& field217_) {
    field217 = std::forward<T_Struct27_field217_struct_setter>(field217_);
    __isset.field217 = true;
    return field217;
  }

  int64_t get_field218() const {
    return field218;
  }

  int64_t& set_field218(int64_t field218_) {
    field218 = field218_;
    __isset.field218 = true;
    return field218;
  }

  const std::string& get_field219() const& {
    return field219;
  }

  std::string get_field219() && {
    return std::move(field219);
  }

  template <typename T_Struct27_field219_struct_setter>
  std::string& set_field219(T_Struct27_field219_struct_setter&& field219_) {
    field219 = std::forward<T_Struct27_field219_struct_setter>(field219_);
    __isset.field219 = true;
    return field219;
  }
  const std::set<int8_t>& get_field220() const&;
  std::set<int8_t> get_field220() &&;

  template <typename T_Struct27_field220_struct_setter>
  std::set<int8_t>& set_field220(T_Struct27_field220_struct_setter&& field220_) {
    field220 = std::forward<T_Struct27_field220_struct_setter>(field220_);
    __isset.field220 = true;
    return field220;
  }
  const std::map<std::vector<std::vector<std::string>>, std::vector<float>>& get_field221() const&;
  std::map<std::vector<std::vector<std::string>>, std::vector<float>> get_field221() &&;

  template <typename T_Struct27_field221_struct_setter>
  std::map<std::vector<std::vector<std::string>>, std::vector<float>>& set_field221(T_Struct27_field221_struct_setter&& field221_) {
    field221 = std::forward<T_Struct27_field221_struct_setter>(field221_);
    __isset.field221 = true;
    return field221;
  }

  double get_field222() const {
    return field222;
  }

  double& set_field222(double field222_) {
    field222 = field222_;
    __isset.field222 = true;
    return field222;
  }
  const std::vector<int8_t>& get_field223() const&;
  std::vector<int8_t> get_field223() &&;

  template <typename T_Struct27_field223_struct_setter>
  std::vector<int8_t>& set_field223(T_Struct27_field223_struct_setter&& field223_) {
    field223 = std::forward<T_Struct27_field223_struct_setter>(field223_);
    __isset.field223 = true;
    return field223;
  }
  const std::set<std::string>& get_field224() const&;
  std::set<std::string> get_field224() &&;

  template <typename T_Struct27_field224_struct_setter>
  std::set<std::string>& set_field224(T_Struct27_field224_struct_setter&& field224_) {
    field224 = std::forward<T_Struct27_field224_struct_setter>(field224_);
    __isset.field224 = true;
    return field224;
  }
  const std::map<float, bool>& get_field225() const&;
  std::map<float, bool> get_field225() &&;

  template <typename T_Struct27_field225_struct_setter>
  std::map<float, bool>& set_field225(T_Struct27_field225_struct_setter&& field225_) {
    field225 = std::forward<T_Struct27_field225_struct_setter>(field225_);
    __isset.field225 = true;
    return field225;
  }

  int64_t get_field226() const {
    return field226;
  }

  int64_t& set_field226(int64_t field226_) {
    field226 = field226_;
    __isset.field226 = true;
    return field226;
  }

  const std::string& get_field227() const& {
    return field227;
  }

  std::string get_field227() && {
    return std::move(field227);
  }

  template <typename T_Struct27_field227_struct_setter>
  std::string& set_field227(T_Struct27_field227_struct_setter&& field227_) {
    field227 = std::forward<T_Struct27_field227_struct_setter>(field227_);
    __isset.field227 = true;
    return field227;
  }
  const std::vector<double>& get_field228() const&;
  std::vector<double> get_field228() &&;

  template <typename T_Struct27_field228_struct_setter>
  std::vector<double>& set_field228(T_Struct27_field228_struct_setter&& field228_) {
    field228 = std::forward<T_Struct27_field228_struct_setter>(field228_);
    __isset.field228 = true;
    return field228;
  }

  int64_t get_field229() const {
    return field229;
  }

  int64_t& set_field229(int64_t field229_) {
    field229 = field229_;
    __isset.field229 = true;
    return field229;
  }

  int8_t get_field230() const {
    return field230;
  }

  int8_t& set_field230(int8_t field230_) {
    field230 = field230_;
    __isset.field230 = true;
    return field230;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct27& a, Struct27& b);
extern template uint32_t Struct27::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct27::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct27::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct27::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct27::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct27::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct27::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct27::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct27>::clear( ::cpp2::Struct27* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct27>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct27>::write(Protocol* proto,  ::cpp2::Struct27 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct27>::read(Protocol* proto,  ::cpp2::Struct27* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct27>::serializedSize(Protocol const* proto,  ::cpp2::Struct27 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct27>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct27 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {
class Struct28 : private apache::thrift::detail::st::ComparisonOperators<Struct28> {
 public:

  Struct28() :
      field4(0),
      field8(0),
      field10(0),
      field12(0),
      field16(0),
      field17(0),
      field18(0),
      field19(0),
      field20(0),
      field25(0),
      field31(0),
      field32(0),
      field33(0),
      field34(0),
      field36(0),
      field38(0),
      field41(0),
      field42(0),
      field43(0),
      field46(0),
      field48(0),
      field52(0),
      field53(0),
      field54(0),
      field58(0),
      field60(0),
      field63(0),
      field64(0),
      field65(0),
      field66(0),
      field67(0),
      field68(0),
      field71(0),
      field74(0),
      field85(0),
      field87(0),
      field90(0),
      field91(0),
      field94(0),
      field96(0),
      field97(0),
      field98(0),
      field102(0),
      field109(0),
      field114(0),
      field115(0),
      field119(0),
      field125(0),
      field126(0),
      field131(0),
      field133(0),
      field136(0),
      field137(0),
      field138(0),
      field140(0),
      field142(0),
      field143(0),
      field145(0),
      field147(0),
      field148(0),
      field149(0),
      field152(0),
      field154(0) {}
  // FragileConstructor for use in initialization lists only

  Struct28(apache::thrift::FragileConstructor, std::set<std::string> field1__arg, std::set< ::cpp2::Struct7> field2__arg, std::vector< ::cpp2::Struct11> field3__arg, int64_t field4__arg,  ::cpp2::Struct3 field5__arg, std::string field6__arg, std::vector<std::set<std::string>> field7__arg, int8_t field8__arg, std::string field9__arg, int64_t field10__arg, std::map<std::set< ::cpp2::Struct14>, int16_t> field11__arg, int64_t field12__arg, std::vector<int8_t> field13__arg, std::vector<float> field14__arg, std::vector<int32_t> field15__arg, bool field16__arg, int32_t field17__arg, float field18__arg, int16_t field19__arg, int16_t field20__arg, std::set<int16_t> field21__arg,  ::cpp2::Struct21 field22__arg, std::set<int32_t> field23__arg,  ::cpp2::Struct3 field24__arg, int64_t field25__arg, std::string field26__arg, std::vector<int64_t> field27__arg,  ::cpp2::Struct0 field28__arg,  ::cpp2::Struct2 field29__arg, std::vector<int16_t> field30__arg, int8_t field31__arg, int64_t field32__arg, int32_t field33__arg, int64_t field34__arg,  ::cpp2::Struct1 field35__arg, double field36__arg,  ::cpp2::Struct11 field37__arg, double field38__arg, std::set<int16_t> field39__arg,  ::cpp2::Struct6 field40__arg, int32_t field41__arg, int64_t field42__arg, float field43__arg,  ::cpp2::Struct10 field44__arg, std::vector<double> field45__arg, double field46__arg,  ::cpp2::Struct11 field47__arg, float field48__arg, std::map<int64_t, int32_t> field49__arg,  ::cpp2::Struct6 field50__arg, std::string field51__arg, bool field52__arg, int8_t field53__arg, int16_t field54__arg, std::vector<double> field55__arg,  ::cpp2::Struct23 field56__arg, std::set<int64_t> field57__arg, float field58__arg, std::map<std::vector<float>, int32_t> field59__arg, bool field60__arg, std::string field61__arg, std::vector<int64_t> field62__arg, int8_t field63__arg, int32_t field64__arg, int8_t field65__arg, float field66__arg, int8_t field67__arg, int64_t field68__arg, std::map<bool, int8_t> field69__arg, std::set<int64_t> field70__arg, double field71__arg, std::set<double> field72__arg, std::map<int8_t, std::map<std::vector<double>, int16_t>> field73__arg, int8_t field74__arg, std::map< ::cpp2::Struct13, bool> field75__arg, std::vector<std::vector<int32_t>> field76__arg, std::string field77__arg, std::map<bool, std::set<std::set<int16_t>>> field78__arg, std::map<bool, std::string> field79__arg, std::set<int16_t> field80__arg, std::string field81__arg, std::vector<std::vector<std::string>> field82__arg, std::string field83__arg, std::vector<int64_t> field84__arg, int16_t field85__arg, std::string field86__arg, int64_t field87__arg, std::set<std::map<std::string, bool>> field88__arg, std::string field89__arg, float field90__arg, int8_t field91__arg, std::string field92__arg, std::map< ::cpp2::Struct20, int32_t> field93__arg, float field94__arg, std::string field95__arg, int8_t field96__arg, bool field97__arg, double field98__arg, std::set< ::cpp2::Struct12> field99__arg, std::map<std::set<std::set<std::string>>, float> field100__arg, std::string field101__arg, int8_t field102__arg, std::string field103__arg,  ::cpp2::Struct13 field104__arg, std::string field105__arg,  ::cpp2::Struct5 field106__arg, std::map<int32_t, std::map<int16_t, double>> field107__arg, std::string field108__arg, int32_t field109__arg,  ::cpp2::Struct7 field110__arg,  ::cpp2::Struct9 field111__arg,  ::cpp2::Struct12 field112__arg, std::set<int16_t> field113__arg, float field114__arg, float field115__arg,  ::cpp2::Struct12 field116__arg, std::set<std::set<int8_t>> field117__arg,  ::cpp2::Struct1 field118__arg, bool field119__arg, std::string field120__arg,  ::cpp2::Struct12 field121__arg,  ::cpp2::Struct3 field122__arg, std::set<int32_t> field123__arg, std::string field124__arg, double field125__arg, double field126__arg, std::map<std::vector<int64_t>, bool> field127__arg,  ::cpp2::Struct25 field128__arg,  ::cpp2::Struct4 field129__arg, std::string field130__arg, bool field131__arg, std::set<std::string> field132__arg, int32_t field133__arg, std::map<std::string, std::map<int64_t, int16_t>> field134__arg, std::vector<std::string> field135__arg, double field136__arg, int8_t field137__arg, int8_t field138__arg, std::set<int16_t> field139__arg, int8_t field140__arg, std::map<int8_t, int8_t> field141__arg, bool field142__arg, bool field143__arg, std::string field144__arg, int32_t field145__arg, std::set< ::cpp2::Struct18> field146__arg, int16_t field147__arg, bool field148__arg, int32_t field149__arg, std::map<int8_t, std::string> field150__arg, std::map<std::string, bool> field151__arg, float field152__arg, std::set<int64_t> field153__arg, double field154__arg, std::vector<std::string> field155__arg) :
      field1(std::move(field1__arg)),
      field2(std::move(field2__arg)),
      field3(std::move(field3__arg)),
      field4(std::move(field4__arg)),
      field5(std::move(field5__arg)),
      field6(std::move(field6__arg)),
      field7(std::move(field7__arg)),
      field8(std::move(field8__arg)),
      field9(std::move(field9__arg)),
      field10(std::move(field10__arg)),
      field11(std::move(field11__arg)),
      field12(std::move(field12__arg)),
      field13(std::move(field13__arg)),
      field14(std::move(field14__arg)),
      field15(std::move(field15__arg)),
      field16(std::move(field16__arg)),
      field17(std::move(field17__arg)),
      field18(std::move(field18__arg)),
      field19(std::move(field19__arg)),
      field20(std::move(field20__arg)),
      field21(std::move(field21__arg)),
      field22(std::move(field22__arg)),
      field23(std::move(field23__arg)),
      field24(std::move(field24__arg)),
      field25(std::move(field25__arg)),
      field26(std::move(field26__arg)),
      field27(std::move(field27__arg)),
      field28(std::move(field28__arg)),
      field29(std::move(field29__arg)),
      field30(std::move(field30__arg)),
      field31(std::move(field31__arg)),
      field32(std::move(field32__arg)),
      field33(std::move(field33__arg)),
      field34(std::move(field34__arg)),
      field35(std::move(field35__arg)),
      field36(std::move(field36__arg)),
      field37(std::move(field37__arg)),
      field38(std::move(field38__arg)),
      field39(std::move(field39__arg)),
      field40(std::move(field40__arg)),
      field41(std::move(field41__arg)),
      field42(std::move(field42__arg)),
      field43(std::move(field43__arg)),
      field44(std::move(field44__arg)),
      field45(std::move(field45__arg)),
      field46(std::move(field46__arg)),
      field47(std::move(field47__arg)),
      field48(std::move(field48__arg)),
      field49(std::move(field49__arg)),
      field50(std::move(field50__arg)),
      field51(std::move(field51__arg)),
      field52(std::move(field52__arg)),
      field53(std::move(field53__arg)),
      field54(std::move(field54__arg)),
      field55(std::move(field55__arg)),
      field56(std::move(field56__arg)),
      field57(std::move(field57__arg)),
      field58(std::move(field58__arg)),
      field59(std::move(field59__arg)),
      field60(std::move(field60__arg)),
      field61(std::move(field61__arg)),
      field62(std::move(field62__arg)),
      field63(std::move(field63__arg)),
      field64(std::move(field64__arg)),
      field65(std::move(field65__arg)),
      field66(std::move(field66__arg)),
      field67(std::move(field67__arg)),
      field68(std::move(field68__arg)),
      field69(std::move(field69__arg)),
      field70(std::move(field70__arg)),
      field71(std::move(field71__arg)),
      field72(std::move(field72__arg)),
      field73(std::move(field73__arg)),
      field74(std::move(field74__arg)),
      field75(std::move(field75__arg)),
      field76(std::move(field76__arg)),
      field77(std::move(field77__arg)),
      field78(std::move(field78__arg)),
      field79(std::move(field79__arg)),
      field80(std::move(field80__arg)),
      field81(std::move(field81__arg)),
      field82(std::move(field82__arg)),
      field83(std::move(field83__arg)),
      field84(std::move(field84__arg)),
      field85(std::move(field85__arg)),
      field86(std::move(field86__arg)),
      field87(std::move(field87__arg)),
      field88(std::move(field88__arg)),
      field89(std::move(field89__arg)),
      field90(std::move(field90__arg)),
      field91(std::move(field91__arg)),
      field92(std::move(field92__arg)),
      field93(std::move(field93__arg)),
      field94(std::move(field94__arg)),
      field95(std::move(field95__arg)),
      field96(std::move(field96__arg)),
      field97(std::move(field97__arg)),
      field98(std::move(field98__arg)),
      field99(std::move(field99__arg)),
      field100(std::move(field100__arg)),
      field101(std::move(field101__arg)),
      field102(std::move(field102__arg)),
      field103(std::move(field103__arg)),
      field104(std::move(field104__arg)),
      field105(std::move(field105__arg)),
      field106(std::move(field106__arg)),
      field107(std::move(field107__arg)),
      field108(std::move(field108__arg)),
      field109(std::move(field109__arg)),
      field110(std::move(field110__arg)),
      field111(std::move(field111__arg)),
      field112(std::move(field112__arg)),
      field113(std::move(field113__arg)),
      field114(std::move(field114__arg)),
      field115(std::move(field115__arg)),
      field116(std::move(field116__arg)),
      field117(std::move(field117__arg)),
      field118(std::move(field118__arg)),
      field119(std::move(field119__arg)),
      field120(std::move(field120__arg)),
      field121(std::move(field121__arg)),
      field122(std::move(field122__arg)),
      field123(std::move(field123__arg)),
      field124(std::move(field124__arg)),
      field125(std::move(field125__arg)),
      field126(std::move(field126__arg)),
      field127(std::move(field127__arg)),
      field128(std::move(field128__arg)),
      field129(std::move(field129__arg)),
      field130(std::move(field130__arg)),
      field131(std::move(field131__arg)),
      field132(std::move(field132__arg)),
      field133(std::move(field133__arg)),
      field134(std::move(field134__arg)),
      field135(std::move(field135__arg)),
      field136(std::move(field136__arg)),
      field137(std::move(field137__arg)),
      field138(std::move(field138__arg)),
      field139(std::move(field139__arg)),
      field140(std::move(field140__arg)),
      field141(std::move(field141__arg)),
      field142(std::move(field142__arg)),
      field143(std::move(field143__arg)),
      field144(std::move(field144__arg)),
      field145(std::move(field145__arg)),
      field146(std::move(field146__arg)),
      field147(std::move(field147__arg)),
      field148(std::move(field148__arg)),
      field149(std::move(field149__arg)),
      field150(std::move(field150__arg)),
      field151(std::move(field151__arg)),
      field152(std::move(field152__arg)),
      field153(std::move(field153__arg)),
      field154(std::move(field154__arg)),
      field155(std::move(field155__arg)) {
    __isset.field1 = true;
    __isset.field2 = true;
    __isset.field3 = true;
    __isset.field4 = true;
    __isset.field5 = true;
    __isset.field6 = true;
    __isset.field7 = true;
    __isset.field8 = true;
    __isset.field9 = true;
    __isset.field10 = true;
    __isset.field11 = true;
    __isset.field12 = true;
    __isset.field13 = true;
    __isset.field14 = true;
    __isset.field15 = true;
    __isset.field16 = true;
    __isset.field17 = true;
    __isset.field18 = true;
    __isset.field19 = true;
    __isset.field20 = true;
    __isset.field21 = true;
    __isset.field22 = true;
    __isset.field23 = true;
    __isset.field24 = true;
    __isset.field25 = true;
    __isset.field26 = true;
    __isset.field27 = true;
    __isset.field28 = true;
    __isset.field29 = true;
    __isset.field30 = true;
    __isset.field31 = true;
    __isset.field32 = true;
    __isset.field33 = true;
    __isset.field34 = true;
    __isset.field35 = true;
    __isset.field36 = true;
    __isset.field37 = true;
    __isset.field38 = true;
    __isset.field39 = true;
    __isset.field40 = true;
    __isset.field41 = true;
    __isset.field42 = true;
    __isset.field43 = true;
    __isset.field44 = true;
    __isset.field45 = true;
    __isset.field46 = true;
    __isset.field47 = true;
    __isset.field48 = true;
    __isset.field49 = true;
    __isset.field50 = true;
    __isset.field51 = true;
    __isset.field52 = true;
    __isset.field53 = true;
    __isset.field54 = true;
    __isset.field55 = true;
    __isset.field56 = true;
    __isset.field57 = true;
    __isset.field58 = true;
    __isset.field59 = true;
    __isset.field60 = true;
    __isset.field61 = true;
    __isset.field62 = true;
    __isset.field63 = true;
    __isset.field64 = true;
    __isset.field65 = true;
    __isset.field66 = true;
    __isset.field67 = true;
    __isset.field68 = true;
    __isset.field69 = true;
    __isset.field70 = true;
    __isset.field71 = true;
    __isset.field72 = true;
    __isset.field73 = true;
    __isset.field74 = true;
    __isset.field75 = true;
    __isset.field76 = true;
    __isset.field77 = true;
    __isset.field78 = true;
    __isset.field79 = true;
    __isset.field80 = true;
    __isset.field81 = true;
    __isset.field82 = true;
    __isset.field83 = true;
    __isset.field84 = true;
    __isset.field85 = true;
    __isset.field86 = true;
    __isset.field87 = true;
    __isset.field88 = true;
    __isset.field89 = true;
    __isset.field90 = true;
    __isset.field91 = true;
    __isset.field92 = true;
    __isset.field93 = true;
    __isset.field94 = true;
    __isset.field95 = true;
    __isset.field96 = true;
    __isset.field97 = true;
    __isset.field98 = true;
    __isset.field99 = true;
    __isset.field100 = true;
    __isset.field101 = true;
    __isset.field102 = true;
    __isset.field103 = true;
    __isset.field104 = true;
    __isset.field105 = true;
    __isset.field106 = true;
    __isset.field107 = true;
    __isset.field108 = true;
    __isset.field109 = true;
    __isset.field110 = true;
    __isset.field111 = true;
    __isset.field112 = true;
    __isset.field113 = true;
    __isset.field114 = true;
    __isset.field115 = true;
    __isset.field116 = true;
    __isset.field117 = true;
    __isset.field118 = true;
    __isset.field119 = true;
    __isset.field120 = true;
    __isset.field121 = true;
    __isset.field122 = true;
    __isset.field123 = true;
    __isset.field124 = true;
    __isset.field125 = true;
    __isset.field126 = true;
    __isset.field127 = true;
    __isset.field128 = true;
    __isset.field129 = true;
    __isset.field130 = true;
    __isset.field131 = true;
    __isset.field132 = true;
    __isset.field133 = true;
    __isset.field134 = true;
    __isset.field135 = true;
    __isset.field136 = true;
    __isset.field137 = true;
    __isset.field138 = true;
    __isset.field139 = true;
    __isset.field140 = true;
    __isset.field141 = true;
    __isset.field142 = true;
    __isset.field143 = true;
    __isset.field144 = true;
    __isset.field145 = true;
    __isset.field146 = true;
    __isset.field147 = true;
    __isset.field148 = true;
    __isset.field149 = true;
    __isset.field150 = true;
    __isset.field151 = true;
    __isset.field152 = true;
    __isset.field153 = true;
    __isset.field154 = true;
    __isset.field155 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field1 = arg.move();
    __isset.field1 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field2 = arg.move();
    __isset.field2 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field3 = arg.move();
    __isset.field3 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field4 = arg.move();
    __isset.field4 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field5 = arg.move();
    __isset.field5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field6 = arg.move();
    __isset.field6 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field7 = arg.move();
    __isset.field7 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field8 = arg.move();
    __isset.field8 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field9 = arg.move();
    __isset.field9 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field10 = arg.move();
    __isset.field10 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field11 = arg.move();
    __isset.field11 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field12 = arg.move();
    __isset.field12 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field13 = arg.move();
    __isset.field13 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field14 = arg.move();
    __isset.field14 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field15 = arg.move();
    __isset.field15 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field16 = arg.move();
    __isset.field16 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field17 = arg.move();
    __isset.field17 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field18 = arg.move();
    __isset.field18 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field19 = arg.move();
    __isset.field19 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field20 = arg.move();
    __isset.field20 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field21 = arg.move();
    __isset.field21 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field22 = arg.move();
    __isset.field22 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field23 = arg.move();
    __isset.field23 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field24 = arg.move();
    __isset.field24 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field25 = arg.move();
    __isset.field25 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field26 = arg.move();
    __isset.field26 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field27 = arg.move();
    __isset.field27 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field28 = arg.move();
    __isset.field28 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field29 = arg.move();
    __isset.field29 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field30 = arg.move();
    __isset.field30 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field31 = arg.move();
    __isset.field31 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field32 = arg.move();
    __isset.field32 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field33 = arg.move();
    __isset.field33 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field34 = arg.move();
    __isset.field34 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field35 = arg.move();
    __isset.field35 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field36 = arg.move();
    __isset.field36 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field37 = arg.move();
    __isset.field37 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field38 = arg.move();
    __isset.field38 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field39 = arg.move();
    __isset.field39 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field40 = arg.move();
    __isset.field40 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field41 = arg.move();
    __isset.field41 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field42 = arg.move();
    __isset.field42 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field43 = arg.move();
    __isset.field43 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<44, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field44 = arg.move();
    __isset.field44 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<45, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field45 = arg.move();
    __isset.field45 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<46, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field46 = arg.move();
    __isset.field46 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<47, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field47 = arg.move();
    __isset.field47 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<48, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field48 = arg.move();
    __isset.field48 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<49, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field49 = arg.move();
    __isset.field49 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<50, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field50 = arg.move();
    __isset.field50 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<51, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field51 = arg.move();
    __isset.field51 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<52, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field52 = arg.move();
    __isset.field52 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<53, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field53 = arg.move();
    __isset.field53 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<54, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field54 = arg.move();
    __isset.field54 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<55, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field55 = arg.move();
    __isset.field55 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<56, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field56 = arg.move();
    __isset.field56 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<57, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field57 = arg.move();
    __isset.field57 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<58, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field58 = arg.move();
    __isset.field58 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<59, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field59 = arg.move();
    __isset.field59 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<60, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field60 = arg.move();
    __isset.field60 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<61, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field61 = arg.move();
    __isset.field61 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<62, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field62 = arg.move();
    __isset.field62 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<63, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field63 = arg.move();
    __isset.field63 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<64, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field64 = arg.move();
    __isset.field64 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<65, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field65 = arg.move();
    __isset.field65 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<66, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field66 = arg.move();
    __isset.field66 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<67, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field67 = arg.move();
    __isset.field67 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<68, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field68 = arg.move();
    __isset.field68 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<69, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field69 = arg.move();
    __isset.field69 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<70, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field70 = arg.move();
    __isset.field70 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<71, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field71 = arg.move();
    __isset.field71 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<72, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field72 = arg.move();
    __isset.field72 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<73, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field73 = arg.move();
    __isset.field73 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<74, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field74 = arg.move();
    __isset.field74 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<75, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field75 = arg.move();
    __isset.field75 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<76, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field76 = arg.move();
    __isset.field76 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<77, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field77 = arg.move();
    __isset.field77 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<78, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field78 = arg.move();
    __isset.field78 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<79, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field79 = arg.move();
    __isset.field79 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<80, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field80 = arg.move();
    __isset.field80 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<81, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field81 = arg.move();
    __isset.field81 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<82, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field82 = arg.move();
    __isset.field82 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<83, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field83 = arg.move();
    __isset.field83 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<84, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field84 = arg.move();
    __isset.field84 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<85, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field85 = arg.move();
    __isset.field85 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<86, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field86 = arg.move();
    __isset.field86 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<87, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field87 = arg.move();
    __isset.field87 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<88, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field88 = arg.move();
    __isset.field88 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<89, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field89 = arg.move();
    __isset.field89 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<90, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field90 = arg.move();
    __isset.field90 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<91, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field91 = arg.move();
    __isset.field91 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<92, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field92 = arg.move();
    __isset.field92 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<93, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field93 = arg.move();
    __isset.field93 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<94, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field94 = arg.move();
    __isset.field94 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<95, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field95 = arg.move();
    __isset.field95 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<96, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field96 = arg.move();
    __isset.field96 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<97, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field97 = arg.move();
    __isset.field97 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<98, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field98 = arg.move();
    __isset.field98 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<99, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field99 = arg.move();
    __isset.field99 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field100 = arg.move();
    __isset.field100 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<101, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field101 = arg.move();
    __isset.field101 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<102, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field102 = arg.move();
    __isset.field102 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<103, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field103 = arg.move();
    __isset.field103 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<104, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field104 = arg.move();
    __isset.field104 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<105, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field105 = arg.move();
    __isset.field105 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<106, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field106 = arg.move();
    __isset.field106 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<107, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field107 = arg.move();
    __isset.field107 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<108, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field108 = arg.move();
    __isset.field108 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<109, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field109 = arg.move();
    __isset.field109 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<110, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field110 = arg.move();
    __isset.field110 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<111, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field111 = arg.move();
    __isset.field111 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<112, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field112 = arg.move();
    __isset.field112 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<113, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field113 = arg.move();
    __isset.field113 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<114, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field114 = arg.move();
    __isset.field114 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<115, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field115 = arg.move();
    __isset.field115 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<116, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field116 = arg.move();
    __isset.field116 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<117, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field117 = arg.move();
    __isset.field117 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<118, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field118 = arg.move();
    __isset.field118 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<119, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field119 = arg.move();
    __isset.field119 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<120, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field120 = arg.move();
    __isset.field120 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<121, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field121 = arg.move();
    __isset.field121 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<122, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field122 = arg.move();
    __isset.field122 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<123, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field123 = arg.move();
    __isset.field123 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<124, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field124 = arg.move();
    __isset.field124 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<125, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field125 = arg.move();
    __isset.field125 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<126, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field126 = arg.move();
    __isset.field126 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<127, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field127 = arg.move();
    __isset.field127 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<128, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field128 = arg.move();
    __isset.field128 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<129, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field129 = arg.move();
    __isset.field129 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<130, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field130 = arg.move();
    __isset.field130 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<131, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field131 = arg.move();
    __isset.field131 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<132, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field132 = arg.move();
    __isset.field132 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<133, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field133 = arg.move();
    __isset.field133 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<134, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field134 = arg.move();
    __isset.field134 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<135, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field135 = arg.move();
    __isset.field135 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<136, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field136 = arg.move();
    __isset.field136 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<137, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field137 = arg.move();
    __isset.field137 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<138, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field138 = arg.move();
    __isset.field138 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<139, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field139 = arg.move();
    __isset.field139 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<140, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field140 = arg.move();
    __isset.field140 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<141, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field141 = arg.move();
    __isset.field141 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<142, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field142 = arg.move();
    __isset.field142 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<143, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field143 = arg.move();
    __isset.field143 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<144, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field144 = arg.move();
    __isset.field144 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<145, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field145 = arg.move();
    __isset.field145 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<146, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field146 = arg.move();
    __isset.field146 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<147, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field147 = arg.move();
    __isset.field147 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<148, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field148 = arg.move();
    __isset.field148 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<149, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field149 = arg.move();
    __isset.field149 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<150, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field150 = arg.move();
    __isset.field150 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<151, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field151 = arg.move();
    __isset.field151 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<152, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field152 = arg.move();
    __isset.field152 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<153, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field153 = arg.move();
    __isset.field153 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<154, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field154 = arg.move();
    __isset.field154 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Struct28(::apache::thrift::detail::argument_wrapper<155, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Struct28(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    field155 = arg.move();
    __isset.field155 = true;
  }

  Struct28(Struct28&&) = default;

  Struct28(const Struct28&) = default;

  Struct28& operator=(Struct28&&) = default;

  Struct28& operator=(const Struct28&) = default;
  void __clear();

  virtual ~Struct28() {}

  std::set<std::string> field1;
  std::set< ::cpp2::Struct7> field2;
  std::vector< ::cpp2::Struct11> field3;
  int64_t field4;
   ::cpp2::Struct3 field5;
  std::string field6;
  std::vector<std::set<std::string>> field7;
  int8_t field8;
  std::string field9;
  int64_t field10;
  std::map<std::set< ::cpp2::Struct14>, int16_t> field11;
  int64_t field12;
  std::vector<int8_t> field13;
  std::vector<float> field14;
  std::vector<int32_t> field15;
  bool field16;
  int32_t field17;
  float field18;
  int16_t field19;
  int16_t field20;
  std::set<int16_t> field21;
   ::cpp2::Struct21 field22;
  std::set<int32_t> field23;
   ::cpp2::Struct3 field24;
  int64_t field25;
  std::string field26;
  std::vector<int64_t> field27;
   ::cpp2::Struct0 field28;
   ::cpp2::Struct2 field29;
  std::vector<int16_t> field30;
  int8_t field31;
  int64_t field32;
  int32_t field33;
  int64_t field34;
   ::cpp2::Struct1 field35;
  double field36;
   ::cpp2::Struct11 field37;
  double field38;
  std::set<int16_t> field39;
   ::cpp2::Struct6 field40;
  int32_t field41;
  int64_t field42;
  float field43;
   ::cpp2::Struct10 field44;
  std::vector<double> field45;
  double field46;
   ::cpp2::Struct11 field47;
  float field48;
  std::map<int64_t, int32_t> field49;
   ::cpp2::Struct6 field50;
  std::string field51;
  bool field52;
  int8_t field53;
  int16_t field54;
  std::vector<double> field55;
   ::cpp2::Struct23 field56;
  std::set<int64_t> field57;
  float field58;
  std::map<std::vector<float>, int32_t> field59;
  bool field60;
  std::string field61;
  std::vector<int64_t> field62;
  int8_t field63;
  int32_t field64;
  int8_t field65;
  float field66;
  int8_t field67;
  int64_t field68;
  std::map<bool, int8_t> field69;
  std::set<int64_t> field70;
  double field71;
  std::set<double> field72;
  std::map<int8_t, std::map<std::vector<double>, int16_t>> field73;
  int8_t field74;
  std::map< ::cpp2::Struct13, bool> field75;
  std::vector<std::vector<int32_t>> field76;
  std::string field77;
  std::map<bool, std::set<std::set<int16_t>>> field78;
  std::map<bool, std::string> field79;
  std::set<int16_t> field80;
  std::string field81;
  std::vector<std::vector<std::string>> field82;
  std::string field83;
  std::vector<int64_t> field84;
  int16_t field85;
  std::string field86;
  int64_t field87;
  std::set<std::map<std::string, bool>> field88;
  std::string field89;
  float field90;
  int8_t field91;
  std::string field92;
  std::map< ::cpp2::Struct20, int32_t> field93;
  float field94;
  std::string field95;
  int8_t field96;
  bool field97;
  double field98;
  std::set< ::cpp2::Struct12> field99;
  std::map<std::set<std::set<std::string>>, float> field100;
  std::string field101;
  int8_t field102;
  std::string field103;
   ::cpp2::Struct13 field104;
  std::string field105;
   ::cpp2::Struct5 field106;
  std::map<int32_t, std::map<int16_t, double>> field107;
  std::string field108;
  int32_t field109;
   ::cpp2::Struct7 field110;
   ::cpp2::Struct9 field111;
   ::cpp2::Struct12 field112;
  std::set<int16_t> field113;
  float field114;
  float field115;
   ::cpp2::Struct12 field116;
  std::set<std::set<int8_t>> field117;
   ::cpp2::Struct1 field118;
  bool field119;
  std::string field120;
   ::cpp2::Struct12 field121;
   ::cpp2::Struct3 field122;
  std::set<int32_t> field123;
  std::string field124;
  double field125;
  double field126;
  std::map<std::vector<int64_t>, bool> field127;
   ::cpp2::Struct25 field128;
   ::cpp2::Struct4 field129;
  std::string field130;
  bool field131;
  std::set<std::string> field132;
  int32_t field133;
  std::map<std::string, std::map<int64_t, int16_t>> field134;
  std::vector<std::string> field135;
  double field136;
  int8_t field137;
  int8_t field138;
  std::set<int16_t> field139;
  int8_t field140;
  std::map<int8_t, int8_t> field141;
  bool field142;
  bool field143;
  std::string field144;
  int32_t field145;
  std::set< ::cpp2::Struct18> field146;
  int16_t field147;
  bool field148;
  int32_t field149;
  std::map<int8_t, std::string> field150;
  std::map<std::string, bool> field151;
  float field152;
  std::set<int64_t> field153;
  double field154;
  std::vector<std::string> field155;

  struct __isset {
    void __clear() {
      field1 = false;
      field2 = false;
      field3 = false;
      field4 = false;
      field5 = false;
      field6 = false;
      field7 = false;
      field8 = false;
      field9 = false;
      field10 = false;
      field11 = false;
      field12 = false;
      field13 = false;
      field14 = false;
      field15 = false;
      field16 = false;
      field17 = false;
      field18 = false;
      field19 = false;
      field20 = false;
      field21 = false;
      field22 = false;
      field23 = false;
      field24 = false;
      field25 = false;
      field26 = false;
      field27 = false;
      field28 = false;
      field29 = false;
      field30 = false;
      field31 = false;
      field32 = false;
      field33 = false;
      field34 = false;
      field35 = false;
      field36 = false;
      field37 = false;
      field38 = false;
      field39 = false;
      field40 = false;
      field41 = false;
      field42 = false;
      field43 = false;
      field44 = false;
      field45 = false;
      field46 = false;
      field47 = false;
      field48 = false;
      field49 = false;
      field50 = false;
      field51 = false;
      field52 = false;
      field53 = false;
      field54 = false;
      field55 = false;
      field56 = false;
      field57 = false;
      field58 = false;
      field59 = false;
      field60 = false;
      field61 = false;
      field62 = false;
      field63 = false;
      field64 = false;
      field65 = false;
      field66 = false;
      field67 = false;
      field68 = false;
      field69 = false;
      field70 = false;
      field71 = false;
      field72 = false;
      field73 = false;
      field74 = false;
      field75 = false;
      field76 = false;
      field77 = false;
      field78 = false;
      field79 = false;
      field80 = false;
      field81 = false;
      field82 = false;
      field83 = false;
      field84 = false;
      field85 = false;
      field86 = false;
      field87 = false;
      field88 = false;
      field89 = false;
      field90 = false;
      field91 = false;
      field92 = false;
      field93 = false;
      field94 = false;
      field95 = false;
      field96 = false;
      field97 = false;
      field98 = false;
      field99 = false;
      field100 = false;
      field101 = false;
      field102 = false;
      field103 = false;
      field104 = false;
      field105 = false;
      field106 = false;
      field107 = false;
      field108 = false;
      field109 = false;
      field110 = false;
      field111 = false;
      field112 = false;
      field113 = false;
      field114 = false;
      field115 = false;
      field116 = false;
      field117 = false;
      field118 = false;
      field119 = false;
      field120 = false;
      field121 = false;
      field122 = false;
      field123 = false;
      field124 = false;
      field125 = false;
      field126 = false;
      field127 = false;
      field128 = false;
      field129 = false;
      field130 = false;
      field131 = false;
      field132 = false;
      field133 = false;
      field134 = false;
      field135 = false;
      field136 = false;
      field137 = false;
      field138 = false;
      field139 = false;
      field140 = false;
      field141 = false;
      field142 = false;
      field143 = false;
      field144 = false;
      field145 = false;
      field146 = false;
      field147 = false;
      field148 = false;
      field149 = false;
      field150 = false;
      field151 = false;
      field152 = false;
      field153 = false;
      field154 = false;
      field155 = false;
    }

    bool field1 = false;
    bool field2 = false;
    bool field3 = false;
    bool field4 = false;
    bool field5 = false;
    bool field6 = false;
    bool field7 = false;
    bool field8 = false;
    bool field9 = false;
    bool field10 = false;
    bool field11 = false;
    bool field12 = false;
    bool field13 = false;
    bool field14 = false;
    bool field15 = false;
    bool field16 = false;
    bool field17 = false;
    bool field18 = false;
    bool field19 = false;
    bool field20 = false;
    bool field21 = false;
    bool field22 = false;
    bool field23 = false;
    bool field24 = false;
    bool field25 = false;
    bool field26 = false;
    bool field27 = false;
    bool field28 = false;
    bool field29 = false;
    bool field30 = false;
    bool field31 = false;
    bool field32 = false;
    bool field33 = false;
    bool field34 = false;
    bool field35 = false;
    bool field36 = false;
    bool field37 = false;
    bool field38 = false;
    bool field39 = false;
    bool field40 = false;
    bool field41 = false;
    bool field42 = false;
    bool field43 = false;
    bool field44 = false;
    bool field45 = false;
    bool field46 = false;
    bool field47 = false;
    bool field48 = false;
    bool field49 = false;
    bool field50 = false;
    bool field51 = false;
    bool field52 = false;
    bool field53 = false;
    bool field54 = false;
    bool field55 = false;
    bool field56 = false;
    bool field57 = false;
    bool field58 = false;
    bool field59 = false;
    bool field60 = false;
    bool field61 = false;
    bool field62 = false;
    bool field63 = false;
    bool field64 = false;
    bool field65 = false;
    bool field66 = false;
    bool field67 = false;
    bool field68 = false;
    bool field69 = false;
    bool field70 = false;
    bool field71 = false;
    bool field72 = false;
    bool field73 = false;
    bool field74 = false;
    bool field75 = false;
    bool field76 = false;
    bool field77 = false;
    bool field78 = false;
    bool field79 = false;
    bool field80 = false;
    bool field81 = false;
    bool field82 = false;
    bool field83 = false;
    bool field84 = false;
    bool field85 = false;
    bool field86 = false;
    bool field87 = false;
    bool field88 = false;
    bool field89 = false;
    bool field90 = false;
    bool field91 = false;
    bool field92 = false;
    bool field93 = false;
    bool field94 = false;
    bool field95 = false;
    bool field96 = false;
    bool field97 = false;
    bool field98 = false;
    bool field99 = false;
    bool field100 = false;
    bool field101 = false;
    bool field102 = false;
    bool field103 = false;
    bool field104 = false;
    bool field105 = false;
    bool field106 = false;
    bool field107 = false;
    bool field108 = false;
    bool field109 = false;
    bool field110 = false;
    bool field111 = false;
    bool field112 = false;
    bool field113 = false;
    bool field114 = false;
    bool field115 = false;
    bool field116 = false;
    bool field117 = false;
    bool field118 = false;
    bool field119 = false;
    bool field120 = false;
    bool field121 = false;
    bool field122 = false;
    bool field123 = false;
    bool field124 = false;
    bool field125 = false;
    bool field126 = false;
    bool field127 = false;
    bool field128 = false;
    bool field129 = false;
    bool field130 = false;
    bool field131 = false;
    bool field132 = false;
    bool field133 = false;
    bool field134 = false;
    bool field135 = false;
    bool field136 = false;
    bool field137 = false;
    bool field138 = false;
    bool field139 = false;
    bool field140 = false;
    bool field141 = false;
    bool field142 = false;
    bool field143 = false;
    bool field144 = false;
    bool field145 = false;
    bool field146 = false;
    bool field147 = false;
    bool field148 = false;
    bool field149 = false;
    bool field150 = false;
    bool field151 = false;
    bool field152 = false;
    bool field153 = false;
    bool field154 = false;
    bool field155 = false;
  } __isset;
  bool operator==(const Struct28& rhs) const;

  bool operator < (const Struct28& rhs) const {
    if (!(field1 == rhs.field1)) {
      return field1 < rhs.field1;
    }
    if (!(field2 == rhs.field2)) {
      return field2 < rhs.field2;
    }
    if (!(field3 == rhs.field3)) {
      return field3 < rhs.field3;
    }
    if (!(field4 == rhs.field4)) {
      return field4 < rhs.field4;
    }
    if (!(field5 == rhs.field5)) {
      return field5 < rhs.field5;
    }
    if (!(field6 == rhs.field6)) {
      return field6 < rhs.field6;
    }
    if (!(field7 == rhs.field7)) {
      return field7 < rhs.field7;
    }
    if (!(field8 == rhs.field8)) {
      return field8 < rhs.field8;
    }
    if (!(field9 == rhs.field9)) {
      return field9 < rhs.field9;
    }
    if (!(field10 == rhs.field10)) {
      return field10 < rhs.field10;
    }
    if (!(field11 == rhs.field11)) {
      return field11 < rhs.field11;
    }
    if (!(field12 == rhs.field12)) {
      return field12 < rhs.field12;
    }
    if (!(field13 == rhs.field13)) {
      return field13 < rhs.field13;
    }
    if (!(field14 == rhs.field14)) {
      return field14 < rhs.field14;
    }
    if (!(field15 == rhs.field15)) {
      return field15 < rhs.field15;
    }
    if (!(field16 == rhs.field16)) {
      return field16 < rhs.field16;
    }
    if (!(field17 == rhs.field17)) {
      return field17 < rhs.field17;
    }
    if (!(field18 == rhs.field18)) {
      return field18 < rhs.field18;
    }
    if (!(field19 == rhs.field19)) {
      return field19 < rhs.field19;
    }
    if (!(field20 == rhs.field20)) {
      return field20 < rhs.field20;
    }
    if (!(field21 == rhs.field21)) {
      return field21 < rhs.field21;
    }
    if (!(field22 == rhs.field22)) {
      return field22 < rhs.field22;
    }
    if (!(field23 == rhs.field23)) {
      return field23 < rhs.field23;
    }
    if (!(field24 == rhs.field24)) {
      return field24 < rhs.field24;
    }
    if (!(field25 == rhs.field25)) {
      return field25 < rhs.field25;
    }
    if (!(field26 == rhs.field26)) {
      return field26 < rhs.field26;
    }
    if (!(field27 == rhs.field27)) {
      return field27 < rhs.field27;
    }
    if (!(field28 == rhs.field28)) {
      return field28 < rhs.field28;
    }
    if (!(field29 == rhs.field29)) {
      return field29 < rhs.field29;
    }
    if (!(field30 == rhs.field30)) {
      return field30 < rhs.field30;
    }
    if (!(field31 == rhs.field31)) {
      return field31 < rhs.field31;
    }
    if (!(field32 == rhs.field32)) {
      return field32 < rhs.field32;
    }
    if (!(field33 == rhs.field33)) {
      return field33 < rhs.field33;
    }
    if (!(field34 == rhs.field34)) {
      return field34 < rhs.field34;
    }
    if (!(field35 == rhs.field35)) {
      return field35 < rhs.field35;
    }
    if (!(field36 == rhs.field36)) {
      return field36 < rhs.field36;
    }
    if (!(field37 == rhs.field37)) {
      return field37 < rhs.field37;
    }
    if (!(field38 == rhs.field38)) {
      return field38 < rhs.field38;
    }
    if (!(field39 == rhs.field39)) {
      return field39 < rhs.field39;
    }
    if (!(field40 == rhs.field40)) {
      return field40 < rhs.field40;
    }
    if (!(field41 == rhs.field41)) {
      return field41 < rhs.field41;
    }
    if (!(field42 == rhs.field42)) {
      return field42 < rhs.field42;
    }
    if (!(field43 == rhs.field43)) {
      return field43 < rhs.field43;
    }
    if (!(field44 == rhs.field44)) {
      return field44 < rhs.field44;
    }
    if (!(field45 == rhs.field45)) {
      return field45 < rhs.field45;
    }
    if (!(field46 == rhs.field46)) {
      return field46 < rhs.field46;
    }
    if (!(field47 == rhs.field47)) {
      return field47 < rhs.field47;
    }
    if (!(field48 == rhs.field48)) {
      return field48 < rhs.field48;
    }
    if (!(field49 == rhs.field49)) {
      return field49 < rhs.field49;
    }
    if (!(field50 == rhs.field50)) {
      return field50 < rhs.field50;
    }
    if (!(field51 == rhs.field51)) {
      return field51 < rhs.field51;
    }
    if (!(field52 == rhs.field52)) {
      return field52 < rhs.field52;
    }
    if (!(field53 == rhs.field53)) {
      return field53 < rhs.field53;
    }
    if (!(field54 == rhs.field54)) {
      return field54 < rhs.field54;
    }
    if (!(field55 == rhs.field55)) {
      return field55 < rhs.field55;
    }
    if (!(field56 == rhs.field56)) {
      return field56 < rhs.field56;
    }
    if (!(field57 == rhs.field57)) {
      return field57 < rhs.field57;
    }
    if (!(field58 == rhs.field58)) {
      return field58 < rhs.field58;
    }
    if (!(field59 == rhs.field59)) {
      return field59 < rhs.field59;
    }
    if (!(field60 == rhs.field60)) {
      return field60 < rhs.field60;
    }
    if (!(field61 == rhs.field61)) {
      return field61 < rhs.field61;
    }
    if (!(field62 == rhs.field62)) {
      return field62 < rhs.field62;
    }
    if (!(field63 == rhs.field63)) {
      return field63 < rhs.field63;
    }
    if (!(field64 == rhs.field64)) {
      return field64 < rhs.field64;
    }
    if (!(field65 == rhs.field65)) {
      return field65 < rhs.field65;
    }
    if (!(field66 == rhs.field66)) {
      return field66 < rhs.field66;
    }
    if (!(field67 == rhs.field67)) {
      return field67 < rhs.field67;
    }
    if (!(field68 == rhs.field68)) {
      return field68 < rhs.field68;
    }
    if (!(field69 == rhs.field69)) {
      return field69 < rhs.field69;
    }
    if (!(field70 == rhs.field70)) {
      return field70 < rhs.field70;
    }
    if (!(field71 == rhs.field71)) {
      return field71 < rhs.field71;
    }
    if (!(field72 == rhs.field72)) {
      return field72 < rhs.field72;
    }
    if (!(field73 == rhs.field73)) {
      return field73 < rhs.field73;
    }
    if (!(field74 == rhs.field74)) {
      return field74 < rhs.field74;
    }
    if (!(field75 == rhs.field75)) {
      return field75 < rhs.field75;
    }
    if (!(field76 == rhs.field76)) {
      return field76 < rhs.field76;
    }
    if (!(field77 == rhs.field77)) {
      return field77 < rhs.field77;
    }
    if (!(field78 == rhs.field78)) {
      return field78 < rhs.field78;
    }
    if (!(field79 == rhs.field79)) {
      return field79 < rhs.field79;
    }
    if (!(field80 == rhs.field80)) {
      return field80 < rhs.field80;
    }
    if (!(field81 == rhs.field81)) {
      return field81 < rhs.field81;
    }
    if (!(field82 == rhs.field82)) {
      return field82 < rhs.field82;
    }
    if (!(field83 == rhs.field83)) {
      return field83 < rhs.field83;
    }
    if (!(field84 == rhs.field84)) {
      return field84 < rhs.field84;
    }
    if (!(field85 == rhs.field85)) {
      return field85 < rhs.field85;
    }
    if (!(field86 == rhs.field86)) {
      return field86 < rhs.field86;
    }
    if (!(field87 == rhs.field87)) {
      return field87 < rhs.field87;
    }
    if (!(field88 == rhs.field88)) {
      return field88 < rhs.field88;
    }
    if (!(field89 == rhs.field89)) {
      return field89 < rhs.field89;
    }
    if (!(field90 == rhs.field90)) {
      return field90 < rhs.field90;
    }
    if (!(field91 == rhs.field91)) {
      return field91 < rhs.field91;
    }
    if (!(field92 == rhs.field92)) {
      return field92 < rhs.field92;
    }
    if (!(field93 == rhs.field93)) {
      return field93 < rhs.field93;
    }
    if (!(field94 == rhs.field94)) {
      return field94 < rhs.field94;
    }
    if (!(field95 == rhs.field95)) {
      return field95 < rhs.field95;
    }
    if (!(field96 == rhs.field96)) {
      return field96 < rhs.field96;
    }
    if (!(field97 == rhs.field97)) {
      return field97 < rhs.field97;
    }
    if (!(field98 == rhs.field98)) {
      return field98 < rhs.field98;
    }
    if (!(field99 == rhs.field99)) {
      return field99 < rhs.field99;
    }
    if (!(field100 == rhs.field100)) {
      return field100 < rhs.field100;
    }
    if (!(field101 == rhs.field101)) {
      return field101 < rhs.field101;
    }
    if (!(field102 == rhs.field102)) {
      return field102 < rhs.field102;
    }
    if (!(field103 == rhs.field103)) {
      return field103 < rhs.field103;
    }
    if (!(field104 == rhs.field104)) {
      return field104 < rhs.field104;
    }
    if (!(field105 == rhs.field105)) {
      return field105 < rhs.field105;
    }
    if (!(field106 == rhs.field106)) {
      return field106 < rhs.field106;
    }
    if (!(field107 == rhs.field107)) {
      return field107 < rhs.field107;
    }
    if (!(field108 == rhs.field108)) {
      return field108 < rhs.field108;
    }
    if (!(field109 == rhs.field109)) {
      return field109 < rhs.field109;
    }
    if (!(field110 == rhs.field110)) {
      return field110 < rhs.field110;
    }
    if (!(field111 == rhs.field111)) {
      return field111 < rhs.field111;
    }
    if (!(field112 == rhs.field112)) {
      return field112 < rhs.field112;
    }
    if (!(field113 == rhs.field113)) {
      return field113 < rhs.field113;
    }
    if (!(field114 == rhs.field114)) {
      return field114 < rhs.field114;
    }
    if (!(field115 == rhs.field115)) {
      return field115 < rhs.field115;
    }
    if (!(field116 == rhs.field116)) {
      return field116 < rhs.field116;
    }
    if (!(field117 == rhs.field117)) {
      return field117 < rhs.field117;
    }
    if (!(field118 == rhs.field118)) {
      return field118 < rhs.field118;
    }
    if (!(field119 == rhs.field119)) {
      return field119 < rhs.field119;
    }
    if (!(field120 == rhs.field120)) {
      return field120 < rhs.field120;
    }
    if (!(field121 == rhs.field121)) {
      return field121 < rhs.field121;
    }
    if (!(field122 == rhs.field122)) {
      return field122 < rhs.field122;
    }
    if (!(field123 == rhs.field123)) {
      return field123 < rhs.field123;
    }
    if (!(field124 == rhs.field124)) {
      return field124 < rhs.field124;
    }
    if (!(field125 == rhs.field125)) {
      return field125 < rhs.field125;
    }
    if (!(field126 == rhs.field126)) {
      return field126 < rhs.field126;
    }
    if (!(field127 == rhs.field127)) {
      return field127 < rhs.field127;
    }
    if (!(field128 == rhs.field128)) {
      return field128 < rhs.field128;
    }
    if (!(field129 == rhs.field129)) {
      return field129 < rhs.field129;
    }
    if (!(field130 == rhs.field130)) {
      return field130 < rhs.field130;
    }
    if (!(field131 == rhs.field131)) {
      return field131 < rhs.field131;
    }
    if (!(field132 == rhs.field132)) {
      return field132 < rhs.field132;
    }
    if (!(field133 == rhs.field133)) {
      return field133 < rhs.field133;
    }
    if (!(field134 == rhs.field134)) {
      return field134 < rhs.field134;
    }
    if (!(field135 == rhs.field135)) {
      return field135 < rhs.field135;
    }
    if (!(field136 == rhs.field136)) {
      return field136 < rhs.field136;
    }
    if (!(field137 == rhs.field137)) {
      return field137 < rhs.field137;
    }
    if (!(field138 == rhs.field138)) {
      return field138 < rhs.field138;
    }
    if (!(field139 == rhs.field139)) {
      return field139 < rhs.field139;
    }
    if (!(field140 == rhs.field140)) {
      return field140 < rhs.field140;
    }
    if (!(field141 == rhs.field141)) {
      return field141 < rhs.field141;
    }
    if (!(field142 == rhs.field142)) {
      return field142 < rhs.field142;
    }
    if (!(field143 == rhs.field143)) {
      return field143 < rhs.field143;
    }
    if (!(field144 == rhs.field144)) {
      return field144 < rhs.field144;
    }
    if (!(field145 == rhs.field145)) {
      return field145 < rhs.field145;
    }
    if (!(field146 == rhs.field146)) {
      return field146 < rhs.field146;
    }
    if (!(field147 == rhs.field147)) {
      return field147 < rhs.field147;
    }
    if (!(field148 == rhs.field148)) {
      return field148 < rhs.field148;
    }
    if (!(field149 == rhs.field149)) {
      return field149 < rhs.field149;
    }
    if (!(field150 == rhs.field150)) {
      return field150 < rhs.field150;
    }
    if (!(field151 == rhs.field151)) {
      return field151 < rhs.field151;
    }
    if (!(field152 == rhs.field152)) {
      return field152 < rhs.field152;
    }
    if (!(field153 == rhs.field153)) {
      return field153 < rhs.field153;
    }
    if (!(field154 == rhs.field154)) {
      return field154 < rhs.field154;
    }
    if (!(field155 == rhs.field155)) {
      return field155 < rhs.field155;
    }
    (void)rhs;
    return false;
  }
  const std::set<std::string>& get_field1() const&;
  std::set<std::string> get_field1() &&;

  template <typename T_Struct28_field1_struct_setter>
  std::set<std::string>& set_field1(T_Struct28_field1_struct_setter&& field1_) {
    field1 = std::forward<T_Struct28_field1_struct_setter>(field1_);
    __isset.field1 = true;
    return field1;
  }
  const std::set< ::cpp2::Struct7>& get_field2() const&;
  std::set< ::cpp2::Struct7> get_field2() &&;

  template <typename T_Struct28_field2_struct_setter>
  std::set< ::cpp2::Struct7>& set_field2(T_Struct28_field2_struct_setter&& field2_) {
    field2 = std::forward<T_Struct28_field2_struct_setter>(field2_);
    __isset.field2 = true;
    return field2;
  }
  const std::vector< ::cpp2::Struct11>& get_field3() const&;
  std::vector< ::cpp2::Struct11> get_field3() &&;

  template <typename T_Struct28_field3_struct_setter>
  std::vector< ::cpp2::Struct11>& set_field3(T_Struct28_field3_struct_setter&& field3_) {
    field3 = std::forward<T_Struct28_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }

  int64_t get_field4() const {
    return field4;
  }

  int64_t& set_field4(int64_t field4_) {
    field4 = field4_;
    __isset.field4 = true;
    return field4;
  }
  const  ::cpp2::Struct3& get_field5() const&;
   ::cpp2::Struct3 get_field5() &&;

  template <typename T_Struct28_field5_struct_setter>
   ::cpp2::Struct3& set_field5(T_Struct28_field5_struct_setter&& field5_) {
    field5 = std::forward<T_Struct28_field5_struct_setter>(field5_);
    __isset.field5 = true;
    return field5;
  }

  const std::string& get_field6() const& {
    return field6;
  }

  std::string get_field6() && {
    return std::move(field6);
  }

  template <typename T_Struct28_field6_struct_setter>
  std::string& set_field6(T_Struct28_field6_struct_setter&& field6_) {
    field6 = std::forward<T_Struct28_field6_struct_setter>(field6_);
    __isset.field6 = true;
    return field6;
  }
  const std::vector<std::set<std::string>>& get_field7() const&;
  std::vector<std::set<std::string>> get_field7() &&;

  template <typename T_Struct28_field7_struct_setter>
  std::vector<std::set<std::string>>& set_field7(T_Struct28_field7_struct_setter&& field7_) {
    field7 = std::forward<T_Struct28_field7_struct_setter>(field7_);
    __isset.field7 = true;
    return field7;
  }

  int8_t get_field8() const {
    return field8;
  }

  int8_t& set_field8(int8_t field8_) {
    field8 = field8_;
    __isset.field8 = true;
    return field8;
  }

  const std::string& get_field9() const& {
    return field9;
  }

  std::string get_field9() && {
    return std::move(field9);
  }

  template <typename T_Struct28_field9_struct_setter>
  std::string& set_field9(T_Struct28_field9_struct_setter&& field9_) {
    field9 = std::forward<T_Struct28_field9_struct_setter>(field9_);
    __isset.field9 = true;
    return field9;
  }

  int64_t get_field10() const {
    return field10;
  }

  int64_t& set_field10(int64_t field10_) {
    field10 = field10_;
    __isset.field10 = true;
    return field10;
  }
  const std::map<std::set< ::cpp2::Struct14>, int16_t>& get_field11() const&;
  std::map<std::set< ::cpp2::Struct14>, int16_t> get_field11() &&;

  template <typename T_Struct28_field11_struct_setter>
  std::map<std::set< ::cpp2::Struct14>, int16_t>& set_field11(T_Struct28_field11_struct_setter&& field11_) {
    field11 = std::forward<T_Struct28_field11_struct_setter>(field11_);
    __isset.field11 = true;
    return field11;
  }

  int64_t get_field12() const {
    return field12;
  }

  int64_t& set_field12(int64_t field12_) {
    field12 = field12_;
    __isset.field12 = true;
    return field12;
  }
  const std::vector<int8_t>& get_field13() const&;
  std::vector<int8_t> get_field13() &&;

  template <typename T_Struct28_field13_struct_setter>
  std::vector<int8_t>& set_field13(T_Struct28_field13_struct_setter&& field13_) {
    field13 = std::forward<T_Struct28_field13_struct_setter>(field13_);
    __isset.field13 = true;
    return field13;
  }
  const std::vector<float>& get_field14() const&;
  std::vector<float> get_field14() &&;

  template <typename T_Struct28_field14_struct_setter>
  std::vector<float>& set_field14(T_Struct28_field14_struct_setter&& field14_) {
    field14 = std::forward<T_Struct28_field14_struct_setter>(field14_);
    __isset.field14 = true;
    return field14;
  }
  const std::vector<int32_t>& get_field15() const&;
  std::vector<int32_t> get_field15() &&;

  template <typename T_Struct28_field15_struct_setter>
  std::vector<int32_t>& set_field15(T_Struct28_field15_struct_setter&& field15_) {
    field15 = std::forward<T_Struct28_field15_struct_setter>(field15_);
    __isset.field15 = true;
    return field15;
  }

  bool get_field16() const {
    return field16;
  }

  bool& set_field16(bool field16_) {
    field16 = field16_;
    __isset.field16 = true;
    return field16;
  }

  int32_t get_field17() const {
    return field17;
  }

  int32_t& set_field17(int32_t field17_) {
    field17 = field17_;
    __isset.field17 = true;
    return field17;
  }

  float get_field18() const {
    return field18;
  }

  float& set_field18(float field18_) {
    field18 = field18_;
    __isset.field18 = true;
    return field18;
  }

  int16_t get_field19() const {
    return field19;
  }

  int16_t& set_field19(int16_t field19_) {
    field19 = field19_;
    __isset.field19 = true;
    return field19;
  }

  int16_t get_field20() const {
    return field20;
  }

  int16_t& set_field20(int16_t field20_) {
    field20 = field20_;
    __isset.field20 = true;
    return field20;
  }
  const std::set<int16_t>& get_field21() const&;
  std::set<int16_t> get_field21() &&;

  template <typename T_Struct28_field21_struct_setter>
  std::set<int16_t>& set_field21(T_Struct28_field21_struct_setter&& field21_) {
    field21 = std::forward<T_Struct28_field21_struct_setter>(field21_);
    __isset.field21 = true;
    return field21;
  }
  const  ::cpp2::Struct21& get_field22() const&;
   ::cpp2::Struct21 get_field22() &&;

  template <typename T_Struct28_field22_struct_setter>
   ::cpp2::Struct21& set_field22(T_Struct28_field22_struct_setter&& field22_) {
    field22 = std::forward<T_Struct28_field22_struct_setter>(field22_);
    __isset.field22 = true;
    return field22;
  }
  const std::set<int32_t>& get_field23() const&;
  std::set<int32_t> get_field23() &&;

  template <typename T_Struct28_field23_struct_setter>
  std::set<int32_t>& set_field23(T_Struct28_field23_struct_setter&& field23_) {
    field23 = std::forward<T_Struct28_field23_struct_setter>(field23_);
    __isset.field23 = true;
    return field23;
  }
  const  ::cpp2::Struct3& get_field24() const&;
   ::cpp2::Struct3 get_field24() &&;

  template <typename T_Struct28_field24_struct_setter>
   ::cpp2::Struct3& set_field24(T_Struct28_field24_struct_setter&& field24_) {
    field24 = std::forward<T_Struct28_field24_struct_setter>(field24_);
    __isset.field24 = true;
    return field24;
  }

  int64_t get_field25() const {
    return field25;
  }

  int64_t& set_field25(int64_t field25_) {
    field25 = field25_;
    __isset.field25 = true;
    return field25;
  }

  const std::string& get_field26() const& {
    return field26;
  }

  std::string get_field26() && {
    return std::move(field26);
  }

  template <typename T_Struct28_field26_struct_setter>
  std::string& set_field26(T_Struct28_field26_struct_setter&& field26_) {
    field26 = std::forward<T_Struct28_field26_struct_setter>(field26_);
    __isset.field26 = true;
    return field26;
  }
  const std::vector<int64_t>& get_field27() const&;
  std::vector<int64_t> get_field27() &&;

  template <typename T_Struct28_field27_struct_setter>
  std::vector<int64_t>& set_field27(T_Struct28_field27_struct_setter&& field27_) {
    field27 = std::forward<T_Struct28_field27_struct_setter>(field27_);
    __isset.field27 = true;
    return field27;
  }
  const  ::cpp2::Struct0& get_field28() const&;
   ::cpp2::Struct0 get_field28() &&;

  template <typename T_Struct28_field28_struct_setter>
   ::cpp2::Struct0& set_field28(T_Struct28_field28_struct_setter&& field28_) {
    field28 = std::forward<T_Struct28_field28_struct_setter>(field28_);
    __isset.field28 = true;
    return field28;
  }
  const  ::cpp2::Struct2& get_field29() const&;
   ::cpp2::Struct2 get_field29() &&;

  template <typename T_Struct28_field29_struct_setter>
   ::cpp2::Struct2& set_field29(T_Struct28_field29_struct_setter&& field29_) {
    field29 = std::forward<T_Struct28_field29_struct_setter>(field29_);
    __isset.field29 = true;
    return field29;
  }
  const std::vector<int16_t>& get_field30() const&;
  std::vector<int16_t> get_field30() &&;

  template <typename T_Struct28_field30_struct_setter>
  std::vector<int16_t>& set_field30(T_Struct28_field30_struct_setter&& field30_) {
    field30 = std::forward<T_Struct28_field30_struct_setter>(field30_);
    __isset.field30 = true;
    return field30;
  }

  int8_t get_field31() const {
    return field31;
  }

  int8_t& set_field31(int8_t field31_) {
    field31 = field31_;
    __isset.field31 = true;
    return field31;
  }

  int64_t get_field32() const {
    return field32;
  }

  int64_t& set_field32(int64_t field32_) {
    field32 = field32_;
    __isset.field32 = true;
    return field32;
  }

  int32_t get_field33() const {
    return field33;
  }

  int32_t& set_field33(int32_t field33_) {
    field33 = field33_;
    __isset.field33 = true;
    return field33;
  }

  int64_t get_field34() const {
    return field34;
  }

  int64_t& set_field34(int64_t field34_) {
    field34 = field34_;
    __isset.field34 = true;
    return field34;
  }
  const  ::cpp2::Struct1& get_field35() const&;
   ::cpp2::Struct1 get_field35() &&;

  template <typename T_Struct28_field35_struct_setter>
   ::cpp2::Struct1& set_field35(T_Struct28_field35_struct_setter&& field35_) {
    field35 = std::forward<T_Struct28_field35_struct_setter>(field35_);
    __isset.field35 = true;
    return field35;
  }

  double get_field36() const {
    return field36;
  }

  double& set_field36(double field36_) {
    field36 = field36_;
    __isset.field36 = true;
    return field36;
  }
  const  ::cpp2::Struct11& get_field37() const&;
   ::cpp2::Struct11 get_field37() &&;

  template <typename T_Struct28_field37_struct_setter>
   ::cpp2::Struct11& set_field37(T_Struct28_field37_struct_setter&& field37_) {
    field37 = std::forward<T_Struct28_field37_struct_setter>(field37_);
    __isset.field37 = true;
    return field37;
  }

  double get_field38() const {
    return field38;
  }

  double& set_field38(double field38_) {
    field38 = field38_;
    __isset.field38 = true;
    return field38;
  }
  const std::set<int16_t>& get_field39() const&;
  std::set<int16_t> get_field39() &&;

  template <typename T_Struct28_field39_struct_setter>
  std::set<int16_t>& set_field39(T_Struct28_field39_struct_setter&& field39_) {
    field39 = std::forward<T_Struct28_field39_struct_setter>(field39_);
    __isset.field39 = true;
    return field39;
  }
  const  ::cpp2::Struct6& get_field40() const&;
   ::cpp2::Struct6 get_field40() &&;

  template <typename T_Struct28_field40_struct_setter>
   ::cpp2::Struct6& set_field40(T_Struct28_field40_struct_setter&& field40_) {
    field40 = std::forward<T_Struct28_field40_struct_setter>(field40_);
    __isset.field40 = true;
    return field40;
  }

  int32_t get_field41() const {
    return field41;
  }

  int32_t& set_field41(int32_t field41_) {
    field41 = field41_;
    __isset.field41 = true;
    return field41;
  }

  int64_t get_field42() const {
    return field42;
  }

  int64_t& set_field42(int64_t field42_) {
    field42 = field42_;
    __isset.field42 = true;
    return field42;
  }

  float get_field43() const {
    return field43;
  }

  float& set_field43(float field43_) {
    field43 = field43_;
    __isset.field43 = true;
    return field43;
  }
  const  ::cpp2::Struct10& get_field44() const&;
   ::cpp2::Struct10 get_field44() &&;

  template <typename T_Struct28_field44_struct_setter>
   ::cpp2::Struct10& set_field44(T_Struct28_field44_struct_setter&& field44_) {
    field44 = std::forward<T_Struct28_field44_struct_setter>(field44_);
    __isset.field44 = true;
    return field44;
  }
  const std::vector<double>& get_field45() const&;
  std::vector<double> get_field45() &&;

  template <typename T_Struct28_field45_struct_setter>
  std::vector<double>& set_field45(T_Struct28_field45_struct_setter&& field45_) {
    field45 = std::forward<T_Struct28_field45_struct_setter>(field45_);
    __isset.field45 = true;
    return field45;
  }

  double get_field46() const {
    return field46;
  }

  double& set_field46(double field46_) {
    field46 = field46_;
    __isset.field46 = true;
    return field46;
  }
  const  ::cpp2::Struct11& get_field47() const&;
   ::cpp2::Struct11 get_field47() &&;

  template <typename T_Struct28_field47_struct_setter>
   ::cpp2::Struct11& set_field47(T_Struct28_field47_struct_setter&& field47_) {
    field47 = std::forward<T_Struct28_field47_struct_setter>(field47_);
    __isset.field47 = true;
    return field47;
  }

  float get_field48() const {
    return field48;
  }

  float& set_field48(float field48_) {
    field48 = field48_;
    __isset.field48 = true;
    return field48;
  }
  const std::map<int64_t, int32_t>& get_field49() const&;
  std::map<int64_t, int32_t> get_field49() &&;

  template <typename T_Struct28_field49_struct_setter>
  std::map<int64_t, int32_t>& set_field49(T_Struct28_field49_struct_setter&& field49_) {
    field49 = std::forward<T_Struct28_field49_struct_setter>(field49_);
    __isset.field49 = true;
    return field49;
  }
  const  ::cpp2::Struct6& get_field50() const&;
   ::cpp2::Struct6 get_field50() &&;

  template <typename T_Struct28_field50_struct_setter>
   ::cpp2::Struct6& set_field50(T_Struct28_field50_struct_setter&& field50_) {
    field50 = std::forward<T_Struct28_field50_struct_setter>(field50_);
    __isset.field50 = true;
    return field50;
  }

  const std::string& get_field51() const& {
    return field51;
  }

  std::string get_field51() && {
    return std::move(field51);
  }

  template <typename T_Struct28_field51_struct_setter>
  std::string& set_field51(T_Struct28_field51_struct_setter&& field51_) {
    field51 = std::forward<T_Struct28_field51_struct_setter>(field51_);
    __isset.field51 = true;
    return field51;
  }

  bool get_field52() const {
    return field52;
  }

  bool& set_field52(bool field52_) {
    field52 = field52_;
    __isset.field52 = true;
    return field52;
  }

  int8_t get_field53() const {
    return field53;
  }

  int8_t& set_field53(int8_t field53_) {
    field53 = field53_;
    __isset.field53 = true;
    return field53;
  }

  int16_t get_field54() const {
    return field54;
  }

  int16_t& set_field54(int16_t field54_) {
    field54 = field54_;
    __isset.field54 = true;
    return field54;
  }
  const std::vector<double>& get_field55() const&;
  std::vector<double> get_field55() &&;

  template <typename T_Struct28_field55_struct_setter>
  std::vector<double>& set_field55(T_Struct28_field55_struct_setter&& field55_) {
    field55 = std::forward<T_Struct28_field55_struct_setter>(field55_);
    __isset.field55 = true;
    return field55;
  }
  const  ::cpp2::Struct23& get_field56() const&;
   ::cpp2::Struct23 get_field56() &&;

  template <typename T_Struct28_field56_struct_setter>
   ::cpp2::Struct23& set_field56(T_Struct28_field56_struct_setter&& field56_) {
    field56 = std::forward<T_Struct28_field56_struct_setter>(field56_);
    __isset.field56 = true;
    return field56;
  }
  const std::set<int64_t>& get_field57() const&;
  std::set<int64_t> get_field57() &&;

  template <typename T_Struct28_field57_struct_setter>
  std::set<int64_t>& set_field57(T_Struct28_field57_struct_setter&& field57_) {
    field57 = std::forward<T_Struct28_field57_struct_setter>(field57_);
    __isset.field57 = true;
    return field57;
  }

  float get_field58() const {
    return field58;
  }

  float& set_field58(float field58_) {
    field58 = field58_;
    __isset.field58 = true;
    return field58;
  }
  const std::map<std::vector<float>, int32_t>& get_field59() const&;
  std::map<std::vector<float>, int32_t> get_field59() &&;

  template <typename T_Struct28_field59_struct_setter>
  std::map<std::vector<float>, int32_t>& set_field59(T_Struct28_field59_struct_setter&& field59_) {
    field59 = std::forward<T_Struct28_field59_struct_setter>(field59_);
    __isset.field59 = true;
    return field59;
  }

  bool get_field60() const {
    return field60;
  }

  bool& set_field60(bool field60_) {
    field60 = field60_;
    __isset.field60 = true;
    return field60;
  }

  const std::string& get_field61() const& {
    return field61;
  }

  std::string get_field61() && {
    return std::move(field61);
  }

  template <typename T_Struct28_field61_struct_setter>
  std::string& set_field61(T_Struct28_field61_struct_setter&& field61_) {
    field61 = std::forward<T_Struct28_field61_struct_setter>(field61_);
    __isset.field61 = true;
    return field61;
  }
  const std::vector<int64_t>& get_field62() const&;
  std::vector<int64_t> get_field62() &&;

  template <typename T_Struct28_field62_struct_setter>
  std::vector<int64_t>& set_field62(T_Struct28_field62_struct_setter&& field62_) {
    field62 = std::forward<T_Struct28_field62_struct_setter>(field62_);
    __isset.field62 = true;
    return field62;
  }

  int8_t get_field63() const {
    return field63;
  }

  int8_t& set_field63(int8_t field63_) {
    field63 = field63_;
    __isset.field63 = true;
    return field63;
  }

  int32_t get_field64() const {
    return field64;
  }

  int32_t& set_field64(int32_t field64_) {
    field64 = field64_;
    __isset.field64 = true;
    return field64;
  }

  int8_t get_field65() const {
    return field65;
  }

  int8_t& set_field65(int8_t field65_) {
    field65 = field65_;
    __isset.field65 = true;
    return field65;
  }

  float get_field66() const {
    return field66;
  }

  float& set_field66(float field66_) {
    field66 = field66_;
    __isset.field66 = true;
    return field66;
  }

  int8_t get_field67() const {
    return field67;
  }

  int8_t& set_field67(int8_t field67_) {
    field67 = field67_;
    __isset.field67 = true;
    return field67;
  }

  int64_t get_field68() const {
    return field68;
  }

  int64_t& set_field68(int64_t field68_) {
    field68 = field68_;
    __isset.field68 = true;
    return field68;
  }
  const std::map<bool, int8_t>& get_field69() const&;
  std::map<bool, int8_t> get_field69() &&;

  template <typename T_Struct28_field69_struct_setter>
  std::map<bool, int8_t>& set_field69(T_Struct28_field69_struct_setter&& field69_) {
    field69 = std::forward<T_Struct28_field69_struct_setter>(field69_);
    __isset.field69 = true;
    return field69;
  }
  const std::set<int64_t>& get_field70() const&;
  std::set<int64_t> get_field70() &&;

  template <typename T_Struct28_field70_struct_setter>
  std::set<int64_t>& set_field70(T_Struct28_field70_struct_setter&& field70_) {
    field70 = std::forward<T_Struct28_field70_struct_setter>(field70_);
    __isset.field70 = true;
    return field70;
  }

  double get_field71() const {
    return field71;
  }

  double& set_field71(double field71_) {
    field71 = field71_;
    __isset.field71 = true;
    return field71;
  }
  const std::set<double>& get_field72() const&;
  std::set<double> get_field72() &&;

  template <typename T_Struct28_field72_struct_setter>
  std::set<double>& set_field72(T_Struct28_field72_struct_setter&& field72_) {
    field72 = std::forward<T_Struct28_field72_struct_setter>(field72_);
    __isset.field72 = true;
    return field72;
  }
  const std::map<int8_t, std::map<std::vector<double>, int16_t>>& get_field73() const&;
  std::map<int8_t, std::map<std::vector<double>, int16_t>> get_field73() &&;

  template <typename T_Struct28_field73_struct_setter>
  std::map<int8_t, std::map<std::vector<double>, int16_t>>& set_field73(T_Struct28_field73_struct_setter&& field73_) {
    field73 = std::forward<T_Struct28_field73_struct_setter>(field73_);
    __isset.field73 = true;
    return field73;
  }

  int8_t get_field74() const {
    return field74;
  }

  int8_t& set_field74(int8_t field74_) {
    field74 = field74_;
    __isset.field74 = true;
    return field74;
  }
  const std::map< ::cpp2::Struct13, bool>& get_field75() const&;
  std::map< ::cpp2::Struct13, bool> get_field75() &&;

  template <typename T_Struct28_field75_struct_setter>
  std::map< ::cpp2::Struct13, bool>& set_field75(T_Struct28_field75_struct_setter&& field75_) {
    field75 = std::forward<T_Struct28_field75_struct_setter>(field75_);
    __isset.field75 = true;
    return field75;
  }
  const std::vector<std::vector<int32_t>>& get_field76() const&;
  std::vector<std::vector<int32_t>> get_field76() &&;

  template <typename T_Struct28_field76_struct_setter>
  std::vector<std::vector<int32_t>>& set_field76(T_Struct28_field76_struct_setter&& field76_) {
    field76 = std::forward<T_Struct28_field76_struct_setter>(field76_);
    __isset.field76 = true;
    return field76;
  }

  const std::string& get_field77() const& {
    return field77;
  }

  std::string get_field77() && {
    return std::move(field77);
  }

  template <typename T_Struct28_field77_struct_setter>
  std::string& set_field77(T_Struct28_field77_struct_setter&& field77_) {
    field77 = std::forward<T_Struct28_field77_struct_setter>(field77_);
    __isset.field77 = true;
    return field77;
  }
  const std::map<bool, std::set<std::set<int16_t>>>& get_field78() const&;
  std::map<bool, std::set<std::set<int16_t>>> get_field78() &&;

  template <typename T_Struct28_field78_struct_setter>
  std::map<bool, std::set<std::set<int16_t>>>& set_field78(T_Struct28_field78_struct_setter&& field78_) {
    field78 = std::forward<T_Struct28_field78_struct_setter>(field78_);
    __isset.field78 = true;
    return field78;
  }
  const std::map<bool, std::string>& get_field79() const&;
  std::map<bool, std::string> get_field79() &&;

  template <typename T_Struct28_field79_struct_setter>
  std::map<bool, std::string>& set_field79(T_Struct28_field79_struct_setter&& field79_) {
    field79 = std::forward<T_Struct28_field79_struct_setter>(field79_);
    __isset.field79 = true;
    return field79;
  }
  const std::set<int16_t>& get_field80() const&;
  std::set<int16_t> get_field80() &&;

  template <typename T_Struct28_field80_struct_setter>
  std::set<int16_t>& set_field80(T_Struct28_field80_struct_setter&& field80_) {
    field80 = std::forward<T_Struct28_field80_struct_setter>(field80_);
    __isset.field80 = true;
    return field80;
  }

  const std::string& get_field81() const& {
    return field81;
  }

  std::string get_field81() && {
    return std::move(field81);
  }

  template <typename T_Struct28_field81_struct_setter>
  std::string& set_field81(T_Struct28_field81_struct_setter&& field81_) {
    field81 = std::forward<T_Struct28_field81_struct_setter>(field81_);
    __isset.field81 = true;
    return field81;
  }
  const std::vector<std::vector<std::string>>& get_field82() const&;
  std::vector<std::vector<std::string>> get_field82() &&;

  template <typename T_Struct28_field82_struct_setter>
  std::vector<std::vector<std::string>>& set_field82(T_Struct28_field82_struct_setter&& field82_) {
    field82 = std::forward<T_Struct28_field82_struct_setter>(field82_);
    __isset.field82 = true;
    return field82;
  }

  const std::string& get_field83() const& {
    return field83;
  }

  std::string get_field83() && {
    return std::move(field83);
  }

  template <typename T_Struct28_field83_struct_setter>
  std::string& set_field83(T_Struct28_field83_struct_setter&& field83_) {
    field83 = std::forward<T_Struct28_field83_struct_setter>(field83_);
    __isset.field83 = true;
    return field83;
  }
  const std::vector<int64_t>& get_field84() const&;
  std::vector<int64_t> get_field84() &&;

  template <typename T_Struct28_field84_struct_setter>
  std::vector<int64_t>& set_field84(T_Struct28_field84_struct_setter&& field84_) {
    field84 = std::forward<T_Struct28_field84_struct_setter>(field84_);
    __isset.field84 = true;
    return field84;
  }

  int16_t get_field85() const {
    return field85;
  }

  int16_t& set_field85(int16_t field85_) {
    field85 = field85_;
    __isset.field85 = true;
    return field85;
  }

  const std::string& get_field86() const& {
    return field86;
  }

  std::string get_field86() && {
    return std::move(field86);
  }

  template <typename T_Struct28_field86_struct_setter>
  std::string& set_field86(T_Struct28_field86_struct_setter&& field86_) {
    field86 = std::forward<T_Struct28_field86_struct_setter>(field86_);
    __isset.field86 = true;
    return field86;
  }

  int64_t get_field87() const {
    return field87;
  }

  int64_t& set_field87(int64_t field87_) {
    field87 = field87_;
    __isset.field87 = true;
    return field87;
  }
  const std::set<std::map<std::string, bool>>& get_field88() const&;
  std::set<std::map<std::string, bool>> get_field88() &&;

  template <typename T_Struct28_field88_struct_setter>
  std::set<std::map<std::string, bool>>& set_field88(T_Struct28_field88_struct_setter&& field88_) {
    field88 = std::forward<T_Struct28_field88_struct_setter>(field88_);
    __isset.field88 = true;
    return field88;
  }

  const std::string& get_field89() const& {
    return field89;
  }

  std::string get_field89() && {
    return std::move(field89);
  }

  template <typename T_Struct28_field89_struct_setter>
  std::string& set_field89(T_Struct28_field89_struct_setter&& field89_) {
    field89 = std::forward<T_Struct28_field89_struct_setter>(field89_);
    __isset.field89 = true;
    return field89;
  }

  float get_field90() const {
    return field90;
  }

  float& set_field90(float field90_) {
    field90 = field90_;
    __isset.field90 = true;
    return field90;
  }

  int8_t get_field91() const {
    return field91;
  }

  int8_t& set_field91(int8_t field91_) {
    field91 = field91_;
    __isset.field91 = true;
    return field91;
  }

  const std::string& get_field92() const& {
    return field92;
  }

  std::string get_field92() && {
    return std::move(field92);
  }

  template <typename T_Struct28_field92_struct_setter>
  std::string& set_field92(T_Struct28_field92_struct_setter&& field92_) {
    field92 = std::forward<T_Struct28_field92_struct_setter>(field92_);
    __isset.field92 = true;
    return field92;
  }
  const std::map< ::cpp2::Struct20, int32_t>& get_field93() const&;
  std::map< ::cpp2::Struct20, int32_t> get_field93() &&;

  template <typename T_Struct28_field93_struct_setter>
  std::map< ::cpp2::Struct20, int32_t>& set_field93(T_Struct28_field93_struct_setter&& field93_) {
    field93 = std::forward<T_Struct28_field93_struct_setter>(field93_);
    __isset.field93 = true;
    return field93;
  }

  float get_field94() const {
    return field94;
  }

  float& set_field94(float field94_) {
    field94 = field94_;
    __isset.field94 = true;
    return field94;
  }

  const std::string& get_field95() const& {
    return field95;
  }

  std::string get_field95() && {
    return std::move(field95);
  }

  template <typename T_Struct28_field95_struct_setter>
  std::string& set_field95(T_Struct28_field95_struct_setter&& field95_) {
    field95 = std::forward<T_Struct28_field95_struct_setter>(field95_);
    __isset.field95 = true;
    return field95;
  }

  int8_t get_field96() const {
    return field96;
  }

  int8_t& set_field96(int8_t field96_) {
    field96 = field96_;
    __isset.field96 = true;
    return field96;
  }

  bool get_field97() const {
    return field97;
  }

  bool& set_field97(bool field97_) {
    field97 = field97_;
    __isset.field97 = true;
    return field97;
  }

  double get_field98() const {
    return field98;
  }

  double& set_field98(double field98_) {
    field98 = field98_;
    __isset.field98 = true;
    return field98;
  }
  const std::set< ::cpp2::Struct12>& get_field99() const&;
  std::set< ::cpp2::Struct12> get_field99() &&;

  template <typename T_Struct28_field99_struct_setter>
  std::set< ::cpp2::Struct12>& set_field99(T_Struct28_field99_struct_setter&& field99_) {
    field99 = std::forward<T_Struct28_field99_struct_setter>(field99_);
    __isset.field99 = true;
    return field99;
  }
  const std::map<std::set<std::set<std::string>>, float>& get_field100() const&;
  std::map<std::set<std::set<std::string>>, float> get_field100() &&;

  template <typename T_Struct28_field100_struct_setter>
  std::map<std::set<std::set<std::string>>, float>& set_field100(T_Struct28_field100_struct_setter&& field100_) {
    field100 = std::forward<T_Struct28_field100_struct_setter>(field100_);
    __isset.field100 = true;
    return field100;
  }

  const std::string& get_field101() const& {
    return field101;
  }

  std::string get_field101() && {
    return std::move(field101);
  }

  template <typename T_Struct28_field101_struct_setter>
  std::string& set_field101(T_Struct28_field101_struct_setter&& field101_) {
    field101 = std::forward<T_Struct28_field101_struct_setter>(field101_);
    __isset.field101 = true;
    return field101;
  }

  int8_t get_field102() const {
    return field102;
  }

  int8_t& set_field102(int8_t field102_) {
    field102 = field102_;
    __isset.field102 = true;
    return field102;
  }

  const std::string& get_field103() const& {
    return field103;
  }

  std::string get_field103() && {
    return std::move(field103);
  }

  template <typename T_Struct28_field103_struct_setter>
  std::string& set_field103(T_Struct28_field103_struct_setter&& field103_) {
    field103 = std::forward<T_Struct28_field103_struct_setter>(field103_);
    __isset.field103 = true;
    return field103;
  }
  const  ::cpp2::Struct13& get_field104() const&;
   ::cpp2::Struct13 get_field104() &&;

  template <typename T_Struct28_field104_struct_setter>
   ::cpp2::Struct13& set_field104(T_Struct28_field104_struct_setter&& field104_) {
    field104 = std::forward<T_Struct28_field104_struct_setter>(field104_);
    __isset.field104 = true;
    return field104;
  }

  const std::string& get_field105() const& {
    return field105;
  }

  std::string get_field105() && {
    return std::move(field105);
  }

  template <typename T_Struct28_field105_struct_setter>
  std::string& set_field105(T_Struct28_field105_struct_setter&& field105_) {
    field105 = std::forward<T_Struct28_field105_struct_setter>(field105_);
    __isset.field105 = true;
    return field105;
  }
  const  ::cpp2::Struct5& get_field106() const&;
   ::cpp2::Struct5 get_field106() &&;

  template <typename T_Struct28_field106_struct_setter>
   ::cpp2::Struct5& set_field106(T_Struct28_field106_struct_setter&& field106_) {
    field106 = std::forward<T_Struct28_field106_struct_setter>(field106_);
    __isset.field106 = true;
    return field106;
  }
  const std::map<int32_t, std::map<int16_t, double>>& get_field107() const&;
  std::map<int32_t, std::map<int16_t, double>> get_field107() &&;

  template <typename T_Struct28_field107_struct_setter>
  std::map<int32_t, std::map<int16_t, double>>& set_field107(T_Struct28_field107_struct_setter&& field107_) {
    field107 = std::forward<T_Struct28_field107_struct_setter>(field107_);
    __isset.field107 = true;
    return field107;
  }

  const std::string& get_field108() const& {
    return field108;
  }

  std::string get_field108() && {
    return std::move(field108);
  }

  template <typename T_Struct28_field108_struct_setter>
  std::string& set_field108(T_Struct28_field108_struct_setter&& field108_) {
    field108 = std::forward<T_Struct28_field108_struct_setter>(field108_);
    __isset.field108 = true;
    return field108;
  }

  int32_t get_field109() const {
    return field109;
  }

  int32_t& set_field109(int32_t field109_) {
    field109 = field109_;
    __isset.field109 = true;
    return field109;
  }
  const  ::cpp2::Struct7& get_field110() const&;
   ::cpp2::Struct7 get_field110() &&;

  template <typename T_Struct28_field110_struct_setter>
   ::cpp2::Struct7& set_field110(T_Struct28_field110_struct_setter&& field110_) {
    field110 = std::forward<T_Struct28_field110_struct_setter>(field110_);
    __isset.field110 = true;
    return field110;
  }
  const  ::cpp2::Struct9& get_field111() const&;
   ::cpp2::Struct9 get_field111() &&;

  template <typename T_Struct28_field111_struct_setter>
   ::cpp2::Struct9& set_field111(T_Struct28_field111_struct_setter&& field111_) {
    field111 = std::forward<T_Struct28_field111_struct_setter>(field111_);
    __isset.field111 = true;
    return field111;
  }
  const  ::cpp2::Struct12& get_field112() const&;
   ::cpp2::Struct12 get_field112() &&;

  template <typename T_Struct28_field112_struct_setter>
   ::cpp2::Struct12& set_field112(T_Struct28_field112_struct_setter&& field112_) {
    field112 = std::forward<T_Struct28_field112_struct_setter>(field112_);
    __isset.field112 = true;
    return field112;
  }
  const std::set<int16_t>& get_field113() const&;
  std::set<int16_t> get_field113() &&;

  template <typename T_Struct28_field113_struct_setter>
  std::set<int16_t>& set_field113(T_Struct28_field113_struct_setter&& field113_) {
    field113 = std::forward<T_Struct28_field113_struct_setter>(field113_);
    __isset.field113 = true;
    return field113;
  }

  float get_field114() const {
    return field114;
  }

  float& set_field114(float field114_) {
    field114 = field114_;
    __isset.field114 = true;
    return field114;
  }

  float get_field115() const {
    return field115;
  }

  float& set_field115(float field115_) {
    field115 = field115_;
    __isset.field115 = true;
    return field115;
  }
  const  ::cpp2::Struct12& get_field116() const&;
   ::cpp2::Struct12 get_field116() &&;

  template <typename T_Struct28_field116_struct_setter>
   ::cpp2::Struct12& set_field116(T_Struct28_field116_struct_setter&& field116_) {
    field116 = std::forward<T_Struct28_field116_struct_setter>(field116_);
    __isset.field116 = true;
    return field116;
  }
  const std::set<std::set<int8_t>>& get_field117() const&;
  std::set<std::set<int8_t>> get_field117() &&;

  template <typename T_Struct28_field117_struct_setter>
  std::set<std::set<int8_t>>& set_field117(T_Struct28_field117_struct_setter&& field117_) {
    field117 = std::forward<T_Struct28_field117_struct_setter>(field117_);
    __isset.field117 = true;
    return field117;
  }
  const  ::cpp2::Struct1& get_field118() const&;
   ::cpp2::Struct1 get_field118() &&;

  template <typename T_Struct28_field118_struct_setter>
   ::cpp2::Struct1& set_field118(T_Struct28_field118_struct_setter&& field118_) {
    field118 = std::forward<T_Struct28_field118_struct_setter>(field118_);
    __isset.field118 = true;
    return field118;
  }

  bool get_field119() const {
    return field119;
  }

  bool& set_field119(bool field119_) {
    field119 = field119_;
    __isset.field119 = true;
    return field119;
  }

  const std::string& get_field120() const& {
    return field120;
  }

  std::string get_field120() && {
    return std::move(field120);
  }

  template <typename T_Struct28_field120_struct_setter>
  std::string& set_field120(T_Struct28_field120_struct_setter&& field120_) {
    field120 = std::forward<T_Struct28_field120_struct_setter>(field120_);
    __isset.field120 = true;
    return field120;
  }
  const  ::cpp2::Struct12& get_field121() const&;
   ::cpp2::Struct12 get_field121() &&;

  template <typename T_Struct28_field121_struct_setter>
   ::cpp2::Struct12& set_field121(T_Struct28_field121_struct_setter&& field121_) {
    field121 = std::forward<T_Struct28_field121_struct_setter>(field121_);
    __isset.field121 = true;
    return field121;
  }
  const  ::cpp2::Struct3& get_field122() const&;
   ::cpp2::Struct3 get_field122() &&;

  template <typename T_Struct28_field122_struct_setter>
   ::cpp2::Struct3& set_field122(T_Struct28_field122_struct_setter&& field122_) {
    field122 = std::forward<T_Struct28_field122_struct_setter>(field122_);
    __isset.field122 = true;
    return field122;
  }
  const std::set<int32_t>& get_field123() const&;
  std::set<int32_t> get_field123() &&;

  template <typename T_Struct28_field123_struct_setter>
  std::set<int32_t>& set_field123(T_Struct28_field123_struct_setter&& field123_) {
    field123 = std::forward<T_Struct28_field123_struct_setter>(field123_);
    __isset.field123 = true;
    return field123;
  }

  const std::string& get_field124() const& {
    return field124;
  }

  std::string get_field124() && {
    return std::move(field124);
  }

  template <typename T_Struct28_field124_struct_setter>
  std::string& set_field124(T_Struct28_field124_struct_setter&& field124_) {
    field124 = std::forward<T_Struct28_field124_struct_setter>(field124_);
    __isset.field124 = true;
    return field124;
  }

  double get_field125() const {
    return field125;
  }

  double& set_field125(double field125_) {
    field125 = field125_;
    __isset.field125 = true;
    return field125;
  }

  double get_field126() const {
    return field126;
  }

  double& set_field126(double field126_) {
    field126 = field126_;
    __isset.field126 = true;
    return field126;
  }
  const std::map<std::vector<int64_t>, bool>& get_field127() const&;
  std::map<std::vector<int64_t>, bool> get_field127() &&;

  template <typename T_Struct28_field127_struct_setter>
  std::map<std::vector<int64_t>, bool>& set_field127(T_Struct28_field127_struct_setter&& field127_) {
    field127 = std::forward<T_Struct28_field127_struct_setter>(field127_);
    __isset.field127 = true;
    return field127;
  }
  const  ::cpp2::Struct25& get_field128() const&;
   ::cpp2::Struct25 get_field128() &&;

  template <typename T_Struct28_field128_struct_setter>
   ::cpp2::Struct25& set_field128(T_Struct28_field128_struct_setter&& field128_) {
    field128 = std::forward<T_Struct28_field128_struct_setter>(field128_);
    __isset.field128 = true;
    return field128;
  }
  const  ::cpp2::Struct4& get_field129() const&;
   ::cpp2::Struct4 get_field129() &&;

  template <typename T_Struct28_field129_struct_setter>
   ::cpp2::Struct4& set_field129(T_Struct28_field129_struct_setter&& field129_) {
    field129 = std::forward<T_Struct28_field129_struct_setter>(field129_);
    __isset.field129 = true;
    return field129;
  }

  const std::string& get_field130() const& {
    return field130;
  }

  std::string get_field130() && {
    return std::move(field130);
  }

  template <typename T_Struct28_field130_struct_setter>
  std::string& set_field130(T_Struct28_field130_struct_setter&& field130_) {
    field130 = std::forward<T_Struct28_field130_struct_setter>(field130_);
    __isset.field130 = true;
    return field130;
  }

  bool get_field131() const {
    return field131;
  }

  bool& set_field131(bool field131_) {
    field131 = field131_;
    __isset.field131 = true;
    return field131;
  }
  const std::set<std::string>& get_field132() const&;
  std::set<std::string> get_field132() &&;

  template <typename T_Struct28_field132_struct_setter>
  std::set<std::string>& set_field132(T_Struct28_field132_struct_setter&& field132_) {
    field132 = std::forward<T_Struct28_field132_struct_setter>(field132_);
    __isset.field132 = true;
    return field132;
  }

  int32_t get_field133() const {
    return field133;
  }

  int32_t& set_field133(int32_t field133_) {
    field133 = field133_;
    __isset.field133 = true;
    return field133;
  }
  const std::map<std::string, std::map<int64_t, int16_t>>& get_field134() const&;
  std::map<std::string, std::map<int64_t, int16_t>> get_field134() &&;

  template <typename T_Struct28_field134_struct_setter>
  std::map<std::string, std::map<int64_t, int16_t>>& set_field134(T_Struct28_field134_struct_setter&& field134_) {
    field134 = std::forward<T_Struct28_field134_struct_setter>(field134_);
    __isset.field134 = true;
    return field134;
  }
  const std::vector<std::string>& get_field135() const&;
  std::vector<std::string> get_field135() &&;

  template <typename T_Struct28_field135_struct_setter>
  std::vector<std::string>& set_field135(T_Struct28_field135_struct_setter&& field135_) {
    field135 = std::forward<T_Struct28_field135_struct_setter>(field135_);
    __isset.field135 = true;
    return field135;
  }

  double get_field136() const {
    return field136;
  }

  double& set_field136(double field136_) {
    field136 = field136_;
    __isset.field136 = true;
    return field136;
  }

  int8_t get_field137() const {
    return field137;
  }

  int8_t& set_field137(int8_t field137_) {
    field137 = field137_;
    __isset.field137 = true;
    return field137;
  }

  int8_t get_field138() const {
    return field138;
  }

  int8_t& set_field138(int8_t field138_) {
    field138 = field138_;
    __isset.field138 = true;
    return field138;
  }
  const std::set<int16_t>& get_field139() const&;
  std::set<int16_t> get_field139() &&;

  template <typename T_Struct28_field139_struct_setter>
  std::set<int16_t>& set_field139(T_Struct28_field139_struct_setter&& field139_) {
    field139 = std::forward<T_Struct28_field139_struct_setter>(field139_);
    __isset.field139 = true;
    return field139;
  }

  int8_t get_field140() const {
    return field140;
  }

  int8_t& set_field140(int8_t field140_) {
    field140 = field140_;
    __isset.field140 = true;
    return field140;
  }
  const std::map<int8_t, int8_t>& get_field141() const&;
  std::map<int8_t, int8_t> get_field141() &&;

  template <typename T_Struct28_field141_struct_setter>
  std::map<int8_t, int8_t>& set_field141(T_Struct28_field141_struct_setter&& field141_) {
    field141 = std::forward<T_Struct28_field141_struct_setter>(field141_);
    __isset.field141 = true;
    return field141;
  }

  bool get_field142() const {
    return field142;
  }

  bool& set_field142(bool field142_) {
    field142 = field142_;
    __isset.field142 = true;
    return field142;
  }

  bool get_field143() const {
    return field143;
  }

  bool& set_field143(bool field143_) {
    field143 = field143_;
    __isset.field143 = true;
    return field143;
  }

  const std::string& get_field144() const& {
    return field144;
  }

  std::string get_field144() && {
    return std::move(field144);
  }

  template <typename T_Struct28_field144_struct_setter>
  std::string& set_field144(T_Struct28_field144_struct_setter&& field144_) {
    field144 = std::forward<T_Struct28_field144_struct_setter>(field144_);
    __isset.field144 = true;
    return field144;
  }

  int32_t get_field145() const {
    return field145;
  }

  int32_t& set_field145(int32_t field145_) {
    field145 = field145_;
    __isset.field145 = true;
    return field145;
  }
  const std::set< ::cpp2::Struct18>& get_field146() const&;
  std::set< ::cpp2::Struct18> get_field146() &&;

  template <typename T_Struct28_field146_struct_setter>
  std::set< ::cpp2::Struct18>& set_field146(T_Struct28_field146_struct_setter&& field146_) {
    field146 = std::forward<T_Struct28_field146_struct_setter>(field146_);
    __isset.field146 = true;
    return field146;
  }

  int16_t get_field147() const {
    return field147;
  }

  int16_t& set_field147(int16_t field147_) {
    field147 = field147_;
    __isset.field147 = true;
    return field147;
  }

  bool get_field148() const {
    return field148;
  }

  bool& set_field148(bool field148_) {
    field148 = field148_;
    __isset.field148 = true;
    return field148;
  }

  int32_t get_field149() const {
    return field149;
  }

  int32_t& set_field149(int32_t field149_) {
    field149 = field149_;
    __isset.field149 = true;
    return field149;
  }
  const std::map<int8_t, std::string>& get_field150() const&;
  std::map<int8_t, std::string> get_field150() &&;

  template <typename T_Struct28_field150_struct_setter>
  std::map<int8_t, std::string>& set_field150(T_Struct28_field150_struct_setter&& field150_) {
    field150 = std::forward<T_Struct28_field150_struct_setter>(field150_);
    __isset.field150 = true;
    return field150;
  }
  const std::map<std::string, bool>& get_field151() const&;
  std::map<std::string, bool> get_field151() &&;

  template <typename T_Struct28_field151_struct_setter>
  std::map<std::string, bool>& set_field151(T_Struct28_field151_struct_setter&& field151_) {
    field151 = std::forward<T_Struct28_field151_struct_setter>(field151_);
    __isset.field151 = true;
    return field151;
  }

  float get_field152() const {
    return field152;
  }

  float& set_field152(float field152_) {
    field152 = field152_;
    __isset.field152 = true;
    return field152;
  }
  const std::set<int64_t>& get_field153() const&;
  std::set<int64_t> get_field153() &&;

  template <typename T_Struct28_field153_struct_setter>
  std::set<int64_t>& set_field153(T_Struct28_field153_struct_setter&& field153_) {
    field153 = std::forward<T_Struct28_field153_struct_setter>(field153_);
    __isset.field153 = true;
    return field153;
  }

  double get_field154() const {
    return field154;
  }

  double& set_field154(double field154_) {
    field154 = field154_;
    __isset.field154 = true;
    return field154;
  }
  const std::vector<std::string>& get_field155() const&;
  std::vector<std::string> get_field155() &&;

  template <typename T_Struct28_field155_struct_setter>
  std::vector<std::string>& set_field155(T_Struct28_field155_struct_setter&& field155_) {
    field155 = std::forward<T_Struct28_field155_struct_setter>(field155_);
    __isset.field155 = true;
    return field155;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(Struct28& a, Struct28& b);
extern template uint32_t Struct28::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Struct28::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Struct28::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct28::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Struct28::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Struct28::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Struct28::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Struct28::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::Struct28>::clear( ::cpp2::Struct28* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::Struct28>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct28>::write(Protocol* proto,  ::cpp2::Struct28 const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct28>::read(Protocol* proto,  ::cpp2::Struct28* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct28>::serializedSize(Protocol const* proto,  ::cpp2::Struct28 const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::Struct28>::serializedSizeZC(Protocol const* proto,  ::cpp2::Struct28 const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
