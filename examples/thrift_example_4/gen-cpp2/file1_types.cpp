/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "file1_types.h"

#include "file1_types.tcc"

#include <algorithm>

#include <folly/Indestructible.h>

#include "file1_data.h"



namespace cpp2 {

void Struct0::__clear() {
  // clear all fields
  field1.clear();
  field2 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field3 = 0;
  field4 = 0;
  field5 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field6 = 0;
  field7.clear();
  field8 = 0;
  field9 = 0;
  field10.clear();
  field11.clear();
  field12.clear();
  field13.clear();
  field14 = 0;
  field15 = 0;
  field16 = 0;
  field17 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field18 = 0;
  field19.clear();
  field20 = 0;
  field21 = 0;
  field22 = 0;
  field23.clear();
  field24.clear();
  field25.clear();
  field26.clear();
  field27 = 0;
  field28 = 0;
  field29 = 0;
  field30.clear();
  field31 = 0;
  field32 = 0;
  field33.clear();
  field34 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field35.clear();
  field36.clear();
  field37.clear();
  field38 = 0;
  field39 = 0;
  field40 = 0;
  field41 = 0;
  field42.clear();
  field43 = 0;
  field44 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field45 = 0;
  field46 = 0;
  field47 = 0;
  field48 = 0;
  field49 = 0;
  field50 = 0;
  field51 = 0;
  field52 = 0;
  field53 = 0;
  field54 = 0;
  field55 = 0;
  field56.clear();
  field57 = 0;
  field58 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field59 = 0;
  field60 = 0;
  field61.clear();
  field62 = 0;
  field63 = 0;
  field64.clear();
  field65 = 0;
  field66 = 0;
  field67 = 0;
  field68.clear();
  field69 = 0;
  field70 = 0;
  field71 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field72 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field73 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field74 = 0;
  field75 = 0;
  field76 = 0;
  field77 = 0;
  field78 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field79.clear();
  field80 = 0;
  field81.clear();
  field82.clear();
  field83.clear();
  field84 = 0;
  field85.clear();
  field86 = 0;
  field87 = 0;
  field88.clear();
  field89.clear();
  field90 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field91 = 0;
  field92.clear();
  field93 = 0;
  field94 = 0;
  field95 = 0;
  field96.clear();
  field97 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field98 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field99.clear();
  field100 = 0;
  field101.clear();
  field102.clear();
  field103 = 0;
  field104 = 0;
  field105.clear();
  field106 = 0;
  field107.clear();
  field108.clear();
  field109 = 0;
  field110 = 0;
  field111.clear();
  field112 = 0;
  field113 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field114 = 0;
  field115 = 0;
  field116 = 0;
  field117 = 0;
  field118 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field119.clear();
  field120.clear();
  field121 = 0;
  field122 = 0;
  field123.clear();
  __isset.__clear();
}

bool Struct0::operator==(const Struct0& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field2, rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field17, rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field34, rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field44, rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field58, rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field71, rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field73, rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field78, rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!((field83 == rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  if (!((field85 == rhs.field85))) {
    return false;
  }
  if (!((field86 == rhs.field86))) {
    return false;
  }
  if (!((field87 == rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!((field89 == rhs.field89))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field90, rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!((field92 == rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!((field94 == rhs.field94))) {
    return false;
  }
  if (!((field95 == rhs.field95))) {
    return false;
  }
  if (!((field96 == rhs.field96))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field97, rhs.field97))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field98, rhs.field98))) {
    return false;
  }
  if (!((field99 == rhs.field99))) {
    return false;
  }
  if (!((field100 == rhs.field100))) {
    return false;
  }
  if (!((field101 == rhs.field101))) {
    return false;
  }
  if (!((field102 == rhs.field102))) {
    return false;
  }
  if (!((field103 == rhs.field103))) {
    return false;
  }
  if (!((field104 == rhs.field104))) {
    return false;
  }
  if (!((field105 == rhs.field105))) {
    return false;
  }
  if (!((field106 == rhs.field106))) {
    return false;
  }
  if (!((field107 == rhs.field107))) {
    return false;
  }
  if (!((field108 == rhs.field108))) {
    return false;
  }
  if (!((field109 == rhs.field109))) {
    return false;
  }
  if (!((field110 == rhs.field110))) {
    return false;
  }
  if (!((field111 == rhs.field111))) {
    return false;
  }
  if (!((field112 == rhs.field112))) {
    return false;
  }
  if (!((field113 == rhs.field113))) {
    return false;
  }
  if (!((field114 == rhs.field114))) {
    return false;
  }
  if (!((field115 == rhs.field115))) {
    return false;
  }
  if (!((field116 == rhs.field116))) {
    return false;
  }
  if (!((field117 == rhs.field117))) {
    return false;
  }
  if (!((field118 == rhs.field118))) {
    return false;
  }
  if (!((field119 == rhs.field119))) {
    return false;
  }
  if (!((field120 == rhs.field120))) {
    return false;
  }
  if (!((field121 == rhs.field121))) {
    return false;
  }
  if (!((field122 == rhs.field122))) {
    return false;
  }
  if (!((field123 == rhs.field123))) {
    return false;
  }
  return true;
}

const std::map<double, float>& Struct0::get_field1() const& {
  return field1;
}

std::map<double, float> Struct0::get_field1() && {
  return std::move(field1);
}

const std::set<std::string>& Struct0::get_field7() const& {
  return field7;
}

std::set<std::string> Struct0::get_field7() && {
  return std::move(field7);
}

const std::vector<double>& Struct0::get_field10() const& {
  return field10;
}

std::vector<double> Struct0::get_field10() && {
  return std::move(field10);
}

const std::map<float, std::vector<std::string>>& Struct0::get_field11() const& {
  return field11;
}

std::map<float, std::vector<std::string>> Struct0::get_field11() && {
  return std::move(field11);
}

const std::map<int32_t, float>& Struct0::get_field12() const& {
  return field12;
}

std::map<int32_t, float> Struct0::get_field12() && {
  return std::move(field12);
}

const std::vector<std::vector<std::string>>& Struct0::get_field13() const& {
  return field13;
}

std::vector<std::vector<std::string>> Struct0::get_field13() && {
  return std::move(field13);
}

const std::vector<int8_t>& Struct0::get_field19() const& {
  return field19;
}

std::vector<int8_t> Struct0::get_field19() && {
  return std::move(field19);
}

const std::set<int64_t>& Struct0::get_field23() const& {
  return field23;
}

std::set<int64_t> Struct0::get_field23() && {
  return std::move(field23);
}

const std::map<double, std::string>& Struct0::get_field24() const& {
  return field24;
}

std::map<double, std::string> Struct0::get_field24() && {
  return std::move(field24);
}

const std::map<int8_t, int8_t>& Struct0::get_field25() const& {
  return field25;
}

std::map<int8_t, int8_t> Struct0::get_field25() && {
  return std::move(field25);
}

const std::map<float, std::string>& Struct0::get_field26() const& {
  return field26;
}

std::map<float, std::string> Struct0::get_field26() && {
  return std::move(field26);
}

const std::map<std::set<int16_t>, std::string>& Struct0::get_field30() const& {
  return field30;
}

std::map<std::set<int16_t>, std::string> Struct0::get_field30() && {
  return std::move(field30);
}

const std::map<int8_t, std::string>& Struct0::get_field33() const& {
  return field33;
}

std::map<int8_t, std::string> Struct0::get_field33() && {
  return std::move(field33);
}

const std::vector<int64_t>& Struct0::get_field35() const& {
  return field35;
}

std::vector<int64_t> Struct0::get_field35() && {
  return std::move(field35);
}

const std::set<std::map<bool, int32_t>>& Struct0::get_field36() const& {
  return field36;
}

std::set<std::map<bool, int32_t>> Struct0::get_field36() && {
  return std::move(field36);
}

const std::map<std::vector<float>, int8_t>& Struct0::get_field37() const& {
  return field37;
}

std::map<std::vector<float>, int8_t> Struct0::get_field37() && {
  return std::move(field37);
}

const std::vector<std::string>& Struct0::get_field42() const& {
  return field42;
}

std::vector<std::string> Struct0::get_field42() && {
  return std::move(field42);
}

const std::set<float>& Struct0::get_field56() const& {
  return field56;
}

std::set<float> Struct0::get_field56() && {
  return std::move(field56);
}

const std::set<int8_t>& Struct0::get_field61() const& {
  return field61;
}

std::set<int8_t> Struct0::get_field61() && {
  return std::move(field61);
}

const std::map<int8_t, int16_t>& Struct0::get_field64() const& {
  return field64;
}

std::map<int8_t, int16_t> Struct0::get_field64() && {
  return std::move(field64);
}

const std::map<int64_t, std::vector<std::string>>& Struct0::get_field68() const& {
  return field68;
}

std::map<int64_t, std::vector<std::string>> Struct0::get_field68() && {
  return std::move(field68);
}

const std::set<std::string>& Struct0::get_field79() const& {
  return field79;
}

std::set<std::string> Struct0::get_field79() && {
  return std::move(field79);
}

const std::map<std::string, double>& Struct0::get_field81() const& {
  return field81;
}

std::map<std::string, double> Struct0::get_field81() && {
  return std::move(field81);
}

const std::map<std::vector<bool>, bool>& Struct0::get_field82() const& {
  return field82;
}

std::map<std::vector<bool>, bool> Struct0::get_field82() && {
  return std::move(field82);
}

const std::map<int64_t, double>& Struct0::get_field83() const& {
  return field83;
}

std::map<int64_t, double> Struct0::get_field83() && {
  return std::move(field83);
}

const std::set<std::string>& Struct0::get_field85() const& {
  return field85;
}

std::set<std::string> Struct0::get_field85() && {
  return std::move(field85);
}

const std::vector<int32_t>& Struct0::get_field88() const& {
  return field88;
}

std::vector<int32_t> Struct0::get_field88() && {
  return std::move(field88);
}

const std::vector<std::string>& Struct0::get_field89() const& {
  return field89;
}

std::vector<std::string> Struct0::get_field89() && {
  return std::move(field89);
}

const std::vector<bool>& Struct0::get_field92() const& {
  return field92;
}

std::vector<bool> Struct0::get_field92() && {
  return std::move(field92);
}

const std::set<int32_t>& Struct0::get_field96() const& {
  return field96;
}

std::set<int32_t> Struct0::get_field96() && {
  return std::move(field96);
}

const std::vector<double>& Struct0::get_field99() const& {
  return field99;
}

std::vector<double> Struct0::get_field99() && {
  return std::move(field99);
}

const std::set<std::string>& Struct0::get_field101() const& {
  return field101;
}

std::set<std::string> Struct0::get_field101() && {
  return std::move(field101);
}

const std::vector<float>& Struct0::get_field102() const& {
  return field102;
}

std::vector<float> Struct0::get_field102() && {
  return std::move(field102);
}

const std::vector<std::string>& Struct0::get_field105() const& {
  return field105;
}

std::vector<std::string> Struct0::get_field105() && {
  return std::move(field105);
}

const std::set<bool>& Struct0::get_field107() const& {
  return field107;
}

std::set<bool> Struct0::get_field107() && {
  return std::move(field107);
}

const std::vector<int32_t>& Struct0::get_field108() const& {
  return field108;
}

std::vector<int32_t> Struct0::get_field108() && {
  return std::move(field108);
}

const std::vector<float>& Struct0::get_field111() const& {
  return field111;
}

std::vector<float> Struct0::get_field111() && {
  return std::move(field111);
}

const std::vector<std::string>& Struct0::get_field119() const& {
  return field119;
}

std::vector<std::string> Struct0::get_field119() && {
  return std::move(field119);
}

const std::map<std::map<double, float>, float>& Struct0::get_field120() const& {
  return field120;
}

std::map<std::map<double, float>, float> Struct0::get_field120() && {
  return std::move(field120);
}

const std::vector<std::string>& Struct0::get_field123() const& {
  return field123;
}

std::vector<std::string> Struct0::get_field123() && {
  return std::move(field123);
}

void Struct0::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field96") {
    fid = 96;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field97") {
    fid = 97;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field98") {
    fid = 98;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field99") {
    fid = 99;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field100") {
    fid = 100;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field101") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field102") {
    fid = 102;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field103") {
    fid = 103;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field104") {
    fid = 104;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field105") {
    fid = 105;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field106") {
    fid = 106;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field107") {
    fid = 107;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field108") {
    fid = 108;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field109") {
    fid = 109;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field110") {
    fid = 110;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field111") {
    fid = 111;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field112") {
    fid = 112;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field113") {
    fid = 113;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field114") {
    fid = 114;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field115") {
    fid = 115;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field116") {
    fid = 116;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field117") {
    fid = 117;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field118") {
    fid = 118;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field119") {
    fid = 119;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field120") {
    fid = 120;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field121") {
    fid = 121;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field122") {
    fid = 122;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field123") {
    fid = 123;
    _ftype = apache::thrift::protocol::T_LIST;
  }
}

void swap(Struct0& a, Struct0& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.field96, b.field96);
  swap(a.field97, b.field97);
  swap(a.field98, b.field98);
  swap(a.field99, b.field99);
  swap(a.field100, b.field100);
  swap(a.field101, b.field101);
  swap(a.field102, b.field102);
  swap(a.field103, b.field103);
  swap(a.field104, b.field104);
  swap(a.field105, b.field105);
  swap(a.field106, b.field106);
  swap(a.field107, b.field107);
  swap(a.field108, b.field108);
  swap(a.field109, b.field109);
  swap(a.field110, b.field110);
  swap(a.field111, b.field111);
  swap(a.field112, b.field112);
  swap(a.field113, b.field113);
  swap(a.field114, b.field114);
  swap(a.field115, b.field115);
  swap(a.field116, b.field116);
  swap(a.field117, b.field117);
  swap(a.field118, b.field118);
  swap(a.field119, b.field119);
  swap(a.field120, b.field120);
  swap(a.field121, b.field121);
  swap(a.field122, b.field122);
  swap(a.field123, b.field123);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct0::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct0::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct0::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct0::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct0::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct0::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct0::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct0::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct1::__clear() {
  // clear all fields
  field1.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field2);
  field3 = 0;
  field4 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field5.clear();
  field6 = 0;
  field7.clear();
  field8 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field9.clear();
  field10 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field11);
  field12 = 0;
  field13.clear();
  field14.clear();
  field15.clear();
  field16 = 0;
  __isset.__clear();
}

bool Struct1::operator==(const Struct1& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field4, rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  return true;
}

const std::set<double>& Struct1::get_field1() const& {
  return field1;
}

std::set<double> Struct1::get_field1() && {
  return std::move(field1);
}

const  ::cpp2::Struct0& Struct1::get_field2() const& {
  return field2;
}

 ::cpp2::Struct0 Struct1::get_field2() && {
  return std::move(field2);
}

const std::set<bool>& Struct1::get_field5() const& {
  return field5;
}

std::set<bool> Struct1::get_field5() && {
  return std::move(field5);
}

const std::map<int16_t, int8_t>& Struct1::get_field7() const& {
  return field7;
}

std::map<int16_t, int8_t> Struct1::get_field7() && {
  return std::move(field7);
}

const std::map<int32_t, std::string>& Struct1::get_field9() const& {
  return field9;
}

std::map<int32_t, std::string> Struct1::get_field9() && {
  return std::move(field9);
}

const  ::cpp2::Struct0& Struct1::get_field11() const& {
  return field11;
}

 ::cpp2::Struct0 Struct1::get_field11() && {
  return std::move(field11);
}

const std::set<int8_t>& Struct1::get_field13() const& {
  return field13;
}

std::set<int8_t> Struct1::get_field13() && {
  return std::move(field13);
}

const std::vector<std::vector<bool>>& Struct1::get_field14() const& {
  return field14;
}

std::vector<std::vector<bool>> Struct1::get_field14() && {
  return std::move(field14);
}

const std::map<int16_t, int64_t>& Struct1::get_field15() const& {
  return field15;
}

std::map<int16_t, int64_t> Struct1::get_field15() && {
  return std::move(field15);
}

void Struct1::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_I64;
  }
}

void swap(Struct1& a, Struct1& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct1::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct1::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct1::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct1::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct1::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct1::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct1::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct1::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct2::__clear() {
  // clear all fields
  field1 = 0;
  field2 = 0;
  field3 = 0;
  field4 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field5.clear();
  field6.clear();
  field7.clear();
  field8.clear();
  field9.clear();
  field10 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field11);
  field12 = 0;
  field13 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field14);
  field15 = 0;
  field16 = 0;
  field17 = 0;
  field18.clear();
  field19.clear();
  field20.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field21);
  field22 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field23 = 0;
  field24.clear();
  field25 = 0;
  field26 = 0;
  field27.clear();
  field28.clear();
  field29.clear();
  field30 = 0;
  field31 = 0;
  field32 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field33.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field34);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field35);
  field36 = 0;
  field37.clear();
  field38 = 0;
  field39 = 0;
  field40 = 0;
  field41 = 0;
  field42 = 0;
  field43.clear();
  field44 = 0;
  field45.clear();
  field46 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field47.clear();
  field48 = 0;
  field49.clear();
  field50 = 0;
  field51.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field52);
  field53.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field54);
  field55 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field56 = 0;
  field57.clear();
  field58.clear();
  field59.clear();
  field60 = 0;
  field61 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field62.clear();
  field63 = 0;
  field64.clear();
  field65.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field66);
  field67.clear();
  field68.clear();
  field69.clear();
  field70.clear();
  field71.clear();
  field72 = 0;
  field73 = 0;
  field74.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field75);
  field76.clear();
  field77 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field78 = 0;
  field79.clear();
  field80.clear();
  field81 = 0;
  field82.clear();
  field83 = 0;
  field84.clear();
  field85 = 0;
  field86 = 0;
  field87 = 0;
  field88 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field89.clear();
  field90 = 0;
  field91.clear();
  field92.clear();
  field93.clear();
  field94.clear();
  field95.clear();
  field96.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field97);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field98);
  field99 = 0;
  field100.clear();
  field101.clear();
  field102.clear();
  field103 = 0;
  field104 = 0;
  field105.clear();
  field106 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field107);
  field108 = 0;
  field109 = 0;
  field110 = 0;
  field111 = 0;
  field112 = 0;
  field113 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field114);
  field115.clear();
  field116.clear();
  field117 = 0;
  field118.clear();
  field119 = 0;
  field120 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field121 = 0;
  field122.clear();
  field123.clear();
  field124 = 0;
  field125 = 0;
  field126.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field127);
  field128 = 0;
  field129.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field130);
  field131 = 0;
  field132 = 0;
  field133 = 0;
  field134 = 0;
  field135.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field136);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field137);
  field138 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field139);
  field140.clear();
  field141 = 0;
  field142.clear();
  field143 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field144 = 0;
  __isset.__clear();
}

bool Struct2::operator==(const Struct2& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field10, rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field46, rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field55, rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!((field83 == rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  if (!((field85 == rhs.field85))) {
    return false;
  }
  if (!((field86 == rhs.field86))) {
    return false;
  }
  if (!((field87 == rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!((field89 == rhs.field89))) {
    return false;
  }
  if (!((field90 == rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!((field92 == rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!((field94 == rhs.field94))) {
    return false;
  }
  if (!((field95 == rhs.field95))) {
    return false;
  }
  if (!((field96 == rhs.field96))) {
    return false;
  }
  if (!((field97 == rhs.field97))) {
    return false;
  }
  if (!((field98 == rhs.field98))) {
    return false;
  }
  if (!((field99 == rhs.field99))) {
    return false;
  }
  if (!((field100 == rhs.field100))) {
    return false;
  }
  if (!((field101 == rhs.field101))) {
    return false;
  }
  if (!((field102 == rhs.field102))) {
    return false;
  }
  if (!((field103 == rhs.field103))) {
    return false;
  }
  if (!((field104 == rhs.field104))) {
    return false;
  }
  if (!((field105 == rhs.field105))) {
    return false;
  }
  if (!((field106 == rhs.field106))) {
    return false;
  }
  if (!((field107 == rhs.field107))) {
    return false;
  }
  if (!((field108 == rhs.field108))) {
    return false;
  }
  if (!((field109 == rhs.field109))) {
    return false;
  }
  if (!((field110 == rhs.field110))) {
    return false;
  }
  if (!((field111 == rhs.field111))) {
    return false;
  }
  if (!((field112 == rhs.field112))) {
    return false;
  }
  if (!((field113 == rhs.field113))) {
    return false;
  }
  if (!((field114 == rhs.field114))) {
    return false;
  }
  if (!((field115 == rhs.field115))) {
    return false;
  }
  if (!((field116 == rhs.field116))) {
    return false;
  }
  if (!((field117 == rhs.field117))) {
    return false;
  }
  if (!((field118 == rhs.field118))) {
    return false;
  }
  if (!((field119 == rhs.field119))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field120, rhs.field120))) {
    return false;
  }
  if (!((field121 == rhs.field121))) {
    return false;
  }
  if (!((field122 == rhs.field122))) {
    return false;
  }
  if (!((field123 == rhs.field123))) {
    return false;
  }
  if (!((field124 == rhs.field124))) {
    return false;
  }
  if (!((field125 == rhs.field125))) {
    return false;
  }
  if (!((field126 == rhs.field126))) {
    return false;
  }
  if (!((field127 == rhs.field127))) {
    return false;
  }
  if (!((field128 == rhs.field128))) {
    return false;
  }
  if (!((field129 == rhs.field129))) {
    return false;
  }
  if (!((field130 == rhs.field130))) {
    return false;
  }
  if (!((field131 == rhs.field131))) {
    return false;
  }
  if (!((field132 == rhs.field132))) {
    return false;
  }
  if (!((field133 == rhs.field133))) {
    return false;
  }
  if (!((field134 == rhs.field134))) {
    return false;
  }
  if (!((field135 == rhs.field135))) {
    return false;
  }
  if (!((field136 == rhs.field136))) {
    return false;
  }
  if (!((field137 == rhs.field137))) {
    return false;
  }
  if (!((field138 == rhs.field138))) {
    return false;
  }
  if (!((field139 == rhs.field139))) {
    return false;
  }
  if (!((field140 == rhs.field140))) {
    return false;
  }
  if (!((field141 == rhs.field141))) {
    return false;
  }
  if (!((field142 == rhs.field142))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field143, rhs.field143))) {
    return false;
  }
  if (!((field144 == rhs.field144))) {
    return false;
  }
  return true;
}

const std::map<std::set<int16_t>, std::vector<std::set<bool>>>& Struct2::get_field5() const& {
  return field5;
}

std::map<std::set<int16_t>, std::vector<std::set<bool>>> Struct2::get_field5() && {
  return std::move(field5);
}

const std::vector<double>& Struct2::get_field6() const& {
  return field6;
}

std::vector<double> Struct2::get_field6() && {
  return std::move(field6);
}

const std::set<int8_t>& Struct2::get_field7() const& {
  return field7;
}

std::set<int8_t> Struct2::get_field7() && {
  return std::move(field7);
}

const std::map<double, std::string>& Struct2::get_field8() const& {
  return field8;
}

std::map<double, std::string> Struct2::get_field8() && {
  return std::move(field8);
}

const std::map<int32_t, float>& Struct2::get_field9() const& {
  return field9;
}

std::map<int32_t, float> Struct2::get_field9() && {
  return std::move(field9);
}

const  ::cpp2::Struct0& Struct2::get_field11() const& {
  return field11;
}

 ::cpp2::Struct0 Struct2::get_field11() && {
  return std::move(field11);
}

const  ::cpp2::Struct0& Struct2::get_field14() const& {
  return field14;
}

 ::cpp2::Struct0 Struct2::get_field14() && {
  return std::move(field14);
}

const std::set<bool>& Struct2::get_field18() const& {
  return field18;
}

std::set<bool> Struct2::get_field18() && {
  return std::move(field18);
}

const std::vector<int8_t>& Struct2::get_field19() const& {
  return field19;
}

std::vector<int8_t> Struct2::get_field19() && {
  return std::move(field19);
}

const std::vector<std::string>& Struct2::get_field20() const& {
  return field20;
}

std::vector<std::string> Struct2::get_field20() && {
  return std::move(field20);
}

const  ::cpp2::Struct0& Struct2::get_field21() const& {
  return field21;
}

 ::cpp2::Struct0 Struct2::get_field21() && {
  return std::move(field21);
}

const std::vector<int16_t>& Struct2::get_field24() const& {
  return field24;
}

std::vector<int16_t> Struct2::get_field24() && {
  return std::move(field24);
}

const std::set<int64_t>& Struct2::get_field27() const& {
  return field27;
}

std::set<int64_t> Struct2::get_field27() && {
  return std::move(field27);
}

const std::vector<double>& Struct2::get_field28() const& {
  return field28;
}

std::vector<double> Struct2::get_field28() && {
  return std::move(field28);
}

const std::vector<float>& Struct2::get_field29() const& {
  return field29;
}

std::vector<float> Struct2::get_field29() && {
  return std::move(field29);
}

const std::vector<int8_t>& Struct2::get_field33() const& {
  return field33;
}

std::vector<int8_t> Struct2::get_field33() && {
  return std::move(field33);
}

const  ::cpp2::Struct0& Struct2::get_field34() const& {
  return field34;
}

 ::cpp2::Struct0 Struct2::get_field34() && {
  return std::move(field34);
}

const  ::cpp2::Struct1& Struct2::get_field35() const& {
  return field35;
}

 ::cpp2::Struct1 Struct2::get_field35() && {
  return std::move(field35);
}

const std::vector<int16_t>& Struct2::get_field37() const& {
  return field37;
}

std::vector<int16_t> Struct2::get_field37() && {
  return std::move(field37);
}

const std::map< ::cpp2::Struct1, float>& Struct2::get_field43() const& {
  return field43;
}

std::map< ::cpp2::Struct1, float> Struct2::get_field43() && {
  return std::move(field43);
}

const std::set<std::string>& Struct2::get_field45() const& {
  return field45;
}

std::set<std::string> Struct2::get_field45() && {
  return std::move(field45);
}

const std::set<std::vector<int8_t>>& Struct2::get_field47() const& {
  return field47;
}

std::set<std::vector<int8_t>> Struct2::get_field47() && {
  return std::move(field47);
}

const std::set<int32_t>& Struct2::get_field49() const& {
  return field49;
}

std::set<int32_t> Struct2::get_field49() && {
  return std::move(field49);
}

const std::set<int16_t>& Struct2::get_field51() const& {
  return field51;
}

std::set<int16_t> Struct2::get_field51() && {
  return std::move(field51);
}

const  ::cpp2::Struct0& Struct2::get_field52() const& {
  return field52;
}

 ::cpp2::Struct0 Struct2::get_field52() && {
  return std::move(field52);
}

const std::vector<bool>& Struct2::get_field53() const& {
  return field53;
}

std::vector<bool> Struct2::get_field53() && {
  return std::move(field53);
}

const  ::cpp2::Struct0& Struct2::get_field54() const& {
  return field54;
}

 ::cpp2::Struct0 Struct2::get_field54() && {
  return std::move(field54);
}

const std::set<double>& Struct2::get_field57() const& {
  return field57;
}

std::set<double> Struct2::get_field57() && {
  return std::move(field57);
}

const std::vector<int32_t>& Struct2::get_field58() const& {
  return field58;
}

std::vector<int32_t> Struct2::get_field58() && {
  return std::move(field58);
}

const std::vector<bool>& Struct2::get_field59() const& {
  return field59;
}

std::vector<bool> Struct2::get_field59() && {
  return std::move(field59);
}

const std::vector<bool>& Struct2::get_field62() const& {
  return field62;
}

std::vector<bool> Struct2::get_field62() && {
  return std::move(field62);
}

const std::vector<float>& Struct2::get_field64() const& {
  return field64;
}

std::vector<float> Struct2::get_field64() && {
  return std::move(field64);
}

const std::map<std::map< ::cpp2::Struct0, bool>, int32_t>& Struct2::get_field65() const& {
  return field65;
}

std::map<std::map< ::cpp2::Struct0, bool>, int32_t> Struct2::get_field65() && {
  return std::move(field65);
}

const  ::cpp2::Struct1& Struct2::get_field66() const& {
  return field66;
}

 ::cpp2::Struct1 Struct2::get_field66() && {
  return std::move(field66);
}

const std::vector< ::cpp2::Struct0>& Struct2::get_field67() const& {
  return field67;
}

std::vector< ::cpp2::Struct0> Struct2::get_field67() && {
  return std::move(field67);
}

const std::vector<int64_t>& Struct2::get_field68() const& {
  return field68;
}

std::vector<int64_t> Struct2::get_field68() && {
  return std::move(field68);
}

const std::set<std::string>& Struct2::get_field69() const& {
  return field69;
}

std::set<std::string> Struct2::get_field69() && {
  return std::move(field69);
}

const std::map<double, int64_t>& Struct2::get_field70() const& {
  return field70;
}

std::map<double, int64_t> Struct2::get_field70() && {
  return std::move(field70);
}

const std::map<float, std::vector<bool>>& Struct2::get_field71() const& {
  return field71;
}

std::map<float, std::vector<bool>> Struct2::get_field71() && {
  return std::move(field71);
}

const std::vector<std::vector<int64_t>>& Struct2::get_field74() const& {
  return field74;
}

std::vector<std::vector<int64_t>> Struct2::get_field74() && {
  return std::move(field74);
}

const  ::cpp2::Struct1& Struct2::get_field75() const& {
  return field75;
}

 ::cpp2::Struct1 Struct2::get_field75() && {
  return std::move(field75);
}

const std::vector<int64_t>& Struct2::get_field76() const& {
  return field76;
}

std::vector<int64_t> Struct2::get_field76() && {
  return std::move(field76);
}

const std::map<int16_t, int16_t>& Struct2::get_field79() const& {
  return field79;
}

std::map<int16_t, int16_t> Struct2::get_field79() && {
  return std::move(field79);
}

const std::vector<int32_t>& Struct2::get_field80() const& {
  return field80;
}

std::vector<int32_t> Struct2::get_field80() && {
  return std::move(field80);
}

const std::map<std::string, float>& Struct2::get_field82() const& {
  return field82;
}

std::map<std::string, float> Struct2::get_field82() && {
  return std::move(field82);
}

const std::set<std::map<bool, std::string>>& Struct2::get_field84() const& {
  return field84;
}

std::set<std::map<bool, std::string>> Struct2::get_field84() && {
  return std::move(field84);
}

const std::map<bool, std::string>& Struct2::get_field89() const& {
  return field89;
}

std::map<bool, std::string> Struct2::get_field89() && {
  return std::move(field89);
}

const std::set<std::string>& Struct2::get_field91() const& {
  return field91;
}

std::set<std::string> Struct2::get_field91() && {
  return std::move(field91);
}

const std::map<std::vector<int32_t>, int8_t>& Struct2::get_field92() const& {
  return field92;
}

std::map<std::vector<int32_t>, int8_t> Struct2::get_field92() && {
  return std::move(field92);
}

const std::set<int64_t>& Struct2::get_field93() const& {
  return field93;
}

std::set<int64_t> Struct2::get_field93() && {
  return std::move(field93);
}

const std::map<int16_t, std::set<int32_t>>& Struct2::get_field94() const& {
  return field94;
}

std::map<int16_t, std::set<int32_t>> Struct2::get_field94() && {
  return std::move(field94);
}

const std::set<std::string>& Struct2::get_field95() const& {
  return field95;
}

std::set<std::string> Struct2::get_field95() && {
  return std::move(field95);
}

const std::map<float, bool>& Struct2::get_field96() const& {
  return field96;
}

std::map<float, bool> Struct2::get_field96() && {
  return std::move(field96);
}

const  ::cpp2::Struct0& Struct2::get_field97() const& {
  return field97;
}

 ::cpp2::Struct0 Struct2::get_field97() && {
  return std::move(field97);
}

const  ::cpp2::Struct0& Struct2::get_field98() const& {
  return field98;
}

 ::cpp2::Struct0 Struct2::get_field98() && {
  return std::move(field98);
}

const std::vector<float>& Struct2::get_field100() const& {
  return field100;
}

std::vector<float> Struct2::get_field100() && {
  return std::move(field100);
}

const std::set< ::cpp2::Struct0>& Struct2::get_field101() const& {
  return field101;
}

std::set< ::cpp2::Struct0> Struct2::get_field101() && {
  return std::move(field101);
}

const std::map<bool, int32_t>& Struct2::get_field102() const& {
  return field102;
}

std::map<bool, int32_t> Struct2::get_field102() && {
  return std::move(field102);
}

const std::vector<float>& Struct2::get_field105() const& {
  return field105;
}

std::vector<float> Struct2::get_field105() && {
  return std::move(field105);
}

const  ::cpp2::Struct0& Struct2::get_field107() const& {
  return field107;
}

 ::cpp2::Struct0 Struct2::get_field107() && {
  return std::move(field107);
}

const  ::cpp2::Struct0& Struct2::get_field114() const& {
  return field114;
}

 ::cpp2::Struct0 Struct2::get_field114() && {
  return std::move(field114);
}

const std::set<int64_t>& Struct2::get_field115() const& {
  return field115;
}

std::set<int64_t> Struct2::get_field115() && {
  return std::move(field115);
}

const std::set<int8_t>& Struct2::get_field116() const& {
  return field116;
}

std::set<int8_t> Struct2::get_field116() && {
  return std::move(field116);
}

const std::map<double, std::set<int32_t>>& Struct2::get_field118() const& {
  return field118;
}

std::map<double, std::set<int32_t>> Struct2::get_field118() && {
  return std::move(field118);
}

const std::vector< ::cpp2::Struct1>& Struct2::get_field122() const& {
  return field122;
}

std::vector< ::cpp2::Struct1> Struct2::get_field122() && {
  return std::move(field122);
}

const std::vector<std::string>& Struct2::get_field123() const& {
  return field123;
}

std::vector<std::string> Struct2::get_field123() && {
  return std::move(field123);
}

const std::map<bool, std::string>& Struct2::get_field126() const& {
  return field126;
}

std::map<bool, std::string> Struct2::get_field126() && {
  return std::move(field126);
}

const  ::cpp2::Struct1& Struct2::get_field127() const& {
  return field127;
}

 ::cpp2::Struct1 Struct2::get_field127() && {
  return std::move(field127);
}

const std::vector<std::map<bool, float>>& Struct2::get_field129() const& {
  return field129;
}

std::vector<std::map<bool, float>> Struct2::get_field129() && {
  return std::move(field129);
}

const  ::cpp2::Struct1& Struct2::get_field130() const& {
  return field130;
}

 ::cpp2::Struct1 Struct2::get_field130() && {
  return std::move(field130);
}

const std::map<double, std::string>& Struct2::get_field135() const& {
  return field135;
}

std::map<double, std::string> Struct2::get_field135() && {
  return std::move(field135);
}

const  ::cpp2::Struct1& Struct2::get_field136() const& {
  return field136;
}

 ::cpp2::Struct1 Struct2::get_field136() && {
  return std::move(field136);
}

const  ::cpp2::Struct0& Struct2::get_field137() const& {
  return field137;
}

 ::cpp2::Struct0 Struct2::get_field137() && {
  return std::move(field137);
}

const  ::cpp2::Struct0& Struct2::get_field139() const& {
  return field139;
}

 ::cpp2::Struct0 Struct2::get_field139() && {
  return std::move(field139);
}

const std::set<int8_t>& Struct2::get_field140() const& {
  return field140;
}

std::set<int8_t> Struct2::get_field140() && {
  return std::move(field140);
}

const std::map<int64_t, int64_t>& Struct2::get_field142() const& {
  return field142;
}

std::map<int64_t, int64_t> Struct2::get_field142() && {
  return std::move(field142);
}

void Struct2::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field96") {
    fid = 96;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field97") {
    fid = 97;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field98") {
    fid = 98;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field99") {
    fid = 99;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field100") {
    fid = 100;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field101") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field102") {
    fid = 102;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field103") {
    fid = 103;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field104") {
    fid = 104;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field105") {
    fid = 105;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field106") {
    fid = 106;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field107") {
    fid = 107;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field108") {
    fid = 108;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field109") {
    fid = 109;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field110") {
    fid = 110;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field111") {
    fid = 111;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field112") {
    fid = 112;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field113") {
    fid = 113;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field114") {
    fid = 114;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field115") {
    fid = 115;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field116") {
    fid = 116;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field117") {
    fid = 117;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field118") {
    fid = 118;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field119") {
    fid = 119;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field120") {
    fid = 120;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field121") {
    fid = 121;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field122") {
    fid = 122;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field123") {
    fid = 123;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field124") {
    fid = 124;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field125") {
    fid = 125;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field126") {
    fid = 126;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field127") {
    fid = 127;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field128") {
    fid = 128;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field129") {
    fid = 129;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field130") {
    fid = 130;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field131") {
    fid = 131;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field132") {
    fid = 132;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field133") {
    fid = 133;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field134") {
    fid = 134;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field135") {
    fid = 135;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field136") {
    fid = 136;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field137") {
    fid = 137;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field138") {
    fid = 138;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field139") {
    fid = 139;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field140") {
    fid = 140;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field141") {
    fid = 141;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field142") {
    fid = 142;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field143") {
    fid = 143;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field144") {
    fid = 144;
    _ftype = apache::thrift::protocol::T_I16;
  }
}

void swap(Struct2& a, Struct2& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.field96, b.field96);
  swap(a.field97, b.field97);
  swap(a.field98, b.field98);
  swap(a.field99, b.field99);
  swap(a.field100, b.field100);
  swap(a.field101, b.field101);
  swap(a.field102, b.field102);
  swap(a.field103, b.field103);
  swap(a.field104, b.field104);
  swap(a.field105, b.field105);
  swap(a.field106, b.field106);
  swap(a.field107, b.field107);
  swap(a.field108, b.field108);
  swap(a.field109, b.field109);
  swap(a.field110, b.field110);
  swap(a.field111, b.field111);
  swap(a.field112, b.field112);
  swap(a.field113, b.field113);
  swap(a.field114, b.field114);
  swap(a.field115, b.field115);
  swap(a.field116, b.field116);
  swap(a.field117, b.field117);
  swap(a.field118, b.field118);
  swap(a.field119, b.field119);
  swap(a.field120, b.field120);
  swap(a.field121, b.field121);
  swap(a.field122, b.field122);
  swap(a.field123, b.field123);
  swap(a.field124, b.field124);
  swap(a.field125, b.field125);
  swap(a.field126, b.field126);
  swap(a.field127, b.field127);
  swap(a.field128, b.field128);
  swap(a.field129, b.field129);
  swap(a.field130, b.field130);
  swap(a.field131, b.field131);
  swap(a.field132, b.field132);
  swap(a.field133, b.field133);
  swap(a.field134, b.field134);
  swap(a.field135, b.field135);
  swap(a.field136, b.field136);
  swap(a.field137, b.field137);
  swap(a.field138, b.field138);
  swap(a.field139, b.field139);
  swap(a.field140, b.field140);
  swap(a.field141, b.field141);
  swap(a.field142, b.field142);
  swap(a.field143, b.field143);
  swap(a.field144, b.field144);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct2::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct2::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct2::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct2::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct2::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct2::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct2::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct2::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct3::__clear() {
  // clear all fields
  field1.clear();
  field2 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field3);
  field4.clear();
  field5.clear();
  field6 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field7);
  field8 = 0;
  field9.clear();
  field10.clear();
  field11.clear();
  field12.clear();
  field13 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field14);
  field15.clear();
  field16.clear();
  field17.clear();
  field18 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field19.clear();
  field20.clear();
  field21 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field22);
  field23 = 0;
  field24.clear();
  field25 = 0;
  field26 = 0;
  field27 = 0;
  field28.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field29);
  field30 = 0;
  field31.clear();
  field32.clear();
  field33 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field34);
  field35 = 0;
  field36 = 0;
  field37.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field38);
  field39 = 0;
  field40.clear();
  field41 = 0;
  field42.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field43);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field44);
  field45.clear();
  field46 = 0;
  field47 = 0;
  field48.clear();
  field49.clear();
  field50 = 0;
  field51 = 0;
  field52 = 0;
  field53.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field54);
  field55 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field56);
  field57 = 0;
  field58 = 0;
  field59 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field60 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field61);
  field62.clear();
  field63.clear();
  field64 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field65);
  field66.clear();
  field67 = 0;
  field68 = 0;
  field69 = 0;
  field70 = 0;
  field71 = 0;
  field72.clear();
  field73 = 0;
  field74 = 0;
  field75 = 0;
  field76 = 0;
  field77.clear();
  field78.clear();
  field79 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field80 = 0;
  field81 = 0;
  field82.clear();
  field83.clear();
  field84 = 0;
  field85.clear();
  field86 = 0;
  field87 = 0;
  field88 = 0;
  field89 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field90 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field91);
  field92.clear();
  field93 = 0;
  field94 = 0;
  field95.clear();
  field96.clear();
  field97.clear();
  field98.clear();
  field99 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field100);
  field101.clear();
  field102 = 0;
  field103 = 0;
  field104.clear();
  field105 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field106 = 0;
  field107 = 0;
  field108 = 0;
  field109 = 0;
  field110 = 0;
  field111.clear();
  field112 = 0;
  field113 = 0;
  field114 = 0;
  field115 = 0;
  field116.clear();
  field117 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field118);
  field119.clear();
  field120 = 0;
  field121 = 0;
  field122 = 0;
  field123 = 0;
  field124 = 0;
  field125.clear();
  field126 = 0;
  field127 = 0;
  field128 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field129);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field130);
  field131 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field132 = 0;
  field133.clear();
  field134 = 0;
  field135.clear();
  field136.clear();
  field137.clear();
  field138.clear();
  field139.clear();
  field140.clear();
  field141.clear();
  field142.clear();
  field143 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field144);
  field145 = 0;
  field146 = 0;
  field147 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field148.clear();
  field149.clear();
  field150.clear();
  field151.clear();
  field152.clear();
  field153 = 0;
  field154.clear();
  field155.clear();
  field156 = 0;
  field157.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field158);
  field159 = 0;
  field160 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field161);
  field162 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field163.clear();
  field164 = 0;
  field165 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field166);
  field167 = 0;
  field168 = 0;
  field169.clear();
  field170 = 0;
  field171.clear();
  field172 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field173.clear();
  field174 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field175 = 0;
  field176 = 0;
  field177 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field178.clear();
  field179.clear();
  field180 = 0;
  __isset.__clear();
}

bool Struct3::operator==(const Struct3& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field6, rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!((field83 == rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  if (!((field85 == rhs.field85))) {
    return false;
  }
  if (!((field86 == rhs.field86))) {
    return false;
  }
  if (!((field87 == rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!((field89 == rhs.field89))) {
    return false;
  }
  if (!((field90 == rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!((field92 == rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!((field94 == rhs.field94))) {
    return false;
  }
  if (!((field95 == rhs.field95))) {
    return false;
  }
  if (!((field96 == rhs.field96))) {
    return false;
  }
  if (!((field97 == rhs.field97))) {
    return false;
  }
  if (!((field98 == rhs.field98))) {
    return false;
  }
  if (!((field99 == rhs.field99))) {
    return false;
  }
  if (!((field100 == rhs.field100))) {
    return false;
  }
  if (!((field101 == rhs.field101))) {
    return false;
  }
  if (!((field102 == rhs.field102))) {
    return false;
  }
  if (!((field103 == rhs.field103))) {
    return false;
  }
  if (!((field104 == rhs.field104))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field105, rhs.field105))) {
    return false;
  }
  if (!((field106 == rhs.field106))) {
    return false;
  }
  if (!((field107 == rhs.field107))) {
    return false;
  }
  if (!((field108 == rhs.field108))) {
    return false;
  }
  if (!((field109 == rhs.field109))) {
    return false;
  }
  if (!((field110 == rhs.field110))) {
    return false;
  }
  if (!((field111 == rhs.field111))) {
    return false;
  }
  if (!((field112 == rhs.field112))) {
    return false;
  }
  if (!((field113 == rhs.field113))) {
    return false;
  }
  if (!((field114 == rhs.field114))) {
    return false;
  }
  if (!((field115 == rhs.field115))) {
    return false;
  }
  if (!((field116 == rhs.field116))) {
    return false;
  }
  if (!((field117 == rhs.field117))) {
    return false;
  }
  if (!((field118 == rhs.field118))) {
    return false;
  }
  if (!((field119 == rhs.field119))) {
    return false;
  }
  if (!((field120 == rhs.field120))) {
    return false;
  }
  if (!((field121 == rhs.field121))) {
    return false;
  }
  if (!((field122 == rhs.field122))) {
    return false;
  }
  if (!((field123 == rhs.field123))) {
    return false;
  }
  if (!((field124 == rhs.field124))) {
    return false;
  }
  if (!((field125 == rhs.field125))) {
    return false;
  }
  if (!((field126 == rhs.field126))) {
    return false;
  }
  if (!((field127 == rhs.field127))) {
    return false;
  }
  if (!((field128 == rhs.field128))) {
    return false;
  }
  if (!((field129 == rhs.field129))) {
    return false;
  }
  if (!((field130 == rhs.field130))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field131, rhs.field131))) {
    return false;
  }
  if (!((field132 == rhs.field132))) {
    return false;
  }
  if (!((field133 == rhs.field133))) {
    return false;
  }
  if (!((field134 == rhs.field134))) {
    return false;
  }
  if (!((field135 == rhs.field135))) {
    return false;
  }
  if (!((field136 == rhs.field136))) {
    return false;
  }
  if (!((field137 == rhs.field137))) {
    return false;
  }
  if (!((field138 == rhs.field138))) {
    return false;
  }
  if (!((field139 == rhs.field139))) {
    return false;
  }
  if (!((field140 == rhs.field140))) {
    return false;
  }
  if (!((field141 == rhs.field141))) {
    return false;
  }
  if (!((field142 == rhs.field142))) {
    return false;
  }
  if (!((field143 == rhs.field143))) {
    return false;
  }
  if (!((field144 == rhs.field144))) {
    return false;
  }
  if (!((field145 == rhs.field145))) {
    return false;
  }
  if (!((field146 == rhs.field146))) {
    return false;
  }
  if (!((field147 == rhs.field147))) {
    return false;
  }
  if (!((field148 == rhs.field148))) {
    return false;
  }
  if (!((field149 == rhs.field149))) {
    return false;
  }
  if (!((field150 == rhs.field150))) {
    return false;
  }
  if (!((field151 == rhs.field151))) {
    return false;
  }
  if (!((field152 == rhs.field152))) {
    return false;
  }
  if (!((field153 == rhs.field153))) {
    return false;
  }
  if (!((field154 == rhs.field154))) {
    return false;
  }
  if (!((field155 == rhs.field155))) {
    return false;
  }
  if (!((field156 == rhs.field156))) {
    return false;
  }
  if (!((field157 == rhs.field157))) {
    return false;
  }
  if (!((field158 == rhs.field158))) {
    return false;
  }
  if (!((field159 == rhs.field159))) {
    return false;
  }
  if (!((field160 == rhs.field160))) {
    return false;
  }
  if (!((field161 == rhs.field161))) {
    return false;
  }
  if (!((field162 == rhs.field162))) {
    return false;
  }
  if (!((field163 == rhs.field163))) {
    return false;
  }
  if (!((field164 == rhs.field164))) {
    return false;
  }
  if (!((field165 == rhs.field165))) {
    return false;
  }
  if (!((field166 == rhs.field166))) {
    return false;
  }
  if (!((field167 == rhs.field167))) {
    return false;
  }
  if (!((field168 == rhs.field168))) {
    return false;
  }
  if (!((field169 == rhs.field169))) {
    return false;
  }
  if (!((field170 == rhs.field170))) {
    return false;
  }
  if (!((field171 == rhs.field171))) {
    return false;
  }
  if (!((field172 == rhs.field172))) {
    return false;
  }
  if (!((field173 == rhs.field173))) {
    return false;
  }
  if (!((field174 == rhs.field174))) {
    return false;
  }
  if (!((field175 == rhs.field175))) {
    return false;
  }
  if (!((field176 == rhs.field176))) {
    return false;
  }
  if (!((field177 == rhs.field177))) {
    return false;
  }
  if (!((field178 == rhs.field178))) {
    return false;
  }
  if (!((field179 == rhs.field179))) {
    return false;
  }
  if (!((field180 == rhs.field180))) {
    return false;
  }
  return true;
}

const std::map<bool, float>& Struct3::get_field1() const& {
  return field1;
}

std::map<bool, float> Struct3::get_field1() && {
  return std::move(field1);
}

const  ::cpp2::Struct1& Struct3::get_field3() const& {
  return field3;
}

 ::cpp2::Struct1 Struct3::get_field3() && {
  return std::move(field3);
}

const std::map<bool, double>& Struct3::get_field4() const& {
  return field4;
}

std::map<bool, double> Struct3::get_field4() && {
  return std::move(field4);
}

const std::map<std::vector<int8_t>, int64_t>& Struct3::get_field5() const& {
  return field5;
}

std::map<std::vector<int8_t>, int64_t> Struct3::get_field5() && {
  return std::move(field5);
}

const  ::cpp2::Struct1& Struct3::get_field7() const& {
  return field7;
}

 ::cpp2::Struct1 Struct3::get_field7() && {
  return std::move(field7);
}

const std::vector<int32_t>& Struct3::get_field9() const& {
  return field9;
}

std::vector<int32_t> Struct3::get_field9() && {
  return std::move(field9);
}

const std::set<std::vector<std::string>>& Struct3::get_field10() const& {
  return field10;
}

std::set<std::vector<std::string>> Struct3::get_field10() && {
  return std::move(field10);
}

const std::vector<std::set<int64_t>>& Struct3::get_field11() const& {
  return field11;
}

std::vector<std::set<int64_t>> Struct3::get_field11() && {
  return std::move(field11);
}

const std::set<std::map<std::string, double>>& Struct3::get_field12() const& {
  return field12;
}

std::set<std::map<std::string, double>> Struct3::get_field12() && {
  return std::move(field12);
}

const  ::cpp2::Struct0& Struct3::get_field14() const& {
  return field14;
}

 ::cpp2::Struct0 Struct3::get_field14() && {
  return std::move(field14);
}

const std::vector<std::set<std::map<int8_t, std::string>>>& Struct3::get_field15() const& {
  return field15;
}

std::vector<std::set<std::map<int8_t, std::string>>> Struct3::get_field15() && {
  return std::move(field15);
}

const std::map< ::cpp2::Struct0, std::string>& Struct3::get_field16() const& {
  return field16;
}

std::map< ::cpp2::Struct0, std::string> Struct3::get_field16() && {
  return std::move(field16);
}

const std::vector< ::cpp2::Struct1>& Struct3::get_field17() const& {
  return field17;
}

std::vector< ::cpp2::Struct1> Struct3::get_field17() && {
  return std::move(field17);
}

const std::map<bool, bool>& Struct3::get_field19() const& {
  return field19;
}

std::map<bool, bool> Struct3::get_field19() && {
  return std::move(field19);
}

const std::vector<bool>& Struct3::get_field20() const& {
  return field20;
}

std::vector<bool> Struct3::get_field20() && {
  return std::move(field20);
}

const  ::cpp2::Struct0& Struct3::get_field22() const& {
  return field22;
}

 ::cpp2::Struct0 Struct3::get_field22() && {
  return std::move(field22);
}

const std::set<int8_t>& Struct3::get_field24() const& {
  return field24;
}

std::set<int8_t> Struct3::get_field24() && {
  return std::move(field24);
}

const std::set< ::cpp2::Struct0>& Struct3::get_field28() const& {
  return field28;
}

std::set< ::cpp2::Struct0> Struct3::get_field28() && {
  return std::move(field28);
}

const  ::cpp2::Struct2& Struct3::get_field29() const& {
  return field29;
}

 ::cpp2::Struct2 Struct3::get_field29() && {
  return std::move(field29);
}

const std::set<std::vector<bool>>& Struct3::get_field31() const& {
  return field31;
}

std::set<std::vector<bool>> Struct3::get_field31() && {
  return std::move(field31);
}

const std::vector<std::vector<int16_t>>& Struct3::get_field32() const& {
  return field32;
}

std::vector<std::vector<int16_t>> Struct3::get_field32() && {
  return std::move(field32);
}

const  ::cpp2::Struct1& Struct3::get_field34() const& {
  return field34;
}

 ::cpp2::Struct1 Struct3::get_field34() && {
  return std::move(field34);
}

const std::set<float>& Struct3::get_field37() const& {
  return field37;
}

std::set<float> Struct3::get_field37() && {
  return std::move(field37);
}

const  ::cpp2::Struct0& Struct3::get_field38() const& {
  return field38;
}

 ::cpp2::Struct0 Struct3::get_field38() && {
  return std::move(field38);
}

const std::vector<int8_t>& Struct3::get_field40() const& {
  return field40;
}

std::vector<int8_t> Struct3::get_field40() && {
  return std::move(field40);
}

const std::set<std::string>& Struct3::get_field42() const& {
  return field42;
}

std::set<std::string> Struct3::get_field42() && {
  return std::move(field42);
}

const  ::cpp2::Struct1& Struct3::get_field43() const& {
  return field43;
}

 ::cpp2::Struct1 Struct3::get_field43() && {
  return std::move(field43);
}

const  ::cpp2::Struct0& Struct3::get_field44() const& {
  return field44;
}

 ::cpp2::Struct0 Struct3::get_field44() && {
  return std::move(field44);
}

const std::set<int64_t>& Struct3::get_field45() const& {
  return field45;
}

std::set<int64_t> Struct3::get_field45() && {
  return std::move(field45);
}

const std::vector<std::string>& Struct3::get_field48() const& {
  return field48;
}

std::vector<std::string> Struct3::get_field48() && {
  return std::move(field48);
}

const std::map<int16_t, std::set<int32_t>>& Struct3::get_field49() const& {
  return field49;
}

std::map<int16_t, std::set<int32_t>> Struct3::get_field49() && {
  return std::move(field49);
}

const std::vector<int16_t>& Struct3::get_field53() const& {
  return field53;
}

std::vector<int16_t> Struct3::get_field53() && {
  return std::move(field53);
}

const  ::cpp2::Struct0& Struct3::get_field54() const& {
  return field54;
}

 ::cpp2::Struct0 Struct3::get_field54() && {
  return std::move(field54);
}

const  ::cpp2::Struct1& Struct3::get_field56() const& {
  return field56;
}

 ::cpp2::Struct1 Struct3::get_field56() && {
  return std::move(field56);
}

const  ::cpp2::Struct0& Struct3::get_field61() const& {
  return field61;
}

 ::cpp2::Struct0 Struct3::get_field61() && {
  return std::move(field61);
}

const std::set<float>& Struct3::get_field62() const& {
  return field62;
}

std::set<float> Struct3::get_field62() && {
  return std::move(field62);
}

const std::set<std::map<int16_t, int64_t>>& Struct3::get_field63() const& {
  return field63;
}

std::set<std::map<int16_t, int64_t>> Struct3::get_field63() && {
  return std::move(field63);
}

const  ::cpp2::Struct1& Struct3::get_field65() const& {
  return field65;
}

 ::cpp2::Struct1 Struct3::get_field65() && {
  return std::move(field65);
}

const std::vector<std::string>& Struct3::get_field66() const& {
  return field66;
}

std::vector<std::string> Struct3::get_field66() && {
  return std::move(field66);
}

const std::map<std::map<std::string, int8_t>, std::string>& Struct3::get_field72() const& {
  return field72;
}

std::map<std::map<std::string, int8_t>, std::string> Struct3::get_field72() && {
  return std::move(field72);
}

const std::vector<std::string>& Struct3::get_field77() const& {
  return field77;
}

std::vector<std::string> Struct3::get_field77() && {
  return std::move(field77);
}

const std::vector<std::string>& Struct3::get_field78() const& {
  return field78;
}

std::vector<std::string> Struct3::get_field78() && {
  return std::move(field78);
}

const std::map<double, int64_t>& Struct3::get_field82() const& {
  return field82;
}

std::map<double, int64_t> Struct3::get_field82() && {
  return std::move(field82);
}

const std::map<int64_t, std::vector<double>>& Struct3::get_field83() const& {
  return field83;
}

std::map<int64_t, std::vector<double>> Struct3::get_field83() && {
  return std::move(field83);
}

const std::vector<bool>& Struct3::get_field85() const& {
  return field85;
}

std::vector<bool> Struct3::get_field85() && {
  return std::move(field85);
}

const  ::cpp2::Struct1& Struct3::get_field91() const& {
  return field91;
}

 ::cpp2::Struct1 Struct3::get_field91() && {
  return std::move(field91);
}

const std::set< ::cpp2::Struct2>& Struct3::get_field92() const& {
  return field92;
}

std::set< ::cpp2::Struct2> Struct3::get_field92() && {
  return std::move(field92);
}

const std::vector<double>& Struct3::get_field95() const& {
  return field95;
}

std::vector<double> Struct3::get_field95() && {
  return std::move(field95);
}

const std::map<int64_t, std::map<double, int64_t>>& Struct3::get_field96() const& {
  return field96;
}

std::map<int64_t, std::map<double, int64_t>> Struct3::get_field96() && {
  return std::move(field96);
}

const std::vector<std::string>& Struct3::get_field97() const& {
  return field97;
}

std::vector<std::string> Struct3::get_field97() && {
  return std::move(field97);
}

const std::map<int8_t, std::string>& Struct3::get_field98() const& {
  return field98;
}

std::map<int8_t, std::string> Struct3::get_field98() && {
  return std::move(field98);
}

const  ::cpp2::Struct2& Struct3::get_field100() const& {
  return field100;
}

 ::cpp2::Struct2 Struct3::get_field100() && {
  return std::move(field100);
}

const std::vector<double>& Struct3::get_field101() const& {
  return field101;
}

std::vector<double> Struct3::get_field101() && {
  return std::move(field101);
}

const std::vector<double>& Struct3::get_field104() const& {
  return field104;
}

std::vector<double> Struct3::get_field104() && {
  return std::move(field104);
}

const std::map<int8_t,  ::cpp2::Struct0>& Struct3::get_field111() const& {
  return field111;
}

std::map<int8_t,  ::cpp2::Struct0> Struct3::get_field111() && {
  return std::move(field111);
}

const std::map<bool, int16_t>& Struct3::get_field116() const& {
  return field116;
}

std::map<bool, int16_t> Struct3::get_field116() && {
  return std::move(field116);
}

const  ::cpp2::Struct0& Struct3::get_field118() const& {
  return field118;
}

 ::cpp2::Struct0 Struct3::get_field118() && {
  return std::move(field118);
}

const std::map<std::string, int32_t>& Struct3::get_field119() const& {
  return field119;
}

std::map<std::string, int32_t> Struct3::get_field119() && {
  return std::move(field119);
}

const std::set<int64_t>& Struct3::get_field125() const& {
  return field125;
}

std::set<int64_t> Struct3::get_field125() && {
  return std::move(field125);
}

const  ::cpp2::Struct1& Struct3::get_field129() const& {
  return field129;
}

 ::cpp2::Struct1 Struct3::get_field129() && {
  return std::move(field129);
}

const  ::cpp2::Struct0& Struct3::get_field130() const& {
  return field130;
}

 ::cpp2::Struct0 Struct3::get_field130() && {
  return std::move(field130);
}

const std::vector<std::string>& Struct3::get_field133() const& {
  return field133;
}

std::vector<std::string> Struct3::get_field133() && {
  return std::move(field133);
}

const std::vector<double>& Struct3::get_field135() const& {
  return field135;
}

std::vector<double> Struct3::get_field135() && {
  return std::move(field135);
}

const std::set<int16_t>& Struct3::get_field136() const& {
  return field136;
}

std::set<int16_t> Struct3::get_field136() && {
  return std::move(field136);
}

const std::set<float>& Struct3::get_field137() const& {
  return field137;
}

std::set<float> Struct3::get_field137() && {
  return std::move(field137);
}

const std::map<float, std::string>& Struct3::get_field138() const& {
  return field138;
}

std::map<float, std::string> Struct3::get_field138() && {
  return std::move(field138);
}

const std::map<bool,  ::cpp2::Struct1>& Struct3::get_field139() const& {
  return field139;
}

std::map<bool,  ::cpp2::Struct1> Struct3::get_field139() && {
  return std::move(field139);
}

const std::set<int8_t>& Struct3::get_field140() const& {
  return field140;
}

std::set<int8_t> Struct3::get_field140() && {
  return std::move(field140);
}

const std::set<bool>& Struct3::get_field141() const& {
  return field141;
}

std::set<bool> Struct3::get_field141() && {
  return std::move(field141);
}

const std::set<float>& Struct3::get_field142() const& {
  return field142;
}

std::set<float> Struct3::get_field142() && {
  return std::move(field142);
}

const  ::cpp2::Struct2& Struct3::get_field144() const& {
  return field144;
}

 ::cpp2::Struct2 Struct3::get_field144() && {
  return std::move(field144);
}

const std::set<std::vector<int8_t>>& Struct3::get_field148() const& {
  return field148;
}

std::set<std::vector<int8_t>> Struct3::get_field148() && {
  return std::move(field148);
}

const std::vector<int16_t>& Struct3::get_field149() const& {
  return field149;
}

std::vector<int16_t> Struct3::get_field149() && {
  return std::move(field149);
}

const std::map<std::string, double>& Struct3::get_field150() const& {
  return field150;
}

std::map<std::string, double> Struct3::get_field150() && {
  return std::move(field150);
}

const std::map<std::set<int32_t>, int16_t>& Struct3::get_field151() const& {
  return field151;
}

std::map<std::set<int32_t>, int16_t> Struct3::get_field151() && {
  return std::move(field151);
}

const std::vector<int8_t>& Struct3::get_field152() const& {
  return field152;
}

std::vector<int8_t> Struct3::get_field152() && {
  return std::move(field152);
}

const std::map<bool, int64_t>& Struct3::get_field154() const& {
  return field154;
}

std::map<bool, int64_t> Struct3::get_field154() && {
  return std::move(field154);
}

const std::vector< ::cpp2::Struct1>& Struct3::get_field155() const& {
  return field155;
}

std::vector< ::cpp2::Struct1> Struct3::get_field155() && {
  return std::move(field155);
}

const std::map<int16_t, std::set<bool>>& Struct3::get_field157() const& {
  return field157;
}

std::map<int16_t, std::set<bool>> Struct3::get_field157() && {
  return std::move(field157);
}

const  ::cpp2::Struct1& Struct3::get_field158() const& {
  return field158;
}

 ::cpp2::Struct1 Struct3::get_field158() && {
  return std::move(field158);
}

const  ::cpp2::Struct2& Struct3::get_field161() const& {
  return field161;
}

 ::cpp2::Struct2 Struct3::get_field161() && {
  return std::move(field161);
}

const std::vector< ::cpp2::Struct1>& Struct3::get_field163() const& {
  return field163;
}

std::vector< ::cpp2::Struct1> Struct3::get_field163() && {
  return std::move(field163);
}

const  ::cpp2::Struct0& Struct3::get_field166() const& {
  return field166;
}

 ::cpp2::Struct0 Struct3::get_field166() && {
  return std::move(field166);
}

const std::map<float, double>& Struct3::get_field169() const& {
  return field169;
}

std::map<float, double> Struct3::get_field169() && {
  return std::move(field169);
}

const std::map<std::vector<double>, double>& Struct3::get_field171() const& {
  return field171;
}

std::map<std::vector<double>, double> Struct3::get_field171() && {
  return std::move(field171);
}

const std::vector<std::vector<float>>& Struct3::get_field173() const& {
  return field173;
}

std::vector<std::vector<float>> Struct3::get_field173() && {
  return std::move(field173);
}

const std::map<int32_t, std::string>& Struct3::get_field178() const& {
  return field178;
}

std::map<int32_t, std::string> Struct3::get_field178() && {
  return std::move(field178);
}

const std::set<std::set<std::string>>& Struct3::get_field179() const& {
  return field179;
}

std::set<std::set<std::string>> Struct3::get_field179() && {
  return std::move(field179);
}

void Struct3::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field96") {
    fid = 96;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field97") {
    fid = 97;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field98") {
    fid = 98;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field99") {
    fid = 99;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field100") {
    fid = 100;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field101") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field102") {
    fid = 102;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field103") {
    fid = 103;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field104") {
    fid = 104;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field105") {
    fid = 105;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field106") {
    fid = 106;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field107") {
    fid = 107;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field108") {
    fid = 108;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field109") {
    fid = 109;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field110") {
    fid = 110;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field111") {
    fid = 111;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field112") {
    fid = 112;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field113") {
    fid = 113;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field114") {
    fid = 114;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field115") {
    fid = 115;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field116") {
    fid = 116;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field117") {
    fid = 117;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field118") {
    fid = 118;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field119") {
    fid = 119;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field120") {
    fid = 120;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field121") {
    fid = 121;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field122") {
    fid = 122;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field123") {
    fid = 123;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field124") {
    fid = 124;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field125") {
    fid = 125;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field126") {
    fid = 126;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field127") {
    fid = 127;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field128") {
    fid = 128;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field129") {
    fid = 129;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field130") {
    fid = 130;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field131") {
    fid = 131;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field132") {
    fid = 132;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field133") {
    fid = 133;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field134") {
    fid = 134;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field135") {
    fid = 135;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field136") {
    fid = 136;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field137") {
    fid = 137;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field138") {
    fid = 138;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field139") {
    fid = 139;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field140") {
    fid = 140;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field141") {
    fid = 141;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field142") {
    fid = 142;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field143") {
    fid = 143;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field144") {
    fid = 144;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field145") {
    fid = 145;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field146") {
    fid = 146;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field147") {
    fid = 147;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field148") {
    fid = 148;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field149") {
    fid = 149;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field150") {
    fid = 150;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field151") {
    fid = 151;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field152") {
    fid = 152;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field153") {
    fid = 153;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field154") {
    fid = 154;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field155") {
    fid = 155;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field156") {
    fid = 156;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field157") {
    fid = 157;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field158") {
    fid = 158;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field159") {
    fid = 159;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field160") {
    fid = 160;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field161") {
    fid = 161;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field162") {
    fid = 162;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field163") {
    fid = 163;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field164") {
    fid = 164;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field165") {
    fid = 165;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field166") {
    fid = 166;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field167") {
    fid = 167;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field168") {
    fid = 168;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field169") {
    fid = 169;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field170") {
    fid = 170;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field171") {
    fid = 171;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field172") {
    fid = 172;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field173") {
    fid = 173;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field174") {
    fid = 174;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field175") {
    fid = 175;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field176") {
    fid = 176;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field177") {
    fid = 177;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field178") {
    fid = 178;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field179") {
    fid = 179;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field180") {
    fid = 180;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
}

void swap(Struct3& a, Struct3& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.field96, b.field96);
  swap(a.field97, b.field97);
  swap(a.field98, b.field98);
  swap(a.field99, b.field99);
  swap(a.field100, b.field100);
  swap(a.field101, b.field101);
  swap(a.field102, b.field102);
  swap(a.field103, b.field103);
  swap(a.field104, b.field104);
  swap(a.field105, b.field105);
  swap(a.field106, b.field106);
  swap(a.field107, b.field107);
  swap(a.field108, b.field108);
  swap(a.field109, b.field109);
  swap(a.field110, b.field110);
  swap(a.field111, b.field111);
  swap(a.field112, b.field112);
  swap(a.field113, b.field113);
  swap(a.field114, b.field114);
  swap(a.field115, b.field115);
  swap(a.field116, b.field116);
  swap(a.field117, b.field117);
  swap(a.field118, b.field118);
  swap(a.field119, b.field119);
  swap(a.field120, b.field120);
  swap(a.field121, b.field121);
  swap(a.field122, b.field122);
  swap(a.field123, b.field123);
  swap(a.field124, b.field124);
  swap(a.field125, b.field125);
  swap(a.field126, b.field126);
  swap(a.field127, b.field127);
  swap(a.field128, b.field128);
  swap(a.field129, b.field129);
  swap(a.field130, b.field130);
  swap(a.field131, b.field131);
  swap(a.field132, b.field132);
  swap(a.field133, b.field133);
  swap(a.field134, b.field134);
  swap(a.field135, b.field135);
  swap(a.field136, b.field136);
  swap(a.field137, b.field137);
  swap(a.field138, b.field138);
  swap(a.field139, b.field139);
  swap(a.field140, b.field140);
  swap(a.field141, b.field141);
  swap(a.field142, b.field142);
  swap(a.field143, b.field143);
  swap(a.field144, b.field144);
  swap(a.field145, b.field145);
  swap(a.field146, b.field146);
  swap(a.field147, b.field147);
  swap(a.field148, b.field148);
  swap(a.field149, b.field149);
  swap(a.field150, b.field150);
  swap(a.field151, b.field151);
  swap(a.field152, b.field152);
  swap(a.field153, b.field153);
  swap(a.field154, b.field154);
  swap(a.field155, b.field155);
  swap(a.field156, b.field156);
  swap(a.field157, b.field157);
  swap(a.field158, b.field158);
  swap(a.field159, b.field159);
  swap(a.field160, b.field160);
  swap(a.field161, b.field161);
  swap(a.field162, b.field162);
  swap(a.field163, b.field163);
  swap(a.field164, b.field164);
  swap(a.field165, b.field165);
  swap(a.field166, b.field166);
  swap(a.field167, b.field167);
  swap(a.field168, b.field168);
  swap(a.field169, b.field169);
  swap(a.field170, b.field170);
  swap(a.field171, b.field171);
  swap(a.field172, b.field172);
  swap(a.field173, b.field173);
  swap(a.field174, b.field174);
  swap(a.field175, b.field175);
  swap(a.field176, b.field176);
  swap(a.field177, b.field177);
  swap(a.field178, b.field178);
  swap(a.field179, b.field179);
  swap(a.field180, b.field180);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct3::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct3::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct3::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct3::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct3::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct3::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct3::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct3::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct4::__clear() {
  // clear all fields
  field1.clear();
  field2 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field3.clear();
  field4.clear();
  field5 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field6 = 0;
  field7.clear();
  field8 = 0;
  field9 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field10.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field11);
  field12.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field13);
  field14 = 0;
  field15 = 0;
  field16 = 0;
  field17 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field18);
  field19.clear();
  field20.clear();
  field21.clear();
  field22.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field23);
  field24.clear();
  field25 = 0;
  field26 = 0;
  field27 = 0;
  field28.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field29);
  field30.clear();
  field31.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field32);
  field33 = 0;
  field34 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field35.clear();
  field36 = 0;
  field37.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field38);
  field39 = 0;
  field40.clear();
  field41.clear();
  field42 = 0;
  field43 = 0;
  field44.clear();
  field45 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field46.clear();
  field47.clear();
  field48.clear();
  field49.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field50);
  field51 = 0;
  field52.clear();
  field53 = 0;
  field54.clear();
  field55 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field56 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field57.clear();
  field58 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field59 = 0;
  field60 = 0;
  field61 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field62);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field63);
  field64.clear();
  field65 = 0;
  field66.clear();
  field67 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field68.clear();
  field69.clear();
  field70 = 0;
  field71 = 0;
  field72.clear();
  field73.clear();
  field74 = 0;
  field75.clear();
  field76.clear();
  field77.clear();
  field78.clear();
  field79.clear();
  field80.clear();
  field81.clear();
  field82 = 0;
  field83 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field84 = 0;
  field85 = 0;
  field86.clear();
  field87 = 0;
  field88.clear();
  field89 = 0;
  field90.clear();
  field91 = 0;
  field92 = 0;
  field93 = 0;
  field94.clear();
  field95 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field96 = 0;
  field97 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field98);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field99);
  field100.clear();
  field101 = 0;
  __isset.__clear();
}

bool Struct4::operator==(const Struct4& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field5, rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field9, rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field34, rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field56, rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field58, rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field67, rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field83, rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  if (!((field85 == rhs.field85))) {
    return false;
  }
  if (!((field86 == rhs.field86))) {
    return false;
  }
  if (!((field87 == rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!((field89 == rhs.field89))) {
    return false;
  }
  if (!((field90 == rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!((field92 == rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!((field94 == rhs.field94))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field95, rhs.field95))) {
    return false;
  }
  if (!((field96 == rhs.field96))) {
    return false;
  }
  if (!((field97 == rhs.field97))) {
    return false;
  }
  if (!((field98 == rhs.field98))) {
    return false;
  }
  if (!((field99 == rhs.field99))) {
    return false;
  }
  if (!((field100 == rhs.field100))) {
    return false;
  }
  if (!((field101 == rhs.field101))) {
    return false;
  }
  return true;
}

const std::map<double, int8_t>& Struct4::get_field1() const& {
  return field1;
}

std::map<double, int8_t> Struct4::get_field1() && {
  return std::move(field1);
}

const std::map<double,  ::cpp2::Struct1>& Struct4::get_field3() const& {
  return field3;
}

std::map<double,  ::cpp2::Struct1> Struct4::get_field3() && {
  return std::move(field3);
}

const std::map<int8_t,  ::cpp2::Struct2>& Struct4::get_field4() const& {
  return field4;
}

std::map<int8_t,  ::cpp2::Struct2> Struct4::get_field4() && {
  return std::move(field4);
}

const std::map<bool, std::vector<double>>& Struct4::get_field7() const& {
  return field7;
}

std::map<bool, std::vector<double>> Struct4::get_field7() && {
  return std::move(field7);
}

const std::map<float, int8_t>& Struct4::get_field10() const& {
  return field10;
}

std::map<float, int8_t> Struct4::get_field10() && {
  return std::move(field10);
}

const  ::cpp2::Struct0& Struct4::get_field11() const& {
  return field11;
}

 ::cpp2::Struct0 Struct4::get_field11() && {
  return std::move(field11);
}

const std::vector<int64_t>& Struct4::get_field12() const& {
  return field12;
}

std::vector<int64_t> Struct4::get_field12() && {
  return std::move(field12);
}

const  ::cpp2::Struct0& Struct4::get_field13() const& {
  return field13;
}

 ::cpp2::Struct0 Struct4::get_field13() && {
  return std::move(field13);
}

const  ::cpp2::Struct1& Struct4::get_field18() const& {
  return field18;
}

 ::cpp2::Struct1 Struct4::get_field18() && {
  return std::move(field18);
}

const std::set<float>& Struct4::get_field19() const& {
  return field19;
}

std::set<float> Struct4::get_field19() && {
  return std::move(field19);
}

const std::vector<std::string>& Struct4::get_field20() const& {
  return field20;
}

std::vector<std::string> Struct4::get_field20() && {
  return std::move(field20);
}

const std::map<int8_t, double>& Struct4::get_field21() const& {
  return field21;
}

std::map<int8_t, double> Struct4::get_field21() && {
  return std::move(field21);
}

const std::vector<int8_t>& Struct4::get_field22() const& {
  return field22;
}

std::vector<int8_t> Struct4::get_field22() && {
  return std::move(field22);
}

const  ::cpp2::Struct0& Struct4::get_field23() const& {
  return field23;
}

 ::cpp2::Struct0 Struct4::get_field23() && {
  return std::move(field23);
}

const std::map<int8_t, int8_t>& Struct4::get_field24() const& {
  return field24;
}

std::map<int8_t, int8_t> Struct4::get_field24() && {
  return std::move(field24);
}

const std::map<int16_t, std::vector<int16_t>>& Struct4::get_field28() const& {
  return field28;
}

std::map<int16_t, std::vector<int16_t>> Struct4::get_field28() && {
  return std::move(field28);
}

const  ::cpp2::Struct0& Struct4::get_field29() const& {
  return field29;
}

 ::cpp2::Struct0 Struct4::get_field29() && {
  return std::move(field29);
}

const std::set<int32_t>& Struct4::get_field30() const& {
  return field30;
}

std::set<int32_t> Struct4::get_field30() && {
  return std::move(field30);
}

const std::map<double, double>& Struct4::get_field31() const& {
  return field31;
}

std::map<double, double> Struct4::get_field31() && {
  return std::move(field31);
}

const  ::cpp2::Struct1& Struct4::get_field32() const& {
  return field32;
}

 ::cpp2::Struct1 Struct4::get_field32() && {
  return std::move(field32);
}

const std::set<float>& Struct4::get_field35() const& {
  return field35;
}

std::set<float> Struct4::get_field35() && {
  return std::move(field35);
}

const std::vector<bool>& Struct4::get_field37() const& {
  return field37;
}

std::vector<bool> Struct4::get_field37() && {
  return std::move(field37);
}

const  ::cpp2::Struct1& Struct4::get_field38() const& {
  return field38;
}

 ::cpp2::Struct1 Struct4::get_field38() && {
  return std::move(field38);
}

const std::map<std::set<float>, std::set<double>>& Struct4::get_field40() const& {
  return field40;
}

std::map<std::set<float>, std::set<double>> Struct4::get_field40() && {
  return std::move(field40);
}

const std::vector<std::string>& Struct4::get_field41() const& {
  return field41;
}

std::vector<std::string> Struct4::get_field41() && {
  return std::move(field41);
}

const std::set<bool>& Struct4::get_field44() const& {
  return field44;
}

std::set<bool> Struct4::get_field44() && {
  return std::move(field44);
}

const std::vector<double>& Struct4::get_field46() const& {
  return field46;
}

std::vector<double> Struct4::get_field46() && {
  return std::move(field46);
}

const std::map<int16_t,  ::cpp2::Struct2>& Struct4::get_field47() const& {
  return field47;
}

std::map<int16_t,  ::cpp2::Struct2> Struct4::get_field47() && {
  return std::move(field47);
}

const std::set<int16_t>& Struct4::get_field48() const& {
  return field48;
}

std::set<int16_t> Struct4::get_field48() && {
  return std::move(field48);
}

const std::map<std::map<int32_t, int32_t>, int64_t>& Struct4::get_field49() const& {
  return field49;
}

std::map<std::map<int32_t, int32_t>, int64_t> Struct4::get_field49() && {
  return std::move(field49);
}

const  ::cpp2::Struct0& Struct4::get_field50() const& {
  return field50;
}

 ::cpp2::Struct0 Struct4::get_field50() && {
  return std::move(field50);
}

const std::set<std::string>& Struct4::get_field52() const& {
  return field52;
}

std::set<std::string> Struct4::get_field52() && {
  return std::move(field52);
}

const std::vector<std::string>& Struct4::get_field54() const& {
  return field54;
}

std::vector<std::string> Struct4::get_field54() && {
  return std::move(field54);
}

const std::vector<bool>& Struct4::get_field57() const& {
  return field57;
}

std::vector<bool> Struct4::get_field57() && {
  return std::move(field57);
}

const  ::cpp2::Struct1& Struct4::get_field62() const& {
  return field62;
}

 ::cpp2::Struct1 Struct4::get_field62() && {
  return std::move(field62);
}

const  ::cpp2::Struct1& Struct4::get_field63() const& {
  return field63;
}

 ::cpp2::Struct1 Struct4::get_field63() && {
  return std::move(field63);
}

const std::set< ::cpp2::Struct0>& Struct4::get_field64() const& {
  return field64;
}

std::set< ::cpp2::Struct0> Struct4::get_field64() && {
  return std::move(field64);
}

const std::set<bool>& Struct4::get_field66() const& {
  return field66;
}

std::set<bool> Struct4::get_field66() && {
  return std::move(field66);
}

const std::map<std::map<int32_t, float>, float>& Struct4::get_field68() const& {
  return field68;
}

std::map<std::map<int32_t, float>, float> Struct4::get_field68() && {
  return std::move(field68);
}

const std::vector<float>& Struct4::get_field69() const& {
  return field69;
}

std::vector<float> Struct4::get_field69() && {
  return std::move(field69);
}

const std::vector<int16_t>& Struct4::get_field72() const& {
  return field72;
}

std::vector<int16_t> Struct4::get_field72() && {
  return std::move(field72);
}

const std::map<double,  ::cpp2::Struct1>& Struct4::get_field73() const& {
  return field73;
}

std::map<double,  ::cpp2::Struct1> Struct4::get_field73() && {
  return std::move(field73);
}

const std::set<std::map<double, std::string>>& Struct4::get_field75() const& {
  return field75;
}

std::set<std::map<double, std::string>> Struct4::get_field75() && {
  return std::move(field75);
}

const std::set<int32_t>& Struct4::get_field76() const& {
  return field76;
}

std::set<int32_t> Struct4::get_field76() && {
  return std::move(field76);
}

const std::set<int8_t>& Struct4::get_field77() const& {
  return field77;
}

std::set<int8_t> Struct4::get_field77() && {
  return std::move(field77);
}

const std::map<std::string, int8_t>& Struct4::get_field78() const& {
  return field78;
}

std::map<std::string, int8_t> Struct4::get_field78() && {
  return std::move(field78);
}

const std::map<std::set<float>, std::set<std::map<float, std::string>>>& Struct4::get_field79() const& {
  return field79;
}

std::map<std::set<float>, std::set<std::map<float, std::string>>> Struct4::get_field79() && {
  return std::move(field79);
}

const std::set<std::string>& Struct4::get_field80() const& {
  return field80;
}

std::set<std::string> Struct4::get_field80() && {
  return std::move(field80);
}

const std::map<bool, float>& Struct4::get_field81() const& {
  return field81;
}

std::map<bool, float> Struct4::get_field81() && {
  return std::move(field81);
}

const std::map<std::string, double>& Struct4::get_field86() const& {
  return field86;
}

std::map<std::string, double> Struct4::get_field86() && {
  return std::move(field86);
}

const std::vector<std::set<std::string>>& Struct4::get_field88() const& {
  return field88;
}

std::vector<std::set<std::string>> Struct4::get_field88() && {
  return std::move(field88);
}

const std::vector<std::set<int16_t>>& Struct4::get_field90() const& {
  return field90;
}

std::vector<std::set<int16_t>> Struct4::get_field90() && {
  return std::move(field90);
}

const std::map<int8_t, int16_t>& Struct4::get_field94() const& {
  return field94;
}

std::map<int8_t, int16_t> Struct4::get_field94() && {
  return std::move(field94);
}

const  ::cpp2::Struct3& Struct4::get_field98() const& {
  return field98;
}

 ::cpp2::Struct3 Struct4::get_field98() && {
  return std::move(field98);
}

const  ::cpp2::Struct0& Struct4::get_field99() const& {
  return field99;
}

 ::cpp2::Struct0 Struct4::get_field99() && {
  return std::move(field99);
}

const std::map<int16_t, int8_t>& Struct4::get_field100() const& {
  return field100;
}

std::map<int16_t, int8_t> Struct4::get_field100() && {
  return std::move(field100);
}

void Struct4::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field96") {
    fid = 96;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field97") {
    fid = 97;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field98") {
    fid = 98;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field99") {
    fid = 99;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field100") {
    fid = 100;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field101") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_I32;
  }
}

void swap(Struct4& a, Struct4& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.field96, b.field96);
  swap(a.field97, b.field97);
  swap(a.field98, b.field98);
  swap(a.field99, b.field99);
  swap(a.field100, b.field100);
  swap(a.field101, b.field101);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct4::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct4::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct4::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct4::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct4::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct4::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct4::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct4::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct5::__clear() {
  // clear all fields
  field1.clear();
  field2.clear();
  field3 = 0;
  field4 = 0;
  field5 = 0;
  field6 = 0;
  field7.clear();
  field8 = 0;
  field9.clear();
  field10 = 0;
  field11.clear();
  field12.clear();
  field13 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field14);
  field15.clear();
  field16 = 0;
  field17 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field18 = 0;
  field19 = 0;
  field20.clear();
  field21.clear();
  field22 = 0;
  field23 = 0;
  field24 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field25);
  field26.clear();
  field27.clear();
  field28.clear();
  field29.clear();
  field30.clear();
  field31.clear();
  field32 = 0;
  field33 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field34 = 0;
  field35.clear();
  field36 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field37);
  field38 = 0;
  field39 = 0;
  field40 = 0;
  field41 = 0;
  field42.clear();
  field43.clear();
  field44.clear();
  field45 = 0;
  field46 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field47);
  field48 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field49);
  field50.clear();
  field51.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field52);
  field53.clear();
  field54.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field55);
  field56 = 0;
  field57 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field58);
  field59.clear();
  field60.clear();
  field61 = 0;
  field62.clear();
  field63 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field64.clear();
  field65.clear();
  field66.clear();
  field67.clear();
  field68.clear();
  field69.clear();
  field70.clear();
  field71 = 0;
  field72 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field73);
  field74 = 0;
  field75.clear();
  field76 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field77.clear();
  field78.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field79);
  field80 = 0;
  field81.clear();
  field82.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field83);
  field84.clear();
  field85.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field86);
  field87 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field88.clear();
  field89 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field90);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field91);
  field92 = 0;
  field93.clear();
  field94 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field95 = 0;
  field96 = 0;
  __isset.__clear();
}

bool Struct5::operator==(const Struct5& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field17, rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field33, rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field63, rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!((field83 == rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  if (!((field85 == rhs.field85))) {
    return false;
  }
  if (!((field86 == rhs.field86))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field87, rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field89, rhs.field89))) {
    return false;
  }
  if (!((field90 == rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!((field92 == rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!((field94 == rhs.field94))) {
    return false;
  }
  if (!((field95 == rhs.field95))) {
    return false;
  }
  if (!((field96 == rhs.field96))) {
    return false;
  }
  return true;
}

const std::set<double>& Struct5::get_field1() const& {
  return field1;
}

std::set<double> Struct5::get_field1() && {
  return std::move(field1);
}

const std::vector<int16_t>& Struct5::get_field2() const& {
  return field2;
}

std::vector<int16_t> Struct5::get_field2() && {
  return std::move(field2);
}

const std::vector<std::string>& Struct5::get_field7() const& {
  return field7;
}

std::vector<std::string> Struct5::get_field7() && {
  return std::move(field7);
}

const std::vector<std::map<double, std::string>>& Struct5::get_field9() const& {
  return field9;
}

std::vector<std::map<double, std::string>> Struct5::get_field9() && {
  return std::move(field9);
}

const std::map<bool, int64_t>& Struct5::get_field11() const& {
  return field11;
}

std::map<bool, int64_t> Struct5::get_field11() && {
  return std::move(field11);
}

const std::map<std::string, std::set<double>>& Struct5::get_field12() const& {
  return field12;
}

std::map<std::string, std::set<double>> Struct5::get_field12() && {
  return std::move(field12);
}

const  ::cpp2::Struct2& Struct5::get_field14() const& {
  return field14;
}

 ::cpp2::Struct2 Struct5::get_field14() && {
  return std::move(field14);
}

const std::map<std::vector<bool>, int32_t>& Struct5::get_field15() const& {
  return field15;
}

std::map<std::vector<bool>, int32_t> Struct5::get_field15() && {
  return std::move(field15);
}

const std::map<int32_t, std::map<std::vector<int8_t>, float>>& Struct5::get_field20() const& {
  return field20;
}

std::map<int32_t, std::map<std::vector<int8_t>, float>> Struct5::get_field20() && {
  return std::move(field20);
}

const std::vector<bool>& Struct5::get_field21() const& {
  return field21;
}

std::vector<bool> Struct5::get_field21() && {
  return std::move(field21);
}

const  ::cpp2::Struct1& Struct5::get_field25() const& {
  return field25;
}

 ::cpp2::Struct1 Struct5::get_field25() && {
  return std::move(field25);
}

const std::set<std::string>& Struct5::get_field26() const& {
  return field26;
}

std::set<std::string> Struct5::get_field26() && {
  return std::move(field26);
}

const std::vector<std::vector<float>>& Struct5::get_field27() const& {
  return field27;
}

std::vector<std::vector<float>> Struct5::get_field27() && {
  return std::move(field27);
}

const std::map<int64_t, int8_t>& Struct5::get_field28() const& {
  return field28;
}

std::map<int64_t, int8_t> Struct5::get_field28() && {
  return std::move(field28);
}

const std::vector<int16_t>& Struct5::get_field29() const& {
  return field29;
}

std::vector<int16_t> Struct5::get_field29() && {
  return std::move(field29);
}

const std::set<std::vector<int16_t>>& Struct5::get_field30() const& {
  return field30;
}

std::set<std::vector<int16_t>> Struct5::get_field30() && {
  return std::move(field30);
}

const std::map<std::set<std::string>, float>& Struct5::get_field31() const& {
  return field31;
}

std::map<std::set<std::string>, float> Struct5::get_field31() && {
  return std::move(field31);
}

const std::map<std::set<int64_t>, double>& Struct5::get_field35() const& {
  return field35;
}

std::map<std::set<int64_t>, double> Struct5::get_field35() && {
  return std::move(field35);
}

const  ::cpp2::Struct2& Struct5::get_field37() const& {
  return field37;
}

 ::cpp2::Struct2 Struct5::get_field37() && {
  return std::move(field37);
}

const std::vector<std::vector<int32_t>>& Struct5::get_field42() const& {
  return field42;
}

std::vector<std::vector<int32_t>> Struct5::get_field42() && {
  return std::move(field42);
}

const std::set<std::map<double, int8_t>>& Struct5::get_field43() const& {
  return field43;
}

std::set<std::map<double, int8_t>> Struct5::get_field43() && {
  return std::move(field43);
}

const std::set<std::map<int16_t, bool>>& Struct5::get_field44() const& {
  return field44;
}

std::set<std::map<int16_t, bool>> Struct5::get_field44() && {
  return std::move(field44);
}

const  ::cpp2::Struct2& Struct5::get_field47() const& {
  return field47;
}

 ::cpp2::Struct2 Struct5::get_field47() && {
  return std::move(field47);
}

const  ::cpp2::Struct0& Struct5::get_field49() const& {
  return field49;
}

 ::cpp2::Struct0 Struct5::get_field49() && {
  return std::move(field49);
}

const std::vector<std::map<int8_t, int32_t>>& Struct5::get_field50() const& {
  return field50;
}

std::vector<std::map<int8_t, int32_t>> Struct5::get_field50() && {
  return std::move(field50);
}

const std::vector<std::string>& Struct5::get_field51() const& {
  return field51;
}

std::vector<std::string> Struct5::get_field51() && {
  return std::move(field51);
}

const  ::cpp2::Struct1& Struct5::get_field52() const& {
  return field52;
}

 ::cpp2::Struct1 Struct5::get_field52() && {
  return std::move(field52);
}

const std::set<int32_t>& Struct5::get_field53() const& {
  return field53;
}

std::set<int32_t> Struct5::get_field53() && {
  return std::move(field53);
}

const std::vector<bool>& Struct5::get_field54() const& {
  return field54;
}

std::vector<bool> Struct5::get_field54() && {
  return std::move(field54);
}

const  ::cpp2::Struct2& Struct5::get_field55() const& {
  return field55;
}

 ::cpp2::Struct2 Struct5::get_field55() && {
  return std::move(field55);
}

const  ::cpp2::Struct1& Struct5::get_field58() const& {
  return field58;
}

 ::cpp2::Struct1 Struct5::get_field58() && {
  return std::move(field58);
}

const std::vector<int8_t>& Struct5::get_field59() const& {
  return field59;
}

std::vector<int8_t> Struct5::get_field59() && {
  return std::move(field59);
}

const std::map<int8_t,  ::cpp2::Struct2>& Struct5::get_field60() const& {
  return field60;
}

std::map<int8_t,  ::cpp2::Struct2> Struct5::get_field60() && {
  return std::move(field60);
}

const std::set<std::map<double, std::string>>& Struct5::get_field62() const& {
  return field62;
}

std::set<std::map<double, std::string>> Struct5::get_field62() && {
  return std::move(field62);
}

const std::set<std::string>& Struct5::get_field64() const& {
  return field64;
}

std::set<std::string> Struct5::get_field64() && {
  return std::move(field64);
}

const std::set<std::string>& Struct5::get_field65() const& {
  return field65;
}

std::set<std::string> Struct5::get_field65() && {
  return std::move(field65);
}

const std::set<std::vector<std::string>>& Struct5::get_field66() const& {
  return field66;
}

std::set<std::vector<std::string>> Struct5::get_field66() && {
  return std::move(field66);
}

const std::map<float, std::string>& Struct5::get_field67() const& {
  return field67;
}

std::map<float, std::string> Struct5::get_field67() && {
  return std::move(field67);
}

const std::set<int32_t>& Struct5::get_field68() const& {
  return field68;
}

std::set<int32_t> Struct5::get_field68() && {
  return std::move(field68);
}

const std::set<std::set<std::string>>& Struct5::get_field69() const& {
  return field69;
}

std::set<std::set<std::string>> Struct5::get_field69() && {
  return std::move(field69);
}

const std::set<std::set<std::string>>& Struct5::get_field70() const& {
  return field70;
}

std::set<std::set<std::string>> Struct5::get_field70() && {
  return std::move(field70);
}

const  ::cpp2::Struct1& Struct5::get_field73() const& {
  return field73;
}

 ::cpp2::Struct1 Struct5::get_field73() && {
  return std::move(field73);
}

const std::map<std::string, int16_t>& Struct5::get_field75() const& {
  return field75;
}

std::map<std::string, int16_t> Struct5::get_field75() && {
  return std::move(field75);
}

const std::map<int8_t,  ::cpp2::Struct3>& Struct5::get_field77() const& {
  return field77;
}

std::map<int8_t,  ::cpp2::Struct3> Struct5::get_field77() && {
  return std::move(field77);
}

const std::set<int16_t>& Struct5::get_field78() const& {
  return field78;
}

std::set<int16_t> Struct5::get_field78() && {
  return std::move(field78);
}

const  ::cpp2::Struct2& Struct5::get_field79() const& {
  return field79;
}

 ::cpp2::Struct2 Struct5::get_field79() && {
  return std::move(field79);
}

const std::vector< ::cpp2::Struct0>& Struct5::get_field81() const& {
  return field81;
}

std::vector< ::cpp2::Struct0> Struct5::get_field81() && {
  return std::move(field81);
}

const std::set<int8_t>& Struct5::get_field82() const& {
  return field82;
}

std::set<int8_t> Struct5::get_field82() && {
  return std::move(field82);
}

const  ::cpp2::Struct1& Struct5::get_field83() const& {
  return field83;
}

 ::cpp2::Struct1 Struct5::get_field83() && {
  return std::move(field83);
}

const std::map<int64_t, int16_t>& Struct5::get_field84() const& {
  return field84;
}

std::map<int64_t, int16_t> Struct5::get_field84() && {
  return std::move(field84);
}

const std::set<int8_t>& Struct5::get_field85() const& {
  return field85;
}

std::set<int8_t> Struct5::get_field85() && {
  return std::move(field85);
}

const  ::cpp2::Struct3& Struct5::get_field86() const& {
  return field86;
}

 ::cpp2::Struct3 Struct5::get_field86() && {
  return std::move(field86);
}

const std::vector<int8_t>& Struct5::get_field88() const& {
  return field88;
}

std::vector<int8_t> Struct5::get_field88() && {
  return std::move(field88);
}

const  ::cpp2::Struct1& Struct5::get_field90() const& {
  return field90;
}

 ::cpp2::Struct1 Struct5::get_field90() && {
  return std::move(field90);
}

const  ::cpp2::Struct2& Struct5::get_field91() const& {
  return field91;
}

 ::cpp2::Struct2 Struct5::get_field91() && {
  return std::move(field91);
}

const std::vector<std::vector<std::set<std::string>>>& Struct5::get_field93() const& {
  return field93;
}

std::vector<std::vector<std::set<std::string>>> Struct5::get_field93() && {
  return std::move(field93);
}

void Struct5::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field96") {
    fid = 96;
    _ftype = apache::thrift::protocol::T_I16;
  }
}

void swap(Struct5& a, Struct5& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.field96, b.field96);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct5::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct5::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct5::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct5::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct5::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct5::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct5::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct5::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct6::__clear() {
  // clear all fields
  field1.clear();
  field2.clear();
  field3 = 0;
  field4 = 0;
  field5 = 0;
  field6.clear();
  field7 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field8 = 0;
  field9 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field10);
  field11.clear();
  field12.clear();
  field13.clear();
  field14 = 0;
  field15.clear();
  field16.clear();
  field17 = 0;
  field18 = 0;
  field19 = 0;
  field20.clear();
  field21 = 0;
  field22.clear();
  field23.clear();
  field24 = 0;
  field25.clear();
  field26 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field27.clear();
  field28.clear();
  field29.clear();
  field30.clear();
  field31 = 0;
  field32.clear();
  field33 = 0;
  field34 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field35 = 0;
  field36.clear();
  field37.clear();
  field38.clear();
  field39 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field40.clear();
  field41 = 0;
  field42 = 0;
  field43.clear();
  field44 = 0;
  field45.clear();
  field46 = 0;
  field47 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field48 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field49);
  field50.clear();
  field51 = 0;
  field52.clear();
  field53.clear();
  field54 = 0;
  field55.clear();
  field56 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field57.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field58);
  field59.clear();
  field60.clear();
  field61 = 0;
  field62 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field63);
  field64 = 0;
  field65.clear();
  field66.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field67);
  field68 = 0;
  field69.clear();
  field70 = 0;
  field71 = 0;
  field72 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field73);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field74);
  field75 = 0;
  field76 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field77);
  field78 = 0;
  field79 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field80);
  field81 = 0;
  field82.clear();
  field83 = 0;
  field84.clear();
  field85 = 0;
  field86 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field87.clear();
  field88.clear();
  field89 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field90);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field91);
  field92 = 0;
  field93 = 0;
  field94 = 0;
  field95.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field96);
  field97 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field98);
  field99.clear();
  field100 = 0;
  field101.clear();
  field102.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field103);
  __isset.__clear();
}

bool Struct6::operator==(const Struct6& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field26, rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field39, rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field47, rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field56, rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!((field83 == rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  if (!((field85 == rhs.field85))) {
    return false;
  }
  if (!((field86 == rhs.field86))) {
    return false;
  }
  if (!((field87 == rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field89, rhs.field89))) {
    return false;
  }
  if (!((field90 == rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!((field92 == rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!((field94 == rhs.field94))) {
    return false;
  }
  if (!((field95 == rhs.field95))) {
    return false;
  }
  if (!((field96 == rhs.field96))) {
    return false;
  }
  if (!((field97 == rhs.field97))) {
    return false;
  }
  if (!((field98 == rhs.field98))) {
    return false;
  }
  if (!((field99 == rhs.field99))) {
    return false;
  }
  if (!((field100 == rhs.field100))) {
    return false;
  }
  if (!((field101 == rhs.field101))) {
    return false;
  }
  if (!((field102 == rhs.field102))) {
    return false;
  }
  if (!((field103 == rhs.field103))) {
    return false;
  }
  return true;
}

const std::set<float>& Struct6::get_field1() const& {
  return field1;
}

std::set<float> Struct6::get_field1() && {
  return std::move(field1);
}

const std::set<std::vector< ::cpp2::Struct1>>& Struct6::get_field2() const& {
  return field2;
}

std::set<std::vector< ::cpp2::Struct1>> Struct6::get_field2() && {
  return std::move(field2);
}

const std::vector<std::string>& Struct6::get_field6() const& {
  return field6;
}

std::vector<std::string> Struct6::get_field6() && {
  return std::move(field6);
}

const  ::cpp2::Struct4& Struct6::get_field10() const& {
  return field10;
}

 ::cpp2::Struct4 Struct6::get_field10() && {
  return std::move(field10);
}

const std::set<int8_t>& Struct6::get_field11() const& {
  return field11;
}

std::set<int8_t> Struct6::get_field11() && {
  return std::move(field11);
}

const std::map<bool, double>& Struct6::get_field12() const& {
  return field12;
}

std::map<bool, double> Struct6::get_field12() && {
  return std::move(field12);
}

const std::map<std::string, int16_t>& Struct6::get_field13() const& {
  return field13;
}

std::map<std::string, int16_t> Struct6::get_field13() && {
  return std::move(field13);
}

const std::vector< ::cpp2::Struct3>& Struct6::get_field15() const& {
  return field15;
}

std::vector< ::cpp2::Struct3> Struct6::get_field15() && {
  return std::move(field15);
}

const std::vector< ::cpp2::Struct3>& Struct6::get_field16() const& {
  return field16;
}

std::vector< ::cpp2::Struct3> Struct6::get_field16() && {
  return std::move(field16);
}

const std::vector< ::cpp2::Struct0>& Struct6::get_field20() const& {
  return field20;
}

std::vector< ::cpp2::Struct0> Struct6::get_field20() && {
  return std::move(field20);
}

const std::map<std::vector<bool>, bool>& Struct6::get_field22() const& {
  return field22;
}

std::map<std::vector<bool>, bool> Struct6::get_field22() && {
  return std::move(field22);
}

const std::map<int16_t, int32_t>& Struct6::get_field23() const& {
  return field23;
}

std::map<int16_t, int32_t> Struct6::get_field23() && {
  return std::move(field23);
}

const std::set<std::set<std::string>>& Struct6::get_field25() const& {
  return field25;
}

std::set<std::set<std::string>> Struct6::get_field25() && {
  return std::move(field25);
}

const std::map<std::string,  ::cpp2::Struct3>& Struct6::get_field27() const& {
  return field27;
}

std::map<std::string,  ::cpp2::Struct3> Struct6::get_field27() && {
  return std::move(field27);
}

const std::map<std::vector<std::map<float, int16_t>>, std::string>& Struct6::get_field28() const& {
  return field28;
}

std::map<std::vector<std::map<float, int16_t>>, std::string> Struct6::get_field28() && {
  return std::move(field28);
}

const std::map<int32_t, int64_t>& Struct6::get_field29() const& {
  return field29;
}

std::map<int32_t, int64_t> Struct6::get_field29() && {
  return std::move(field29);
}

const std::set< ::cpp2::Struct3>& Struct6::get_field30() const& {
  return field30;
}

std::set< ::cpp2::Struct3> Struct6::get_field30() && {
  return std::move(field30);
}

const std::vector<float>& Struct6::get_field32() const& {
  return field32;
}

std::vector<float> Struct6::get_field32() && {
  return std::move(field32);
}

const std::set<int8_t>& Struct6::get_field36() const& {
  return field36;
}

std::set<int8_t> Struct6::get_field36() && {
  return std::move(field36);
}

const std::vector<std::vector<std::map<float, int16_t>>>& Struct6::get_field37() const& {
  return field37;
}

std::vector<std::vector<std::map<float, int16_t>>> Struct6::get_field37() && {
  return std::move(field37);
}

const std::vector<std::string>& Struct6::get_field38() const& {
  return field38;
}

std::vector<std::string> Struct6::get_field38() && {
  return std::move(field38);
}

const std::set<int16_t>& Struct6::get_field40() const& {
  return field40;
}

std::set<int16_t> Struct6::get_field40() && {
  return std::move(field40);
}

const std::map<double, int32_t>& Struct6::get_field43() const& {
  return field43;
}

std::map<double, int32_t> Struct6::get_field43() && {
  return std::move(field43);
}

const std::map< ::cpp2::Struct5, std::map< ::cpp2::Struct1, float>>& Struct6::get_field45() const& {
  return field45;
}

std::map< ::cpp2::Struct5, std::map< ::cpp2::Struct1, float>> Struct6::get_field45() && {
  return std::move(field45);
}

const  ::cpp2::Struct1& Struct6::get_field49() const& {
  return field49;
}

 ::cpp2::Struct1 Struct6::get_field49() && {
  return std::move(field49);
}

const std::set< ::cpp2::Struct0>& Struct6::get_field50() const& {
  return field50;
}

std::set< ::cpp2::Struct0> Struct6::get_field50() && {
  return std::move(field50);
}

const std::set<std::string>& Struct6::get_field52() const& {
  return field52;
}

std::set<std::string> Struct6::get_field52() && {
  return std::move(field52);
}

const std::vector< ::cpp2::Struct1>& Struct6::get_field53() const& {
  return field53;
}

std::vector< ::cpp2::Struct1> Struct6::get_field53() && {
  return std::move(field53);
}

const std::map<std::vector<int64_t>, std::vector<std::string>>& Struct6::get_field55() const& {
  return field55;
}

std::map<std::vector<int64_t>, std::vector<std::string>> Struct6::get_field55() && {
  return std::move(field55);
}

const std::map<double, int64_t>& Struct6::get_field57() const& {
  return field57;
}

std::map<double, int64_t> Struct6::get_field57() && {
  return std::move(field57);
}

const  ::cpp2::Struct3& Struct6::get_field58() const& {
  return field58;
}

 ::cpp2::Struct3 Struct6::get_field58() && {
  return std::move(field58);
}

const std::map<int8_t, int32_t>& Struct6::get_field59() const& {
  return field59;
}

std::map<int8_t, int32_t> Struct6::get_field59() && {
  return std::move(field59);
}

const std::map<double, std::map<std::string, int32_t>>& Struct6::get_field60() const& {
  return field60;
}

std::map<double, std::map<std::string, int32_t>> Struct6::get_field60() && {
  return std::move(field60);
}

const  ::cpp2::Struct0& Struct6::get_field63() const& {
  return field63;
}

 ::cpp2::Struct0 Struct6::get_field63() && {
  return std::move(field63);
}

const std::set<int8_t>& Struct6::get_field65() const& {
  return field65;
}

std::set<int8_t> Struct6::get_field65() && {
  return std::move(field65);
}

const std::set<int8_t>& Struct6::get_field66() const& {
  return field66;
}

std::set<int8_t> Struct6::get_field66() && {
  return std::move(field66);
}

const  ::cpp2::Struct0& Struct6::get_field67() const& {
  return field67;
}

 ::cpp2::Struct0 Struct6::get_field67() && {
  return std::move(field67);
}

const std::map<int16_t,  ::cpp2::Struct2>& Struct6::get_field69() const& {
  return field69;
}

std::map<int16_t,  ::cpp2::Struct2> Struct6::get_field69() && {
  return std::move(field69);
}

const  ::cpp2::Struct3& Struct6::get_field73() const& {
  return field73;
}

 ::cpp2::Struct3 Struct6::get_field73() && {
  return std::move(field73);
}

const  ::cpp2::Struct4& Struct6::get_field74() const& {
  return field74;
}

 ::cpp2::Struct4 Struct6::get_field74() && {
  return std::move(field74);
}

const  ::cpp2::Struct0& Struct6::get_field77() const& {
  return field77;
}

 ::cpp2::Struct0 Struct6::get_field77() && {
  return std::move(field77);
}

const  ::cpp2::Struct1& Struct6::get_field80() const& {
  return field80;
}

 ::cpp2::Struct1 Struct6::get_field80() && {
  return std::move(field80);
}

const std::map<int64_t, int16_t>& Struct6::get_field82() const& {
  return field82;
}

std::map<int64_t, int16_t> Struct6::get_field82() && {
  return std::move(field82);
}

const std::set<int16_t>& Struct6::get_field84() const& {
  return field84;
}

std::set<int16_t> Struct6::get_field84() && {
  return std::move(field84);
}

const std::set<int32_t>& Struct6::get_field87() const& {
  return field87;
}

std::set<int32_t> Struct6::get_field87() && {
  return std::move(field87);
}

const std::vector<int8_t>& Struct6::get_field88() const& {
  return field88;
}

std::vector<int8_t> Struct6::get_field88() && {
  return std::move(field88);
}

const  ::cpp2::Struct3& Struct6::get_field90() const& {
  return field90;
}

 ::cpp2::Struct3 Struct6::get_field90() && {
  return std::move(field90);
}

const  ::cpp2::Struct0& Struct6::get_field91() const& {
  return field91;
}

 ::cpp2::Struct0 Struct6::get_field91() && {
  return std::move(field91);
}

const std::set<float>& Struct6::get_field95() const& {
  return field95;
}

std::set<float> Struct6::get_field95() && {
  return std::move(field95);
}

const  ::cpp2::Struct3& Struct6::get_field96() const& {
  return field96;
}

 ::cpp2::Struct3 Struct6::get_field96() && {
  return std::move(field96);
}

const  ::cpp2::Struct0& Struct6::get_field98() const& {
  return field98;
}

 ::cpp2::Struct0 Struct6::get_field98() && {
  return std::move(field98);
}

const std::vector<int64_t>& Struct6::get_field99() const& {
  return field99;
}

std::vector<int64_t> Struct6::get_field99() && {
  return std::move(field99);
}

const std::map<bool, std::string>& Struct6::get_field101() const& {
  return field101;
}

std::map<bool, std::string> Struct6::get_field101() && {
  return std::move(field101);
}

const std::map<int8_t, float>& Struct6::get_field102() const& {
  return field102;
}

std::map<int8_t, float> Struct6::get_field102() && {
  return std::move(field102);
}

const  ::cpp2::Struct1& Struct6::get_field103() const& {
  return field103;
}

 ::cpp2::Struct1 Struct6::get_field103() && {
  return std::move(field103);
}

void Struct6::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field96") {
    fid = 96;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field97") {
    fid = 97;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field98") {
    fid = 98;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field99") {
    fid = 99;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field100") {
    fid = 100;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field101") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field102") {
    fid = 102;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field103") {
    fid = 103;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct6& a, Struct6& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.field96, b.field96);
  swap(a.field97, b.field97);
  swap(a.field98, b.field98);
  swap(a.field99, b.field99);
  swap(a.field100, b.field100);
  swap(a.field101, b.field101);
  swap(a.field102, b.field102);
  swap(a.field103, b.field103);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct6::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct6::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct6::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct6::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct6::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct6::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct6::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct6::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct7::__clear() {
  // clear all fields
  field1 = 0;
  field2 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field3.clear();
  field4 = 0;
  field5 = 0;
  field6 = 0;
  field7 = 0;
  field8 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field9 = 0;
  field10.clear();
  field11 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field12 = 0;
  field13 = 0;
  field14 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field15.clear();
  field16.clear();
  field17 = 0;
  field18.clear();
  field19 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field20 = 0;
  field21 = 0;
  field22 = 0;
  field23 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field24);
  field25 = 0;
  field26.clear();
  field27 = 0;
  field28 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field29.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field30);
  field31 = 0;
  field32.clear();
  field33 = 0;
  field34 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field35.clear();
  field36 = 0;
  field37.clear();
  field38 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field39.clear();
  field40 = 0;
  field41 = 0;
  field42 = 0;
  field43 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field44);
  field45 = 0;
  field46.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field47);
  field48.clear();
  field49.clear();
  field50 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field51 = 0;
  field52 = 0;
  field53 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field54);
  field55.clear();
  field56.clear();
  field57.clear();
  field58 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field59 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field60);
  field61 = 0;
  field62 = 0;
  field63 = 0;
  field64 = 0;
  field65.clear();
  field66 = 0;
  field67 = 0;
  field68 = 0;
  field69.clear();
  field70.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field71);
  field72 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field73.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field74);
  field75 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field76);
  field77 = 0;
  field78.clear();
  field79 = 0;
  field80 = 0;
  field81 = 0;
  field82 = 0;
  field83 = 0;
  field84 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field85);
  field86.clear();
  field87.clear();
  field88 = 0;
  field89 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field90 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field91.clear();
  field92.clear();
  field93 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field94 = 0;
  field95 = 0;
  field96 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field97.clear();
  field98 = 0;
  field99 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field100.clear();
  field101 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field102);
  field103 = 0;
  field104.clear();
  field105.clear();
  field106 = 0;
  field107 = 0;
  field108 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field109);
  __isset.__clear();
}

bool Struct7::operator==(const Struct7& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field8, rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field11, rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field14, rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field19, rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field72, rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field75, rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!((field83 == rhs.field83))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field84, rhs.field84))) {
    return false;
  }
  if (!((field85 == rhs.field85))) {
    return false;
  }
  if (!((field86 == rhs.field86))) {
    return false;
  }
  if (!((field87 == rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!((field89 == rhs.field89))) {
    return false;
  }
  if (!((field90 == rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!((field92 == rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!((field94 == rhs.field94))) {
    return false;
  }
  if (!((field95 == rhs.field95))) {
    return false;
  }
  if (!((field96 == rhs.field96))) {
    return false;
  }
  if (!((field97 == rhs.field97))) {
    return false;
  }
  if (!((field98 == rhs.field98))) {
    return false;
  }
  if (!((field99 == rhs.field99))) {
    return false;
  }
  if (!((field100 == rhs.field100))) {
    return false;
  }
  if (!((field101 == rhs.field101))) {
    return false;
  }
  if (!((field102 == rhs.field102))) {
    return false;
  }
  if (!((field103 == rhs.field103))) {
    return false;
  }
  if (!((field104 == rhs.field104))) {
    return false;
  }
  if (!((field105 == rhs.field105))) {
    return false;
  }
  if (!((field106 == rhs.field106))) {
    return false;
  }
  if (!((field107 == rhs.field107))) {
    return false;
  }
  if (!((field108 == rhs.field108))) {
    return false;
  }
  if (!((field109 == rhs.field109))) {
    return false;
  }
  return true;
}

const std::vector<float>& Struct7::get_field3() const& {
  return field3;
}

std::vector<float> Struct7::get_field3() && {
  return std::move(field3);
}

const std::map<float, std::string>& Struct7::get_field10() const& {
  return field10;
}

std::map<float, std::string> Struct7::get_field10() && {
  return std::move(field10);
}

const std::vector<int16_t>& Struct7::get_field15() const& {
  return field15;
}

std::vector<int16_t> Struct7::get_field15() && {
  return std::move(field15);
}

const std::set<float>& Struct7::get_field16() const& {
  return field16;
}

std::set<float> Struct7::get_field16() && {
  return std::move(field16);
}

const std::map<int16_t, int32_t>& Struct7::get_field18() const& {
  return field18;
}

std::map<int16_t, int32_t> Struct7::get_field18() && {
  return std::move(field18);
}

const  ::cpp2::Struct1& Struct7::get_field24() const& {
  return field24;
}

 ::cpp2::Struct1 Struct7::get_field24() && {
  return std::move(field24);
}

const std::set<std::set<int8_t>>& Struct7::get_field26() const& {
  return field26;
}

std::set<std::set<int8_t>> Struct7::get_field26() && {
  return std::move(field26);
}

const std::map<int32_t, std::map<std::set<double>, std::map<int16_t, int32_t>>>& Struct7::get_field29() const& {
  return field29;
}

std::map<int32_t, std::map<std::set<double>, std::map<int16_t, int32_t>>> Struct7::get_field29() && {
  return std::move(field29);
}

const  ::cpp2::Struct0& Struct7::get_field30() const& {
  return field30;
}

 ::cpp2::Struct0 Struct7::get_field30() && {
  return std::move(field30);
}

const std::map<std::string, std::set<int8_t>>& Struct7::get_field32() const& {
  return field32;
}

std::map<std::string, std::set<int8_t>> Struct7::get_field32() && {
  return std::move(field32);
}

const std::map<std::vector<int64_t>, std::string>& Struct7::get_field35() const& {
  return field35;
}

std::map<std::vector<int64_t>, std::string> Struct7::get_field35() && {
  return std::move(field35);
}

const std::map<std::map<int64_t, int8_t>, int32_t>& Struct7::get_field37() const& {
  return field37;
}

std::map<std::map<int64_t, int8_t>, int32_t> Struct7::get_field37() && {
  return std::move(field37);
}

const std::map<std::set<std::vector<int32_t>>, int32_t>& Struct7::get_field39() const& {
  return field39;
}

std::map<std::set<std::vector<int32_t>>, int32_t> Struct7::get_field39() && {
  return std::move(field39);
}

const  ::cpp2::Struct1& Struct7::get_field44() const& {
  return field44;
}

 ::cpp2::Struct1 Struct7::get_field44() && {
  return std::move(field44);
}

const std::map<int32_t, int32_t>& Struct7::get_field46() const& {
  return field46;
}

std::map<int32_t, int32_t> Struct7::get_field46() && {
  return std::move(field46);
}

const  ::cpp2::Struct0& Struct7::get_field47() const& {
  return field47;
}

 ::cpp2::Struct0 Struct7::get_field47() && {
  return std::move(field47);
}

const std::map<int8_t, int64_t>& Struct7::get_field48() const& {
  return field48;
}

std::map<int8_t, int64_t> Struct7::get_field48() && {
  return std::move(field48);
}

const std::set<bool>& Struct7::get_field49() const& {
  return field49;
}

std::set<bool> Struct7::get_field49() && {
  return std::move(field49);
}

const  ::cpp2::Struct1& Struct7::get_field54() const& {
  return field54;
}

 ::cpp2::Struct1 Struct7::get_field54() && {
  return std::move(field54);
}

const std::set<int16_t>& Struct7::get_field55() const& {
  return field55;
}

std::set<int16_t> Struct7::get_field55() && {
  return std::move(field55);
}

const std::vector<double>& Struct7::get_field56() const& {
  return field56;
}

std::vector<double> Struct7::get_field56() && {
  return std::move(field56);
}

const std::set<int64_t>& Struct7::get_field57() const& {
  return field57;
}

std::set<int64_t> Struct7::get_field57() && {
  return std::move(field57);
}

const  ::cpp2::Struct0& Struct7::get_field60() const& {
  return field60;
}

 ::cpp2::Struct0 Struct7::get_field60() && {
  return std::move(field60);
}

const std::vector<double>& Struct7::get_field65() const& {
  return field65;
}

std::vector<double> Struct7::get_field65() && {
  return std::move(field65);
}

const std::vector<std::string>& Struct7::get_field69() const& {
  return field69;
}

std::vector<std::string> Struct7::get_field69() && {
  return std::move(field69);
}

const std::set<bool>& Struct7::get_field70() const& {
  return field70;
}

std::set<bool> Struct7::get_field70() && {
  return std::move(field70);
}

const  ::cpp2::Struct1& Struct7::get_field71() const& {
  return field71;
}

 ::cpp2::Struct1 Struct7::get_field71() && {
  return std::move(field71);
}

const std::set<std::set<std::string>>& Struct7::get_field73() const& {
  return field73;
}

std::set<std::set<std::string>> Struct7::get_field73() && {
  return std::move(field73);
}

const  ::cpp2::Struct0& Struct7::get_field74() const& {
  return field74;
}

 ::cpp2::Struct0 Struct7::get_field74() && {
  return std::move(field74);
}

const  ::cpp2::Struct2& Struct7::get_field76() const& {
  return field76;
}

 ::cpp2::Struct2 Struct7::get_field76() && {
  return std::move(field76);
}

const std::set<std::string>& Struct7::get_field78() const& {
  return field78;
}

std::set<std::string> Struct7::get_field78() && {
  return std::move(field78);
}

const  ::cpp2::Struct3& Struct7::get_field85() const& {
  return field85;
}

 ::cpp2::Struct3 Struct7::get_field85() && {
  return std::move(field85);
}

const std::vector<std::string>& Struct7::get_field86() const& {
  return field86;
}

std::vector<std::string> Struct7::get_field86() && {
  return std::move(field86);
}

const std::map< ::cpp2::Struct0, int64_t>& Struct7::get_field87() const& {
  return field87;
}

std::map< ::cpp2::Struct0, int64_t> Struct7::get_field87() && {
  return std::move(field87);
}

const std::vector<float>& Struct7::get_field91() const& {
  return field91;
}

std::vector<float> Struct7::get_field91() && {
  return std::move(field91);
}

const std::vector<bool>& Struct7::get_field92() const& {
  return field92;
}

std::vector<bool> Struct7::get_field92() && {
  return std::move(field92);
}

const std::vector<int16_t>& Struct7::get_field97() const& {
  return field97;
}

std::vector<int16_t> Struct7::get_field97() && {
  return std::move(field97);
}

const std::map<int64_t, std::map<std::string, double>>& Struct7::get_field100() const& {
  return field100;
}

std::map<int64_t, std::map<std::string, double>> Struct7::get_field100() && {
  return std::move(field100);
}

const  ::cpp2::Struct1& Struct7::get_field102() const& {
  return field102;
}

 ::cpp2::Struct1 Struct7::get_field102() && {
  return std::move(field102);
}

const std::map<std::string, int16_t>& Struct7::get_field104() const& {
  return field104;
}

std::map<std::string, int16_t> Struct7::get_field104() && {
  return std::move(field104);
}

const std::map<bool, double>& Struct7::get_field105() const& {
  return field105;
}

std::map<bool, double> Struct7::get_field105() && {
  return std::move(field105);
}

const  ::cpp2::Struct2& Struct7::get_field109() const& {
  return field109;
}

 ::cpp2::Struct2 Struct7::get_field109() && {
  return std::move(field109);
}

void Struct7::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field96") {
    fid = 96;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field97") {
    fid = 97;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field98") {
    fid = 98;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field99") {
    fid = 99;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field100") {
    fid = 100;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field101") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field102") {
    fid = 102;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field103") {
    fid = 103;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field104") {
    fid = 104;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field105") {
    fid = 105;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field106") {
    fid = 106;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field107") {
    fid = 107;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field108") {
    fid = 108;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field109") {
    fid = 109;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Struct7& a, Struct7& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.field96, b.field96);
  swap(a.field97, b.field97);
  swap(a.field98, b.field98);
  swap(a.field99, b.field99);
  swap(a.field100, b.field100);
  swap(a.field101, b.field101);
  swap(a.field102, b.field102);
  swap(a.field103, b.field103);
  swap(a.field104, b.field104);
  swap(a.field105, b.field105);
  swap(a.field106, b.field106);
  swap(a.field107, b.field107);
  swap(a.field108, b.field108);
  swap(a.field109, b.field109);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct7::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct7::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct7::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct7::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct7::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct7::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct7::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct7::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct8::__clear() {
  // clear all fields
  field1.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field2);
  field3.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field4);
  field5.clear();
  field6 = 0;
  field7.clear();
  field8.clear();
  field9 = 0;
  field10.clear();
  field11.clear();
  field12 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field13);
  field14 = 0;
  field15 = 0;
  field16 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool Struct8::operator==(const Struct8& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field16, rhs.field16))) {
    return false;
  }
  return true;
}

const std::vector<float>& Struct8::get_field1() const& {
  return field1;
}

std::vector<float> Struct8::get_field1() && {
  return std::move(field1);
}

const  ::cpp2::Struct3& Struct8::get_field2() const& {
  return field2;
}

 ::cpp2::Struct3 Struct8::get_field2() && {
  return std::move(field2);
}

const std::vector<std::string>& Struct8::get_field3() const& {
  return field3;
}

std::vector<std::string> Struct8::get_field3() && {
  return std::move(field3);
}

const  ::cpp2::Struct1& Struct8::get_field4() const& {
  return field4;
}

 ::cpp2::Struct1 Struct8::get_field4() && {
  return std::move(field4);
}

const std::set<bool>& Struct8::get_field5() const& {
  return field5;
}

std::set<bool> Struct8::get_field5() && {
  return std::move(field5);
}

const std::map<float, std::map<int16_t, int64_t>>& Struct8::get_field7() const& {
  return field7;
}

std::map<float, std::map<int16_t, int64_t>> Struct8::get_field7() && {
  return std::move(field7);
}

const std::vector<int16_t>& Struct8::get_field8() const& {
  return field8;
}

std::vector<int16_t> Struct8::get_field8() && {
  return std::move(field8);
}

const std::vector<bool>& Struct8::get_field10() const& {
  return field10;
}

std::vector<bool> Struct8::get_field10() && {
  return std::move(field10);
}

const std::vector< ::cpp2::Struct1>& Struct8::get_field11() const& {
  return field11;
}

std::vector< ::cpp2::Struct1> Struct8::get_field11() && {
  return std::move(field11);
}

const  ::cpp2::Struct1& Struct8::get_field13() const& {
  return field13;
}

 ::cpp2::Struct1 Struct8::get_field13() && {
  return std::move(field13);
}

void Struct8::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

void swap(Struct8& a, Struct8& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct8::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct8::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct8::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct8::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct8::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct8::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct8::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct8::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct9::__clear() {
  // clear all fields
  field1 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field2 = 0;
  field3 = 0;
  field4 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field5 = 0;
  field6.clear();
  field7.clear();
  field8.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field9);
  field10 = 0;
  field11 = 0;
  field12.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field13);
  field14 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field15);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field16);
  field17 = 0;
  field18 = 0;
  field19.clear();
  field20 = 0;
  field21 = 0;
  field22.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field23);
  field24 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field25 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field26);
  field27.clear();
  field28.clear();
  field29.clear();
  field30 = 0;
  field31.clear();
  field32 = 0;
  field33 = 0;
  field34.clear();
  field35 = 0;
  field36.clear();
  field37 = 0;
  field38 = 0;
  field39 = 0;
  field40.clear();
  field41.clear();
  field42 = 0;
  field43 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field44 = 0;
  field45.clear();
  field46 = 0;
  field47 = 0;
  field48.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field49);
  field50 = 0;
  field51 = 0;
  field52.clear();
  field53 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field54);
  field55.clear();
  field56 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field57);
  field58.clear();
  field59 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field60.clear();
  field61 = 0;
  field62.clear();
  field63.clear();
  field64.clear();
  field65.clear();
  field66 = 0;
  field67 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field68.clear();
  field69.clear();
  field70.clear();
  field71.clear();
  field72.clear();
  __isset.__clear();
}

bool Struct9::operator==(const Struct9& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field4, rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field24, rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field56, rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  return true;
}

const std::vector<bool>& Struct9::get_field6() const& {
  return field6;
}

std::vector<bool> Struct9::get_field6() && {
  return std::move(field6);
}

const std::set<double>& Struct9::get_field7() const& {
  return field7;
}

std::set<double> Struct9::get_field7() && {
  return std::move(field7);
}

const std::set<int64_t>& Struct9::get_field8() const& {
  return field8;
}

std::set<int64_t> Struct9::get_field8() && {
  return std::move(field8);
}

const  ::cpp2::Struct0& Struct9::get_field9() const& {
  return field9;
}

 ::cpp2::Struct0 Struct9::get_field9() && {
  return std::move(field9);
}

const std::map<int16_t,  ::cpp2::Struct3>& Struct9::get_field12() const& {
  return field12;
}

std::map<int16_t,  ::cpp2::Struct3> Struct9::get_field12() && {
  return std::move(field12);
}

const  ::cpp2::Struct0& Struct9::get_field13() const& {
  return field13;
}

 ::cpp2::Struct0 Struct9::get_field13() && {
  return std::move(field13);
}

const  ::cpp2::Struct2& Struct9::get_field15() const& {
  return field15;
}

 ::cpp2::Struct2 Struct9::get_field15() && {
  return std::move(field15);
}

const  ::cpp2::Struct2& Struct9::get_field16() const& {
  return field16;
}

 ::cpp2::Struct2 Struct9::get_field16() && {
  return std::move(field16);
}

const std::vector<std::set<std::vector<double>>>& Struct9::get_field19() const& {
  return field19;
}

std::vector<std::set<std::vector<double>>> Struct9::get_field19() && {
  return std::move(field19);
}

const std::vector<int32_t>& Struct9::get_field22() const& {
  return field22;
}

std::vector<int32_t> Struct9::get_field22() && {
  return std::move(field22);
}

const  ::cpp2::Struct2& Struct9::get_field23() const& {
  return field23;
}

 ::cpp2::Struct2 Struct9::get_field23() && {
  return std::move(field23);
}

const  ::cpp2::Struct4& Struct9::get_field26() const& {
  return field26;
}

 ::cpp2::Struct4 Struct9::get_field26() && {
  return std::move(field26);
}

const std::vector<std::string>& Struct9::get_field27() const& {
  return field27;
}

std::vector<std::string> Struct9::get_field27() && {
  return std::move(field27);
}

const std::set<int8_t>& Struct9::get_field28() const& {
  return field28;
}

std::set<int8_t> Struct9::get_field28() && {
  return std::move(field28);
}

const std::set<int32_t>& Struct9::get_field29() const& {
  return field29;
}

std::set<int32_t> Struct9::get_field29() && {
  return std::move(field29);
}

const std::map<double, std::set<int16_t>>& Struct9::get_field31() const& {
  return field31;
}

std::map<double, std::set<int16_t>> Struct9::get_field31() && {
  return std::move(field31);
}

const std::map<bool, int32_t>& Struct9::get_field34() const& {
  return field34;
}

std::map<bool, int32_t> Struct9::get_field34() && {
  return std::move(field34);
}

const std::map<int64_t, std::string>& Struct9::get_field36() const& {
  return field36;
}

std::map<int64_t, std::string> Struct9::get_field36() && {
  return std::move(field36);
}

const std::set<std::map<bool, int32_t>>& Struct9::get_field40() const& {
  return field40;
}

std::set<std::map<bool, int32_t>> Struct9::get_field40() && {
  return std::move(field40);
}

const std::map< ::cpp2::Struct2, std::vector<int8_t>>& Struct9::get_field41() const& {
  return field41;
}

std::map< ::cpp2::Struct2, std::vector<int8_t>> Struct9::get_field41() && {
  return std::move(field41);
}

const std::map<std::string, float>& Struct9::get_field45() const& {
  return field45;
}

std::map<std::string, float> Struct9::get_field45() && {
  return std::move(field45);
}

const std::map<int64_t, std::string>& Struct9::get_field48() const& {
  return field48;
}

std::map<int64_t, std::string> Struct9::get_field48() && {
  return std::move(field48);
}

const  ::cpp2::Struct2& Struct9::get_field49() const& {
  return field49;
}

 ::cpp2::Struct2 Struct9::get_field49() && {
  return std::move(field49);
}

const std::set<std::set<int16_t>>& Struct9::get_field52() const& {
  return field52;
}

std::set<std::set<int16_t>> Struct9::get_field52() && {
  return std::move(field52);
}

const  ::cpp2::Struct1& Struct9::get_field54() const& {
  return field54;
}

 ::cpp2::Struct1 Struct9::get_field54() && {
  return std::move(field54);
}

const std::vector<int32_t>& Struct9::get_field55() const& {
  return field55;
}

std::vector<int32_t> Struct9::get_field55() && {
  return std::move(field55);
}

const  ::cpp2::Struct1& Struct9::get_field57() const& {
  return field57;
}

 ::cpp2::Struct1 Struct9::get_field57() && {
  return std::move(field57);
}

const std::map<std::map<int64_t, int8_t>, std::map<bool, std::string>>& Struct9::get_field58() const& {
  return field58;
}

std::map<std::map<int64_t, int8_t>, std::map<bool, std::string>> Struct9::get_field58() && {
  return std::move(field58);
}

const std::set<bool>& Struct9::get_field60() const& {
  return field60;
}

std::set<bool> Struct9::get_field60() && {
  return std::move(field60);
}

const std::map<int16_t, float>& Struct9::get_field62() const& {
  return field62;
}

std::map<int16_t, float> Struct9::get_field62() && {
  return std::move(field62);
}

const std::set<std::vector<int16_t>>& Struct9::get_field63() const& {
  return field63;
}

std::set<std::vector<int16_t>> Struct9::get_field63() && {
  return std::move(field63);
}

const std::vector<int64_t>& Struct9::get_field64() const& {
  return field64;
}

std::vector<int64_t> Struct9::get_field64() && {
  return std::move(field64);
}

const std::map<int64_t,  ::cpp2::Struct1>& Struct9::get_field65() const& {
  return field65;
}

std::map<int64_t,  ::cpp2::Struct1> Struct9::get_field65() && {
  return std::move(field65);
}

const std::set<float>& Struct9::get_field68() const& {
  return field68;
}

std::set<float> Struct9::get_field68() && {
  return std::move(field68);
}

const std::map<std::set< ::cpp2::Struct4>,  ::cpp2::Struct2>& Struct9::get_field69() const& {
  return field69;
}

std::map<std::set< ::cpp2::Struct4>,  ::cpp2::Struct2> Struct9::get_field69() && {
  return std::move(field69);
}

const std::set<int32_t>& Struct9::get_field70() const& {
  return field70;
}

std::set<int32_t> Struct9::get_field70() && {
  return std::move(field70);
}

const std::set<std::set<double>>& Struct9::get_field71() const& {
  return field71;
}

std::set<std::set<double>> Struct9::get_field71() && {
  return std::move(field71);
}

const std::vector<float>& Struct9::get_field72() const& {
  return field72;
}

std::vector<float> Struct9::get_field72() && {
  return std::move(field72);
}

void Struct9::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_LIST;
  }
}

void swap(Struct9& a, Struct9& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct9::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct9::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct9::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct9::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct9::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct9::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct9::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct9::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct10::__clear() {
  // clear all fields
  field1 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field2 = 0;
  field3 = 0;
  field4.clear();
  field5.clear();
  field6 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field7 = 0;
  field8.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field9);
  field10 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field11 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field12);
  field13 = 0;
  field14 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field15);
  field16.clear();
  field17.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field18);
  field19.clear();
  field20 = 0;
  field21.clear();
  field22 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field23 = 0;
  field24.clear();
  field25 = 0;
  field26 = 0;
  field27.clear();
  field28.clear();
  field29 = 0;
  field30.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field31);
  field32.clear();
  field33 = 0;
  field34 = 0;
  field35.clear();
  field36 = 0;
  field37.clear();
  field38.clear();
  field39 = 0;
  field40.clear();
  field41 = 0;
  field42 = 0;
  field43 = 0;
  field44 = 0;
  field45 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field46 = 0;
  field47.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field48);
  field49.clear();
  field50.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field51);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field52);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field53);
  field54 = 0;
  field55 = 0;
  field56 = 0;
  field57.clear();
  field58 = 0;
  field59 = 0;
  field60.clear();
  field61 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field62);
  field63.clear();
  field64.clear();
  field65.clear();
  field66 = 0;
  field67.clear();
  field68.clear();
  field69.clear();
  field70.clear();
  field71 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field72);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field73);
  field74.clear();
  field75 = 0;
  field76 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field77.clear();
  field78.clear();
  field79.clear();
  field80.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field81);
  field82 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field83);
  field84.clear();
  field85 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field86);
  field87 = 0;
  field88.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field89);
  field90.clear();
  field91 = 0;
  field92.clear();
  field93.clear();
  field94.clear();
  field95.clear();
  field96 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field97 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field98);
  field99.clear();
  field100 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field101.clear();
  field102.clear();
  __isset.__clear();
}

bool Struct10::operator==(const Struct10& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field6, rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field10, rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field45, rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!((field83 == rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  if (!((field85 == rhs.field85))) {
    return false;
  }
  if (!((field86 == rhs.field86))) {
    return false;
  }
  if (!((field87 == rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!((field89 == rhs.field89))) {
    return false;
  }
  if (!((field90 == rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!((field92 == rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!((field94 == rhs.field94))) {
    return false;
  }
  if (!((field95 == rhs.field95))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field96, rhs.field96))) {
    return false;
  }
  if (!((field97 == rhs.field97))) {
    return false;
  }
  if (!((field98 == rhs.field98))) {
    return false;
  }
  if (!((field99 == rhs.field99))) {
    return false;
  }
  if (!((field100 == rhs.field100))) {
    return false;
  }
  if (!((field101 == rhs.field101))) {
    return false;
  }
  if (!((field102 == rhs.field102))) {
    return false;
  }
  return true;
}

const std::set<std::string>& Struct10::get_field4() const& {
  return field4;
}

std::set<std::string> Struct10::get_field4() && {
  return std::move(field4);
}

const std::map<int8_t, std::map<double, bool>>& Struct10::get_field5() const& {
  return field5;
}

std::map<int8_t, std::map<double, bool>> Struct10::get_field5() && {
  return std::move(field5);
}

const std::vector<float>& Struct10::get_field8() const& {
  return field8;
}

std::vector<float> Struct10::get_field8() && {
  return std::move(field8);
}

const  ::cpp2::Struct0& Struct10::get_field9() const& {
  return field9;
}

 ::cpp2::Struct0 Struct10::get_field9() && {
  return std::move(field9);
}

const  ::cpp2::Struct1& Struct10::get_field12() const& {
  return field12;
}

 ::cpp2::Struct1 Struct10::get_field12() && {
  return std::move(field12);
}

const  ::cpp2::Struct3& Struct10::get_field15() const& {
  return field15;
}

 ::cpp2::Struct3 Struct10::get_field15() && {
  return std::move(field15);
}

const std::set<std::vector<bool>>& Struct10::get_field16() const& {
  return field16;
}

std::set<std::vector<bool>> Struct10::get_field16() && {
  return std::move(field16);
}

const std::map< ::cpp2::Struct1, int64_t>& Struct10::get_field17() const& {
  return field17;
}

std::map< ::cpp2::Struct1, int64_t> Struct10::get_field17() && {
  return std::move(field17);
}

const  ::cpp2::Struct6& Struct10::get_field18() const& {
  return field18;
}

 ::cpp2::Struct6 Struct10::get_field18() && {
  return std::move(field18);
}

const std::vector<std::string>& Struct10::get_field19() const& {
  return field19;
}

std::vector<std::string> Struct10::get_field19() && {
  return std::move(field19);
}

const std::vector<std::map<int32_t, std::string>>& Struct10::get_field21() const& {
  return field21;
}

std::vector<std::map<int32_t, std::string>> Struct10::get_field21() && {
  return std::move(field21);
}

const std::map<int64_t, bool>& Struct10::get_field24() const& {
  return field24;
}

std::map<int64_t, bool> Struct10::get_field24() && {
  return std::move(field24);
}

const std::vector<bool>& Struct10::get_field27() const& {
  return field27;
}

std::vector<bool> Struct10::get_field27() && {
  return std::move(field27);
}

const std::map<std::string, std::string>& Struct10::get_field28() const& {
  return field28;
}

std::map<std::string, std::string> Struct10::get_field28() && {
  return std::move(field28);
}

const std::set<int16_t>& Struct10::get_field30() const& {
  return field30;
}

std::set<int16_t> Struct10::get_field30() && {
  return std::move(field30);
}

const  ::cpp2::Struct4& Struct10::get_field31() const& {
  return field31;
}

 ::cpp2::Struct4 Struct10::get_field31() && {
  return std::move(field31);
}

const std::set<int32_t>& Struct10::get_field32() const& {
  return field32;
}

std::set<int32_t> Struct10::get_field32() && {
  return std::move(field32);
}

const std::vector<int32_t>& Struct10::get_field35() const& {
  return field35;
}

std::vector<int32_t> Struct10::get_field35() && {
  return std::move(field35);
}

const std::map<std::string, std::map<int32_t, std::map<double, std::string>>>& Struct10::get_field37() const& {
  return field37;
}

std::map<std::string, std::map<int32_t, std::map<double, std::string>>> Struct10::get_field37() && {
  return std::move(field37);
}

const std::set<int32_t>& Struct10::get_field38() const& {
  return field38;
}

std::set<int32_t> Struct10::get_field38() && {
  return std::move(field38);
}

const std::set<std::string>& Struct10::get_field40() const& {
  return field40;
}

std::set<std::string> Struct10::get_field40() && {
  return std::move(field40);
}

const std::vector<std::map<double, std::string>>& Struct10::get_field47() const& {
  return field47;
}

std::vector<std::map<double, std::string>> Struct10::get_field47() && {
  return std::move(field47);
}

const  ::cpp2::Struct2& Struct10::get_field48() const& {
  return field48;
}

 ::cpp2::Struct2 Struct10::get_field48() && {
  return std::move(field48);
}

const std::vector<std::string>& Struct10::get_field49() const& {
  return field49;
}

std::vector<std::string> Struct10::get_field49() && {
  return std::move(field49);
}

const std::set<std::string>& Struct10::get_field50() const& {
  return field50;
}

std::set<std::string> Struct10::get_field50() && {
  return std::move(field50);
}

const  ::cpp2::Struct6& Struct10::get_field51() const& {
  return field51;
}

 ::cpp2::Struct6 Struct10::get_field51() && {
  return std::move(field51);
}

const  ::cpp2::Struct1& Struct10::get_field52() const& {
  return field52;
}

 ::cpp2::Struct1 Struct10::get_field52() && {
  return std::move(field52);
}

const  ::cpp2::Struct0& Struct10::get_field53() const& {
  return field53;
}

 ::cpp2::Struct0 Struct10::get_field53() && {
  return std::move(field53);
}

const std::map<int32_t,  ::cpp2::Struct0>& Struct10::get_field57() const& {
  return field57;
}

std::map<int32_t,  ::cpp2::Struct0> Struct10::get_field57() && {
  return std::move(field57);
}

const std::set<double>& Struct10::get_field60() const& {
  return field60;
}

std::set<double> Struct10::get_field60() && {
  return std::move(field60);
}

const  ::cpp2::Struct0& Struct10::get_field62() const& {
  return field62;
}

 ::cpp2::Struct0 Struct10::get_field62() && {
  return std::move(field62);
}

const std::map<float, float>& Struct10::get_field63() const& {
  return field63;
}

std::map<float, float> Struct10::get_field63() && {
  return std::move(field63);
}

const std::map<float, int8_t>& Struct10::get_field64() const& {
  return field64;
}

std::map<float, int8_t> Struct10::get_field64() && {
  return std::move(field64);
}

const std::vector<float>& Struct10::get_field65() const& {
  return field65;
}

std::vector<float> Struct10::get_field65() && {
  return std::move(field65);
}

const std::vector<std::string>& Struct10::get_field67() const& {
  return field67;
}

std::vector<std::string> Struct10::get_field67() && {
  return std::move(field67);
}

const std::vector< ::cpp2::Struct0>& Struct10::get_field68() const& {
  return field68;
}

std::vector< ::cpp2::Struct0> Struct10::get_field68() && {
  return std::move(field68);
}

const std::set< ::cpp2::Struct1>& Struct10::get_field69() const& {
  return field69;
}

std::set< ::cpp2::Struct1> Struct10::get_field69() && {
  return std::move(field69);
}

const std::vector<bool>& Struct10::get_field70() const& {
  return field70;
}

std::vector<bool> Struct10::get_field70() && {
  return std::move(field70);
}

const  ::cpp2::Struct7& Struct10::get_field72() const& {
  return field72;
}

 ::cpp2::Struct7 Struct10::get_field72() && {
  return std::move(field72);
}

const  ::cpp2::Struct6& Struct10::get_field73() const& {
  return field73;
}

 ::cpp2::Struct6 Struct10::get_field73() && {
  return std::move(field73);
}

const std::map< ::cpp2::Struct2, std::string>& Struct10::get_field74() const& {
  return field74;
}

std::map< ::cpp2::Struct2, std::string> Struct10::get_field74() && {
  return std::move(field74);
}

const std::map<int16_t, std::string>& Struct10::get_field77() const& {
  return field77;
}

std::map<int16_t, std::string> Struct10::get_field77() && {
  return std::move(field77);
}

const std::set<int64_t>& Struct10::get_field78() const& {
  return field78;
}

std::set<int64_t> Struct10::get_field78() && {
  return std::move(field78);
}

const std::map<bool, int64_t>& Struct10::get_field79() const& {
  return field79;
}

std::map<bool, int64_t> Struct10::get_field79() && {
  return std::move(field79);
}

const std::map< ::cpp2::Struct3, bool>& Struct10::get_field80() const& {
  return field80;
}

std::map< ::cpp2::Struct3, bool> Struct10::get_field80() && {
  return std::move(field80);
}

const  ::cpp2::Struct4& Struct10::get_field81() const& {
  return field81;
}

 ::cpp2::Struct4 Struct10::get_field81() && {
  return std::move(field81);
}

const  ::cpp2::Struct5& Struct10::get_field83() const& {
  return field83;
}

 ::cpp2::Struct5 Struct10::get_field83() && {
  return std::move(field83);
}

const std::vector<std::string>& Struct10::get_field84() const& {
  return field84;
}

std::vector<std::string> Struct10::get_field84() && {
  return std::move(field84);
}

const  ::cpp2::Struct3& Struct10::get_field86() const& {
  return field86;
}

 ::cpp2::Struct3 Struct10::get_field86() && {
  return std::move(field86);
}

const std::set<bool>& Struct10::get_field88() const& {
  return field88;
}

std::set<bool> Struct10::get_field88() && {
  return std::move(field88);
}

const  ::cpp2::Struct0& Struct10::get_field89() const& {
  return field89;
}

 ::cpp2::Struct0 Struct10::get_field89() && {
  return std::move(field89);
}

const std::map< ::cpp2::Struct1, int16_t>& Struct10::get_field90() const& {
  return field90;
}

std::map< ::cpp2::Struct1, int16_t> Struct10::get_field90() && {
  return std::move(field90);
}

const std::set<std::string>& Struct10::get_field92() const& {
  return field92;
}

std::set<std::string> Struct10::get_field92() && {
  return std::move(field92);
}

const std::map<float, int64_t>& Struct10::get_field93() const& {
  return field93;
}

std::map<float, int64_t> Struct10::get_field93() && {
  return std::move(field93);
}

const std::vector<int8_t>& Struct10::get_field94() const& {
  return field94;
}

std::vector<int8_t> Struct10::get_field94() && {
  return std::move(field94);
}

const std::set<bool>& Struct10::get_field95() const& {
  return field95;
}

std::set<bool> Struct10::get_field95() && {
  return std::move(field95);
}

const  ::cpp2::Struct4& Struct10::get_field98() const& {
  return field98;
}

 ::cpp2::Struct4 Struct10::get_field98() && {
  return std::move(field98);
}

const std::set<double>& Struct10::get_field99() const& {
  return field99;
}

std::set<double> Struct10::get_field99() && {
  return std::move(field99);
}

const std::set<int8_t>& Struct10::get_field101() const& {
  return field101;
}

std::set<int8_t> Struct10::get_field101() && {
  return std::move(field101);
}

const std::map<std::string, std::set<double>>& Struct10::get_field102() const& {
  return field102;
}

std::map<std::string, std::set<double>> Struct10::get_field102() && {
  return std::move(field102);
}

void Struct10::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field96") {
    fid = 96;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field97") {
    fid = 97;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field98") {
    fid = 98;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field99") {
    fid = 99;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field100") {
    fid = 100;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field101") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field102") {
    fid = 102;
    _ftype = apache::thrift::protocol::T_MAP;
  }
}

void swap(Struct10& a, Struct10& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.field96, b.field96);
  swap(a.field97, b.field97);
  swap(a.field98, b.field98);
  swap(a.field99, b.field99);
  swap(a.field100, b.field100);
  swap(a.field101, b.field101);
  swap(a.field102, b.field102);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct10::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct10::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct10::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct10::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct10::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct10::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct10::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct10::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct11::__clear() {
  // clear all fields
  field1.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field2);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::clear(&field3);
  field4 = 0;
  field5.clear();
  field6.clear();
  field7.clear();
  field8.clear();
  field9.clear();
  field10.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field11);
  field12 = 0;
  field13 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field14);
  field15 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field16 = 0;
  field17.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field18);
  field19 = 0;
  field20 = 0;
  field21 = 0;
  field22.clear();
  field23 = 0;
  field24 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field25);
  field26.clear();
  field27 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field28 = 0;
  field29 = 0;
  field30.clear();
  field31.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field32);
  field33.clear();
  field34 = 0;
  field35 = 0;
  field36 = 0;
  field37 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field38.clear();
  field39 = 0;
  field40.clear();
  field41 = 0;
  field42 = 0;
  field43 = 0;
  field44 = 0;
  field45 = 0;
  field46 = 0;
  field47.clear();
  field48.clear();
  field49.clear();
  field50.clear();
  field51.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field52);
  field53 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field54.clear();
  field55 = 0;
  field56.clear();
  field57 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field58 = 0;
  field59 = 0;
  field60 = 0;
  field61.clear();
  field62 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field63.clear();
  field64.clear();
  field65.clear();
  field66 = 0;
  field67 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::clear(&field68);
  field69 = 0;
  field70.clear();
  field71.clear();
  field72 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field73.clear();
  field74 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field75 = 0;
  field76 = 0;
  field77 = 0;
  field78.clear();
  field79 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field80.clear();
  field81 = 0;
  field82.clear();
  field83 = 0;
  field84 = 0;
  field85.clear();
  field86.clear();
  field87 = 0;
  field88.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field89);
  field90 = 0;
  field91.clear();
  field92 = 0;
  field93.clear();
  field94.clear();
  field95 = 0;
  field96 = 0;
  field97.clear();
  field98.clear();
  field99 = 0;
  field100.clear();
  field101 = 0;
  field102.clear();
  field103 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field104.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field105);
  field106 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field107 = 0;
  field108 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field109 = 0;
  field110.clear();
  field111 = 0;
  field112.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field113);
  field114 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field115.clear();
  field116 = 0;
  field117 = 0;
  field118.clear();
  field119 = 0;
  field120 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field121.clear();
  field122.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field123);
  field124 = 0;
  field125 = 0;
  field126.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field127);
  field128.clear();
  field129 = 0;
  field130 = 0;
  field131.clear();
  field132.clear();
  field133 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field134.clear();
  field135 = 0;
  field136.clear();
  field137.clear();
  field138.clear();
  field139.clear();
  field140 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field141);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field142);
  field143.clear();
  field144.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field145);
  field146.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field147);
  field148 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field149.clear();
  field150 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field151);
  field152 = 0;
  field153.clear();
  field154 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field155 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field156);
  field157 = 0;
  field158 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field159 = 0;
  field160.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field161);
  field162 = 0;
  field163 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field164);
  field165 = 0;
  field166 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field167);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field168);
  field169 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field170 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field171);
  field172 = 0;
  field173 = 0;
  field174.clear();
  field175.clear();
  field176.clear();
  field177.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field178);
  field179.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field180);
  field181.clear();
  field182 = 0;
  field183.clear();
  field184 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field185);
  field186.clear();
  field187 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::clear(&field188);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field189);
  field190 = 0;
  field191.clear();
  field192.clear();
  __isset.__clear();
}

bool Struct11::operator==(const Struct11& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field27, rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field37, rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field53, rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field57, rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field72, rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!((field83 == rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  if (!((field85 == rhs.field85))) {
    return false;
  }
  if (!((field86 == rhs.field86))) {
    return false;
  }
  if (!((field87 == rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!((field89 == rhs.field89))) {
    return false;
  }
  if (!((field90 == rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!((field92 == rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!((field94 == rhs.field94))) {
    return false;
  }
  if (!((field95 == rhs.field95))) {
    return false;
  }
  if (!((field96 == rhs.field96))) {
    return false;
  }
  if (!((field97 == rhs.field97))) {
    return false;
  }
  if (!((field98 == rhs.field98))) {
    return false;
  }
  if (!((field99 == rhs.field99))) {
    return false;
  }
  if (!((field100 == rhs.field100))) {
    return false;
  }
  if (!((field101 == rhs.field101))) {
    return false;
  }
  if (!((field102 == rhs.field102))) {
    return false;
  }
  if (!((field103 == rhs.field103))) {
    return false;
  }
  if (!((field104 == rhs.field104))) {
    return false;
  }
  if (!((field105 == rhs.field105))) {
    return false;
  }
  if (!((field106 == rhs.field106))) {
    return false;
  }
  if (!((field107 == rhs.field107))) {
    return false;
  }
  if (!((field108 == rhs.field108))) {
    return false;
  }
  if (!((field109 == rhs.field109))) {
    return false;
  }
  if (!((field110 == rhs.field110))) {
    return false;
  }
  if (!((field111 == rhs.field111))) {
    return false;
  }
  if (!((field112 == rhs.field112))) {
    return false;
  }
  if (!((field113 == rhs.field113))) {
    return false;
  }
  if (!((field114 == rhs.field114))) {
    return false;
  }
  if (!((field115 == rhs.field115))) {
    return false;
  }
  if (!((field116 == rhs.field116))) {
    return false;
  }
  if (!((field117 == rhs.field117))) {
    return false;
  }
  if (!((field118 == rhs.field118))) {
    return false;
  }
  if (!((field119 == rhs.field119))) {
    return false;
  }
  if (!((field120 == rhs.field120))) {
    return false;
  }
  if (!((field121 == rhs.field121))) {
    return false;
  }
  if (!((field122 == rhs.field122))) {
    return false;
  }
  if (!((field123 == rhs.field123))) {
    return false;
  }
  if (!((field124 == rhs.field124))) {
    return false;
  }
  if (!((field125 == rhs.field125))) {
    return false;
  }
  if (!((field126 == rhs.field126))) {
    return false;
  }
  if (!((field127 == rhs.field127))) {
    return false;
  }
  if (!((field128 == rhs.field128))) {
    return false;
  }
  if (!((field129 == rhs.field129))) {
    return false;
  }
  if (!((field130 == rhs.field130))) {
    return false;
  }
  if (!((field131 == rhs.field131))) {
    return false;
  }
  if (!((field132 == rhs.field132))) {
    return false;
  }
  if (!((field133 == rhs.field133))) {
    return false;
  }
  if (!((field134 == rhs.field134))) {
    return false;
  }
  if (!((field135 == rhs.field135))) {
    return false;
  }
  if (!((field136 == rhs.field136))) {
    return false;
  }
  if (!((field137 == rhs.field137))) {
    return false;
  }
  if (!((field138 == rhs.field138))) {
    return false;
  }
  if (!((field139 == rhs.field139))) {
    return false;
  }
  if (!((field140 == rhs.field140))) {
    return false;
  }
  if (!((field141 == rhs.field141))) {
    return false;
  }
  if (!((field142 == rhs.field142))) {
    return false;
  }
  if (!((field143 == rhs.field143))) {
    return false;
  }
  if (!((field144 == rhs.field144))) {
    return false;
  }
  if (!((field145 == rhs.field145))) {
    return false;
  }
  if (!((field146 == rhs.field146))) {
    return false;
  }
  if (!((field147 == rhs.field147))) {
    return false;
  }
  if (!((field148 == rhs.field148))) {
    return false;
  }
  if (!((field149 == rhs.field149))) {
    return false;
  }
  if (!((field150 == rhs.field150))) {
    return false;
  }
  if (!((field151 == rhs.field151))) {
    return false;
  }
  if (!((field152 == rhs.field152))) {
    return false;
  }
  if (!((field153 == rhs.field153))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field154, rhs.field154))) {
    return false;
  }
  if (!((field155 == rhs.field155))) {
    return false;
  }
  if (!((field156 == rhs.field156))) {
    return false;
  }
  if (!((field157 == rhs.field157))) {
    return false;
  }
  if (!((field158 == rhs.field158))) {
    return false;
  }
  if (!((field159 == rhs.field159))) {
    return false;
  }
  if (!((field160 == rhs.field160))) {
    return false;
  }
  if (!((field161 == rhs.field161))) {
    return false;
  }
  if (!((field162 == rhs.field162))) {
    return false;
  }
  if (!((field163 == rhs.field163))) {
    return false;
  }
  if (!((field164 == rhs.field164))) {
    return false;
  }
  if (!((field165 == rhs.field165))) {
    return false;
  }
  if (!((field166 == rhs.field166))) {
    return false;
  }
  if (!((field167 == rhs.field167))) {
    return false;
  }
  if (!((field168 == rhs.field168))) {
    return false;
  }
  if (!((field169 == rhs.field169))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field170, rhs.field170))) {
    return false;
  }
  if (!((field171 == rhs.field171))) {
    return false;
  }
  if (!((field172 == rhs.field172))) {
    return false;
  }
  if (!((field173 == rhs.field173))) {
    return false;
  }
  if (!((field174 == rhs.field174))) {
    return false;
  }
  if (!((field175 == rhs.field175))) {
    return false;
  }
  if (!((field176 == rhs.field176))) {
    return false;
  }
  if (!((field177 == rhs.field177))) {
    return false;
  }
  if (!((field178 == rhs.field178))) {
    return false;
  }
  if (!((field179 == rhs.field179))) {
    return false;
  }
  if (!((field180 == rhs.field180))) {
    return false;
  }
  if (!((field181 == rhs.field181))) {
    return false;
  }
  if (!((field182 == rhs.field182))) {
    return false;
  }
  if (!((field183 == rhs.field183))) {
    return false;
  }
  if (!((field184 == rhs.field184))) {
    return false;
  }
  if (!((field185 == rhs.field185))) {
    return false;
  }
  if (!((field186 == rhs.field186))) {
    return false;
  }
  if (!((field187 == rhs.field187))) {
    return false;
  }
  if (!((field188 == rhs.field188))) {
    return false;
  }
  if (!((field189 == rhs.field189))) {
    return false;
  }
  if (!((field190 == rhs.field190))) {
    return false;
  }
  if (!((field191 == rhs.field191))) {
    return false;
  }
  if (!((field192 == rhs.field192))) {
    return false;
  }
  return true;
}

const std::vector<float>& Struct11::get_field1() const& {
  return field1;
}

std::vector<float> Struct11::get_field1() && {
  return std::move(field1);
}

const  ::cpp2::Struct5& Struct11::get_field2() const& {
  return field2;
}

 ::cpp2::Struct5 Struct11::get_field2() && {
  return std::move(field2);
}

const  ::cpp2::Struct8& Struct11::get_field3() const& {
  return field3;
}

 ::cpp2::Struct8 Struct11::get_field3() && {
  return std::move(field3);
}

const std::set< ::cpp2::Struct2>& Struct11::get_field5() const& {
  return field5;
}

std::set< ::cpp2::Struct2> Struct11::get_field5() && {
  return std::move(field5);
}

const std::map<int16_t, int8_t>& Struct11::get_field6() const& {
  return field6;
}

std::map<int16_t, int8_t> Struct11::get_field6() && {
  return std::move(field6);
}

const std::map< ::cpp2::Struct2, std::vector<int64_t>>& Struct11::get_field7() const& {
  return field7;
}

std::map< ::cpp2::Struct2, std::vector<int64_t>> Struct11::get_field7() && {
  return std::move(field7);
}

const std::map< ::cpp2::Struct1, int32_t>& Struct11::get_field8() const& {
  return field8;
}

std::map< ::cpp2::Struct1, int32_t> Struct11::get_field8() && {
  return std::move(field8);
}

const std::vector<std::string>& Struct11::get_field9() const& {
  return field9;
}

std::vector<std::string> Struct11::get_field9() && {
  return std::move(field9);
}

const std::map<int16_t, std::map<int64_t, float>>& Struct11::get_field10() const& {
  return field10;
}

std::map<int16_t, std::map<int64_t, float>> Struct11::get_field10() && {
  return std::move(field10);
}

const  ::cpp2::Struct5& Struct11::get_field11() const& {
  return field11;
}

 ::cpp2::Struct5 Struct11::get_field11() && {
  return std::move(field11);
}

const  ::cpp2::Struct4& Struct11::get_field14() const& {
  return field14;
}

 ::cpp2::Struct4 Struct11::get_field14() && {
  return std::move(field14);
}

const std::vector<bool>& Struct11::get_field17() const& {
  return field17;
}

std::vector<bool> Struct11::get_field17() && {
  return std::move(field17);
}

const  ::cpp2::Struct5& Struct11::get_field18() const& {
  return field18;
}

 ::cpp2::Struct5 Struct11::get_field18() && {
  return std::move(field18);
}

const std::map<std::vector<int32_t>, std::set<int32_t>>& Struct11::get_field22() const& {
  return field22;
}

std::map<std::vector<int32_t>, std::set<int32_t>> Struct11::get_field22() && {
  return std::move(field22);
}

const  ::cpp2::Struct6& Struct11::get_field25() const& {
  return field25;
}

 ::cpp2::Struct6 Struct11::get_field25() && {
  return std::move(field25);
}

const std::set<bool>& Struct11::get_field26() const& {
  return field26;
}

std::set<bool> Struct11::get_field26() && {
  return std::move(field26);
}

const std::map<int8_t, double>& Struct11::get_field30() const& {
  return field30;
}

std::map<int8_t, double> Struct11::get_field30() && {
  return std::move(field30);
}

const std::map<std::map<float, float>, double>& Struct11::get_field31() const& {
  return field31;
}

std::map<std::map<float, float>, double> Struct11::get_field31() && {
  return std::move(field31);
}

const  ::cpp2::Struct6& Struct11::get_field32() const& {
  return field32;
}

 ::cpp2::Struct6 Struct11::get_field32() && {
  return std::move(field32);
}

const std::set<int8_t>& Struct11::get_field33() const& {
  return field33;
}

std::set<int8_t> Struct11::get_field33() && {
  return std::move(field33);
}

const std::set<bool>& Struct11::get_field38() const& {
  return field38;
}

std::set<bool> Struct11::get_field38() && {
  return std::move(field38);
}

const std::map<int32_t,  ::cpp2::Struct2>& Struct11::get_field40() const& {
  return field40;
}

std::map<int32_t,  ::cpp2::Struct2> Struct11::get_field40() && {
  return std::move(field40);
}

const std::map<int16_t, int16_t>& Struct11::get_field47() const& {
  return field47;
}

std::map<int16_t, int16_t> Struct11::get_field47() && {
  return std::move(field47);
}

const std::map<int8_t, std::string>& Struct11::get_field48() const& {
  return field48;
}

std::map<int8_t, std::string> Struct11::get_field48() && {
  return std::move(field48);
}

const std::map<int64_t, int16_t>& Struct11::get_field49() const& {
  return field49;
}

std::map<int64_t, int16_t> Struct11::get_field49() && {
  return std::move(field49);
}

const std::vector<std::string>& Struct11::get_field50() const& {
  return field50;
}

std::vector<std::string> Struct11::get_field50() && {
  return std::move(field50);
}

const std::vector<bool>& Struct11::get_field51() const& {
  return field51;
}

std::vector<bool> Struct11::get_field51() && {
  return std::move(field51);
}

const  ::cpp2::Struct3& Struct11::get_field52() const& {
  return field52;
}

 ::cpp2::Struct3 Struct11::get_field52() && {
  return std::move(field52);
}

const std::set<float>& Struct11::get_field54() const& {
  return field54;
}

std::set<float> Struct11::get_field54() && {
  return std::move(field54);
}

const std::map<int32_t, int16_t>& Struct11::get_field56() const& {
  return field56;
}

std::map<int32_t, int16_t> Struct11::get_field56() && {
  return std::move(field56);
}

const std::map<int32_t, bool>& Struct11::get_field61() const& {
  return field61;
}

std::map<int32_t, bool> Struct11::get_field61() && {
  return std::move(field61);
}

const std::map<int32_t, std::vector<int64_t>>& Struct11::get_field63() const& {
  return field63;
}

std::map<int32_t, std::vector<int64_t>> Struct11::get_field63() && {
  return std::move(field63);
}

const std::map<std::set<int32_t>, int8_t>& Struct11::get_field64() const& {
  return field64;
}

std::map<std::set<int32_t>, int8_t> Struct11::get_field64() && {
  return std::move(field64);
}

const std::set<int8_t>& Struct11::get_field65() const& {
  return field65;
}

std::set<int8_t> Struct11::get_field65() && {
  return std::move(field65);
}

const  ::cpp2::Struct10& Struct11::get_field68() const& {
  return field68;
}

 ::cpp2::Struct10 Struct11::get_field68() && {
  return std::move(field68);
}

const std::vector<std::set< ::cpp2::Struct7>>& Struct11::get_field70() const& {
  return field70;
}

std::vector<std::set< ::cpp2::Struct7>> Struct11::get_field70() && {
  return std::move(field70);
}

const std::vector<std::vector<double>>& Struct11::get_field71() const& {
  return field71;
}

std::vector<std::vector<double>> Struct11::get_field71() && {
  return std::move(field71);
}

const std::map<float, int8_t>& Struct11::get_field73() const& {
  return field73;
}

std::map<float, int8_t> Struct11::get_field73() && {
  return std::move(field73);
}

const std::map<int64_t, int16_t>& Struct11::get_field78() const& {
  return field78;
}

std::map<int64_t, int16_t> Struct11::get_field78() && {
  return std::move(field78);
}

const std::vector<int16_t>& Struct11::get_field80() const& {
  return field80;
}

std::vector<int16_t> Struct11::get_field80() && {
  return std::move(field80);
}

const std::vector<int16_t>& Struct11::get_field82() const& {
  return field82;
}

std::vector<int16_t> Struct11::get_field82() && {
  return std::move(field82);
}

const std::map<std::set<int16_t>, std::string>& Struct11::get_field85() const& {
  return field85;
}

std::map<std::set<int16_t>, std::string> Struct11::get_field85() && {
  return std::move(field85);
}

const std::map<std::string, std::map<bool, int64_t>>& Struct11::get_field86() const& {
  return field86;
}

std::map<std::string, std::map<bool, int64_t>> Struct11::get_field86() && {
  return std::move(field86);
}

const std::vector<int16_t>& Struct11::get_field88() const& {
  return field88;
}

std::vector<int16_t> Struct11::get_field88() && {
  return std::move(field88);
}

const  ::cpp2::Struct2& Struct11::get_field89() const& {
  return field89;
}

 ::cpp2::Struct2 Struct11::get_field89() && {
  return std::move(field89);
}

const std::set<int8_t>& Struct11::get_field91() const& {
  return field91;
}

std::set<int8_t> Struct11::get_field91() && {
  return std::move(field91);
}

const std::map<std::vector<int64_t>, int8_t>& Struct11::get_field93() const& {
  return field93;
}

std::map<std::vector<int64_t>, int8_t> Struct11::get_field93() && {
  return std::move(field93);
}

const std::vector<std::set<int8_t>>& Struct11::get_field94() const& {
  return field94;
}

std::vector<std::set<int8_t>> Struct11::get_field94() && {
  return std::move(field94);
}

const std::vector< ::cpp2::Struct1>& Struct11::get_field97() const& {
  return field97;
}

std::vector< ::cpp2::Struct1> Struct11::get_field97() && {
  return std::move(field97);
}

const std::set<bool>& Struct11::get_field98() const& {
  return field98;
}

std::set<bool> Struct11::get_field98() && {
  return std::move(field98);
}

const std::vector<std::map<bool, bool>>& Struct11::get_field100() const& {
  return field100;
}

std::vector<std::map<bool, bool>> Struct11::get_field100() && {
  return std::move(field100);
}

const std::vector<std::string>& Struct11::get_field102() const& {
  return field102;
}

std::vector<std::string> Struct11::get_field102() && {
  return std::move(field102);
}

const std::set<int8_t>& Struct11::get_field104() const& {
  return field104;
}

std::set<int8_t> Struct11::get_field104() && {
  return std::move(field104);
}

const  ::cpp2::Struct2& Struct11::get_field105() const& {
  return field105;
}

 ::cpp2::Struct2 Struct11::get_field105() && {
  return std::move(field105);
}

const std::map< ::cpp2::Struct4, std::string>& Struct11::get_field110() const& {
  return field110;
}

std::map< ::cpp2::Struct4, std::string> Struct11::get_field110() && {
  return std::move(field110);
}

const std::vector<bool>& Struct11::get_field112() const& {
  return field112;
}

std::vector<bool> Struct11::get_field112() && {
  return std::move(field112);
}

const  ::cpp2::Struct4& Struct11::get_field113() const& {
  return field113;
}

 ::cpp2::Struct4 Struct11::get_field113() && {
  return std::move(field113);
}

const std::set<int16_t>& Struct11::get_field115() const& {
  return field115;
}

std::set<int16_t> Struct11::get_field115() && {
  return std::move(field115);
}

const std::map<double, int8_t>& Struct11::get_field118() const& {
  return field118;
}

std::map<double, int8_t> Struct11::get_field118() && {
  return std::move(field118);
}

const std::vector< ::cpp2::Struct0>& Struct11::get_field121() const& {
  return field121;
}

std::vector< ::cpp2::Struct0> Struct11::get_field121() && {
  return std::move(field121);
}

const std::set<std::set<double>>& Struct11::get_field122() const& {
  return field122;
}

std::set<std::set<double>> Struct11::get_field122() && {
  return std::move(field122);
}

const  ::cpp2::Struct5& Struct11::get_field123() const& {
  return field123;
}

 ::cpp2::Struct5 Struct11::get_field123() && {
  return std::move(field123);
}

const std::map<float, float>& Struct11::get_field126() const& {
  return field126;
}

std::map<float, float> Struct11::get_field126() && {
  return std::move(field126);
}

const  ::cpp2::Struct6& Struct11::get_field127() const& {
  return field127;
}

 ::cpp2::Struct6 Struct11::get_field127() && {
  return std::move(field127);
}

const std::map<float, std::string>& Struct11::get_field128() const& {
  return field128;
}

std::map<float, std::string> Struct11::get_field128() && {
  return std::move(field128);
}

const std::map< ::cpp2::Struct0, int8_t>& Struct11::get_field131() const& {
  return field131;
}

std::map< ::cpp2::Struct0, int8_t> Struct11::get_field131() && {
  return std::move(field131);
}

const std::vector<double>& Struct11::get_field132() const& {
  return field132;
}

std::vector<double> Struct11::get_field132() && {
  return std::move(field132);
}

const std::map<int16_t, std::string>& Struct11::get_field134() const& {
  return field134;
}

std::map<int16_t, std::string> Struct11::get_field134() && {
  return std::move(field134);
}

const std::vector<std::vector<int64_t>>& Struct11::get_field136() const& {
  return field136;
}

std::vector<std::vector<int64_t>> Struct11::get_field136() && {
  return std::move(field136);
}

const std::vector<double>& Struct11::get_field137() const& {
  return field137;
}

std::vector<double> Struct11::get_field137() && {
  return std::move(field137);
}

const std::set<double>& Struct11::get_field138() const& {
  return field138;
}

std::set<double> Struct11::get_field138() && {
  return std::move(field138);
}

const std::set<double>& Struct11::get_field139() const& {
  return field139;
}

std::set<double> Struct11::get_field139() && {
  return std::move(field139);
}

const  ::cpp2::Struct1& Struct11::get_field141() const& {
  return field141;
}

 ::cpp2::Struct1 Struct11::get_field141() && {
  return std::move(field141);
}

const  ::cpp2::Struct2& Struct11::get_field142() const& {
  return field142;
}

 ::cpp2::Struct2 Struct11::get_field142() && {
  return std::move(field142);
}

const std::map<int32_t, std::string>& Struct11::get_field143() const& {
  return field143;
}

std::map<int32_t, std::string> Struct11::get_field143() && {
  return std::move(field143);
}

const std::map<double, int32_t>& Struct11::get_field144() const& {
  return field144;
}

std::map<double, int32_t> Struct11::get_field144() && {
  return std::move(field144);
}

const  ::cpp2::Struct5& Struct11::get_field145() const& {
  return field145;
}

 ::cpp2::Struct5 Struct11::get_field145() && {
  return std::move(field145);
}

const std::vector<int16_t>& Struct11::get_field146() const& {
  return field146;
}

std::vector<int16_t> Struct11::get_field146() && {
  return std::move(field146);
}

const  ::cpp2::Struct2& Struct11::get_field147() const& {
  return field147;
}

 ::cpp2::Struct2 Struct11::get_field147() && {
  return std::move(field147);
}

const std::set<std::string>& Struct11::get_field149() const& {
  return field149;
}

std::set<std::string> Struct11::get_field149() && {
  return std::move(field149);
}

const  ::cpp2::Struct0& Struct11::get_field151() const& {
  return field151;
}

 ::cpp2::Struct0 Struct11::get_field151() && {
  return std::move(field151);
}

const std::vector<bool>& Struct11::get_field153() const& {
  return field153;
}

std::vector<bool> Struct11::get_field153() && {
  return std::move(field153);
}

const  ::cpp2::Struct1& Struct11::get_field156() const& {
  return field156;
}

 ::cpp2::Struct1 Struct11::get_field156() && {
  return std::move(field156);
}

const std::vector<int32_t>& Struct11::get_field160() const& {
  return field160;
}

std::vector<int32_t> Struct11::get_field160() && {
  return std::move(field160);
}

const  ::cpp2::Struct0& Struct11::get_field161() const& {
  return field161;
}

 ::cpp2::Struct0 Struct11::get_field161() && {
  return std::move(field161);
}

const  ::cpp2::Struct7& Struct11::get_field164() const& {
  return field164;
}

 ::cpp2::Struct7 Struct11::get_field164() && {
  return std::move(field164);
}

const  ::cpp2::Struct7& Struct11::get_field167() const& {
  return field167;
}

 ::cpp2::Struct7 Struct11::get_field167() && {
  return std::move(field167);
}

const  ::cpp2::Struct0& Struct11::get_field168() const& {
  return field168;
}

 ::cpp2::Struct0 Struct11::get_field168() && {
  return std::move(field168);
}

const  ::cpp2::Struct1& Struct11::get_field171() const& {
  return field171;
}

 ::cpp2::Struct1 Struct11::get_field171() && {
  return std::move(field171);
}

const std::set<int64_t>& Struct11::get_field174() const& {
  return field174;
}

std::set<int64_t> Struct11::get_field174() && {
  return std::move(field174);
}

const std::map<float, int16_t>& Struct11::get_field175() const& {
  return field175;
}

std::map<float, int16_t> Struct11::get_field175() && {
  return std::move(field175);
}

const std::vector<std::map<int64_t, bool>>& Struct11::get_field176() const& {
  return field176;
}

std::vector<std::map<int64_t, bool>> Struct11::get_field176() && {
  return std::move(field176);
}

const std::set<int16_t>& Struct11::get_field177() const& {
  return field177;
}

std::set<int16_t> Struct11::get_field177() && {
  return std::move(field177);
}

const  ::cpp2::Struct1& Struct11::get_field178() const& {
  return field178;
}

 ::cpp2::Struct1 Struct11::get_field178() && {
  return std::move(field178);
}

const std::map<int32_t,  ::cpp2::Struct1>& Struct11::get_field179() const& {
  return field179;
}

std::map<int32_t,  ::cpp2::Struct1> Struct11::get_field179() && {
  return std::move(field179);
}

const  ::cpp2::Struct7& Struct11::get_field180() const& {
  return field180;
}

 ::cpp2::Struct7 Struct11::get_field180() && {
  return std::move(field180);
}

const std::map<bool, int16_t>& Struct11::get_field181() const& {
  return field181;
}

std::map<bool, int16_t> Struct11::get_field181() && {
  return std::move(field181);
}

const std::vector<std::string>& Struct11::get_field183() const& {
  return field183;
}

std::vector<std::string> Struct11::get_field183() && {
  return std::move(field183);
}

const  ::cpp2::Struct3& Struct11::get_field185() const& {
  return field185;
}

 ::cpp2::Struct3 Struct11::get_field185() && {
  return std::move(field185);
}

const std::set< ::cpp2::Struct3>& Struct11::get_field186() const& {
  return field186;
}

std::set< ::cpp2::Struct3> Struct11::get_field186() && {
  return std::move(field186);
}

const  ::cpp2::Struct8& Struct11::get_field188() const& {
  return field188;
}

 ::cpp2::Struct8 Struct11::get_field188() && {
  return std::move(field188);
}

const  ::cpp2::Struct0& Struct11::get_field189() const& {
  return field189;
}

 ::cpp2::Struct0 Struct11::get_field189() && {
  return std::move(field189);
}

const std::vector<int32_t>& Struct11::get_field191() const& {
  return field191;
}

std::vector<int32_t> Struct11::get_field191() && {
  return std::move(field191);
}

const std::map<std::vector<std::string>, std::vector<std::map<double, int8_t>>>& Struct11::get_field192() const& {
  return field192;
}

std::map<std::vector<std::string>, std::vector<std::map<double, int8_t>>> Struct11::get_field192() && {
  return std::move(field192);
}

void Struct11::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field96") {
    fid = 96;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field97") {
    fid = 97;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field98") {
    fid = 98;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field99") {
    fid = 99;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field100") {
    fid = 100;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field101") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field102") {
    fid = 102;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field103") {
    fid = 103;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field104") {
    fid = 104;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field105") {
    fid = 105;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field106") {
    fid = 106;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field107") {
    fid = 107;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field108") {
    fid = 108;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field109") {
    fid = 109;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field110") {
    fid = 110;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field111") {
    fid = 111;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field112") {
    fid = 112;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field113") {
    fid = 113;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field114") {
    fid = 114;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field115") {
    fid = 115;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field116") {
    fid = 116;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field117") {
    fid = 117;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field118") {
    fid = 118;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field119") {
    fid = 119;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field120") {
    fid = 120;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field121") {
    fid = 121;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field122") {
    fid = 122;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field123") {
    fid = 123;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field124") {
    fid = 124;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field125") {
    fid = 125;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field126") {
    fid = 126;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field127") {
    fid = 127;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field128") {
    fid = 128;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field129") {
    fid = 129;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field130") {
    fid = 130;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field131") {
    fid = 131;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field132") {
    fid = 132;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field133") {
    fid = 133;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field134") {
    fid = 134;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field135") {
    fid = 135;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field136") {
    fid = 136;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field137") {
    fid = 137;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field138") {
    fid = 138;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field139") {
    fid = 139;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field140") {
    fid = 140;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field141") {
    fid = 141;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field142") {
    fid = 142;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field143") {
    fid = 143;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field144") {
    fid = 144;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field145") {
    fid = 145;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field146") {
    fid = 146;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field147") {
    fid = 147;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field148") {
    fid = 148;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field149") {
    fid = 149;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field150") {
    fid = 150;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field151") {
    fid = 151;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field152") {
    fid = 152;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field153") {
    fid = 153;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field154") {
    fid = 154;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field155") {
    fid = 155;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field156") {
    fid = 156;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field157") {
    fid = 157;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field158") {
    fid = 158;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field159") {
    fid = 159;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field160") {
    fid = 160;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field161") {
    fid = 161;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field162") {
    fid = 162;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field163") {
    fid = 163;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field164") {
    fid = 164;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field165") {
    fid = 165;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field166") {
    fid = 166;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field167") {
    fid = 167;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field168") {
    fid = 168;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field169") {
    fid = 169;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field170") {
    fid = 170;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field171") {
    fid = 171;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field172") {
    fid = 172;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field173") {
    fid = 173;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field174") {
    fid = 174;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field175") {
    fid = 175;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field176") {
    fid = 176;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field177") {
    fid = 177;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field178") {
    fid = 178;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field179") {
    fid = 179;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field180") {
    fid = 180;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field181") {
    fid = 181;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field182") {
    fid = 182;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field183") {
    fid = 183;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field184") {
    fid = 184;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field185") {
    fid = 185;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field186") {
    fid = 186;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field187") {
    fid = 187;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field188") {
    fid = 188;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field189") {
    fid = 189;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field190") {
    fid = 190;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field191") {
    fid = 191;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field192") {
    fid = 192;
    _ftype = apache::thrift::protocol::T_MAP;
  }
}

void swap(Struct11& a, Struct11& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.field96, b.field96);
  swap(a.field97, b.field97);
  swap(a.field98, b.field98);
  swap(a.field99, b.field99);
  swap(a.field100, b.field100);
  swap(a.field101, b.field101);
  swap(a.field102, b.field102);
  swap(a.field103, b.field103);
  swap(a.field104, b.field104);
  swap(a.field105, b.field105);
  swap(a.field106, b.field106);
  swap(a.field107, b.field107);
  swap(a.field108, b.field108);
  swap(a.field109, b.field109);
  swap(a.field110, b.field110);
  swap(a.field111, b.field111);
  swap(a.field112, b.field112);
  swap(a.field113, b.field113);
  swap(a.field114, b.field114);
  swap(a.field115, b.field115);
  swap(a.field116, b.field116);
  swap(a.field117, b.field117);
  swap(a.field118, b.field118);
  swap(a.field119, b.field119);
  swap(a.field120, b.field120);
  swap(a.field121, b.field121);
  swap(a.field122, b.field122);
  swap(a.field123, b.field123);
  swap(a.field124, b.field124);
  swap(a.field125, b.field125);
  swap(a.field126, b.field126);
  swap(a.field127, b.field127);
  swap(a.field128, b.field128);
  swap(a.field129, b.field129);
  swap(a.field130, b.field130);
  swap(a.field131, b.field131);
  swap(a.field132, b.field132);
  swap(a.field133, b.field133);
  swap(a.field134, b.field134);
  swap(a.field135, b.field135);
  swap(a.field136, b.field136);
  swap(a.field137, b.field137);
  swap(a.field138, b.field138);
  swap(a.field139, b.field139);
  swap(a.field140, b.field140);
  swap(a.field141, b.field141);
  swap(a.field142, b.field142);
  swap(a.field143, b.field143);
  swap(a.field144, b.field144);
  swap(a.field145, b.field145);
  swap(a.field146, b.field146);
  swap(a.field147, b.field147);
  swap(a.field148, b.field148);
  swap(a.field149, b.field149);
  swap(a.field150, b.field150);
  swap(a.field151, b.field151);
  swap(a.field152, b.field152);
  swap(a.field153, b.field153);
  swap(a.field154, b.field154);
  swap(a.field155, b.field155);
  swap(a.field156, b.field156);
  swap(a.field157, b.field157);
  swap(a.field158, b.field158);
  swap(a.field159, b.field159);
  swap(a.field160, b.field160);
  swap(a.field161, b.field161);
  swap(a.field162, b.field162);
  swap(a.field163, b.field163);
  swap(a.field164, b.field164);
  swap(a.field165, b.field165);
  swap(a.field166, b.field166);
  swap(a.field167, b.field167);
  swap(a.field168, b.field168);
  swap(a.field169, b.field169);
  swap(a.field170, b.field170);
  swap(a.field171, b.field171);
  swap(a.field172, b.field172);
  swap(a.field173, b.field173);
  swap(a.field174, b.field174);
  swap(a.field175, b.field175);
  swap(a.field176, b.field176);
  swap(a.field177, b.field177);
  swap(a.field178, b.field178);
  swap(a.field179, b.field179);
  swap(a.field180, b.field180);
  swap(a.field181, b.field181);
  swap(a.field182, b.field182);
  swap(a.field183, b.field183);
  swap(a.field184, b.field184);
  swap(a.field185, b.field185);
  swap(a.field186, b.field186);
  swap(a.field187, b.field187);
  swap(a.field188, b.field188);
  swap(a.field189, b.field189);
  swap(a.field190, b.field190);
  swap(a.field191, b.field191);
  swap(a.field192, b.field192);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct11::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct11::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct11::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct11::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct11::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct11::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct11::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct11::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct12::__clear() {
  // clear all fields
  field1 = 0;
  field2.clear();
  field3 = 0;
  field4 = 0;
  field5 = 0;
  field6.clear();
  field7 = 0;
  field8 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::clear(&field9);
  field10.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field11);
  field12 = 0;
  field13.clear();
  field14.clear();
  field15 = 0;
  field16 = 0;
  field17 = 0;
  field18.clear();
  field19.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field20);
  field21.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field22);
  field23 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field24);
  field25.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field26);
  field27.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field28);
  field29 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field30 = 0;
  field31.clear();
  field32 = 0;
  field33 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field34 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field35.clear();
  field36 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field37 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field38 = 0;
  field39 = 0;
  field40 = 0;
  field41 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field42 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::clear(&field43);
  field44.clear();
  field45 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field46);
  field47.clear();
  field48.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field49);
  field50.clear();
  field51 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field52);
  field53.clear();
  field54.clear();
  field55 = 0;
  field56.clear();
  field57 = 0;
  field58 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field59);
  field60 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field61);
  field62.clear();
  field63.clear();
  field64.clear();
  field65 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field66.clear();
  field67.clear();
  field68 = 0;
  field69.clear();
  field70.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field71);
  field72.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field73);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field74);
  field75 = 0;
  field76.clear();
  field77 = 0;
  field78 = 0;
  field79 = 0;
  field80 = 0;
  field81 = 0;
  field82 = 0;
  field83 = 0;
  field84 = 0;
  field85.clear();
  field86 = 0;
  field87.clear();
  field88 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field89.clear();
  field90 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field91 = 0;
  field92.clear();
  field93.clear();
  field94.clear();
  field95 = 0;
  field96.clear();
  field97 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field98 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field99 = 0;
  field100 = 0;
  __isset.__clear();
}

bool Struct12::operator==(const Struct12& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field33, rhs.field33))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field34, rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field37, rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field41, rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!((field83 == rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  if (!((field85 == rhs.field85))) {
    return false;
  }
  if (!((field86 == rhs.field86))) {
    return false;
  }
  if (!((field87 == rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!((field89 == rhs.field89))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field90, rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!((field92 == rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!((field94 == rhs.field94))) {
    return false;
  }
  if (!((field95 == rhs.field95))) {
    return false;
  }
  if (!((field96 == rhs.field96))) {
    return false;
  }
  if (!((field97 == rhs.field97))) {
    return false;
  }
  if (!((field98 == rhs.field98))) {
    return false;
  }
  if (!((field99 == rhs.field99))) {
    return false;
  }
  if (!((field100 == rhs.field100))) {
    return false;
  }
  return true;
}

const std::set<std::set<double>>& Struct12::get_field2() const& {
  return field2;
}

std::set<std::set<double>> Struct12::get_field2() && {
  return std::move(field2);
}

const std::map<double, double>& Struct12::get_field6() const& {
  return field6;
}

std::map<double, double> Struct12::get_field6() && {
  return std::move(field6);
}

const  ::cpp2::Struct10& Struct12::get_field9() const& {
  return field9;
}

 ::cpp2::Struct10 Struct12::get_field9() && {
  return std::move(field9);
}

const std::map<std::string, std::string>& Struct12::get_field10() const& {
  return field10;
}

std::map<std::string, std::string> Struct12::get_field10() && {
  return std::move(field10);
}

const  ::cpp2::Struct0& Struct12::get_field11() const& {
  return field11;
}

 ::cpp2::Struct0 Struct12::get_field11() && {
  return std::move(field11);
}

const std::set<std::map<int16_t, int64_t>>& Struct12::get_field13() const& {
  return field13;
}

std::set<std::map<int16_t, int64_t>> Struct12::get_field13() && {
  return std::move(field13);
}

const std::map<int16_t, std::vector<int16_t>>& Struct12::get_field14() const& {
  return field14;
}

std::map<int16_t, std::vector<int16_t>> Struct12::get_field14() && {
  return std::move(field14);
}

const std::map<int64_t, int32_t>& Struct12::get_field18() const& {
  return field18;
}

std::map<int64_t, int32_t> Struct12::get_field18() && {
  return std::move(field18);
}

const std::map<int64_t, int8_t>& Struct12::get_field19() const& {
  return field19;
}

std::map<int64_t, int8_t> Struct12::get_field19() && {
  return std::move(field19);
}

const  ::cpp2::Struct6& Struct12::get_field20() const& {
  return field20;
}

 ::cpp2::Struct6 Struct12::get_field20() && {
  return std::move(field20);
}

const std::map<std::vector<int32_t>, std::vector<float>>& Struct12::get_field21() const& {
  return field21;
}

std::map<std::vector<int32_t>, std::vector<float>> Struct12::get_field21() && {
  return std::move(field21);
}

const  ::cpp2::Struct1& Struct12::get_field22() const& {
  return field22;
}

 ::cpp2::Struct1 Struct12::get_field22() && {
  return std::move(field22);
}

const  ::cpp2::Struct4& Struct12::get_field24() const& {
  return field24;
}

 ::cpp2::Struct4 Struct12::get_field24() && {
  return std::move(field24);
}

const std::vector<std::set<int64_t>>& Struct12::get_field25() const& {
  return field25;
}

std::vector<std::set<int64_t>> Struct12::get_field25() && {
  return std::move(field25);
}

const  ::cpp2::Struct3& Struct12::get_field26() const& {
  return field26;
}

 ::cpp2::Struct3 Struct12::get_field26() && {
  return std::move(field26);
}

const std::map<int8_t, std::string>& Struct12::get_field27() const& {
  return field27;
}

std::map<int8_t, std::string> Struct12::get_field27() && {
  return std::move(field27);
}

const  ::cpp2::Struct1& Struct12::get_field28() const& {
  return field28;
}

 ::cpp2::Struct1 Struct12::get_field28() && {
  return std::move(field28);
}

const std::map<std::string, int16_t>& Struct12::get_field31() const& {
  return field31;
}

std::map<std::string, int16_t> Struct12::get_field31() && {
  return std::move(field31);
}

const std::vector<int64_t>& Struct12::get_field35() const& {
  return field35;
}

std::vector<int64_t> Struct12::get_field35() && {
  return std::move(field35);
}

const  ::cpp2::Struct10& Struct12::get_field43() const& {
  return field43;
}

 ::cpp2::Struct10 Struct12::get_field43() && {
  return std::move(field43);
}

const std::map<int8_t, int32_t>& Struct12::get_field44() const& {
  return field44;
}

std::map<int8_t, int32_t> Struct12::get_field44() && {
  return std::move(field44);
}

const  ::cpp2::Struct4& Struct12::get_field46() const& {
  return field46;
}

 ::cpp2::Struct4 Struct12::get_field46() && {
  return std::move(field46);
}

const std::map<double, std::vector<std::map<double, float>>>& Struct12::get_field47() const& {
  return field47;
}

std::map<double, std::vector<std::map<double, float>>> Struct12::get_field47() && {
  return std::move(field47);
}

const std::vector<bool>& Struct12::get_field48() const& {
  return field48;
}

std::vector<bool> Struct12::get_field48() && {
  return std::move(field48);
}

const  ::cpp2::Struct2& Struct12::get_field49() const& {
  return field49;
}

 ::cpp2::Struct2 Struct12::get_field49() && {
  return std::move(field49);
}

const std::map<int16_t,  ::cpp2::Struct5>& Struct12::get_field50() const& {
  return field50;
}

std::map<int16_t,  ::cpp2::Struct5> Struct12::get_field50() && {
  return std::move(field50);
}

const  ::cpp2::Struct0& Struct12::get_field52() const& {
  return field52;
}

 ::cpp2::Struct0 Struct12::get_field52() && {
  return std::move(field52);
}

const std::map<int32_t, int16_t>& Struct12::get_field53() const& {
  return field53;
}

std::map<int32_t, int16_t> Struct12::get_field53() && {
  return std::move(field53);
}

const std::vector<int32_t>& Struct12::get_field54() const& {
  return field54;
}

std::vector<int32_t> Struct12::get_field54() && {
  return std::move(field54);
}

const std::vector<std::string>& Struct12::get_field56() const& {
  return field56;
}

std::vector<std::string> Struct12::get_field56() && {
  return std::move(field56);
}

const  ::cpp2::Struct9& Struct12::get_field59() const& {
  return field59;
}

 ::cpp2::Struct9 Struct12::get_field59() && {
  return std::move(field59);
}

const  ::cpp2::Struct7& Struct12::get_field61() const& {
  return field61;
}

 ::cpp2::Struct7 Struct12::get_field61() && {
  return std::move(field61);
}

const std::set<double>& Struct12::get_field62() const& {
  return field62;
}

std::set<double> Struct12::get_field62() && {
  return std::move(field62);
}

const std::set<double>& Struct12::get_field63() const& {
  return field63;
}

std::set<double> Struct12::get_field63() && {
  return std::move(field63);
}

const std::vector<std::string>& Struct12::get_field64() const& {
  return field64;
}

std::vector<std::string> Struct12::get_field64() && {
  return std::move(field64);
}

const std::vector<int16_t>& Struct12::get_field66() const& {
  return field66;
}

std::vector<int16_t> Struct12::get_field66() && {
  return std::move(field66);
}

const std::vector<int8_t>& Struct12::get_field67() const& {
  return field67;
}

std::vector<int8_t> Struct12::get_field67() && {
  return std::move(field67);
}

const std::vector<int8_t>& Struct12::get_field69() const& {
  return field69;
}

std::vector<int8_t> Struct12::get_field69() && {
  return std::move(field69);
}

const std::set<int32_t>& Struct12::get_field70() const& {
  return field70;
}

std::set<int32_t> Struct12::get_field70() && {
  return std::move(field70);
}

const  ::cpp2::Struct9& Struct12::get_field71() const& {
  return field71;
}

 ::cpp2::Struct9 Struct12::get_field71() && {
  return std::move(field71);
}

const std::map<std::vector<int16_t>, std::vector<bool>>& Struct12::get_field72() const& {
  return field72;
}

std::map<std::vector<int16_t>, std::vector<bool>> Struct12::get_field72() && {
  return std::move(field72);
}

const  ::cpp2::Struct1& Struct12::get_field73() const& {
  return field73;
}

 ::cpp2::Struct1 Struct12::get_field73() && {
  return std::move(field73);
}

const  ::cpp2::Struct1& Struct12::get_field74() const& {
  return field74;
}

 ::cpp2::Struct1 Struct12::get_field74() && {
  return std::move(field74);
}

const std::set<int32_t>& Struct12::get_field76() const& {
  return field76;
}

std::set<int32_t> Struct12::get_field76() && {
  return std::move(field76);
}

const std::map<int64_t, std::string>& Struct12::get_field85() const& {
  return field85;
}

std::map<int64_t, std::string> Struct12::get_field85() && {
  return std::move(field85);
}

const std::set<int64_t>& Struct12::get_field87() const& {
  return field87;
}

std::set<int64_t> Struct12::get_field87() && {
  return std::move(field87);
}

const std::map<bool, std::map<double, int8_t>>& Struct12::get_field89() const& {
  return field89;
}

std::map<bool, std::map<double, int8_t>> Struct12::get_field89() && {
  return std::move(field89);
}

const std::vector<int64_t>& Struct12::get_field92() const& {
  return field92;
}

std::vector<int64_t> Struct12::get_field92() && {
  return std::move(field92);
}

const std::set<std::string>& Struct12::get_field93() const& {
  return field93;
}

std::set<std::string> Struct12::get_field93() && {
  return std::move(field93);
}

const std::set<std::map<std::string, float>>& Struct12::get_field94() const& {
  return field94;
}

std::set<std::map<std::string, float>> Struct12::get_field94() && {
  return std::move(field94);
}

const std::vector<float>& Struct12::get_field96() const& {
  return field96;
}

std::vector<float> Struct12::get_field96() && {
  return std::move(field96);
}

void Struct12::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field96") {
    fid = 96;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field97") {
    fid = 97;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field98") {
    fid = 98;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field99") {
    fid = 99;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field100") {
    fid = 100;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
}

void swap(Struct12& a, Struct12& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.field96, b.field96);
  swap(a.field97, b.field97);
  swap(a.field98, b.field98);
  swap(a.field99, b.field99);
  swap(a.field100, b.field100);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct12::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct12::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct12::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct12::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct12::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct12::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct12::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct12::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct13::__clear() {
  // clear all fields
  field1.clear();
  field2.clear();
  field3.clear();
  field4 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field5);
  field6.clear();
  field7.clear();
  field8.clear();
  field9 = 0;
  field10.clear();
  field11 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field12.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field13);
  field14 = 0;
  field15.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field16);
  field17 = 0;
  field18 = 0;
  field19 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field20.clear();
  field21 = 0;
  field22 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field23 = 0;
  field24 = 0;
  field25 = 0;
  field26.clear();
  field27 = 0;
  field28.clear();
  field29.clear();
  field30 = 0;
  field31.clear();
  field32 = 0;
  field33.clear();
  field34 = 0;
  field35 = 0;
  field36.clear();
  field37 = 0;
  field38 = 0;
  field39 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field40);
  field41.clear();
  field42.clear();
  field43 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field44.clear();
  field45 = 0;
  field46.clear();
  field47.clear();
  field48 = 0;
  field49 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field50);
  field51 = 0;
  field52.clear();
  field53 = 0;
  field54.clear();
  field55 = 0;
  field56.clear();
  field57 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field58);
  field59.clear();
  field60.clear();
  field61.clear();
  field62.clear();
  field63.clear();
  field64 = 0;
  field65 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field66 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field67.clear();
  field68 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field69 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field70);
  field71 = 0;
  field72 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field73);
  field74 = 0;
  field75 = 0;
  field76.clear();
  field77 = 0;
  field78.clear();
  field79.clear();
  field80 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field81.clear();
  field82 = 0;
  field83 = 0;
  field84.clear();
  field85 = 0;
  field86 = 0;
  field87.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field88);
  field89 = 0;
  field90 = 0;
  field91.clear();
  field92 = 0;
  field93.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field94);
  field95 = 0;
  field96 = 0;
  field97 = 0;
  field98 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field99);
  field100.clear();
  field101 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field102 = 0;
  field103.clear();
  field104 = 0;
  field105.clear();
  field106 = 0;
  field107.clear();
  field108.clear();
  field109.clear();
  field110 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field111);
  field112 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field113 = 0;
  field114 = 0;
  field115.clear();
  field116.clear();
  field117 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field118.clear();
  field119 = 0;
  field120 = 0;
  field121 = 0;
  field122 = 0;
  field123 = 0;
  field124 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field125 = 0;
  field126.clear();
  field127 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field128 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field129);
  field130 = 0;
  field131 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field132);
  field133 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field134.clear();
  field135 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field136.clear();
  field137 = 0;
  field138 = 0;
  field139.clear();
  field140 = 0;
  field141.clear();
  field142.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field143);
  field144 = 0;
  field145.clear();
  field146 = 0;
  field147 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field148);
  field149.clear();
  field150.clear();
  field151 = 0;
  field152.clear();
  field153 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field154.clear();
  field155.clear();
  field156 = 0;
  field157 = 0;
  field158.clear();
  field159 = 0;
  field160 = 0;
  field161 = 0;
  field162.clear();
  field163 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field164 = 0;
  field165 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field166.clear();
  field167.clear();
  field168.clear();
  field169 = 0;
  field170 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field171 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field172.clear();
  field173 = 0;
  field174.clear();
  field175 = 0;
  field176 = 0;
  field177.clear();
  field178 = 0;
  field179 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field180.clear();
  field181.clear();
  field182 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field183 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field184);
  field185.clear();
  field186 = 0;
  field187 = 0;
  field188.clear();
  field189 = 0;
  field190 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field191);
  field192.clear();
  field193 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field194 = 0;
  field195.clear();
  field196 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field197);
  field198.clear();
  field199.clear();
  field200.clear();
  field201.clear();
  field202 = 0;
  field203 = 0;
  field204.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field205);
  field206 = 0;
  field207.clear();
  field208.clear();
  field209.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field210);
  field211.clear();
  field212.clear();
  field213.clear();
  field214.clear();
  field215 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field216 = 0;
  field217.clear();
  __isset.__clear();
}

bool Struct13::operator==(const Struct13& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field11, rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field19, rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field22, rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field43, rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field66, rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field68, rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!((field83 == rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  if (!((field85 == rhs.field85))) {
    return false;
  }
  if (!((field86 == rhs.field86))) {
    return false;
  }
  if (!((field87 == rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!((field89 == rhs.field89))) {
    return false;
  }
  if (!((field90 == rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!((field92 == rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!((field94 == rhs.field94))) {
    return false;
  }
  if (!((field95 == rhs.field95))) {
    return false;
  }
  if (!((field96 == rhs.field96))) {
    return false;
  }
  if (!((field97 == rhs.field97))) {
    return false;
  }
  if (!((field98 == rhs.field98))) {
    return false;
  }
  if (!((field99 == rhs.field99))) {
    return false;
  }
  if (!((field100 == rhs.field100))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field101, rhs.field101))) {
    return false;
  }
  if (!((field102 == rhs.field102))) {
    return false;
  }
  if (!((field103 == rhs.field103))) {
    return false;
  }
  if (!((field104 == rhs.field104))) {
    return false;
  }
  if (!((field105 == rhs.field105))) {
    return false;
  }
  if (!((field106 == rhs.field106))) {
    return false;
  }
  if (!((field107 == rhs.field107))) {
    return false;
  }
  if (!((field108 == rhs.field108))) {
    return false;
  }
  if (!((field109 == rhs.field109))) {
    return false;
  }
  if (!((field110 == rhs.field110))) {
    return false;
  }
  if (!((field111 == rhs.field111))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field112, rhs.field112))) {
    return false;
  }
  if (!((field113 == rhs.field113))) {
    return false;
  }
  if (!((field114 == rhs.field114))) {
    return false;
  }
  if (!((field115 == rhs.field115))) {
    return false;
  }
  if (!((field116 == rhs.field116))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field117, rhs.field117))) {
    return false;
  }
  if (!((field118 == rhs.field118))) {
    return false;
  }
  if (!((field119 == rhs.field119))) {
    return false;
  }
  if (!((field120 == rhs.field120))) {
    return false;
  }
  if (!((field121 == rhs.field121))) {
    return false;
  }
  if (!((field122 == rhs.field122))) {
    return false;
  }
  if (!((field123 == rhs.field123))) {
    return false;
  }
  if (!((field124 == rhs.field124))) {
    return false;
  }
  if (!((field125 == rhs.field125))) {
    return false;
  }
  if (!((field126 == rhs.field126))) {
    return false;
  }
  if (!((field127 == rhs.field127))) {
    return false;
  }
  if (!((field128 == rhs.field128))) {
    return false;
  }
  if (!((field129 == rhs.field129))) {
    return false;
  }
  if (!((field130 == rhs.field130))) {
    return false;
  }
  if (!((field131 == rhs.field131))) {
    return false;
  }
  if (!((field132 == rhs.field132))) {
    return false;
  }
  if (!((field133 == rhs.field133))) {
    return false;
  }
  if (!((field134 == rhs.field134))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field135, rhs.field135))) {
    return false;
  }
  if (!((field136 == rhs.field136))) {
    return false;
  }
  if (!((field137 == rhs.field137))) {
    return false;
  }
  if (!((field138 == rhs.field138))) {
    return false;
  }
  if (!((field139 == rhs.field139))) {
    return false;
  }
  if (!((field140 == rhs.field140))) {
    return false;
  }
  if (!((field141 == rhs.field141))) {
    return false;
  }
  if (!((field142 == rhs.field142))) {
    return false;
  }
  if (!((field143 == rhs.field143))) {
    return false;
  }
  if (!((field144 == rhs.field144))) {
    return false;
  }
  if (!((field145 == rhs.field145))) {
    return false;
  }
  if (!((field146 == rhs.field146))) {
    return false;
  }
  if (!((field147 == rhs.field147))) {
    return false;
  }
  if (!((field148 == rhs.field148))) {
    return false;
  }
  if (!((field149 == rhs.field149))) {
    return false;
  }
  if (!((field150 == rhs.field150))) {
    return false;
  }
  if (!((field151 == rhs.field151))) {
    return false;
  }
  if (!((field152 == rhs.field152))) {
    return false;
  }
  if (!((field153 == rhs.field153))) {
    return false;
  }
  if (!((field154 == rhs.field154))) {
    return false;
  }
  if (!((field155 == rhs.field155))) {
    return false;
  }
  if (!((field156 == rhs.field156))) {
    return false;
  }
  if (!((field157 == rhs.field157))) {
    return false;
  }
  if (!((field158 == rhs.field158))) {
    return false;
  }
  if (!((field159 == rhs.field159))) {
    return false;
  }
  if (!((field160 == rhs.field160))) {
    return false;
  }
  if (!((field161 == rhs.field161))) {
    return false;
  }
  if (!((field162 == rhs.field162))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field163, rhs.field163))) {
    return false;
  }
  if (!((field164 == rhs.field164))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field165, rhs.field165))) {
    return false;
  }
  if (!((field166 == rhs.field166))) {
    return false;
  }
  if (!((field167 == rhs.field167))) {
    return false;
  }
  if (!((field168 == rhs.field168))) {
    return false;
  }
  if (!((field169 == rhs.field169))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field170, rhs.field170))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field171, rhs.field171))) {
    return false;
  }
  if (!((field172 == rhs.field172))) {
    return false;
  }
  if (!((field173 == rhs.field173))) {
    return false;
  }
  if (!((field174 == rhs.field174))) {
    return false;
  }
  if (!((field175 == rhs.field175))) {
    return false;
  }
  if (!((field176 == rhs.field176))) {
    return false;
  }
  if (!((field177 == rhs.field177))) {
    return false;
  }
  if (!((field178 == rhs.field178))) {
    return false;
  }
  if (!((field179 == rhs.field179))) {
    return false;
  }
  if (!((field180 == rhs.field180))) {
    return false;
  }
  if (!((field181 == rhs.field181))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field182, rhs.field182))) {
    return false;
  }
  if (!((field183 == rhs.field183))) {
    return false;
  }
  if (!((field184 == rhs.field184))) {
    return false;
  }
  if (!((field185 == rhs.field185))) {
    return false;
  }
  if (!((field186 == rhs.field186))) {
    return false;
  }
  if (!((field187 == rhs.field187))) {
    return false;
  }
  if (!((field188 == rhs.field188))) {
    return false;
  }
  if (!((field189 == rhs.field189))) {
    return false;
  }
  if (!((field190 == rhs.field190))) {
    return false;
  }
  if (!((field191 == rhs.field191))) {
    return false;
  }
  if (!((field192 == rhs.field192))) {
    return false;
  }
  if (!((field193 == rhs.field193))) {
    return false;
  }
  if (!((field194 == rhs.field194))) {
    return false;
  }
  if (!((field195 == rhs.field195))) {
    return false;
  }
  if (!((field196 == rhs.field196))) {
    return false;
  }
  if (!((field197 == rhs.field197))) {
    return false;
  }
  if (!((field198 == rhs.field198))) {
    return false;
  }
  if (!((field199 == rhs.field199))) {
    return false;
  }
  if (!((field200 == rhs.field200))) {
    return false;
  }
  if (!((field201 == rhs.field201))) {
    return false;
  }
  if (!((field202 == rhs.field202))) {
    return false;
  }
  if (!((field203 == rhs.field203))) {
    return false;
  }
  if (!((field204 == rhs.field204))) {
    return false;
  }
  if (!((field205 == rhs.field205))) {
    return false;
  }
  if (!((field206 == rhs.field206))) {
    return false;
  }
  if (!((field207 == rhs.field207))) {
    return false;
  }
  if (!((field208 == rhs.field208))) {
    return false;
  }
  if (!((field209 == rhs.field209))) {
    return false;
  }
  if (!((field210 == rhs.field210))) {
    return false;
  }
  if (!((field211 == rhs.field211))) {
    return false;
  }
  if (!((field212 == rhs.field212))) {
    return false;
  }
  if (!((field213 == rhs.field213))) {
    return false;
  }
  if (!((field214 == rhs.field214))) {
    return false;
  }
  if (!((field215 == rhs.field215))) {
    return false;
  }
  if (!((field216 == rhs.field216))) {
    return false;
  }
  if (!((field217 == rhs.field217))) {
    return false;
  }
  return true;
}

const std::map<double, float>& Struct13::get_field1() const& {
  return field1;
}

std::map<double, float> Struct13::get_field1() && {
  return std::move(field1);
}

const std::vector<double>& Struct13::get_field2() const& {
  return field2;
}

std::vector<double> Struct13::get_field2() && {
  return std::move(field2);
}

const std::set<std::map<int8_t, int32_t>>& Struct13::get_field3() const& {
  return field3;
}

std::set<std::map<int8_t, int32_t>> Struct13::get_field3() && {
  return std::move(field3);
}

const  ::cpp2::Struct0& Struct13::get_field5() const& {
  return field5;
}

 ::cpp2::Struct0 Struct13::get_field5() && {
  return std::move(field5);
}

const std::set<int16_t>& Struct13::get_field6() const& {
  return field6;
}

std::set<int16_t> Struct13::get_field6() && {
  return std::move(field6);
}

const std::map<std::string, int64_t>& Struct13::get_field7() const& {
  return field7;
}

std::map<std::string, int64_t> Struct13::get_field7() && {
  return std::move(field7);
}

const std::vector<double>& Struct13::get_field8() const& {
  return field8;
}

std::vector<double> Struct13::get_field8() && {
  return std::move(field8);
}

const std::map<double, int64_t>& Struct13::get_field10() const& {
  return field10;
}

std::map<double, int64_t> Struct13::get_field10() && {
  return std::move(field10);
}

const std::set<int32_t>& Struct13::get_field12() const& {
  return field12;
}

std::set<int32_t> Struct13::get_field12() && {
  return std::move(field12);
}

const  ::cpp2::Struct0& Struct13::get_field13() const& {
  return field13;
}

 ::cpp2::Struct0 Struct13::get_field13() && {
  return std::move(field13);
}

const std::set<bool>& Struct13::get_field15() const& {
  return field15;
}

std::set<bool> Struct13::get_field15() && {
  return std::move(field15);
}

const  ::cpp2::Struct5& Struct13::get_field16() const& {
  return field16;
}

 ::cpp2::Struct5 Struct13::get_field16() && {
  return std::move(field16);
}

const std::vector<float>& Struct13::get_field20() const& {
  return field20;
}

std::vector<float> Struct13::get_field20() && {
  return std::move(field20);
}

const std::vector<float>& Struct13::get_field26() const& {
  return field26;
}

std::vector<float> Struct13::get_field26() && {
  return std::move(field26);
}

const std::map<std::vector<std::set<bool>>, bool>& Struct13::get_field28() const& {
  return field28;
}

std::map<std::vector<std::set<bool>>, bool> Struct13::get_field28() && {
  return std::move(field28);
}

const std::vector<std::vector<int16_t>>& Struct13::get_field29() const& {
  return field29;
}

std::vector<std::vector<int16_t>> Struct13::get_field29() && {
  return std::move(field29);
}

const std::vector<std::vector<float>>& Struct13::get_field31() const& {
  return field31;
}

std::vector<std::vector<float>> Struct13::get_field31() && {
  return std::move(field31);
}

const std::set<int32_t>& Struct13::get_field33() const& {
  return field33;
}

std::set<int32_t> Struct13::get_field33() && {
  return std::move(field33);
}

const std::map<std::vector<std::string>, std::map<std::string, int64_t>>& Struct13::get_field36() const& {
  return field36;
}

std::map<std::vector<std::string>, std::map<std::string, int64_t>> Struct13::get_field36() && {
  return std::move(field36);
}

const  ::cpp2::Struct6& Struct13::get_field40() const& {
  return field40;
}

 ::cpp2::Struct6 Struct13::get_field40() && {
  return std::move(field40);
}

const std::set<std::vector<int32_t>>& Struct13::get_field41() const& {
  return field41;
}

std::set<std::vector<int32_t>> Struct13::get_field41() && {
  return std::move(field41);
}

const std::vector<bool>& Struct13::get_field42() const& {
  return field42;
}

std::vector<bool> Struct13::get_field42() && {
  return std::move(field42);
}

const std::vector< ::cpp2::Struct8>& Struct13::get_field44() const& {
  return field44;
}

std::vector< ::cpp2::Struct8> Struct13::get_field44() && {
  return std::move(field44);
}

const std::vector<std::set<std::string>>& Struct13::get_field46() const& {
  return field46;
}

std::vector<std::set<std::string>> Struct13::get_field46() && {
  return std::move(field46);
}

const std::set<std::set<std::string>>& Struct13::get_field47() const& {
  return field47;
}

std::set<std::set<std::string>> Struct13::get_field47() && {
  return std::move(field47);
}

const  ::cpp2::Struct5& Struct13::get_field50() const& {
  return field50;
}

 ::cpp2::Struct5 Struct13::get_field50() && {
  return std::move(field50);
}

const std::set<bool>& Struct13::get_field52() const& {
  return field52;
}

std::set<bool> Struct13::get_field52() && {
  return std::move(field52);
}

const std::vector<std::string>& Struct13::get_field54() const& {
  return field54;
}

std::vector<std::string> Struct13::get_field54() && {
  return std::move(field54);
}

const std::vector< ::cpp2::Struct0>& Struct13::get_field56() const& {
  return field56;
}

std::vector< ::cpp2::Struct0> Struct13::get_field56() && {
  return std::move(field56);
}

const  ::cpp2::Struct2& Struct13::get_field58() const& {
  return field58;
}

 ::cpp2::Struct2 Struct13::get_field58() && {
  return std::move(field58);
}

const std::vector<std::string>& Struct13::get_field59() const& {
  return field59;
}

std::vector<std::string> Struct13::get_field59() && {
  return std::move(field59);
}

const std::set<int8_t>& Struct13::get_field60() const& {
  return field60;
}

std::set<int8_t> Struct13::get_field60() && {
  return std::move(field60);
}

const std::vector<float>& Struct13::get_field61() const& {
  return field61;
}

std::vector<float> Struct13::get_field61() && {
  return std::move(field61);
}

const std::vector<bool>& Struct13::get_field62() const& {
  return field62;
}

std::vector<bool> Struct13::get_field62() && {
  return std::move(field62);
}

const std::set<int32_t>& Struct13::get_field63() const& {
  return field63;
}

std::set<int32_t> Struct13::get_field63() && {
  return std::move(field63);
}

const std::set<int16_t>& Struct13::get_field67() const& {
  return field67;
}

std::set<int16_t> Struct13::get_field67() && {
  return std::move(field67);
}

const  ::cpp2::Struct1& Struct13::get_field70() const& {
  return field70;
}

 ::cpp2::Struct1 Struct13::get_field70() && {
  return std::move(field70);
}

const  ::cpp2::Struct2& Struct13::get_field73() const& {
  return field73;
}

 ::cpp2::Struct2 Struct13::get_field73() && {
  return std::move(field73);
}

const std::map<bool, int64_t>& Struct13::get_field76() const& {
  return field76;
}

std::map<bool, int64_t> Struct13::get_field76() && {
  return std::move(field76);
}

const std::vector<std::map<bool, std::vector<float>>>& Struct13::get_field78() const& {
  return field78;
}

std::vector<std::map<bool, std::vector<float>>> Struct13::get_field78() && {
  return std::move(field78);
}

const std::vector<int32_t>& Struct13::get_field79() const& {
  return field79;
}

std::vector<int32_t> Struct13::get_field79() && {
  return std::move(field79);
}

const std::map< ::cpp2::Struct8,  ::cpp2::Struct7>& Struct13::get_field81() const& {
  return field81;
}

std::map< ::cpp2::Struct8,  ::cpp2::Struct7> Struct13::get_field81() && {
  return std::move(field81);
}

const std::map<int16_t,  ::cpp2::Struct2>& Struct13::get_field84() const& {
  return field84;
}

std::map<int16_t,  ::cpp2::Struct2> Struct13::get_field84() && {
  return std::move(field84);
}

const std::vector<std::string>& Struct13::get_field87() const& {
  return field87;
}

std::vector<std::string> Struct13::get_field87() && {
  return std::move(field87);
}

const  ::cpp2::Struct2& Struct13::get_field88() const& {
  return field88;
}

 ::cpp2::Struct2 Struct13::get_field88() && {
  return std::move(field88);
}

const std::vector<std::map<bool, int8_t>>& Struct13::get_field91() const& {
  return field91;
}

std::vector<std::map<bool, int8_t>> Struct13::get_field91() && {
  return std::move(field91);
}

const std::set<double>& Struct13::get_field93() const& {
  return field93;
}

std::set<double> Struct13::get_field93() && {
  return std::move(field93);
}

const  ::cpp2::Struct4& Struct13::get_field94() const& {
  return field94;
}

 ::cpp2::Struct4 Struct13::get_field94() && {
  return std::move(field94);
}

const  ::cpp2::Struct4& Struct13::get_field99() const& {
  return field99;
}

 ::cpp2::Struct4 Struct13::get_field99() && {
  return std::move(field99);
}

const std::set<std::map<int16_t, float>>& Struct13::get_field100() const& {
  return field100;
}

std::set<std::map<int16_t, float>> Struct13::get_field100() && {
  return std::move(field100);
}

const std::map<int16_t, std::map<bool,  ::cpp2::Struct1>>& Struct13::get_field103() const& {
  return field103;
}

std::map<int16_t, std::map<bool,  ::cpp2::Struct1>> Struct13::get_field103() && {
  return std::move(field103);
}

const std::set<int16_t>& Struct13::get_field105() const& {
  return field105;
}

std::set<int16_t> Struct13::get_field105() && {
  return std::move(field105);
}

const std::set<float>& Struct13::get_field107() const& {
  return field107;
}

std::set<float> Struct13::get_field107() && {
  return std::move(field107);
}

const std::set<bool>& Struct13::get_field108() const& {
  return field108;
}

std::set<bool> Struct13::get_field108() && {
  return std::move(field108);
}

const std::vector<std::map<float, int8_t>>& Struct13::get_field109() const& {
  return field109;
}

std::vector<std::map<float, int8_t>> Struct13::get_field109() && {
  return std::move(field109);
}

const  ::cpp2::Struct1& Struct13::get_field111() const& {
  return field111;
}

 ::cpp2::Struct1 Struct13::get_field111() && {
  return std::move(field111);
}

const std::map<std::vector<int8_t>, int64_t>& Struct13::get_field115() const& {
  return field115;
}

std::map<std::vector<int8_t>, int64_t> Struct13::get_field115() && {
  return std::move(field115);
}

const std::vector<bool>& Struct13::get_field116() const& {
  return field116;
}

std::vector<bool> Struct13::get_field116() && {
  return std::move(field116);
}

const std::vector<std::string>& Struct13::get_field118() const& {
  return field118;
}

std::vector<std::string> Struct13::get_field118() && {
  return std::move(field118);
}

const std::vector<int8_t>& Struct13::get_field126() const& {
  return field126;
}

std::vector<int8_t> Struct13::get_field126() && {
  return std::move(field126);
}

const  ::cpp2::Struct4& Struct13::get_field129() const& {
  return field129;
}

 ::cpp2::Struct4 Struct13::get_field129() && {
  return std::move(field129);
}

const  ::cpp2::Struct2& Struct13::get_field132() const& {
  return field132;
}

 ::cpp2::Struct2 Struct13::get_field132() && {
  return std::move(field132);
}

const std::set<std::map< ::cpp2::Struct11, int16_t>>& Struct13::get_field134() const& {
  return field134;
}

std::set<std::map< ::cpp2::Struct11, int16_t>> Struct13::get_field134() && {
  return std::move(field134);
}

const std::set<std::string>& Struct13::get_field136() const& {
  return field136;
}

std::set<std::string> Struct13::get_field136() && {
  return std::move(field136);
}

const std::set<std::set<double>>& Struct13::get_field139() const& {
  return field139;
}

std::set<std::set<double>> Struct13::get_field139() && {
  return std::move(field139);
}

const std::map<bool, float>& Struct13::get_field141() const& {
  return field141;
}

std::map<bool, float> Struct13::get_field141() && {
  return std::move(field141);
}

const std::set<std::vector<double>>& Struct13::get_field142() const& {
  return field142;
}

std::set<std::vector<double>> Struct13::get_field142() && {
  return std::move(field142);
}

const  ::cpp2::Struct0& Struct13::get_field143() const& {
  return field143;
}

 ::cpp2::Struct0 Struct13::get_field143() && {
  return std::move(field143);
}

const std::set<int64_t>& Struct13::get_field145() const& {
  return field145;
}

std::set<int64_t> Struct13::get_field145() && {
  return std::move(field145);
}

const  ::cpp2::Struct4& Struct13::get_field148() const& {
  return field148;
}

 ::cpp2::Struct4 Struct13::get_field148() && {
  return std::move(field148);
}

const std::vector<int8_t>& Struct13::get_field149() const& {
  return field149;
}

std::vector<int8_t> Struct13::get_field149() && {
  return std::move(field149);
}

const std::vector<double>& Struct13::get_field150() const& {
  return field150;
}

std::vector<double> Struct13::get_field150() && {
  return std::move(field150);
}

const std::vector<std::set<int32_t>>& Struct13::get_field152() const& {
  return field152;
}

std::vector<std::set<int32_t>> Struct13::get_field152() && {
  return std::move(field152);
}

const std::set<bool>& Struct13::get_field154() const& {
  return field154;
}

std::set<bool> Struct13::get_field154() && {
  return std::move(field154);
}

const std::map<int32_t, std::set<bool>>& Struct13::get_field155() const& {
  return field155;
}

std::map<int32_t, std::set<bool>> Struct13::get_field155() && {
  return std::move(field155);
}

const std::vector<std::vector<int8_t>>& Struct13::get_field158() const& {
  return field158;
}

std::vector<std::vector<int8_t>> Struct13::get_field158() && {
  return std::move(field158);
}

const std::set<double>& Struct13::get_field162() const& {
  return field162;
}

std::set<double> Struct13::get_field162() && {
  return std::move(field162);
}

const std::set<float>& Struct13::get_field166() const& {
  return field166;
}

std::set<float> Struct13::get_field166() && {
  return std::move(field166);
}

const std::vector<int32_t>& Struct13::get_field167() const& {
  return field167;
}

std::vector<int32_t> Struct13::get_field167() && {
  return std::move(field167);
}

const std::map<bool,  ::cpp2::Struct1>& Struct13::get_field168() const& {
  return field168;
}

std::map<bool,  ::cpp2::Struct1> Struct13::get_field168() && {
  return std::move(field168);
}

const std::set<bool>& Struct13::get_field172() const& {
  return field172;
}

std::set<bool> Struct13::get_field172() && {
  return std::move(field172);
}

const std::map<int16_t, std::vector<int64_t>>& Struct13::get_field174() const& {
  return field174;
}

std::map<int16_t, std::vector<int64_t>> Struct13::get_field174() && {
  return std::move(field174);
}

const std::vector<float>& Struct13::get_field177() const& {
  return field177;
}

std::vector<float> Struct13::get_field177() && {
  return std::move(field177);
}

const std::set<std::set<float>>& Struct13::get_field180() const& {
  return field180;
}

std::set<std::set<float>> Struct13::get_field180() && {
  return std::move(field180);
}

const std::set<std::vector<float>>& Struct13::get_field181() const& {
  return field181;
}

std::set<std::vector<float>> Struct13::get_field181() && {
  return std::move(field181);
}

const  ::cpp2::Struct6& Struct13::get_field184() const& {
  return field184;
}

 ::cpp2::Struct6 Struct13::get_field184() && {
  return std::move(field184);
}

const std::set<int64_t>& Struct13::get_field185() const& {
  return field185;
}

std::set<int64_t> Struct13::get_field185() && {
  return std::move(field185);
}

const std::vector<std::string>& Struct13::get_field188() const& {
  return field188;
}

std::vector<std::string> Struct13::get_field188() && {
  return std::move(field188);
}

const  ::cpp2::Struct0& Struct13::get_field191() const& {
  return field191;
}

 ::cpp2::Struct0 Struct13::get_field191() && {
  return std::move(field191);
}

const std::vector<int8_t>& Struct13::get_field192() const& {
  return field192;
}

std::vector<int8_t> Struct13::get_field192() && {
  return std::move(field192);
}

const std::vector<int8_t>& Struct13::get_field195() const& {
  return field195;
}

std::vector<int8_t> Struct13::get_field195() && {
  return std::move(field195);
}

const  ::cpp2::Struct2& Struct13::get_field197() const& {
  return field197;
}

 ::cpp2::Struct2 Struct13::get_field197() && {
  return std::move(field197);
}

const std::vector< ::cpp2::Struct3>& Struct13::get_field198() const& {
  return field198;
}

std::vector< ::cpp2::Struct3> Struct13::get_field198() && {
  return std::move(field198);
}

const std::map< ::cpp2::Struct5, std::string>& Struct13::get_field199() const& {
  return field199;
}

std::map< ::cpp2::Struct5, std::string> Struct13::get_field199() && {
  return std::move(field199);
}

const std::vector<double>& Struct13::get_field200() const& {
  return field200;
}

std::vector<double> Struct13::get_field200() && {
  return std::move(field200);
}

const std::vector<std::string>& Struct13::get_field201() const& {
  return field201;
}

std::vector<std::string> Struct13::get_field201() && {
  return std::move(field201);
}

const std::map<int16_t, std::set<float>>& Struct13::get_field204() const& {
  return field204;
}

std::map<int16_t, std::set<float>> Struct13::get_field204() && {
  return std::move(field204);
}

const  ::cpp2::Struct7& Struct13::get_field205() const& {
  return field205;
}

 ::cpp2::Struct7 Struct13::get_field205() && {
  return std::move(field205);
}

const std::map<std::set<int8_t>, std::vector<float>>& Struct13::get_field207() const& {
  return field207;
}

std::map<std::set<int8_t>, std::vector<float>> Struct13::get_field207() && {
  return std::move(field207);
}

const std::set<int16_t>& Struct13::get_field208() const& {
  return field208;
}

std::set<int16_t> Struct13::get_field208() && {
  return std::move(field208);
}

const std::set<std::string>& Struct13::get_field209() const& {
  return field209;
}

std::set<std::string> Struct13::get_field209() && {
  return std::move(field209);
}

const  ::cpp2::Struct7& Struct13::get_field210() const& {
  return field210;
}

 ::cpp2::Struct7 Struct13::get_field210() && {
  return std::move(field210);
}

const std::vector<float>& Struct13::get_field211() const& {
  return field211;
}

std::vector<float> Struct13::get_field211() && {
  return std::move(field211);
}

const std::vector<int8_t>& Struct13::get_field212() const& {
  return field212;
}

std::vector<int8_t> Struct13::get_field212() && {
  return std::move(field212);
}

const std::set<std::set<std::set<int64_t>>>& Struct13::get_field213() const& {
  return field213;
}

std::set<std::set<std::set<int64_t>>> Struct13::get_field213() && {
  return std::move(field213);
}

const std::vector<int32_t>& Struct13::get_field214() const& {
  return field214;
}

std::vector<int32_t> Struct13::get_field214() && {
  return std::move(field214);
}

const std::set<std::map<std::string, bool>>& Struct13::get_field217() const& {
  return field217;
}

std::set<std::map<std::string, bool>> Struct13::get_field217() && {
  return std::move(field217);
}

void Struct13::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field96") {
    fid = 96;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field97") {
    fid = 97;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field98") {
    fid = 98;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field99") {
    fid = 99;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field100") {
    fid = 100;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field101") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field102") {
    fid = 102;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field103") {
    fid = 103;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field104") {
    fid = 104;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field105") {
    fid = 105;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field106") {
    fid = 106;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field107") {
    fid = 107;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field108") {
    fid = 108;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field109") {
    fid = 109;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field110") {
    fid = 110;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field111") {
    fid = 111;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field112") {
    fid = 112;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field113") {
    fid = 113;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field114") {
    fid = 114;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field115") {
    fid = 115;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field116") {
    fid = 116;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field117") {
    fid = 117;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field118") {
    fid = 118;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field119") {
    fid = 119;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field120") {
    fid = 120;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field121") {
    fid = 121;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field122") {
    fid = 122;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field123") {
    fid = 123;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field124") {
    fid = 124;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field125") {
    fid = 125;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field126") {
    fid = 126;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field127") {
    fid = 127;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field128") {
    fid = 128;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field129") {
    fid = 129;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field130") {
    fid = 130;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field131") {
    fid = 131;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field132") {
    fid = 132;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field133") {
    fid = 133;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field134") {
    fid = 134;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field135") {
    fid = 135;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field136") {
    fid = 136;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field137") {
    fid = 137;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field138") {
    fid = 138;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field139") {
    fid = 139;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field140") {
    fid = 140;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field141") {
    fid = 141;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field142") {
    fid = 142;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field143") {
    fid = 143;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field144") {
    fid = 144;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field145") {
    fid = 145;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field146") {
    fid = 146;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field147") {
    fid = 147;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field148") {
    fid = 148;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field149") {
    fid = 149;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field150") {
    fid = 150;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field151") {
    fid = 151;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field152") {
    fid = 152;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field153") {
    fid = 153;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field154") {
    fid = 154;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field155") {
    fid = 155;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field156") {
    fid = 156;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field157") {
    fid = 157;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field158") {
    fid = 158;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field159") {
    fid = 159;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field160") {
    fid = 160;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field161") {
    fid = 161;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field162") {
    fid = 162;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field163") {
    fid = 163;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field164") {
    fid = 164;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field165") {
    fid = 165;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field166") {
    fid = 166;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field167") {
    fid = 167;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field168") {
    fid = 168;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field169") {
    fid = 169;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field170") {
    fid = 170;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field171") {
    fid = 171;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field172") {
    fid = 172;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field173") {
    fid = 173;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field174") {
    fid = 174;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field175") {
    fid = 175;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field176") {
    fid = 176;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field177") {
    fid = 177;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field178") {
    fid = 178;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field179") {
    fid = 179;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field180") {
    fid = 180;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field181") {
    fid = 181;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field182") {
    fid = 182;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field183") {
    fid = 183;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field184") {
    fid = 184;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field185") {
    fid = 185;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field186") {
    fid = 186;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field187") {
    fid = 187;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field188") {
    fid = 188;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field189") {
    fid = 189;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field190") {
    fid = 190;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field191") {
    fid = 191;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field192") {
    fid = 192;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field193") {
    fid = 193;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field194") {
    fid = 194;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field195") {
    fid = 195;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field196") {
    fid = 196;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field197") {
    fid = 197;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field198") {
    fid = 198;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field199") {
    fid = 199;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field200") {
    fid = 200;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field201") {
    fid = 201;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field202") {
    fid = 202;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field203") {
    fid = 203;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field204") {
    fid = 204;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field205") {
    fid = 205;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field206") {
    fid = 206;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field207") {
    fid = 207;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field208") {
    fid = 208;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field209") {
    fid = 209;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field210") {
    fid = 210;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field211") {
    fid = 211;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field212") {
    fid = 212;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field213") {
    fid = 213;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field214") {
    fid = 214;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field215") {
    fid = 215;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field216") {
    fid = 216;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field217") {
    fid = 217;
    _ftype = apache::thrift::protocol::T_SET;
  }
}

void swap(Struct13& a, Struct13& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.field96, b.field96);
  swap(a.field97, b.field97);
  swap(a.field98, b.field98);
  swap(a.field99, b.field99);
  swap(a.field100, b.field100);
  swap(a.field101, b.field101);
  swap(a.field102, b.field102);
  swap(a.field103, b.field103);
  swap(a.field104, b.field104);
  swap(a.field105, b.field105);
  swap(a.field106, b.field106);
  swap(a.field107, b.field107);
  swap(a.field108, b.field108);
  swap(a.field109, b.field109);
  swap(a.field110, b.field110);
  swap(a.field111, b.field111);
  swap(a.field112, b.field112);
  swap(a.field113, b.field113);
  swap(a.field114, b.field114);
  swap(a.field115, b.field115);
  swap(a.field116, b.field116);
  swap(a.field117, b.field117);
  swap(a.field118, b.field118);
  swap(a.field119, b.field119);
  swap(a.field120, b.field120);
  swap(a.field121, b.field121);
  swap(a.field122, b.field122);
  swap(a.field123, b.field123);
  swap(a.field124, b.field124);
  swap(a.field125, b.field125);
  swap(a.field126, b.field126);
  swap(a.field127, b.field127);
  swap(a.field128, b.field128);
  swap(a.field129, b.field129);
  swap(a.field130, b.field130);
  swap(a.field131, b.field131);
  swap(a.field132, b.field132);
  swap(a.field133, b.field133);
  swap(a.field134, b.field134);
  swap(a.field135, b.field135);
  swap(a.field136, b.field136);
  swap(a.field137, b.field137);
  swap(a.field138, b.field138);
  swap(a.field139, b.field139);
  swap(a.field140, b.field140);
  swap(a.field141, b.field141);
  swap(a.field142, b.field142);
  swap(a.field143, b.field143);
  swap(a.field144, b.field144);
  swap(a.field145, b.field145);
  swap(a.field146, b.field146);
  swap(a.field147, b.field147);
  swap(a.field148, b.field148);
  swap(a.field149, b.field149);
  swap(a.field150, b.field150);
  swap(a.field151, b.field151);
  swap(a.field152, b.field152);
  swap(a.field153, b.field153);
  swap(a.field154, b.field154);
  swap(a.field155, b.field155);
  swap(a.field156, b.field156);
  swap(a.field157, b.field157);
  swap(a.field158, b.field158);
  swap(a.field159, b.field159);
  swap(a.field160, b.field160);
  swap(a.field161, b.field161);
  swap(a.field162, b.field162);
  swap(a.field163, b.field163);
  swap(a.field164, b.field164);
  swap(a.field165, b.field165);
  swap(a.field166, b.field166);
  swap(a.field167, b.field167);
  swap(a.field168, b.field168);
  swap(a.field169, b.field169);
  swap(a.field170, b.field170);
  swap(a.field171, b.field171);
  swap(a.field172, b.field172);
  swap(a.field173, b.field173);
  swap(a.field174, b.field174);
  swap(a.field175, b.field175);
  swap(a.field176, b.field176);
  swap(a.field177, b.field177);
  swap(a.field178, b.field178);
  swap(a.field179, b.field179);
  swap(a.field180, b.field180);
  swap(a.field181, b.field181);
  swap(a.field182, b.field182);
  swap(a.field183, b.field183);
  swap(a.field184, b.field184);
  swap(a.field185, b.field185);
  swap(a.field186, b.field186);
  swap(a.field187, b.field187);
  swap(a.field188, b.field188);
  swap(a.field189, b.field189);
  swap(a.field190, b.field190);
  swap(a.field191, b.field191);
  swap(a.field192, b.field192);
  swap(a.field193, b.field193);
  swap(a.field194, b.field194);
  swap(a.field195, b.field195);
  swap(a.field196, b.field196);
  swap(a.field197, b.field197);
  swap(a.field198, b.field198);
  swap(a.field199, b.field199);
  swap(a.field200, b.field200);
  swap(a.field201, b.field201);
  swap(a.field202, b.field202);
  swap(a.field203, b.field203);
  swap(a.field204, b.field204);
  swap(a.field205, b.field205);
  swap(a.field206, b.field206);
  swap(a.field207, b.field207);
  swap(a.field208, b.field208);
  swap(a.field209, b.field209);
  swap(a.field210, b.field210);
  swap(a.field211, b.field211);
  swap(a.field212, b.field212);
  swap(a.field213, b.field213);
  swap(a.field214, b.field214);
  swap(a.field215, b.field215);
  swap(a.field216, b.field216);
  swap(a.field217, b.field217);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct13::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct13::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct13::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct13::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct13::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct13::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct13::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct13::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct14::__clear() {
  // clear all fields
  field1 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field2);
  field3 = 0;
  field4 = 0;
  field5 = 0;
  field6 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field7.clear();
  field8 = 0;
  field9 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field10);
  field11 = 0;
  field12 = 0;
  field13 = 0;
  field14 = 0;
  field15 = 0;
  field16 = 0;
  field17 = 0;
  field18 = 0;
  field19 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field20 = 0;
  field21 = 0;
  field22 = 0;
  field23.clear();
  field24 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field25);
  field26.clear();
  field27 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field28.clear();
  field29 = 0;
  field30 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field31 = 0;
  field32.clear();
  field33.clear();
  field34 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field35);
  field36 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field37);
  field38 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field39 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field40);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field41);
  field42.clear();
  field43 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field44.clear();
  field45 = 0;
  field46 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field47);
  field48.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field49);
  field50.clear();
  field51 = 0;
  field52.clear();
  field53.clear();
  field54.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field55);
  field56 = 0;
  field57 = 0;
  field58.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field59);
  field60 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field61 = 0;
  field62 = 0;
  field63.clear();
  field64 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field65);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field66);
  field67 = 0;
  field68 = 0;
  field69.clear();
  field70.clear();
  field71 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field72.clear();
  field73.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field74);
  field75.clear();
  field76 = 0;
  field77.clear();
  field78 = 0;
  field79 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field80 = 0;
  field81 = 0;
  field82 = 0;
  field83.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field84);
  field85 = 0;
  field86 = 0;
  field87.clear();
  field88.clear();
  field89.clear();
  field90 = 0;
  field91 = 0;
  field92.clear();
  field93 = 0;
  field94 = 0;
  field95.clear();
  field96.clear();
  field97 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field98);
  field99.clear();
  field100 = 0;
  field101.clear();
  field102.clear();
  field103 = 0;
  field104.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field105);
  field106 = 0;
  field107.clear();
  field108 = 0;
  field109 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field110.clear();
  field111.clear();
  field112.clear();
  field113.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field114);
  field115 = 0;
  field116 = 0;
  field117.clear();
  field118.clear();
  field119.clear();
  field120.clear();
  field121.clear();
  field122.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::clear(&field123);
  field124 = 0;
  field125 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field126 = 0;
  field127.clear();
  field128.clear();
  field129.clear();
  field130 = 0;
  field131 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field132.clear();
  field133.clear();
  field134 = 0;
  field135 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field136 = 0;
  field137.clear();
  field138.clear();
  field139 = 0;
  field140 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field141 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field142 = 0;
  field143.clear();
  field144.clear();
  field145 = 0;
  field146 = 0;
  field147.clear();
  field148.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field149);
  field150 = 0;
  field151 = 0;
  field152.clear();
  field153 = 0;
  field154 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field155 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field156);
  field157.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field158);
  field159 = 0;
  field160.clear();
  field161.clear();
  field162 = 0;
  field163 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field164 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field165 = 0;
  field166.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field167);
  field168.clear();
  field169.clear();
  field170.clear();
  field171.clear();
  field172.clear();
  field173 = 0;
  field174.clear();
  field175.clear();
  field176.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field177);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::clear(&field178);
  field179.clear();
  field180.clear();
  field181 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field182);
  field183 = 0;
  field184 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field185 = 0;
  field186.clear();
  field187 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field188);
  field189 = 0;
  field190 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field191);
  field192.clear();
  field193 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field194 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field195);
  field196.clear();
  field197 = 0;
  __isset.__clear();
}

bool Struct14::operator==(const Struct14& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field6, rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field9, rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field24, rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field34, rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field38, rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field43, rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field60, rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field79, rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!((field83 == rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  if (!((field85 == rhs.field85))) {
    return false;
  }
  if (!((field86 == rhs.field86))) {
    return false;
  }
  if (!((field87 == rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!((field89 == rhs.field89))) {
    return false;
  }
  if (!((field90 == rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!((field92 == rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!((field94 == rhs.field94))) {
    return false;
  }
  if (!((field95 == rhs.field95))) {
    return false;
  }
  if (!((field96 == rhs.field96))) {
    return false;
  }
  if (!((field97 == rhs.field97))) {
    return false;
  }
  if (!((field98 == rhs.field98))) {
    return false;
  }
  if (!((field99 == rhs.field99))) {
    return false;
  }
  if (!((field100 == rhs.field100))) {
    return false;
  }
  if (!((field101 == rhs.field101))) {
    return false;
  }
  if (!((field102 == rhs.field102))) {
    return false;
  }
  if (!((field103 == rhs.field103))) {
    return false;
  }
  if (!((field104 == rhs.field104))) {
    return false;
  }
  if (!((field105 == rhs.field105))) {
    return false;
  }
  if (!((field106 == rhs.field106))) {
    return false;
  }
  if (!((field107 == rhs.field107))) {
    return false;
  }
  if (!((field108 == rhs.field108))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field109, rhs.field109))) {
    return false;
  }
  if (!((field110 == rhs.field110))) {
    return false;
  }
  if (!((field111 == rhs.field111))) {
    return false;
  }
  if (!((field112 == rhs.field112))) {
    return false;
  }
  if (!((field113 == rhs.field113))) {
    return false;
  }
  if (!((field114 == rhs.field114))) {
    return false;
  }
  if (!((field115 == rhs.field115))) {
    return false;
  }
  if (!((field116 == rhs.field116))) {
    return false;
  }
  if (!((field117 == rhs.field117))) {
    return false;
  }
  if (!((field118 == rhs.field118))) {
    return false;
  }
  if (!((field119 == rhs.field119))) {
    return false;
  }
  if (!((field120 == rhs.field120))) {
    return false;
  }
  if (!((field121 == rhs.field121))) {
    return false;
  }
  if (!((field122 == rhs.field122))) {
    return false;
  }
  if (!((field123 == rhs.field123))) {
    return false;
  }
  if (!((field124 == rhs.field124))) {
    return false;
  }
  if (!((field125 == rhs.field125))) {
    return false;
  }
  if (!((field126 == rhs.field126))) {
    return false;
  }
  if (!((field127 == rhs.field127))) {
    return false;
  }
  if (!((field128 == rhs.field128))) {
    return false;
  }
  if (!((field129 == rhs.field129))) {
    return false;
  }
  if (!((field130 == rhs.field130))) {
    return false;
  }
  if (!((field131 == rhs.field131))) {
    return false;
  }
  if (!((field132 == rhs.field132))) {
    return false;
  }
  if (!((field133 == rhs.field133))) {
    return false;
  }
  if (!((field134 == rhs.field134))) {
    return false;
  }
  if (!((field135 == rhs.field135))) {
    return false;
  }
  if (!((field136 == rhs.field136))) {
    return false;
  }
  if (!((field137 == rhs.field137))) {
    return false;
  }
  if (!((field138 == rhs.field138))) {
    return false;
  }
  if (!((field139 == rhs.field139))) {
    return false;
  }
  if (!((field140 == rhs.field140))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field141, rhs.field141))) {
    return false;
  }
  if (!((field142 == rhs.field142))) {
    return false;
  }
  if (!((field143 == rhs.field143))) {
    return false;
  }
  if (!((field144 == rhs.field144))) {
    return false;
  }
  if (!((field145 == rhs.field145))) {
    return false;
  }
  if (!((field146 == rhs.field146))) {
    return false;
  }
  if (!((field147 == rhs.field147))) {
    return false;
  }
  if (!((field148 == rhs.field148))) {
    return false;
  }
  if (!((field149 == rhs.field149))) {
    return false;
  }
  if (!((field150 == rhs.field150))) {
    return false;
  }
  if (!((field151 == rhs.field151))) {
    return false;
  }
  if (!((field152 == rhs.field152))) {
    return false;
  }
  if (!((field153 == rhs.field153))) {
    return false;
  }
  if (!((field154 == rhs.field154))) {
    return false;
  }
  if (!((field155 == rhs.field155))) {
    return false;
  }
  if (!((field156 == rhs.field156))) {
    return false;
  }
  if (!((field157 == rhs.field157))) {
    return false;
  }
  if (!((field158 == rhs.field158))) {
    return false;
  }
  if (!((field159 == rhs.field159))) {
    return false;
  }
  if (!((field160 == rhs.field160))) {
    return false;
  }
  if (!((field161 == rhs.field161))) {
    return false;
  }
  if (!((field162 == rhs.field162))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field163, rhs.field163))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field164, rhs.field164))) {
    return false;
  }
  if (!((field165 == rhs.field165))) {
    return false;
  }
  if (!((field166 == rhs.field166))) {
    return false;
  }
  if (!((field167 == rhs.field167))) {
    return false;
  }
  if (!((field168 == rhs.field168))) {
    return false;
  }
  if (!((field169 == rhs.field169))) {
    return false;
  }
  if (!((field170 == rhs.field170))) {
    return false;
  }
  if (!((field171 == rhs.field171))) {
    return false;
  }
  if (!((field172 == rhs.field172))) {
    return false;
  }
  if (!((field173 == rhs.field173))) {
    return false;
  }
  if (!((field174 == rhs.field174))) {
    return false;
  }
  if (!((field175 == rhs.field175))) {
    return false;
  }
  if (!((field176 == rhs.field176))) {
    return false;
  }
  if (!((field177 == rhs.field177))) {
    return false;
  }
  if (!((field178 == rhs.field178))) {
    return false;
  }
  if (!((field179 == rhs.field179))) {
    return false;
  }
  if (!((field180 == rhs.field180))) {
    return false;
  }
  if (!((field181 == rhs.field181))) {
    return false;
  }
  if (!((field182 == rhs.field182))) {
    return false;
  }
  if (!((field183 == rhs.field183))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field184, rhs.field184))) {
    return false;
  }
  if (!((field185 == rhs.field185))) {
    return false;
  }
  if (!((field186 == rhs.field186))) {
    return false;
  }
  if (!((field187 == rhs.field187))) {
    return false;
  }
  if (!((field188 == rhs.field188))) {
    return false;
  }
  if (!((field189 == rhs.field189))) {
    return false;
  }
  if (!((field190 == rhs.field190))) {
    return false;
  }
  if (!((field191 == rhs.field191))) {
    return false;
  }
  if (!((field192 == rhs.field192))) {
    return false;
  }
  if (!((field193 == rhs.field193))) {
    return false;
  }
  if (!((field194 == rhs.field194))) {
    return false;
  }
  if (!((field195 == rhs.field195))) {
    return false;
  }
  if (!((field196 == rhs.field196))) {
    return false;
  }
  if (!((field197 == rhs.field197))) {
    return false;
  }
  return true;
}

const  ::cpp2::Struct0& Struct14::get_field2() const& {
  return field2;
}

 ::cpp2::Struct0 Struct14::get_field2() && {
  return std::move(field2);
}

const std::set<int16_t>& Struct14::get_field7() const& {
  return field7;
}

std::set<int16_t> Struct14::get_field7() && {
  return std::move(field7);
}

const  ::cpp2::Struct1& Struct14::get_field10() const& {
  return field10;
}

 ::cpp2::Struct1 Struct14::get_field10() && {
  return std::move(field10);
}

const std::map<int64_t, std::map<std::string, float>>& Struct14::get_field23() const& {
  return field23;
}

std::map<int64_t, std::map<std::string, float>> Struct14::get_field23() && {
  return std::move(field23);
}

const  ::cpp2::Struct1& Struct14::get_field25() const& {
  return field25;
}

 ::cpp2::Struct1 Struct14::get_field25() && {
  return std::move(field25);
}

const std::map<int16_t, double>& Struct14::get_field26() const& {
  return field26;
}

std::map<int16_t, double> Struct14::get_field26() && {
  return std::move(field26);
}

const std::map<std::map<std::vector<std::string>, std::set<std::string>>, std::string>& Struct14::get_field28() const& {
  return field28;
}

std::map<std::map<std::vector<std::string>, std::set<std::string>>, std::string> Struct14::get_field28() && {
  return std::move(field28);
}

const std::vector<std::set<bool>>& Struct14::get_field32() const& {
  return field32;
}

std::vector<std::set<bool>> Struct14::get_field32() && {
  return std::move(field32);
}

const std::vector<int16_t>& Struct14::get_field33() const& {
  return field33;
}

std::vector<int16_t> Struct14::get_field33() && {
  return std::move(field33);
}

const  ::cpp2::Struct0& Struct14::get_field35() const& {
  return field35;
}

 ::cpp2::Struct0 Struct14::get_field35() && {
  return std::move(field35);
}

const  ::cpp2::Struct1& Struct14::get_field37() const& {
  return field37;
}

 ::cpp2::Struct1 Struct14::get_field37() && {
  return std::move(field37);
}

const  ::cpp2::Struct6& Struct14::get_field40() const& {
  return field40;
}

 ::cpp2::Struct6 Struct14::get_field40() && {
  return std::move(field40);
}

const  ::cpp2::Struct1& Struct14::get_field41() const& {
  return field41;
}

 ::cpp2::Struct1 Struct14::get_field41() && {
  return std::move(field41);
}

const std::map<int64_t, int16_t>& Struct14::get_field42() const& {
  return field42;
}

std::map<int64_t, int16_t> Struct14::get_field42() && {
  return std::move(field42);
}

const std::set<std::map<std::map<int64_t,  ::cpp2::Struct8>, int32_t>>& Struct14::get_field44() const& {
  return field44;
}

std::set<std::map<std::map<int64_t,  ::cpp2::Struct8>, int32_t>> Struct14::get_field44() && {
  return std::move(field44);
}

const  ::cpp2::Struct5& Struct14::get_field47() const& {
  return field47;
}

 ::cpp2::Struct5 Struct14::get_field47() && {
  return std::move(field47);
}

const std::set<std::string>& Struct14::get_field48() const& {
  return field48;
}

std::set<std::string> Struct14::get_field48() && {
  return std::move(field48);
}

const  ::cpp2::Struct3& Struct14::get_field49() const& {
  return field49;
}

 ::cpp2::Struct3 Struct14::get_field49() && {
  return std::move(field49);
}

const std::map<float,  ::cpp2::Struct3>& Struct14::get_field50() const& {
  return field50;
}

std::map<float,  ::cpp2::Struct3> Struct14::get_field50() && {
  return std::move(field50);
}

const std::vector<int16_t>& Struct14::get_field52() const& {
  return field52;
}

std::vector<int16_t> Struct14::get_field52() && {
  return std::move(field52);
}

const std::map<std::string, std::string>& Struct14::get_field53() const& {
  return field53;
}

std::map<std::string, std::string> Struct14::get_field53() && {
  return std::move(field53);
}

const std::map< ::cpp2::Struct2, int32_t>& Struct14::get_field54() const& {
  return field54;
}

std::map< ::cpp2::Struct2, int32_t> Struct14::get_field54() && {
  return std::move(field54);
}

const  ::cpp2::Struct2& Struct14::get_field55() const& {
  return field55;
}

 ::cpp2::Struct2 Struct14::get_field55() && {
  return std::move(field55);
}

const std::vector<int32_t>& Struct14::get_field58() const& {
  return field58;
}

std::vector<int32_t> Struct14::get_field58() && {
  return std::move(field58);
}

const  ::cpp2::Struct5& Struct14::get_field59() const& {
  return field59;
}

 ::cpp2::Struct5 Struct14::get_field59() && {
  return std::move(field59);
}

const std::vector<int8_t>& Struct14::get_field63() const& {
  return field63;
}

std::vector<int8_t> Struct14::get_field63() && {
  return std::move(field63);
}

const  ::cpp2::Struct1& Struct14::get_field65() const& {
  return field65;
}

 ::cpp2::Struct1 Struct14::get_field65() && {
  return std::move(field65);
}

const  ::cpp2::Struct4& Struct14::get_field66() const& {
  return field66;
}

 ::cpp2::Struct4 Struct14::get_field66() && {
  return std::move(field66);
}

const std::set<int8_t>& Struct14::get_field69() const& {
  return field69;
}

std::set<int8_t> Struct14::get_field69() && {
  return std::move(field69);
}

const std::vector<bool>& Struct14::get_field70() const& {
  return field70;
}

std::vector<bool> Struct14::get_field70() && {
  return std::move(field70);
}

const std::vector<int16_t>& Struct14::get_field72() const& {
  return field72;
}

std::vector<int16_t> Struct14::get_field72() && {
  return std::move(field72);
}

const std::set< ::cpp2::Struct5>& Struct14::get_field73() const& {
  return field73;
}

std::set< ::cpp2::Struct5> Struct14::get_field73() && {
  return std::move(field73);
}

const  ::cpp2::Struct5& Struct14::get_field74() const& {
  return field74;
}

 ::cpp2::Struct5 Struct14::get_field74() && {
  return std::move(field74);
}

const std::map<int16_t, int8_t>& Struct14::get_field75() const& {
  return field75;
}

std::map<int16_t, int8_t> Struct14::get_field75() && {
  return std::move(field75);
}

const std::set<int8_t>& Struct14::get_field77() const& {
  return field77;
}

std::set<int8_t> Struct14::get_field77() && {
  return std::move(field77);
}

const std::set<std::string>& Struct14::get_field83() const& {
  return field83;
}

std::set<std::string> Struct14::get_field83() && {
  return std::move(field83);
}

const  ::cpp2::Struct5& Struct14::get_field84() const& {
  return field84;
}

 ::cpp2::Struct5 Struct14::get_field84() && {
  return std::move(field84);
}

const std::set<double>& Struct14::get_field87() const& {
  return field87;
}

std::set<double> Struct14::get_field87() && {
  return std::move(field87);
}

const std::map<double, float>& Struct14::get_field88() const& {
  return field88;
}

std::map<double, float> Struct14::get_field88() && {
  return std::move(field88);
}

const std::map<std::set<std::string>, std::string>& Struct14::get_field89() const& {
  return field89;
}

std::map<std::set<std::string>, std::string> Struct14::get_field89() && {
  return std::move(field89);
}

const std::map<std::set<double>, int8_t>& Struct14::get_field92() const& {
  return field92;
}

std::map<std::set<double>, int8_t> Struct14::get_field92() && {
  return std::move(field92);
}

const std::vector<int64_t>& Struct14::get_field95() const& {
  return field95;
}

std::vector<int64_t> Struct14::get_field95() && {
  return std::move(field95);
}

const std::map< ::cpp2::Struct6, int64_t>& Struct14::get_field96() const& {
  return field96;
}

std::map< ::cpp2::Struct6, int64_t> Struct14::get_field96() && {
  return std::move(field96);
}

const  ::cpp2::Struct0& Struct14::get_field98() const& {
  return field98;
}

 ::cpp2::Struct0 Struct14::get_field98() && {
  return std::move(field98);
}

const std::set<float>& Struct14::get_field99() const& {
  return field99;
}

std::set<float> Struct14::get_field99() && {
  return std::move(field99);
}

const std::vector<bool>& Struct14::get_field101() const& {
  return field101;
}

std::vector<bool> Struct14::get_field101() && {
  return std::move(field101);
}

const std::vector<int8_t>& Struct14::get_field102() const& {
  return field102;
}

std::vector<int8_t> Struct14::get_field102() && {
  return std::move(field102);
}

const std::map<int8_t, std::set<float>>& Struct14::get_field104() const& {
  return field104;
}

std::map<int8_t, std::set<float>> Struct14::get_field104() && {
  return std::move(field104);
}

const  ::cpp2::Struct6& Struct14::get_field105() const& {
  return field105;
}

 ::cpp2::Struct6 Struct14::get_field105() && {
  return std::move(field105);
}

const std::set<float>& Struct14::get_field107() const& {
  return field107;
}

std::set<float> Struct14::get_field107() && {
  return std::move(field107);
}

const std::vector<int8_t>& Struct14::get_field110() const& {
  return field110;
}

std::vector<int8_t> Struct14::get_field110() && {
  return std::move(field110);
}

const std::set<std::map<float, int16_t>>& Struct14::get_field111() const& {
  return field111;
}

std::set<std::map<float, int16_t>> Struct14::get_field111() && {
  return std::move(field111);
}

const std::vector<float>& Struct14::get_field112() const& {
  return field112;
}

std::vector<float> Struct14::get_field112() && {
  return std::move(field112);
}

const std::vector<int8_t>& Struct14::get_field113() const& {
  return field113;
}

std::vector<int8_t> Struct14::get_field113() && {
  return std::move(field113);
}

const  ::cpp2::Struct4& Struct14::get_field114() const& {
  return field114;
}

 ::cpp2::Struct4 Struct14::get_field114() && {
  return std::move(field114);
}

const std::map<float, float>& Struct14::get_field117() const& {
  return field117;
}

std::map<float, float> Struct14::get_field117() && {
  return std::move(field117);
}

const std::set<int8_t>& Struct14::get_field118() const& {
  return field118;
}

std::set<int8_t> Struct14::get_field118() && {
  return std::move(field118);
}

const std::set<std::string>& Struct14::get_field119() const& {
  return field119;
}

std::set<std::string> Struct14::get_field119() && {
  return std::move(field119);
}

const std::set<int8_t>& Struct14::get_field120() const& {
  return field120;
}

std::set<int8_t> Struct14::get_field120() && {
  return std::move(field120);
}

const std::map< ::cpp2::Struct0, int32_t>& Struct14::get_field121() const& {
  return field121;
}

std::map< ::cpp2::Struct0, int32_t> Struct14::get_field121() && {
  return std::move(field121);
}

const std::set<int8_t>& Struct14::get_field122() const& {
  return field122;
}

std::set<int8_t> Struct14::get_field122() && {
  return std::move(field122);
}

const  ::cpp2::Struct10& Struct14::get_field123() const& {
  return field123;
}

 ::cpp2::Struct10 Struct14::get_field123() && {
  return std::move(field123);
}

const std::vector<std::map<std::string, bool>>& Struct14::get_field127() const& {
  return field127;
}

std::vector<std::map<std::string, bool>> Struct14::get_field127() && {
  return std::move(field127);
}

const std::vector<double>& Struct14::get_field128() const& {
  return field128;
}

std::vector<double> Struct14::get_field128() && {
  return std::move(field128);
}

const std::vector<int8_t>& Struct14::get_field129() const& {
  return field129;
}

std::vector<int8_t> Struct14::get_field129() && {
  return std::move(field129);
}

const std::map< ::cpp2::Struct2, float>& Struct14::get_field132() const& {
  return field132;
}

std::map< ::cpp2::Struct2, float> Struct14::get_field132() && {
  return std::move(field132);
}

const std::vector<double>& Struct14::get_field133() const& {
  return field133;
}

std::vector<double> Struct14::get_field133() && {
  return std::move(field133);
}

const std::set<bool>& Struct14::get_field137() const& {
  return field137;
}

std::set<bool> Struct14::get_field137() && {
  return std::move(field137);
}

const std::map<bool, int32_t>& Struct14::get_field138() const& {
  return field138;
}

std::map<bool, int32_t> Struct14::get_field138() && {
  return std::move(field138);
}

const std::set<std::string>& Struct14::get_field143() const& {
  return field143;
}

std::set<std::string> Struct14::get_field143() && {
  return std::move(field143);
}

const std::map<float, int64_t>& Struct14::get_field144() const& {
  return field144;
}

std::map<float, int64_t> Struct14::get_field144() && {
  return std::move(field144);
}

const std::set<std::vector<int32_t>>& Struct14::get_field147() const& {
  return field147;
}

std::set<std::vector<int32_t>> Struct14::get_field147() && {
  return std::move(field147);
}

const std::map<float, std::vector<int32_t>>& Struct14::get_field148() const& {
  return field148;
}

std::map<float, std::vector<int32_t>> Struct14::get_field148() && {
  return std::move(field148);
}

const  ::cpp2::Struct7& Struct14::get_field149() const& {
  return field149;
}

 ::cpp2::Struct7 Struct14::get_field149() && {
  return std::move(field149);
}

const std::map<int16_t, int32_t>& Struct14::get_field152() const& {
  return field152;
}

std::map<int16_t, int32_t> Struct14::get_field152() && {
  return std::move(field152);
}

const  ::cpp2::Struct2& Struct14::get_field156() const& {
  return field156;
}

 ::cpp2::Struct2 Struct14::get_field156() && {
  return std::move(field156);
}

const std::vector<std::string>& Struct14::get_field157() const& {
  return field157;
}

std::vector<std::string> Struct14::get_field157() && {
  return std::move(field157);
}

const  ::cpp2::Struct6& Struct14::get_field158() const& {
  return field158;
}

 ::cpp2::Struct6 Struct14::get_field158() && {
  return std::move(field158);
}

const std::vector<int16_t>& Struct14::get_field160() const& {
  return field160;
}

std::vector<int16_t> Struct14::get_field160() && {
  return std::move(field160);
}

const std::vector<int64_t>& Struct14::get_field161() const& {
  return field161;
}

std::vector<int64_t> Struct14::get_field161() && {
  return std::move(field161);
}

const std::vector<std::string>& Struct14::get_field166() const& {
  return field166;
}

std::vector<std::string> Struct14::get_field166() && {
  return std::move(field166);
}

const  ::cpp2::Struct5& Struct14::get_field167() const& {
  return field167;
}

 ::cpp2::Struct5 Struct14::get_field167() && {
  return std::move(field167);
}

const std::map< ::cpp2::Struct3, int64_t>& Struct14::get_field168() const& {
  return field168;
}

std::map< ::cpp2::Struct3, int64_t> Struct14::get_field168() && {
  return std::move(field168);
}

const std::map<std::string, bool>& Struct14::get_field169() const& {
  return field169;
}

std::map<std::string, bool> Struct14::get_field169() && {
  return std::move(field169);
}

const std::vector<double>& Struct14::get_field170() const& {
  return field170;
}

std::vector<double> Struct14::get_field170() && {
  return std::move(field170);
}

const std::set<int16_t>& Struct14::get_field171() const& {
  return field171;
}

std::set<int16_t> Struct14::get_field171() && {
  return std::move(field171);
}

const std::vector<std::string>& Struct14::get_field172() const& {
  return field172;
}

std::vector<std::string> Struct14::get_field172() && {
  return std::move(field172);
}

const std::set<int32_t>& Struct14::get_field174() const& {
  return field174;
}

std::set<int32_t> Struct14::get_field174() && {
  return std::move(field174);
}

const std::map<int8_t, std::string>& Struct14::get_field175() const& {
  return field175;
}

std::map<int8_t, std::string> Struct14::get_field175() && {
  return std::move(field175);
}

const std::vector<std::string>& Struct14::get_field176() const& {
  return field176;
}

std::vector<std::string> Struct14::get_field176() && {
  return std::move(field176);
}

const  ::cpp2::Struct4& Struct14::get_field177() const& {
  return field177;
}

 ::cpp2::Struct4 Struct14::get_field177() && {
  return std::move(field177);
}

const  ::cpp2::Struct10& Struct14::get_field178() const& {
  return field178;
}

 ::cpp2::Struct10 Struct14::get_field178() && {
  return std::move(field178);
}

const std::set<int64_t>& Struct14::get_field179() const& {
  return field179;
}

std::set<int64_t> Struct14::get_field179() && {
  return std::move(field179);
}

const std::vector<std::string>& Struct14::get_field180() const& {
  return field180;
}

std::vector<std::string> Struct14::get_field180() && {
  return std::move(field180);
}

const  ::cpp2::Struct5& Struct14::get_field182() const& {
  return field182;
}

 ::cpp2::Struct5 Struct14::get_field182() && {
  return std::move(field182);
}

const std::set<float>& Struct14::get_field186() const& {
  return field186;
}

std::set<float> Struct14::get_field186() && {
  return std::move(field186);
}

const  ::cpp2::Struct0& Struct14::get_field188() const& {
  return field188;
}

 ::cpp2::Struct0 Struct14::get_field188() && {
  return std::move(field188);
}

const  ::cpp2::Struct2& Struct14::get_field191() const& {
  return field191;
}

 ::cpp2::Struct2 Struct14::get_field191() && {
  return std::move(field191);
}

const std::map<std::vector<int16_t>, int8_t>& Struct14::get_field192() const& {
  return field192;
}

std::map<std::vector<int16_t>, int8_t> Struct14::get_field192() && {
  return std::move(field192);
}

const  ::cpp2::Struct2& Struct14::get_field195() const& {
  return field195;
}

 ::cpp2::Struct2 Struct14::get_field195() && {
  return std::move(field195);
}

const std::map<bool,  ::cpp2::Struct3>& Struct14::get_field196() const& {
  return field196;
}

std::map<bool,  ::cpp2::Struct3> Struct14::get_field196() && {
  return std::move(field196);
}

void Struct14::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field96") {
    fid = 96;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field97") {
    fid = 97;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field98") {
    fid = 98;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field99") {
    fid = 99;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field100") {
    fid = 100;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field101") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field102") {
    fid = 102;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field103") {
    fid = 103;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field104") {
    fid = 104;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field105") {
    fid = 105;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field106") {
    fid = 106;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field107") {
    fid = 107;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field108") {
    fid = 108;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field109") {
    fid = 109;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field110") {
    fid = 110;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field111") {
    fid = 111;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field112") {
    fid = 112;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field113") {
    fid = 113;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field114") {
    fid = 114;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field115") {
    fid = 115;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field116") {
    fid = 116;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field117") {
    fid = 117;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field118") {
    fid = 118;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field119") {
    fid = 119;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field120") {
    fid = 120;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field121") {
    fid = 121;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field122") {
    fid = 122;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field123") {
    fid = 123;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field124") {
    fid = 124;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field125") {
    fid = 125;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field126") {
    fid = 126;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field127") {
    fid = 127;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field128") {
    fid = 128;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field129") {
    fid = 129;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field130") {
    fid = 130;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field131") {
    fid = 131;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field132") {
    fid = 132;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field133") {
    fid = 133;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field134") {
    fid = 134;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field135") {
    fid = 135;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field136") {
    fid = 136;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field137") {
    fid = 137;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field138") {
    fid = 138;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field139") {
    fid = 139;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field140") {
    fid = 140;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field141") {
    fid = 141;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field142") {
    fid = 142;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field143") {
    fid = 143;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field144") {
    fid = 144;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field145") {
    fid = 145;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field146") {
    fid = 146;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field147") {
    fid = 147;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field148") {
    fid = 148;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field149") {
    fid = 149;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field150") {
    fid = 150;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field151") {
    fid = 151;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field152") {
    fid = 152;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field153") {
    fid = 153;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field154") {
    fid = 154;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field155") {
    fid = 155;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field156") {
    fid = 156;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field157") {
    fid = 157;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field158") {
    fid = 158;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field159") {
    fid = 159;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field160") {
    fid = 160;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field161") {
    fid = 161;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field162") {
    fid = 162;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field163") {
    fid = 163;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field164") {
    fid = 164;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field165") {
    fid = 165;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field166") {
    fid = 166;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field167") {
    fid = 167;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field168") {
    fid = 168;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field169") {
    fid = 169;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field170") {
    fid = 170;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field171") {
    fid = 171;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field172") {
    fid = 172;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field173") {
    fid = 173;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field174") {
    fid = 174;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field175") {
    fid = 175;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field176") {
    fid = 176;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field177") {
    fid = 177;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field178") {
    fid = 178;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field179") {
    fid = 179;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field180") {
    fid = 180;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field181") {
    fid = 181;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field182") {
    fid = 182;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field183") {
    fid = 183;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field184") {
    fid = 184;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field185") {
    fid = 185;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field186") {
    fid = 186;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field187") {
    fid = 187;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field188") {
    fid = 188;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field189") {
    fid = 189;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field190") {
    fid = 190;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field191") {
    fid = 191;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field192") {
    fid = 192;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field193") {
    fid = 193;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field194") {
    fid = 194;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field195") {
    fid = 195;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field196") {
    fid = 196;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field197") {
    fid = 197;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
}

void swap(Struct14& a, Struct14& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.field96, b.field96);
  swap(a.field97, b.field97);
  swap(a.field98, b.field98);
  swap(a.field99, b.field99);
  swap(a.field100, b.field100);
  swap(a.field101, b.field101);
  swap(a.field102, b.field102);
  swap(a.field103, b.field103);
  swap(a.field104, b.field104);
  swap(a.field105, b.field105);
  swap(a.field106, b.field106);
  swap(a.field107, b.field107);
  swap(a.field108, b.field108);
  swap(a.field109, b.field109);
  swap(a.field110, b.field110);
  swap(a.field111, b.field111);
  swap(a.field112, b.field112);
  swap(a.field113, b.field113);
  swap(a.field114, b.field114);
  swap(a.field115, b.field115);
  swap(a.field116, b.field116);
  swap(a.field117, b.field117);
  swap(a.field118, b.field118);
  swap(a.field119, b.field119);
  swap(a.field120, b.field120);
  swap(a.field121, b.field121);
  swap(a.field122, b.field122);
  swap(a.field123, b.field123);
  swap(a.field124, b.field124);
  swap(a.field125, b.field125);
  swap(a.field126, b.field126);
  swap(a.field127, b.field127);
  swap(a.field128, b.field128);
  swap(a.field129, b.field129);
  swap(a.field130, b.field130);
  swap(a.field131, b.field131);
  swap(a.field132, b.field132);
  swap(a.field133, b.field133);
  swap(a.field134, b.field134);
  swap(a.field135, b.field135);
  swap(a.field136, b.field136);
  swap(a.field137, b.field137);
  swap(a.field138, b.field138);
  swap(a.field139, b.field139);
  swap(a.field140, b.field140);
  swap(a.field141, b.field141);
  swap(a.field142, b.field142);
  swap(a.field143, b.field143);
  swap(a.field144, b.field144);
  swap(a.field145, b.field145);
  swap(a.field146, b.field146);
  swap(a.field147, b.field147);
  swap(a.field148, b.field148);
  swap(a.field149, b.field149);
  swap(a.field150, b.field150);
  swap(a.field151, b.field151);
  swap(a.field152, b.field152);
  swap(a.field153, b.field153);
  swap(a.field154, b.field154);
  swap(a.field155, b.field155);
  swap(a.field156, b.field156);
  swap(a.field157, b.field157);
  swap(a.field158, b.field158);
  swap(a.field159, b.field159);
  swap(a.field160, b.field160);
  swap(a.field161, b.field161);
  swap(a.field162, b.field162);
  swap(a.field163, b.field163);
  swap(a.field164, b.field164);
  swap(a.field165, b.field165);
  swap(a.field166, b.field166);
  swap(a.field167, b.field167);
  swap(a.field168, b.field168);
  swap(a.field169, b.field169);
  swap(a.field170, b.field170);
  swap(a.field171, b.field171);
  swap(a.field172, b.field172);
  swap(a.field173, b.field173);
  swap(a.field174, b.field174);
  swap(a.field175, b.field175);
  swap(a.field176, b.field176);
  swap(a.field177, b.field177);
  swap(a.field178, b.field178);
  swap(a.field179, b.field179);
  swap(a.field180, b.field180);
  swap(a.field181, b.field181);
  swap(a.field182, b.field182);
  swap(a.field183, b.field183);
  swap(a.field184, b.field184);
  swap(a.field185, b.field185);
  swap(a.field186, b.field186);
  swap(a.field187, b.field187);
  swap(a.field188, b.field188);
  swap(a.field189, b.field189);
  swap(a.field190, b.field190);
  swap(a.field191, b.field191);
  swap(a.field192, b.field192);
  swap(a.field193, b.field193);
  swap(a.field194, b.field194);
  swap(a.field195, b.field195);
  swap(a.field196, b.field196);
  swap(a.field197, b.field197);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct14::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct14::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct14::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct14::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct14::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct14::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct14::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct14::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct15::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field1);
  field2.clear();
  field3 = 0;
  field4 = 0;
  field5 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field6.clear();
  field7 = 0;
  field8 = 0;
  field9.clear();
  field10 = 0;
  field11.clear();
  field12 = 0;
  field13 = 0;
  field14.clear();
  field15.clear();
  field16.clear();
  field17.clear();
  field18.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field19);
  field20.clear();
  field21 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field22 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field23 = 0;
  field24 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field25 = 0;
  field26.clear();
  field27.clear();
  field28 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field29);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field30);
  field31 = 0;
  field32 = 0;
  field33 = 0;
  field34.clear();
  field35 = 0;
  field36 = 0;
  field37.clear();
  field38 = 0;
  field39 = 0;
  field40 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field41 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field42);
  field43 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field44 = 0;
  field45.clear();
  field46.clear();
  field47 = 0;
  field48 = 0;
  field49 = 0;
  field50.clear();
  field51.clear();
  field52 = 0;
  field53 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field54);
  field55 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field56 = 0;
  field57.clear();
  field58 = 0;
  field59.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field60);
  field61 = 0;
  field62 = 0;
  field63.clear();
  field64.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field65);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::clear(&field66);
  field67 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field68 = 0;
  field69 = 0;
  __isset.__clear();
}

bool Struct15::operator==(const Struct15& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field5, rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field24, rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field53, rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field55, rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  return true;
}

const  ::cpp2::Struct6& Struct15::get_field1() const& {
  return field1;
}

 ::cpp2::Struct6 Struct15::get_field1() && {
  return std::move(field1);
}

const std::set<int64_t>& Struct15::get_field2() const& {
  return field2;
}

std::set<int64_t> Struct15::get_field2() && {
  return std::move(field2);
}

const std::set<int8_t>& Struct15::get_field6() const& {
  return field6;
}

std::set<int8_t> Struct15::get_field6() && {
  return std::move(field6);
}

const std::vector<std::map<std::set<int8_t>, int32_t>>& Struct15::get_field9() const& {
  return field9;
}

std::vector<std::map<std::set<int8_t>, int32_t>> Struct15::get_field9() && {
  return std::move(field9);
}

const std::vector<int8_t>& Struct15::get_field11() const& {
  return field11;
}

std::vector<int8_t> Struct15::get_field11() && {
  return std::move(field11);
}

const std::set<std::vector<int16_t>>& Struct15::get_field14() const& {
  return field14;
}

std::set<std::vector<int16_t>> Struct15::get_field14() && {
  return std::move(field14);
}

const std::map<int64_t, std::map<std::set<std::string>, float>>& Struct15::get_field15() const& {
  return field15;
}

std::map<int64_t, std::map<std::set<std::string>, float>> Struct15::get_field15() && {
  return std::move(field15);
}

const std::set<int32_t>& Struct15::get_field16() const& {
  return field16;
}

std::set<int32_t> Struct15::get_field16() && {
  return std::move(field16);
}

const std::map<bool, std::map<int64_t, float>>& Struct15::get_field17() const& {
  return field17;
}

std::map<bool, std::map<int64_t, float>> Struct15::get_field17() && {
  return std::move(field17);
}

const std::set<float>& Struct15::get_field18() const& {
  return field18;
}

std::set<float> Struct15::get_field18() && {
  return std::move(field18);
}

const  ::cpp2::Struct3& Struct15::get_field19() const& {
  return field19;
}

 ::cpp2::Struct3 Struct15::get_field19() && {
  return std::move(field19);
}

const std::set<int16_t>& Struct15::get_field20() const& {
  return field20;
}

std::set<int16_t> Struct15::get_field20() && {
  return std::move(field20);
}

const std::vector<std::map<std::set<int32_t>, std::string>>& Struct15::get_field26() const& {
  return field26;
}

std::vector<std::map<std::set<int32_t>, std::string>> Struct15::get_field26() && {
  return std::move(field26);
}

const std::set<std::map<int8_t, int64_t>>& Struct15::get_field27() const& {
  return field27;
}

std::set<std::map<int8_t, int64_t>> Struct15::get_field27() && {
  return std::move(field27);
}

const  ::cpp2::Struct2& Struct15::get_field29() const& {
  return field29;
}

 ::cpp2::Struct2 Struct15::get_field29() && {
  return std::move(field29);
}

const  ::cpp2::Struct3& Struct15::get_field30() const& {
  return field30;
}

 ::cpp2::Struct3 Struct15::get_field30() && {
  return std::move(field30);
}

const std::map<std::string, std::vector<int32_t>>& Struct15::get_field34() const& {
  return field34;
}

std::map<std::string, std::vector<int32_t>> Struct15::get_field34() && {
  return std::move(field34);
}

const std::vector<double>& Struct15::get_field37() const& {
  return field37;
}

std::vector<double> Struct15::get_field37() && {
  return std::move(field37);
}

const  ::cpp2::Struct5& Struct15::get_field42() const& {
  return field42;
}

 ::cpp2::Struct5 Struct15::get_field42() && {
  return std::move(field42);
}

const std::set<std::string>& Struct15::get_field45() const& {
  return field45;
}

std::set<std::string> Struct15::get_field45() && {
  return std::move(field45);
}

const std::vector< ::cpp2::Struct0>& Struct15::get_field46() const& {
  return field46;
}

std::vector< ::cpp2::Struct0> Struct15::get_field46() && {
  return std::move(field46);
}

const std::vector<std::string>& Struct15::get_field50() const& {
  return field50;
}

std::vector<std::string> Struct15::get_field50() && {
  return std::move(field50);
}

const std::set<std::set<std::string>>& Struct15::get_field51() const& {
  return field51;
}

std::set<std::set<std::string>> Struct15::get_field51() && {
  return std::move(field51);
}

const  ::cpp2::Struct4& Struct15::get_field54() const& {
  return field54;
}

 ::cpp2::Struct4 Struct15::get_field54() && {
  return std::move(field54);
}

const std::map<int32_t, float>& Struct15::get_field57() const& {
  return field57;
}

std::map<int32_t, float> Struct15::get_field57() && {
  return std::move(field57);
}

const std::vector<int32_t>& Struct15::get_field59() const& {
  return field59;
}

std::vector<int32_t> Struct15::get_field59() && {
  return std::move(field59);
}

const  ::cpp2::Struct9& Struct15::get_field60() const& {
  return field60;
}

 ::cpp2::Struct9 Struct15::get_field60() && {
  return std::move(field60);
}

const std::vector<std::string>& Struct15::get_field63() const& {
  return field63;
}

std::vector<std::string> Struct15::get_field63() && {
  return std::move(field63);
}

const std::map<std::map<int8_t, int32_t>, int16_t>& Struct15::get_field64() const& {
  return field64;
}

std::map<std::map<int8_t, int32_t>, int16_t> Struct15::get_field64() && {
  return std::move(field64);
}

const  ::cpp2::Struct9& Struct15::get_field65() const& {
  return field65;
}

 ::cpp2::Struct9 Struct15::get_field65() && {
  return std::move(field65);
}

const  ::cpp2::Struct8& Struct15::get_field66() const& {
  return field66;
}

 ::cpp2::Struct8 Struct15::get_field66() && {
  return std::move(field66);
}

void Struct15::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
}

void swap(Struct15& a, Struct15& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct15::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct15::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct15::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct15::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct15::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct15::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct15::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct15::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct16::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::clear(&field1);
  field2.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field3);
  field4.clear();
  field5 = 0;
  field6.clear();
  field7 = 0;
  field8 = 0;
  field9.clear();
  field10 = 0;
  field11 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field12 = 0;
  field13 = 0;
  field14 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field15.clear();
  field16 = 0;
  field17 = 0;
  field18 = 0;
  field19.clear();
  field20 = 0;
  field21.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field22);
  field23 = 0;
  field24 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field25);
  field26.clear();
  field27 = 0;
  __isset.__clear();
}

bool Struct16::operator==(const Struct16& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  return true;
}

const  ::cpp2::Struct10& Struct16::get_field1() const& {
  return field1;
}

 ::cpp2::Struct10 Struct16::get_field1() && {
  return std::move(field1);
}

const std::map<std::vector<int32_t>, bool>& Struct16::get_field2() const& {
  return field2;
}

std::map<std::vector<int32_t>, bool> Struct16::get_field2() && {
  return std::move(field2);
}

const  ::cpp2::Struct7& Struct16::get_field3() const& {
  return field3;
}

 ::cpp2::Struct7 Struct16::get_field3() && {
  return std::move(field3);
}

const std::vector<int32_t>& Struct16::get_field4() const& {
  return field4;
}

std::vector<int32_t> Struct16::get_field4() && {
  return std::move(field4);
}

const std::vector<double>& Struct16::get_field6() const& {
  return field6;
}

std::vector<double> Struct16::get_field6() && {
  return std::move(field6);
}

const std::set<std::map<int32_t, int64_t>>& Struct16::get_field9() const& {
  return field9;
}

std::set<std::map<int32_t, int64_t>> Struct16::get_field9() && {
  return std::move(field9);
}

const std::map<std::set<bool>, float>& Struct16::get_field15() const& {
  return field15;
}

std::map<std::set<bool>, float> Struct16::get_field15() && {
  return std::move(field15);
}

const std::vector<std::string>& Struct16::get_field19() const& {
  return field19;
}

std::vector<std::string> Struct16::get_field19() && {
  return std::move(field19);
}

const std::vector<float>& Struct16::get_field21() const& {
  return field21;
}

std::vector<float> Struct16::get_field21() && {
  return std::move(field21);
}

const  ::cpp2::Struct6& Struct16::get_field22() const& {
  return field22;
}

 ::cpp2::Struct6 Struct16::get_field22() && {
  return std::move(field22);
}

const  ::cpp2::Struct5& Struct16::get_field25() const& {
  return field25;
}

 ::cpp2::Struct5 Struct16::get_field25() && {
  return std::move(field25);
}

const std::set<std::set<bool>>& Struct16::get_field26() const& {
  return field26;
}

std::set<std::set<bool>> Struct16::get_field26() && {
  return std::move(field26);
}

void Struct16::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_I32;
  }
}

void swap(Struct16& a, Struct16& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct16::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct16::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct16::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct16::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct16::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct16::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct16::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct16::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct17::__clear() {
  // clear all fields
  field1 = 0;
  field2.clear();
  field3 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field4 = 0;
  field5 = 0;
  field6 = 0;
  field7.clear();
  field8 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field9);
  field10.clear();
  field11.clear();
  field12.clear();
  field13 = 0;
  field14.clear();
  field15 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field16 = 0;
  field17.clear();
  field18.clear();
  field19 = 0;
  field20.clear();
  field21 = 0;
  field22 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field23.clear();
  field24.clear();
  field25 = 0;
  field26 = 0;
  field27.clear();
  field28 = 0;
  field29.clear();
  field30.clear();
  field31 = 0;
  field32 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::clear(&field33);
  field34.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field35);
  field36 = 0;
  field37 = 0;
  field38 = 0;
  field39 = 0;
  field40.clear();
  field41 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field42.clear();
  field43 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field44);
  field45 = 0;
  field46 = 0;
  field47 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field48 = 0;
  field49 = 0;
  field50 = 0;
  field51 = 0;
  field52.clear();
  field53.clear();
  field54 = 0;
  field55 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::clear(&field56);
  field57.clear();
  field58.clear();
  field59 = 0;
  field60 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::clear(&field61);
  field62 = 0;
  field63 = 0;
  field64 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field65.clear();
  field66 = 0;
  field67.clear();
  field68.clear();
  field69 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field70 = 0;
  field71 = 0;
  field72 = 0;
  field73 = 0;
  field74 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field75.clear();
  field76 = 0;
  field77.clear();
  field78.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field79);
  field80 = 0;
  field81.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field82);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::clear(&field83);
  field84.clear();
  field85 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field86);
  field87.clear();
  field88.clear();
  field89 = 0;
  field90.clear();
  field91.clear();
  field92 = 0;
  field93.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field94);
  field95 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field96 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field97);
  field98 = 0;
  field99 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field100);
  field101.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field102);
  field103 = 0;
  field104.clear();
  field105 = 0;
  field106 = 0;
  field107.clear();
  field108 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field109);
  field110 = 0;
  field111 = 0;
  field112 = 0;
  field113 = 0;
  field114 = 0;
  field115 = 0;
  field116 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field117.clear();
  field118.clear();
  field119 = 0;
  field120 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field121 = 0;
  field122 = 0;
  field123 = 0;
  field124.clear();
  field125 = 0;
  field126.clear();
  field127 = 0;
  field128.clear();
  __isset.__clear();
}

bool Struct17::operator==(const Struct17& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field3, rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field64, rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!((field83 == rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  if (!((field85 == rhs.field85))) {
    return false;
  }
  if (!((field86 == rhs.field86))) {
    return false;
  }
  if (!((field87 == rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!((field89 == rhs.field89))) {
    return false;
  }
  if (!((field90 == rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!((field92 == rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!((field94 == rhs.field94))) {
    return false;
  }
  if (!((field95 == rhs.field95))) {
    return false;
  }
  if (!((field96 == rhs.field96))) {
    return false;
  }
  if (!((field97 == rhs.field97))) {
    return false;
  }
  if (!((field98 == rhs.field98))) {
    return false;
  }
  if (!((field99 == rhs.field99))) {
    return false;
  }
  if (!((field100 == rhs.field100))) {
    return false;
  }
  if (!((field101 == rhs.field101))) {
    return false;
  }
  if (!((field102 == rhs.field102))) {
    return false;
  }
  if (!((field103 == rhs.field103))) {
    return false;
  }
  if (!((field104 == rhs.field104))) {
    return false;
  }
  if (!((field105 == rhs.field105))) {
    return false;
  }
  if (!((field106 == rhs.field106))) {
    return false;
  }
  if (!((field107 == rhs.field107))) {
    return false;
  }
  if (!((field108 == rhs.field108))) {
    return false;
  }
  if (!((field109 == rhs.field109))) {
    return false;
  }
  if (!((field110 == rhs.field110))) {
    return false;
  }
  if (!((field111 == rhs.field111))) {
    return false;
  }
  if (!((field112 == rhs.field112))) {
    return false;
  }
  if (!((field113 == rhs.field113))) {
    return false;
  }
  if (!((field114 == rhs.field114))) {
    return false;
  }
  if (!((field115 == rhs.field115))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field116, rhs.field116))) {
    return false;
  }
  if (!((field117 == rhs.field117))) {
    return false;
  }
  if (!((field118 == rhs.field118))) {
    return false;
  }
  if (!((field119 == rhs.field119))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field120, rhs.field120))) {
    return false;
  }
  if (!((field121 == rhs.field121))) {
    return false;
  }
  if (!((field122 == rhs.field122))) {
    return false;
  }
  if (!((field123 == rhs.field123))) {
    return false;
  }
  if (!((field124 == rhs.field124))) {
    return false;
  }
  if (!((field125 == rhs.field125))) {
    return false;
  }
  if (!((field126 == rhs.field126))) {
    return false;
  }
  if (!((field127 == rhs.field127))) {
    return false;
  }
  if (!((field128 == rhs.field128))) {
    return false;
  }
  return true;
}

const std::vector<std::string>& Struct17::get_field2() const& {
  return field2;
}

std::vector<std::string> Struct17::get_field2() && {
  return std::move(field2);
}

const std::map<bool, int32_t>& Struct17::get_field7() const& {
  return field7;
}

std::map<bool, int32_t> Struct17::get_field7() && {
  return std::move(field7);
}

const  ::cpp2::Struct3& Struct17::get_field9() const& {
  return field9;
}

 ::cpp2::Struct3 Struct17::get_field9() && {
  return std::move(field9);
}

const std::map<bool, bool>& Struct17::get_field10() const& {
  return field10;
}

std::map<bool, bool> Struct17::get_field10() && {
  return std::move(field10);
}

const std::map< ::cpp2::Struct3, std::string>& Struct17::get_field11() const& {
  return field11;
}

std::map< ::cpp2::Struct3, std::string> Struct17::get_field11() && {
  return std::move(field11);
}

const std::set<float>& Struct17::get_field12() const& {
  return field12;
}

std::set<float> Struct17::get_field12() && {
  return std::move(field12);
}

const std::map<int16_t, int64_t>& Struct17::get_field14() const& {
  return field14;
}

std::map<int16_t, int64_t> Struct17::get_field14() && {
  return std::move(field14);
}

const std::map<std::vector<bool>,  ::cpp2::Struct5>& Struct17::get_field17() const& {
  return field17;
}

std::map<std::vector<bool>,  ::cpp2::Struct5> Struct17::get_field17() && {
  return std::move(field17);
}

const std::set<int8_t>& Struct17::get_field18() const& {
  return field18;
}

std::set<int8_t> Struct17::get_field18() && {
  return std::move(field18);
}

const std::map<double, int8_t>& Struct17::get_field20() const& {
  return field20;
}

std::map<double, int8_t> Struct17::get_field20() && {
  return std::move(field20);
}

const std::vector<int32_t>& Struct17::get_field23() const& {
  return field23;
}

std::vector<int32_t> Struct17::get_field23() && {
  return std::move(field23);
}

const std::vector<std::vector<int8_t>>& Struct17::get_field24() const& {
  return field24;
}

std::vector<std::vector<int8_t>> Struct17::get_field24() && {
  return std::move(field24);
}

const std::set<float>& Struct17::get_field27() const& {
  return field27;
}

std::set<float> Struct17::get_field27() && {
  return std::move(field27);
}

const std::vector<float>& Struct17::get_field29() const& {
  return field29;
}

std::vector<float> Struct17::get_field29() && {
  return std::move(field29);
}

const std::vector<int16_t>& Struct17::get_field30() const& {
  return field30;
}

std::vector<int16_t> Struct17::get_field30() && {
  return std::move(field30);
}

const  ::cpp2::Struct11& Struct17::get_field33() const& {
  return field33;
}

 ::cpp2::Struct11 Struct17::get_field33() && {
  return std::move(field33);
}

const std::set<double>& Struct17::get_field34() const& {
  return field34;
}

std::set<double> Struct17::get_field34() && {
  return std::move(field34);
}

const  ::cpp2::Struct3& Struct17::get_field35() const& {
  return field35;
}

 ::cpp2::Struct3 Struct17::get_field35() && {
  return std::move(field35);
}

const std::vector<int16_t>& Struct17::get_field40() const& {
  return field40;
}

std::vector<int16_t> Struct17::get_field40() && {
  return std::move(field40);
}

const std::set<double>& Struct17::get_field42() const& {
  return field42;
}

std::set<double> Struct17::get_field42() && {
  return std::move(field42);
}

const  ::cpp2::Struct1& Struct17::get_field44() const& {
  return field44;
}

 ::cpp2::Struct1 Struct17::get_field44() && {
  return std::move(field44);
}

const std::set< ::cpp2::Struct10>& Struct17::get_field52() const& {
  return field52;
}

std::set< ::cpp2::Struct10> Struct17::get_field52() && {
  return std::move(field52);
}

const std::set<int32_t>& Struct17::get_field53() const& {
  return field53;
}

std::set<int32_t> Struct17::get_field53() && {
  return std::move(field53);
}

const  ::cpp2::Struct12& Struct17::get_field56() const& {
  return field56;
}

 ::cpp2::Struct12 Struct17::get_field56() && {
  return std::move(field56);
}

const std::set<std::map<float, std::string>>& Struct17::get_field57() const& {
  return field57;
}

std::set<std::map<float, std::string>> Struct17::get_field57() && {
  return std::move(field57);
}

const std::map<bool, std::set<std::string>>& Struct17::get_field58() const& {
  return field58;
}

std::map<bool, std::set<std::string>> Struct17::get_field58() && {
  return std::move(field58);
}

const  ::cpp2::Struct10& Struct17::get_field61() const& {
  return field61;
}

 ::cpp2::Struct10 Struct17::get_field61() && {
  return std::move(field61);
}

const std::set<std::string>& Struct17::get_field65() const& {
  return field65;
}

std::set<std::string> Struct17::get_field65() && {
  return std::move(field65);
}

const std::map<int16_t, std::string>& Struct17::get_field67() const& {
  return field67;
}

std::map<int16_t, std::string> Struct17::get_field67() && {
  return std::move(field67);
}

const std::map<std::map<std::vector<int16_t>, std::string>, std::vector<int8_t>>& Struct17::get_field68() const& {
  return field68;
}

std::map<std::map<std::vector<int16_t>, std::string>, std::vector<int8_t>> Struct17::get_field68() && {
  return std::move(field68);
}

const std::set<int16_t>& Struct17::get_field75() const& {
  return field75;
}

std::set<int16_t> Struct17::get_field75() && {
  return std::move(field75);
}

const std::map<std::string, std::set<float>>& Struct17::get_field77() const& {
  return field77;
}

std::map<std::string, std::set<float>> Struct17::get_field77() && {
  return std::move(field77);
}

const std::vector<float>& Struct17::get_field78() const& {
  return field78;
}

std::vector<float> Struct17::get_field78() && {
  return std::move(field78);
}

const  ::cpp2::Struct5& Struct17::get_field79() const& {
  return field79;
}

 ::cpp2::Struct5 Struct17::get_field79() && {
  return std::move(field79);
}

const std::map< ::cpp2::Struct0, std::string>& Struct17::get_field81() const& {
  return field81;
}

std::map< ::cpp2::Struct0, std::string> Struct17::get_field81() && {
  return std::move(field81);
}

const  ::cpp2::Struct3& Struct17::get_field82() const& {
  return field82;
}

 ::cpp2::Struct3 Struct17::get_field82() && {
  return std::move(field82);
}

const  ::cpp2::Struct11& Struct17::get_field83() const& {
  return field83;
}

 ::cpp2::Struct11 Struct17::get_field83() && {
  return std::move(field83);
}

const std::map<double, int16_t>& Struct17::get_field84() const& {
  return field84;
}

std::map<double, int16_t> Struct17::get_field84() && {
  return std::move(field84);
}

const  ::cpp2::Struct5& Struct17::get_field86() const& {
  return field86;
}

 ::cpp2::Struct5 Struct17::get_field86() && {
  return std::move(field86);
}

const std::set<std::vector<int32_t>>& Struct17::get_field87() const& {
  return field87;
}

std::set<std::vector<int32_t>> Struct17::get_field87() && {
  return std::move(field87);
}

const std::vector<std::set<int64_t>>& Struct17::get_field88() const& {
  return field88;
}

std::vector<std::set<int64_t>> Struct17::get_field88() && {
  return std::move(field88);
}

const std::vector<int64_t>& Struct17::get_field90() const& {
  return field90;
}

std::vector<int64_t> Struct17::get_field90() && {
  return std::move(field90);
}

const std::map<int8_t, bool>& Struct17::get_field91() const& {
  return field91;
}

std::map<int8_t, bool> Struct17::get_field91() && {
  return std::move(field91);
}

const std::map<int16_t, int32_t>& Struct17::get_field93() const& {
  return field93;
}

std::map<int16_t, int32_t> Struct17::get_field93() && {
  return std::move(field93);
}

const  ::cpp2::Struct2& Struct17::get_field94() const& {
  return field94;
}

 ::cpp2::Struct2 Struct17::get_field94() && {
  return std::move(field94);
}

const  ::cpp2::Struct2& Struct17::get_field97() const& {
  return field97;
}

 ::cpp2::Struct2 Struct17::get_field97() && {
  return std::move(field97);
}

const  ::cpp2::Struct3& Struct17::get_field100() const& {
  return field100;
}

 ::cpp2::Struct3 Struct17::get_field100() && {
  return std::move(field100);
}

const std::vector< ::cpp2::Struct9>& Struct17::get_field101() const& {
  return field101;
}

std::vector< ::cpp2::Struct9> Struct17::get_field101() && {
  return std::move(field101);
}

const  ::cpp2::Struct6& Struct17::get_field102() const& {
  return field102;
}

 ::cpp2::Struct6 Struct17::get_field102() && {
  return std::move(field102);
}

const std::map<int8_t, int16_t>& Struct17::get_field104() const& {
  return field104;
}

std::map<int8_t, int16_t> Struct17::get_field104() && {
  return std::move(field104);
}

const std::map<double, std::vector<std::map<float, int8_t>>>& Struct17::get_field107() const& {
  return field107;
}

std::map<double, std::vector<std::map<float, int8_t>>> Struct17::get_field107() && {
  return std::move(field107);
}

const  ::cpp2::Struct6& Struct17::get_field109() const& {
  return field109;
}

 ::cpp2::Struct6 Struct17::get_field109() && {
  return std::move(field109);
}

const std::set<std::map<std::map<std::string, std::string>, int64_t>>& Struct17::get_field117() const& {
  return field117;
}

std::set<std::map<std::map<std::string, std::string>, int64_t>> Struct17::get_field117() && {
  return std::move(field117);
}

const std::map<int64_t, std::string>& Struct17::get_field118() const& {
  return field118;
}

std::map<int64_t, std::string> Struct17::get_field118() && {
  return std::move(field118);
}

const std::set<std::set<double>>& Struct17::get_field124() const& {
  return field124;
}

std::set<std::set<double>> Struct17::get_field124() && {
  return std::move(field124);
}

const std::vector<std::string>& Struct17::get_field126() const& {
  return field126;
}

std::vector<std::string> Struct17::get_field126() && {
  return std::move(field126);
}

const std::map<int32_t, double>& Struct17::get_field128() const& {
  return field128;
}

std::map<int32_t, double> Struct17::get_field128() && {
  return std::move(field128);
}

void Struct17::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field96") {
    fid = 96;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field97") {
    fid = 97;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field98") {
    fid = 98;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field99") {
    fid = 99;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field100") {
    fid = 100;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field101") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field102") {
    fid = 102;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field103") {
    fid = 103;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field104") {
    fid = 104;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field105") {
    fid = 105;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field106") {
    fid = 106;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field107") {
    fid = 107;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field108") {
    fid = 108;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field109") {
    fid = 109;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field110") {
    fid = 110;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field111") {
    fid = 111;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field112") {
    fid = 112;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field113") {
    fid = 113;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field114") {
    fid = 114;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field115") {
    fid = 115;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field116") {
    fid = 116;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field117") {
    fid = 117;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field118") {
    fid = 118;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field119") {
    fid = 119;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field120") {
    fid = 120;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field121") {
    fid = 121;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field122") {
    fid = 122;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field123") {
    fid = 123;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field124") {
    fid = 124;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field125") {
    fid = 125;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field126") {
    fid = 126;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field127") {
    fid = 127;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field128") {
    fid = 128;
    _ftype = apache::thrift::protocol::T_MAP;
  }
}

void swap(Struct17& a, Struct17& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.field96, b.field96);
  swap(a.field97, b.field97);
  swap(a.field98, b.field98);
  swap(a.field99, b.field99);
  swap(a.field100, b.field100);
  swap(a.field101, b.field101);
  swap(a.field102, b.field102);
  swap(a.field103, b.field103);
  swap(a.field104, b.field104);
  swap(a.field105, b.field105);
  swap(a.field106, b.field106);
  swap(a.field107, b.field107);
  swap(a.field108, b.field108);
  swap(a.field109, b.field109);
  swap(a.field110, b.field110);
  swap(a.field111, b.field111);
  swap(a.field112, b.field112);
  swap(a.field113, b.field113);
  swap(a.field114, b.field114);
  swap(a.field115, b.field115);
  swap(a.field116, b.field116);
  swap(a.field117, b.field117);
  swap(a.field118, b.field118);
  swap(a.field119, b.field119);
  swap(a.field120, b.field120);
  swap(a.field121, b.field121);
  swap(a.field122, b.field122);
  swap(a.field123, b.field123);
  swap(a.field124, b.field124);
  swap(a.field125, b.field125);
  swap(a.field126, b.field126);
  swap(a.field127, b.field127);
  swap(a.field128, b.field128);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct17::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct17::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct17::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct17::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct17::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct17::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct17::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct17::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct18::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field1);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::clear(&field2);
  field3 = 0;
  field4.clear();
  field5 = 0;
  field6.clear();
  field7.clear();
  field8 = 0;
  field9 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field10);
  field11 = 0;
  field12 = 0;
  field13.clear();
  field14 = 0;
  field15 = 0;
  field16 = 0;
  field17.clear();
  field18 = 0;
  field19 = 0;
  field20 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field21.clear();
  field22 = 0;
  field23 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field24 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field25);
  field26.clear();
  field27 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field28 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field29 = 0;
  field30 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field31 = 0;
  field32.clear();
  field33 = 0;
  field34 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field35 = 0;
  field36 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field37);
  field38.clear();
  field39 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field40.clear();
  field41 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field42);
  field43 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field44.clear();
  field45 = 0;
  field46.clear();
  field47.clear();
  field48.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field49);
  field50.clear();
  field51.clear();
  field52 = 0;
  field53 = 0;
  field54.clear();
  field55 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field56.clear();
  field57 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field58 = 0;
  field59 = 0;
  field60.clear();
  field61.clear();
  field62.clear();
  field63.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::clear(&field64);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::clear(&field65);
  field66 = 0;
  field67 = 0;
  field68.clear();
  field69.clear();
  field70 = 0;
  field71.clear();
  field72.clear();
  field73 = 0;
  field74.clear();
  field75.clear();
  field76.clear();
  field77 = 0;
  field78 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field79 = 0;
  field80.clear();
  field81 = 0;
  field82 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field83);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field84);
  field85 = 0;
  field86 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field87 = 0;
  field88 = 0;
  field89.clear();
  field90.clear();
  field91 = 0;
  field92 = 0;
  field93 = 0;
  field94.clear();
  field95.clear();
  field96 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::clear(&field97);
  field98.clear();
  field99 = 0;
  field100.clear();
  field101.clear();
  field102 = 0;
  field103 = 0;
  field104.clear();
  field105 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field106.clear();
  field107 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::clear(&field108);
  field109 = 0;
  field110.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field111);
  field112 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field113.clear();
  field114 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field115);
  field116.clear();
  field117 = 0;
  field118.clear();
  field119 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field120 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field121 = 0;
  field122.clear();
  field123.clear();
  field124.clear();
  field125 = 0;
  field126.clear();
  field127 = 0;
  field128 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::clear(&field129);
  field130 = 0;
  field131 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field132);
  field133 = 0;
  field134 = 0;
  field135 = 0;
  field136 = 0;
  field137 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field138 = 0;
  field139 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field140 = 0;
  field141 = 0;
  field142 = 0;
  field143 = 0;
  field144.clear();
  field145.clear();
  field146 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field147);
  field148.clear();
  field149 = 0;
  field150 = 0;
  field151.clear();
  field152.clear();
  field153 = 0;
  field154 = 0;
  field155 = 0;
  field156 = 0;
  field157 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field158 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field159 = 0;
  field160.clear();
  field161 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field162);
  field163 = 0;
  field164 = 0;
  field165 = 0;
  field166.clear();
  field167.clear();
  field168.clear();
  field169.clear();
  field170.clear();
  field171.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field172);
  field173.clear();
  field174.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field175);
  field176.clear();
  field177 = 0;
  field178 = 0;
  field179 = 0;
  field180.clear();
  field181 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field182 = 0;
  field183.clear();
  field184 = 0;
  field185.clear();
  field186 = 0;
  field187.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field188);
  field189 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field190);
  field191 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field192 = 0;
  field193 = 0;
  field194 = 0;
  field195.clear();
  field196 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field197);
  field198 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::clear(&field199);
  field200.clear();
  field201.clear();
  field202.clear();
  field203 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field204.clear();
  field205.clear();
  field206 = 0;
  field207.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::clear(&field208);
  field209 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field210.clear();
  field211.clear();
  field212 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field213 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field214);
  field215 = 0;
  field216 = 0;
  field217 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field218 = 0;
  field219.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::clear(&field220);
  field221 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::clear(&field222);
  field223.clear();
  field224 = 0;
  field225.clear();
  field226.clear();
  field227.clear();
  field228 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field229);
  field230 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool Struct18::operator==(const Struct18& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field20, rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field27, rhs.field27))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field28, rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field39, rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!((field83 == rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  if (!((field85 == rhs.field85))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field86, rhs.field86))) {
    return false;
  }
  if (!((field87 == rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!((field89 == rhs.field89))) {
    return false;
  }
  if (!((field90 == rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!((field92 == rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!((field94 == rhs.field94))) {
    return false;
  }
  if (!((field95 == rhs.field95))) {
    return false;
  }
  if (!((field96 == rhs.field96))) {
    return false;
  }
  if (!((field97 == rhs.field97))) {
    return false;
  }
  if (!((field98 == rhs.field98))) {
    return false;
  }
  if (!((field99 == rhs.field99))) {
    return false;
  }
  if (!((field100 == rhs.field100))) {
    return false;
  }
  if (!((field101 == rhs.field101))) {
    return false;
  }
  if (!((field102 == rhs.field102))) {
    return false;
  }
  if (!((field103 == rhs.field103))) {
    return false;
  }
  if (!((field104 == rhs.field104))) {
    return false;
  }
  if (!((field105 == rhs.field105))) {
    return false;
  }
  if (!((field106 == rhs.field106))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field107, rhs.field107))) {
    return false;
  }
  if (!((field108 == rhs.field108))) {
    return false;
  }
  if (!((field109 == rhs.field109))) {
    return false;
  }
  if (!((field110 == rhs.field110))) {
    return false;
  }
  if (!((field111 == rhs.field111))) {
    return false;
  }
  if (!((field112 == rhs.field112))) {
    return false;
  }
  if (!((field113 == rhs.field113))) {
    return false;
  }
  if (!((field114 == rhs.field114))) {
    return false;
  }
  if (!((field115 == rhs.field115))) {
    return false;
  }
  if (!((field116 == rhs.field116))) {
    return false;
  }
  if (!((field117 == rhs.field117))) {
    return false;
  }
  if (!((field118 == rhs.field118))) {
    return false;
  }
  if (!((field119 == rhs.field119))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field120, rhs.field120))) {
    return false;
  }
  if (!((field121 == rhs.field121))) {
    return false;
  }
  if (!((field122 == rhs.field122))) {
    return false;
  }
  if (!((field123 == rhs.field123))) {
    return false;
  }
  if (!((field124 == rhs.field124))) {
    return false;
  }
  if (!((field125 == rhs.field125))) {
    return false;
  }
  if (!((field126 == rhs.field126))) {
    return false;
  }
  if (!((field127 == rhs.field127))) {
    return false;
  }
  if (!((field128 == rhs.field128))) {
    return false;
  }
  if (!((field129 == rhs.field129))) {
    return false;
  }
  if (!((field130 == rhs.field130))) {
    return false;
  }
  if (!((field131 == rhs.field131))) {
    return false;
  }
  if (!((field132 == rhs.field132))) {
    return false;
  }
  if (!((field133 == rhs.field133))) {
    return false;
  }
  if (!((field134 == rhs.field134))) {
    return false;
  }
  if (!((field135 == rhs.field135))) {
    return false;
  }
  if (!((field136 == rhs.field136))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field137, rhs.field137))) {
    return false;
  }
  if (!((field138 == rhs.field138))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field139, rhs.field139))) {
    return false;
  }
  if (!((field140 == rhs.field140))) {
    return false;
  }
  if (!((field141 == rhs.field141))) {
    return false;
  }
  if (!((field142 == rhs.field142))) {
    return false;
  }
  if (!((field143 == rhs.field143))) {
    return false;
  }
  if (!((field144 == rhs.field144))) {
    return false;
  }
  if (!((field145 == rhs.field145))) {
    return false;
  }
  if (!((field146 == rhs.field146))) {
    return false;
  }
  if (!((field147 == rhs.field147))) {
    return false;
  }
  if (!((field148 == rhs.field148))) {
    return false;
  }
  if (!((field149 == rhs.field149))) {
    return false;
  }
  if (!((field150 == rhs.field150))) {
    return false;
  }
  if (!((field151 == rhs.field151))) {
    return false;
  }
  if (!((field152 == rhs.field152))) {
    return false;
  }
  if (!((field153 == rhs.field153))) {
    return false;
  }
  if (!((field154 == rhs.field154))) {
    return false;
  }
  if (!((field155 == rhs.field155))) {
    return false;
  }
  if (!((field156 == rhs.field156))) {
    return false;
  }
  if (!((field157 == rhs.field157))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field158, rhs.field158))) {
    return false;
  }
  if (!((field159 == rhs.field159))) {
    return false;
  }
  if (!((field160 == rhs.field160))) {
    return false;
  }
  if (!((field161 == rhs.field161))) {
    return false;
  }
  if (!((field162 == rhs.field162))) {
    return false;
  }
  if (!((field163 == rhs.field163))) {
    return false;
  }
  if (!((field164 == rhs.field164))) {
    return false;
  }
  if (!((field165 == rhs.field165))) {
    return false;
  }
  if (!((field166 == rhs.field166))) {
    return false;
  }
  if (!((field167 == rhs.field167))) {
    return false;
  }
  if (!((field168 == rhs.field168))) {
    return false;
  }
  if (!((field169 == rhs.field169))) {
    return false;
  }
  if (!((field170 == rhs.field170))) {
    return false;
  }
  if (!((field171 == rhs.field171))) {
    return false;
  }
  if (!((field172 == rhs.field172))) {
    return false;
  }
  if (!((field173 == rhs.field173))) {
    return false;
  }
  if (!((field174 == rhs.field174))) {
    return false;
  }
  if (!((field175 == rhs.field175))) {
    return false;
  }
  if (!((field176 == rhs.field176))) {
    return false;
  }
  if (!((field177 == rhs.field177))) {
    return false;
  }
  if (!((field178 == rhs.field178))) {
    return false;
  }
  if (!((field179 == rhs.field179))) {
    return false;
  }
  if (!((field180 == rhs.field180))) {
    return false;
  }
  if (!((field181 == rhs.field181))) {
    return false;
  }
  if (!((field182 == rhs.field182))) {
    return false;
  }
  if (!((field183 == rhs.field183))) {
    return false;
  }
  if (!((field184 == rhs.field184))) {
    return false;
  }
  if (!((field185 == rhs.field185))) {
    return false;
  }
  if (!((field186 == rhs.field186))) {
    return false;
  }
  if (!((field187 == rhs.field187))) {
    return false;
  }
  if (!((field188 == rhs.field188))) {
    return false;
  }
  if (!((field189 == rhs.field189))) {
    return false;
  }
  if (!((field190 == rhs.field190))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field191, rhs.field191))) {
    return false;
  }
  if (!((field192 == rhs.field192))) {
    return false;
  }
  if (!((field193 == rhs.field193))) {
    return false;
  }
  if (!((field194 == rhs.field194))) {
    return false;
  }
  if (!((field195 == rhs.field195))) {
    return false;
  }
  if (!((field196 == rhs.field196))) {
    return false;
  }
  if (!((field197 == rhs.field197))) {
    return false;
  }
  if (!((field198 == rhs.field198))) {
    return false;
  }
  if (!((field199 == rhs.field199))) {
    return false;
  }
  if (!((field200 == rhs.field200))) {
    return false;
  }
  if (!((field201 == rhs.field201))) {
    return false;
  }
  if (!((field202 == rhs.field202))) {
    return false;
  }
  if (!((field203 == rhs.field203))) {
    return false;
  }
  if (!((field204 == rhs.field204))) {
    return false;
  }
  if (!((field205 == rhs.field205))) {
    return false;
  }
  if (!((field206 == rhs.field206))) {
    return false;
  }
  if (!((field207 == rhs.field207))) {
    return false;
  }
  if (!((field208 == rhs.field208))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field209, rhs.field209))) {
    return false;
  }
  if (!((field210 == rhs.field210))) {
    return false;
  }
  if (!((field211 == rhs.field211))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field212, rhs.field212))) {
    return false;
  }
  if (!((field213 == rhs.field213))) {
    return false;
  }
  if (!((field214 == rhs.field214))) {
    return false;
  }
  if (!((field215 == rhs.field215))) {
    return false;
  }
  if (!((field216 == rhs.field216))) {
    return false;
  }
  if (!((field217 == rhs.field217))) {
    return false;
  }
  if (!((field218 == rhs.field218))) {
    return false;
  }
  if (!((field219 == rhs.field219))) {
    return false;
  }
  if (!((field220 == rhs.field220))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field221, rhs.field221))) {
    return false;
  }
  if (!((field222 == rhs.field222))) {
    return false;
  }
  if (!((field223 == rhs.field223))) {
    return false;
  }
  if (!((field224 == rhs.field224))) {
    return false;
  }
  if (!((field225 == rhs.field225))) {
    return false;
  }
  if (!((field226 == rhs.field226))) {
    return false;
  }
  if (!((field227 == rhs.field227))) {
    return false;
  }
  if (!((field228 == rhs.field228))) {
    return false;
  }
  if (!((field229 == rhs.field229))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field230, rhs.field230))) {
    return false;
  }
  return true;
}

const  ::cpp2::Struct0& Struct18::get_field1() const& {
  return field1;
}

 ::cpp2::Struct0 Struct18::get_field1() && {
  return std::move(field1);
}

const  ::cpp2::Struct10& Struct18::get_field2() const& {
  return field2;
}

 ::cpp2::Struct10 Struct18::get_field2() && {
  return std::move(field2);
}

const std::map< ::cpp2::Struct3,  ::cpp2::Struct0>& Struct18::get_field4() const& {
  return field4;
}

std::map< ::cpp2::Struct3,  ::cpp2::Struct0> Struct18::get_field4() && {
  return std::move(field4);
}

const std::vector<float>& Struct18::get_field6() const& {
  return field6;
}

std::vector<float> Struct18::get_field6() && {
  return std::move(field6);
}

const std::vector<bool>& Struct18::get_field7() const& {
  return field7;
}

std::vector<bool> Struct18::get_field7() && {
  return std::move(field7);
}

const  ::cpp2::Struct0& Struct18::get_field10() const& {
  return field10;
}

 ::cpp2::Struct0 Struct18::get_field10() && {
  return std::move(field10);
}

const std::set<int16_t>& Struct18::get_field13() const& {
  return field13;
}

std::set<int16_t> Struct18::get_field13() && {
  return std::move(field13);
}

const std::map<bool, std::string>& Struct18::get_field17() const& {
  return field17;
}

std::map<bool, std::string> Struct18::get_field17() && {
  return std::move(field17);
}

const std::set<float>& Struct18::get_field21() const& {
  return field21;
}

std::set<float> Struct18::get_field21() && {
  return std::move(field21);
}

const  ::cpp2::Struct0& Struct18::get_field25() const& {
  return field25;
}

 ::cpp2::Struct0 Struct18::get_field25() && {
  return std::move(field25);
}

const std::map<int8_t, int16_t>& Struct18::get_field26() const& {
  return field26;
}

std::map<int8_t, int16_t> Struct18::get_field26() && {
  return std::move(field26);
}

const std::map<int32_t, bool>& Struct18::get_field32() const& {
  return field32;
}

std::map<int32_t, bool> Struct18::get_field32() && {
  return std::move(field32);
}

const  ::cpp2::Struct2& Struct18::get_field37() const& {
  return field37;
}

 ::cpp2::Struct2 Struct18::get_field37() && {
  return std::move(field37);
}

const std::vector<bool>& Struct18::get_field38() const& {
  return field38;
}

std::vector<bool> Struct18::get_field38() && {
  return std::move(field38);
}

const std::map<std::vector<std::map<int8_t, int64_t>>, std::string>& Struct18::get_field40() const& {
  return field40;
}

std::map<std::vector<std::map<int8_t, int64_t>>, std::string> Struct18::get_field40() && {
  return std::move(field40);
}

const  ::cpp2::Struct6& Struct18::get_field42() const& {
  return field42;
}

 ::cpp2::Struct6 Struct18::get_field42() && {
  return std::move(field42);
}

const std::map<std::string, std::vector<std::vector<std::string>>>& Struct18::get_field44() const& {
  return field44;
}

std::map<std::string, std::vector<std::vector<std::string>>> Struct18::get_field44() && {
  return std::move(field44);
}

const std::map<int16_t, int32_t>& Struct18::get_field46() const& {
  return field46;
}

std::map<int16_t, int32_t> Struct18::get_field46() && {
  return std::move(field46);
}

const std::set<std::string>& Struct18::get_field47() const& {
  return field47;
}

std::set<std::string> Struct18::get_field47() && {
  return std::move(field47);
}

const std::set<float>& Struct18::get_field48() const& {
  return field48;
}

std::set<float> Struct18::get_field48() && {
  return std::move(field48);
}

const  ::cpp2::Struct0& Struct18::get_field49() const& {
  return field49;
}

 ::cpp2::Struct0 Struct18::get_field49() && {
  return std::move(field49);
}

const std::vector< ::cpp2::Struct3>& Struct18::get_field50() const& {
  return field50;
}

std::vector< ::cpp2::Struct3> Struct18::get_field50() && {
  return std::move(field50);
}

const std::map<int64_t, std::vector<std::string>>& Struct18::get_field51() const& {
  return field51;
}

std::map<int64_t, std::vector<std::string>> Struct18::get_field51() && {
  return std::move(field51);
}

const std::set<std::string>& Struct18::get_field54() const& {
  return field54;
}

std::set<std::string> Struct18::get_field54() && {
  return std::move(field54);
}

const std::set<float>& Struct18::get_field56() const& {
  return field56;
}

std::set<float> Struct18::get_field56() && {
  return std::move(field56);
}

const std::set< ::cpp2::Struct1>& Struct18::get_field60() const& {
  return field60;
}

std::set< ::cpp2::Struct1> Struct18::get_field60() && {
  return std::move(field60);
}

const std::set<int8_t>& Struct18::get_field61() const& {
  return field61;
}

std::set<int8_t> Struct18::get_field61() && {
  return std::move(field61);
}

const std::set<int16_t>& Struct18::get_field62() const& {
  return field62;
}

std::set<int16_t> Struct18::get_field62() && {
  return std::move(field62);
}

const std::set<std::string>& Struct18::get_field63() const& {
  return field63;
}

std::set<std::string> Struct18::get_field63() && {
  return std::move(field63);
}

const  ::cpp2::Struct8& Struct18::get_field64() const& {
  return field64;
}

 ::cpp2::Struct8 Struct18::get_field64() && {
  return std::move(field64);
}

const  ::cpp2::Struct8& Struct18::get_field65() const& {
  return field65;
}

 ::cpp2::Struct8 Struct18::get_field65() && {
  return std::move(field65);
}

const std::map<std::vector<int8_t>, std::set<float>>& Struct18::get_field68() const& {
  return field68;
}

std::map<std::vector<int8_t>, std::set<float>> Struct18::get_field68() && {
  return std::move(field68);
}

const std::vector<int64_t>& Struct18::get_field69() const& {
  return field69;
}

std::vector<int64_t> Struct18::get_field69() && {
  return std::move(field69);
}

const std::vector<std::map<int16_t, std::string>>& Struct18::get_field71() const& {
  return field71;
}

std::vector<std::map<int16_t, std::string>> Struct18::get_field71() && {
  return std::move(field71);
}

const std::vector<std::map<std::string, int8_t>>& Struct18::get_field72() const& {
  return field72;
}

std::vector<std::map<std::string, int8_t>> Struct18::get_field72() && {
  return std::move(field72);
}

const std::vector<std::set<std::string>>& Struct18::get_field74() const& {
  return field74;
}

std::vector<std::set<std::string>> Struct18::get_field74() && {
  return std::move(field74);
}

const std::vector<std::vector<double>>& Struct18::get_field75() const& {
  return field75;
}

std::vector<std::vector<double>> Struct18::get_field75() && {
  return std::move(field75);
}

const std::map<double, std::vector<int64_t>>& Struct18::get_field76() const& {
  return field76;
}

std::map<double, std::vector<int64_t>> Struct18::get_field76() && {
  return std::move(field76);
}

const std::set<std::set<int64_t>>& Struct18::get_field80() const& {
  return field80;
}

std::set<std::set<int64_t>> Struct18::get_field80() && {
  return std::move(field80);
}

const  ::cpp2::Struct9& Struct18::get_field83() const& {
  return field83;
}

 ::cpp2::Struct9 Struct18::get_field83() && {
  return std::move(field83);
}

const  ::cpp2::Struct9& Struct18::get_field84() const& {
  return field84;
}

 ::cpp2::Struct9 Struct18::get_field84() && {
  return std::move(field84);
}

const std::map<int8_t, int8_t>& Struct18::get_field89() const& {
  return field89;
}

std::map<int8_t, int8_t> Struct18::get_field89() && {
  return std::move(field89);
}

const std::map<int16_t, std::vector<float>>& Struct18::get_field90() const& {
  return field90;
}

std::map<int16_t, std::vector<float>> Struct18::get_field90() && {
  return std::move(field90);
}

const std::map<float,  ::cpp2::Struct5>& Struct18::get_field94() const& {
  return field94;
}

std::map<float,  ::cpp2::Struct5> Struct18::get_field94() && {
  return std::move(field94);
}

const std::vector<std::string>& Struct18::get_field95() const& {
  return field95;
}

std::vector<std::string> Struct18::get_field95() && {
  return std::move(field95);
}

const  ::cpp2::Struct8& Struct18::get_field97() const& {
  return field97;
}

 ::cpp2::Struct8 Struct18::get_field97() && {
  return std::move(field97);
}

const std::map<int8_t, std::string>& Struct18::get_field98() const& {
  return field98;
}

std::map<int8_t, std::string> Struct18::get_field98() && {
  return std::move(field98);
}

const std::map<int8_t, std::string>& Struct18::get_field100() const& {
  return field100;
}

std::map<int8_t, std::string> Struct18::get_field100() && {
  return std::move(field100);
}

const std::map<bool, int64_t>& Struct18::get_field101() const& {
  return field101;
}

std::map<bool, int64_t> Struct18::get_field101() && {
  return std::move(field101);
}

const std::set<int16_t>& Struct18::get_field104() const& {
  return field104;
}

std::set<int16_t> Struct18::get_field104() && {
  return std::move(field104);
}

const std::set<std::string>& Struct18::get_field106() const& {
  return field106;
}

std::set<std::string> Struct18::get_field106() && {
  return std::move(field106);
}

const  ::cpp2::Struct8& Struct18::get_field108() const& {
  return field108;
}

 ::cpp2::Struct8 Struct18::get_field108() && {
  return std::move(field108);
}

const std::set<std::string>& Struct18::get_field110() const& {
  return field110;
}

std::set<std::string> Struct18::get_field110() && {
  return std::move(field110);
}

const  ::cpp2::Struct2& Struct18::get_field111() const& {
  return field111;
}

 ::cpp2::Struct2 Struct18::get_field111() && {
  return std::move(field111);
}

const std::set<std::map<std::string, int32_t>>& Struct18::get_field113() const& {
  return field113;
}

std::set<std::map<std::string, int32_t>> Struct18::get_field113() && {
  return std::move(field113);
}

const  ::cpp2::Struct3& Struct18::get_field115() const& {
  return field115;
}

 ::cpp2::Struct3 Struct18::get_field115() && {
  return std::move(field115);
}

const std::set<int16_t>& Struct18::get_field116() const& {
  return field116;
}

std::set<int16_t> Struct18::get_field116() && {
  return std::move(field116);
}

const std::vector<std::map<int8_t, double>>& Struct18::get_field118() const& {
  return field118;
}

std::vector<std::map<int8_t, double>> Struct18::get_field118() && {
  return std::move(field118);
}

const std::set<std::vector<std::map<float, double>>>& Struct18::get_field122() const& {
  return field122;
}

std::set<std::vector<std::map<float, double>>> Struct18::get_field122() && {
  return std::move(field122);
}

const std::vector<std::map<std::string, int8_t>>& Struct18::get_field123() const& {
  return field123;
}

std::vector<std::map<std::string, int8_t>> Struct18::get_field123() && {
  return std::move(field123);
}

const std::set<int8_t>& Struct18::get_field124() const& {
  return field124;
}

std::set<int8_t> Struct18::get_field124() && {
  return std::move(field124);
}

const std::map<std::string, int32_t>& Struct18::get_field126() const& {
  return field126;
}

std::map<std::string, int32_t> Struct18::get_field126() && {
  return std::move(field126);
}

const  ::cpp2::Struct11& Struct18::get_field129() const& {
  return field129;
}

 ::cpp2::Struct11 Struct18::get_field129() && {
  return std::move(field129);
}

const  ::cpp2::Struct7& Struct18::get_field132() const& {
  return field132;
}

 ::cpp2::Struct7 Struct18::get_field132() && {
  return std::move(field132);
}

const std::map< ::cpp2::Struct4, int64_t>& Struct18::get_field144() const& {
  return field144;
}

std::map< ::cpp2::Struct4, int64_t> Struct18::get_field144() && {
  return std::move(field144);
}

const std::vector<float>& Struct18::get_field145() const& {
  return field145;
}

std::vector<float> Struct18::get_field145() && {
  return std::move(field145);
}

const  ::cpp2::Struct9& Struct18::get_field147() const& {
  return field147;
}

 ::cpp2::Struct9 Struct18::get_field147() && {
  return std::move(field147);
}

const std::map< ::cpp2::Struct0, double>& Struct18::get_field148() const& {
  return field148;
}

std::map< ::cpp2::Struct0, double> Struct18::get_field148() && {
  return std::move(field148);
}

const std::set<int8_t>& Struct18::get_field151() const& {
  return field151;
}

std::set<int8_t> Struct18::get_field151() && {
  return std::move(field151);
}

const std::map<int64_t, std::vector<int64_t>>& Struct18::get_field152() const& {
  return field152;
}

std::map<int64_t, std::vector<int64_t>> Struct18::get_field152() && {
  return std::move(field152);
}

const std::map<double, int8_t>& Struct18::get_field160() const& {
  return field160;
}

std::map<double, int8_t> Struct18::get_field160() && {
  return std::move(field160);
}

const  ::cpp2::Struct2& Struct18::get_field162() const& {
  return field162;
}

 ::cpp2::Struct2 Struct18::get_field162() && {
  return std::move(field162);
}

const std::set< ::cpp2::Struct6>& Struct18::get_field166() const& {
  return field166;
}

std::set< ::cpp2::Struct6> Struct18::get_field166() && {
  return std::move(field166);
}

const std::map<int16_t, std::set<float>>& Struct18::get_field167() const& {
  return field167;
}

std::map<int16_t, std::set<float>> Struct18::get_field167() && {
  return std::move(field167);
}

const std::vector<std::string>& Struct18::get_field168() const& {
  return field168;
}

std::vector<std::string> Struct18::get_field168() && {
  return std::move(field168);
}

const std::set<std::string>& Struct18::get_field169() const& {
  return field169;
}

std::set<std::string> Struct18::get_field169() && {
  return std::move(field169);
}

const std::set<int8_t>& Struct18::get_field170() const& {
  return field170;
}

std::set<int8_t> Struct18::get_field170() && {
  return std::move(field170);
}

const std::vector<bool>& Struct18::get_field171() const& {
  return field171;
}

std::vector<bool> Struct18::get_field171() && {
  return std::move(field171);
}

const  ::cpp2::Struct0& Struct18::get_field172() const& {
  return field172;
}

 ::cpp2::Struct0 Struct18::get_field172() && {
  return std::move(field172);
}

const std::vector<std::string>& Struct18::get_field173() const& {
  return field173;
}

std::vector<std::string> Struct18::get_field173() && {
  return std::move(field173);
}

const std::map<int32_t,  ::cpp2::Struct8>& Struct18::get_field174() const& {
  return field174;
}

std::map<int32_t,  ::cpp2::Struct8> Struct18::get_field174() && {
  return std::move(field174);
}

const  ::cpp2::Struct3& Struct18::get_field175() const& {
  return field175;
}

 ::cpp2::Struct3 Struct18::get_field175() && {
  return std::move(field175);
}

const std::set<float>& Struct18::get_field176() const& {
  return field176;
}

std::set<float> Struct18::get_field176() && {
  return std::move(field176);
}

const std::set<std::string>& Struct18::get_field180() const& {
  return field180;
}

std::set<std::string> Struct18::get_field180() && {
  return std::move(field180);
}

const std::vector<int64_t>& Struct18::get_field183() const& {
  return field183;
}

std::vector<int64_t> Struct18::get_field183() && {
  return std::move(field183);
}

const std::set<std::string>& Struct18::get_field185() const& {
  return field185;
}

std::set<std::string> Struct18::get_field185() && {
  return std::move(field185);
}

const std::set<std::string>& Struct18::get_field187() const& {
  return field187;
}

std::set<std::string> Struct18::get_field187() && {
  return std::move(field187);
}

const  ::cpp2::Struct4& Struct18::get_field188() const& {
  return field188;
}

 ::cpp2::Struct4 Struct18::get_field188() && {
  return std::move(field188);
}

const  ::cpp2::Struct7& Struct18::get_field190() const& {
  return field190;
}

 ::cpp2::Struct7 Struct18::get_field190() && {
  return std::move(field190);
}

const std::set<int32_t>& Struct18::get_field195() const& {
  return field195;
}

std::set<int32_t> Struct18::get_field195() && {
  return std::move(field195);
}

const  ::cpp2::Struct4& Struct18::get_field197() const& {
  return field197;
}

 ::cpp2::Struct4 Struct18::get_field197() && {
  return std::move(field197);
}

const  ::cpp2::Struct14& Struct18::get_field199() const& {
  return field199;
}

 ::cpp2::Struct14 Struct18::get_field199() && {
  return std::move(field199);
}

const std::vector<float>& Struct18::get_field200() const& {
  return field200;
}

std::vector<float> Struct18::get_field200() && {
  return std::move(field200);
}

const std::vector<int64_t>& Struct18::get_field201() const& {
  return field201;
}

std::vector<int64_t> Struct18::get_field201() && {
  return std::move(field201);
}

const std::map<bool, int32_t>& Struct18::get_field202() const& {
  return field202;
}

std::map<bool, int32_t> Struct18::get_field202() && {
  return std::move(field202);
}

const std::map<int64_t, int32_t>& Struct18::get_field204() const& {
  return field204;
}

std::map<int64_t, int32_t> Struct18::get_field204() && {
  return std::move(field204);
}

const std::map<std::string, std::vector<int32_t>>& Struct18::get_field205() const& {
  return field205;
}

std::map<std::string, std::vector<int32_t>> Struct18::get_field205() && {
  return std::move(field205);
}

const std::set<std::string>& Struct18::get_field207() const& {
  return field207;
}

std::set<std::string> Struct18::get_field207() && {
  return std::move(field207);
}

const  ::cpp2::Struct8& Struct18::get_field208() const& {
  return field208;
}

 ::cpp2::Struct8 Struct18::get_field208() && {
  return std::move(field208);
}

const std::map<std::string, bool>& Struct18::get_field210() const& {
  return field210;
}

std::map<std::string, bool> Struct18::get_field210() && {
  return std::move(field210);
}

const std::map<bool, int16_t>& Struct18::get_field211() const& {
  return field211;
}

std::map<bool, int16_t> Struct18::get_field211() && {
  return std::move(field211);
}

const  ::cpp2::Struct5& Struct18::get_field214() const& {
  return field214;
}

 ::cpp2::Struct5 Struct18::get_field214() && {
  return std::move(field214);
}

const std::vector<float>& Struct18::get_field219() const& {
  return field219;
}

std::vector<float> Struct18::get_field219() && {
  return std::move(field219);
}

const  ::cpp2::Struct13& Struct18::get_field220() const& {
  return field220;
}

 ::cpp2::Struct13 Struct18::get_field220() && {
  return std::move(field220);
}

const  ::cpp2::Struct8& Struct18::get_field222() const& {
  return field222;
}

 ::cpp2::Struct8 Struct18::get_field222() && {
  return std::move(field222);
}

const std::set<int16_t>& Struct18::get_field223() const& {
  return field223;
}

std::set<int16_t> Struct18::get_field223() && {
  return std::move(field223);
}

const std::vector<float>& Struct18::get_field225() const& {
  return field225;
}

std::vector<float> Struct18::get_field225() && {
  return std::move(field225);
}

const std::vector<int16_t>& Struct18::get_field226() const& {
  return field226;
}

std::vector<int16_t> Struct18::get_field226() && {
  return std::move(field226);
}

const std::vector<std::map<int64_t, int16_t>>& Struct18::get_field227() const& {
  return field227;
}

std::vector<std::map<int64_t, int16_t>> Struct18::get_field227() && {
  return std::move(field227);
}

const  ::cpp2::Struct2& Struct18::get_field229() const& {
  return field229;
}

 ::cpp2::Struct2 Struct18::get_field229() && {
  return std::move(field229);
}

void Struct18::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field96") {
    fid = 96;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field97") {
    fid = 97;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field98") {
    fid = 98;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field99") {
    fid = 99;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field100") {
    fid = 100;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field101") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field102") {
    fid = 102;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field103") {
    fid = 103;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field104") {
    fid = 104;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field105") {
    fid = 105;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field106") {
    fid = 106;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field107") {
    fid = 107;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field108") {
    fid = 108;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field109") {
    fid = 109;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field110") {
    fid = 110;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field111") {
    fid = 111;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field112") {
    fid = 112;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field113") {
    fid = 113;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field114") {
    fid = 114;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field115") {
    fid = 115;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field116") {
    fid = 116;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field117") {
    fid = 117;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field118") {
    fid = 118;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field119") {
    fid = 119;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field120") {
    fid = 120;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field121") {
    fid = 121;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field122") {
    fid = 122;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field123") {
    fid = 123;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field124") {
    fid = 124;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field125") {
    fid = 125;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field126") {
    fid = 126;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field127") {
    fid = 127;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field128") {
    fid = 128;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field129") {
    fid = 129;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field130") {
    fid = 130;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field131") {
    fid = 131;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field132") {
    fid = 132;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field133") {
    fid = 133;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field134") {
    fid = 134;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field135") {
    fid = 135;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field136") {
    fid = 136;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field137") {
    fid = 137;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field138") {
    fid = 138;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field139") {
    fid = 139;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field140") {
    fid = 140;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field141") {
    fid = 141;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field142") {
    fid = 142;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field143") {
    fid = 143;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field144") {
    fid = 144;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field145") {
    fid = 145;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field146") {
    fid = 146;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field147") {
    fid = 147;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field148") {
    fid = 148;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field149") {
    fid = 149;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field150") {
    fid = 150;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field151") {
    fid = 151;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field152") {
    fid = 152;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field153") {
    fid = 153;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field154") {
    fid = 154;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field155") {
    fid = 155;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field156") {
    fid = 156;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field157") {
    fid = 157;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field158") {
    fid = 158;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field159") {
    fid = 159;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field160") {
    fid = 160;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field161") {
    fid = 161;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field162") {
    fid = 162;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field163") {
    fid = 163;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field164") {
    fid = 164;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field165") {
    fid = 165;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field166") {
    fid = 166;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field167") {
    fid = 167;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field168") {
    fid = 168;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field169") {
    fid = 169;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field170") {
    fid = 170;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field171") {
    fid = 171;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field172") {
    fid = 172;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field173") {
    fid = 173;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field174") {
    fid = 174;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field175") {
    fid = 175;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field176") {
    fid = 176;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field177") {
    fid = 177;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field178") {
    fid = 178;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field179") {
    fid = 179;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field180") {
    fid = 180;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field181") {
    fid = 181;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field182") {
    fid = 182;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field183") {
    fid = 183;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field184") {
    fid = 184;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field185") {
    fid = 185;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field186") {
    fid = 186;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field187") {
    fid = 187;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field188") {
    fid = 188;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field189") {
    fid = 189;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field190") {
    fid = 190;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field191") {
    fid = 191;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field192") {
    fid = 192;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field193") {
    fid = 193;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field194") {
    fid = 194;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field195") {
    fid = 195;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field196") {
    fid = 196;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field197") {
    fid = 197;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field198") {
    fid = 198;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field199") {
    fid = 199;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field200") {
    fid = 200;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field201") {
    fid = 201;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field202") {
    fid = 202;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field203") {
    fid = 203;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field204") {
    fid = 204;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field205") {
    fid = 205;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field206") {
    fid = 206;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field207") {
    fid = 207;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field208") {
    fid = 208;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field209") {
    fid = 209;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field210") {
    fid = 210;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field211") {
    fid = 211;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field212") {
    fid = 212;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field213") {
    fid = 213;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field214") {
    fid = 214;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field215") {
    fid = 215;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field216") {
    fid = 216;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field217") {
    fid = 217;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field218") {
    fid = 218;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field219") {
    fid = 219;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field220") {
    fid = 220;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field221") {
    fid = 221;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field222") {
    fid = 222;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field223") {
    fid = 223;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field224") {
    fid = 224;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field225") {
    fid = 225;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field226") {
    fid = 226;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field227") {
    fid = 227;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field228") {
    fid = 228;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field229") {
    fid = 229;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field230") {
    fid = 230;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

void swap(Struct18& a, Struct18& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.field96, b.field96);
  swap(a.field97, b.field97);
  swap(a.field98, b.field98);
  swap(a.field99, b.field99);
  swap(a.field100, b.field100);
  swap(a.field101, b.field101);
  swap(a.field102, b.field102);
  swap(a.field103, b.field103);
  swap(a.field104, b.field104);
  swap(a.field105, b.field105);
  swap(a.field106, b.field106);
  swap(a.field107, b.field107);
  swap(a.field108, b.field108);
  swap(a.field109, b.field109);
  swap(a.field110, b.field110);
  swap(a.field111, b.field111);
  swap(a.field112, b.field112);
  swap(a.field113, b.field113);
  swap(a.field114, b.field114);
  swap(a.field115, b.field115);
  swap(a.field116, b.field116);
  swap(a.field117, b.field117);
  swap(a.field118, b.field118);
  swap(a.field119, b.field119);
  swap(a.field120, b.field120);
  swap(a.field121, b.field121);
  swap(a.field122, b.field122);
  swap(a.field123, b.field123);
  swap(a.field124, b.field124);
  swap(a.field125, b.field125);
  swap(a.field126, b.field126);
  swap(a.field127, b.field127);
  swap(a.field128, b.field128);
  swap(a.field129, b.field129);
  swap(a.field130, b.field130);
  swap(a.field131, b.field131);
  swap(a.field132, b.field132);
  swap(a.field133, b.field133);
  swap(a.field134, b.field134);
  swap(a.field135, b.field135);
  swap(a.field136, b.field136);
  swap(a.field137, b.field137);
  swap(a.field138, b.field138);
  swap(a.field139, b.field139);
  swap(a.field140, b.field140);
  swap(a.field141, b.field141);
  swap(a.field142, b.field142);
  swap(a.field143, b.field143);
  swap(a.field144, b.field144);
  swap(a.field145, b.field145);
  swap(a.field146, b.field146);
  swap(a.field147, b.field147);
  swap(a.field148, b.field148);
  swap(a.field149, b.field149);
  swap(a.field150, b.field150);
  swap(a.field151, b.field151);
  swap(a.field152, b.field152);
  swap(a.field153, b.field153);
  swap(a.field154, b.field154);
  swap(a.field155, b.field155);
  swap(a.field156, b.field156);
  swap(a.field157, b.field157);
  swap(a.field158, b.field158);
  swap(a.field159, b.field159);
  swap(a.field160, b.field160);
  swap(a.field161, b.field161);
  swap(a.field162, b.field162);
  swap(a.field163, b.field163);
  swap(a.field164, b.field164);
  swap(a.field165, b.field165);
  swap(a.field166, b.field166);
  swap(a.field167, b.field167);
  swap(a.field168, b.field168);
  swap(a.field169, b.field169);
  swap(a.field170, b.field170);
  swap(a.field171, b.field171);
  swap(a.field172, b.field172);
  swap(a.field173, b.field173);
  swap(a.field174, b.field174);
  swap(a.field175, b.field175);
  swap(a.field176, b.field176);
  swap(a.field177, b.field177);
  swap(a.field178, b.field178);
  swap(a.field179, b.field179);
  swap(a.field180, b.field180);
  swap(a.field181, b.field181);
  swap(a.field182, b.field182);
  swap(a.field183, b.field183);
  swap(a.field184, b.field184);
  swap(a.field185, b.field185);
  swap(a.field186, b.field186);
  swap(a.field187, b.field187);
  swap(a.field188, b.field188);
  swap(a.field189, b.field189);
  swap(a.field190, b.field190);
  swap(a.field191, b.field191);
  swap(a.field192, b.field192);
  swap(a.field193, b.field193);
  swap(a.field194, b.field194);
  swap(a.field195, b.field195);
  swap(a.field196, b.field196);
  swap(a.field197, b.field197);
  swap(a.field198, b.field198);
  swap(a.field199, b.field199);
  swap(a.field200, b.field200);
  swap(a.field201, b.field201);
  swap(a.field202, b.field202);
  swap(a.field203, b.field203);
  swap(a.field204, b.field204);
  swap(a.field205, b.field205);
  swap(a.field206, b.field206);
  swap(a.field207, b.field207);
  swap(a.field208, b.field208);
  swap(a.field209, b.field209);
  swap(a.field210, b.field210);
  swap(a.field211, b.field211);
  swap(a.field212, b.field212);
  swap(a.field213, b.field213);
  swap(a.field214, b.field214);
  swap(a.field215, b.field215);
  swap(a.field216, b.field216);
  swap(a.field217, b.field217);
  swap(a.field218, b.field218);
  swap(a.field219, b.field219);
  swap(a.field220, b.field220);
  swap(a.field221, b.field221);
  swap(a.field222, b.field222);
  swap(a.field223, b.field223);
  swap(a.field224, b.field224);
  swap(a.field225, b.field225);
  swap(a.field226, b.field226);
  swap(a.field227, b.field227);
  swap(a.field228, b.field228);
  swap(a.field229, b.field229);
  swap(a.field230, b.field230);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct18::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct18::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct18::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct18::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct18::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct18::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct18::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct18::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct19::__clear() {
  // clear all fields
  field1 = 0;
  field2.clear();
  field3.clear();
  field4 = 0;
  field5 = 0;
  field6.clear();
  field7.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field8);
  field9 = 0;
  field10.clear();
  field11 = 0;
  field12.clear();
  field13 = 0;
  field14 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field15);
  field16.clear();
  field17.clear();
  field18.clear();
  field19.clear();
  field20 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field21.clear();
  field22.clear();
  field23 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field24 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field25 = 0;
  field26 = 0;
  field27 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field28 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field29 = 0;
  field30 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field31 = 0;
  field32 = 0;
  field33.clear();
  field34.clear();
  field35 = 0;
  field36.clear();
  field37.clear();
  field38 = 0;
  field39.clear();
  field40 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field41.clear();
  field42 = 0;
  field43.clear();
  field44 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field45.clear();
  field46 = 0;
  field47 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field48 = 0;
  field49 = 0;
  field50.clear();
  field51 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field52 = 0;
  field53 = 0;
  field54 = 0;
  field55 = 0;
  field56.clear();
  field57 = 0;
  field58.clear();
  field59.clear();
  field60.clear();
  field61.clear();
  field62 = 0;
  field63 = 0;
  field64.clear();
  field65 = 0;
  field66 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field67);
  field68 = 0;
  field69 = 0;
  field70 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::clear(&field71);
  field72 = 0;
  field73.clear();
  field74.clear();
  field75.clear();
  field76.clear();
  field77 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field78 = 0;
  field79.clear();
  field80 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field81 = 0;
  field82 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::clear(&field83);
  field84 = 0;
  __isset.__clear();
}

bool Struct19::operator==(const Struct19& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field20, rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field30, rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field51, rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!((field83 == rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  return true;
}

const std::map<std::string, int16_t>& Struct19::get_field2() const& {
  return field2;
}

std::map<std::string, int16_t> Struct19::get_field2() && {
  return std::move(field2);
}

const std::set<int64_t>& Struct19::get_field3() const& {
  return field3;
}

std::set<int64_t> Struct19::get_field3() && {
  return std::move(field3);
}

const std::map<double, bool>& Struct19::get_field6() const& {
  return field6;
}

std::map<double, bool> Struct19::get_field6() && {
  return std::move(field6);
}

const std::map<std::string, std::set<int16_t>>& Struct19::get_field7() const& {
  return field7;
}

std::map<std::string, std::set<int16_t>> Struct19::get_field7() && {
  return std::move(field7);
}

const  ::cpp2::Struct0& Struct19::get_field8() const& {
  return field8;
}

 ::cpp2::Struct0 Struct19::get_field8() && {
  return std::move(field8);
}

const std::vector<std::set<std::vector<int32_t>>>& Struct19::get_field10() const& {
  return field10;
}

std::vector<std::set<std::vector<int32_t>>> Struct19::get_field10() && {
  return std::move(field10);
}

const std::map<int32_t, bool>& Struct19::get_field12() const& {
  return field12;
}

std::map<int32_t, bool> Struct19::get_field12() && {
  return std::move(field12);
}

const  ::cpp2::Struct7& Struct19::get_field15() const& {
  return field15;
}

 ::cpp2::Struct7 Struct19::get_field15() && {
  return std::move(field15);
}

const std::vector<int16_t>& Struct19::get_field16() const& {
  return field16;
}

std::vector<int16_t> Struct19::get_field16() && {
  return std::move(field16);
}

const std::map<std::vector<std::vector<std::string>>, int8_t>& Struct19::get_field17() const& {
  return field17;
}

std::map<std::vector<std::vector<std::string>>, int8_t> Struct19::get_field17() && {
  return std::move(field17);
}

const std::set<std::string>& Struct19::get_field18() const& {
  return field18;
}

std::set<std::string> Struct19::get_field18() && {
  return std::move(field18);
}

const std::set<double>& Struct19::get_field19() const& {
  return field19;
}

std::set<double> Struct19::get_field19() && {
  return std::move(field19);
}

const std::vector<int16_t>& Struct19::get_field21() const& {
  return field21;
}

std::vector<int16_t> Struct19::get_field21() && {
  return std::move(field21);
}

const std::set<std::set<double>>& Struct19::get_field22() const& {
  return field22;
}

std::set<std::set<double>> Struct19::get_field22() && {
  return std::move(field22);
}

const std::vector<bool>& Struct19::get_field33() const& {
  return field33;
}

std::vector<bool> Struct19::get_field33() && {
  return std::move(field33);
}

const std::set<std::vector<std::string>>& Struct19::get_field34() const& {
  return field34;
}

std::set<std::vector<std::string>> Struct19::get_field34() && {
  return std::move(field34);
}

const std::map<float, int8_t>& Struct19::get_field36() const& {
  return field36;
}

std::map<float, int8_t> Struct19::get_field36() && {
  return std::move(field36);
}

const std::map<std::string, int32_t>& Struct19::get_field37() const& {
  return field37;
}

std::map<std::string, int32_t> Struct19::get_field37() && {
  return std::move(field37);
}

const std::set<int16_t>& Struct19::get_field39() const& {
  return field39;
}

std::set<int16_t> Struct19::get_field39() && {
  return std::move(field39);
}

const std::vector<std::vector<int32_t>>& Struct19::get_field41() const& {
  return field41;
}

std::vector<std::vector<int32_t>> Struct19::get_field41() && {
  return std::move(field41);
}

const std::set<int32_t>& Struct19::get_field43() const& {
  return field43;
}

std::set<int32_t> Struct19::get_field43() && {
  return std::move(field43);
}

const std::set<float>& Struct19::get_field45() const& {
  return field45;
}

std::set<float> Struct19::get_field45() && {
  return std::move(field45);
}

const std::vector<std::string>& Struct19::get_field50() const& {
  return field50;
}

std::vector<std::string> Struct19::get_field50() && {
  return std::move(field50);
}

const std::set<bool>& Struct19::get_field56() const& {
  return field56;
}

std::set<bool> Struct19::get_field56() && {
  return std::move(field56);
}

const std::set<std::vector<bool>>& Struct19::get_field58() const& {
  return field58;
}

std::set<std::vector<bool>> Struct19::get_field58() && {
  return std::move(field58);
}

const std::vector<std::vector<bool>>& Struct19::get_field59() const& {
  return field59;
}

std::vector<std::vector<bool>> Struct19::get_field59() && {
  return std::move(field59);
}

const std::set<int16_t>& Struct19::get_field60() const& {
  return field60;
}

std::set<int16_t> Struct19::get_field60() && {
  return std::move(field60);
}

const std::set<std::string>& Struct19::get_field61() const& {
  return field61;
}

std::set<std::string> Struct19::get_field61() && {
  return std::move(field61);
}

const std::map<int8_t, std::string>& Struct19::get_field64() const& {
  return field64;
}

std::map<int8_t, std::string> Struct19::get_field64() && {
  return std::move(field64);
}

const  ::cpp2::Struct3& Struct19::get_field67() const& {
  return field67;
}

 ::cpp2::Struct3 Struct19::get_field67() && {
  return std::move(field67);
}

const  ::cpp2::Struct8& Struct19::get_field71() const& {
  return field71;
}

 ::cpp2::Struct8 Struct19::get_field71() && {
  return std::move(field71);
}

const std::set<std::string>& Struct19::get_field73() const& {
  return field73;
}

std::set<std::string> Struct19::get_field73() && {
  return std::move(field73);
}

const std::set<std::string>& Struct19::get_field74() const& {
  return field74;
}

std::set<std::string> Struct19::get_field74() && {
  return std::move(field74);
}

const std::set<float>& Struct19::get_field75() const& {
  return field75;
}

std::set<float> Struct19::get_field75() && {
  return std::move(field75);
}

const std::map<std::vector<double>,  ::cpp2::Struct2>& Struct19::get_field76() const& {
  return field76;
}

std::map<std::vector<double>,  ::cpp2::Struct2> Struct19::get_field76() && {
  return std::move(field76);
}

const std::vector<std::string>& Struct19::get_field79() const& {
  return field79;
}

std::vector<std::string> Struct19::get_field79() && {
  return std::move(field79);
}

const  ::cpp2::Struct8& Struct19::get_field83() const& {
  return field83;
}

 ::cpp2::Struct8 Struct19::get_field83() && {
  return std::move(field83);
}

void Struct19::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_I16;
  }
}

void swap(Struct19& a, Struct19& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct19::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct19::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct19::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct19::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct19::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct19::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct19::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct19::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct20::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field1);
  field2.clear();
  field3 = 0;
  field4 = 0;
  field5 = 0;
  field6 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field7 = 0;
  field8.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field9);
  field10 = 0;
  field11 = 0;
  field12.clear();
  field13.clear();
  field14 = 0;
  field15 = 0;
  field16 = 0;
  field17.clear();
  field18 = 0;
  field19 = 0;
  field20.clear();
  field21.clear();
  field22 = 0;
  field23 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::clear(&field24);
  field25 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field26.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field27);
  field28 = 0;
  field29.clear();
  field30.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::clear(&field31);
  field32.clear();
  field33.clear();
  field34 = 0;
  field35 = 0;
  field36.clear();
  field37.clear();
  field38 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field39.clear();
  field40.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::clear(&field41);
  field42.clear();
  field43.clear();
  field44 = 0;
  field45 = 0;
  field46 = 0;
  field47 = 0;
  field48 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field49);
  field50 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field51);
  field52.clear();
  field53 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field54 = 0;
  field55 = 0;
  field56 = 0;
  field57.clear();
  field58 = 0;
  field59 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field60);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field61);
  field62.clear();
  field63 = 0;
  field64.clear();
  field65 = 0;
  field66 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field67 = 0;
  field68.clear();
  field69.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field70);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::clear(&field71);
  field72 = 0;
  field73 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field74.clear();
  field75.clear();
  field76.clear();
  field77.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::clear(&field78);
  field79.clear();
  field80.clear();
  field81.clear();
  field82 = 0;
  __isset.__clear();
}

bool Struct20::operator==(const Struct20& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field23, rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field38, rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field66, rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  return true;
}

const  ::cpp2::Struct0& Struct20::get_field1() const& {
  return field1;
}

 ::cpp2::Struct0 Struct20::get_field1() && {
  return std::move(field1);
}

const std::set< ::cpp2::Struct13>& Struct20::get_field2() const& {
  return field2;
}

std::set< ::cpp2::Struct13> Struct20::get_field2() && {
  return std::move(field2);
}

const std::vector<std::map<float, int16_t>>& Struct20::get_field8() const& {
  return field8;
}

std::vector<std::map<float, int16_t>> Struct20::get_field8() && {
  return std::move(field8);
}

const  ::cpp2::Struct7& Struct20::get_field9() const& {
  return field9;
}

 ::cpp2::Struct7 Struct20::get_field9() && {
  return std::move(field9);
}

const std::set< ::cpp2::Struct6>& Struct20::get_field12() const& {
  return field12;
}

std::set< ::cpp2::Struct6> Struct20::get_field12() && {
  return std::move(field12);
}

const std::map<std::vector<bool>, std::vector<bool>>& Struct20::get_field13() const& {
  return field13;
}

std::map<std::vector<bool>, std::vector<bool>> Struct20::get_field13() && {
  return std::move(field13);
}

const std::set< ::cpp2::Struct3>& Struct20::get_field17() const& {
  return field17;
}

std::set< ::cpp2::Struct3> Struct20::get_field17() && {
  return std::move(field17);
}

const std::set<std::vector<int32_t>>& Struct20::get_field20() const& {
  return field20;
}

std::set<std::vector<int32_t>> Struct20::get_field20() && {
  return std::move(field20);
}

const std::map<int8_t, int8_t>& Struct20::get_field21() const& {
  return field21;
}

std::map<int8_t, int8_t> Struct20::get_field21() && {
  return std::move(field21);
}

const  ::cpp2::Struct14& Struct20::get_field24() const& {
  return field24;
}

 ::cpp2::Struct14 Struct20::get_field24() && {
  return std::move(field24);
}

const std::set<int8_t>& Struct20::get_field26() const& {
  return field26;
}

std::set<int8_t> Struct20::get_field26() && {
  return std::move(field26);
}

const  ::cpp2::Struct9& Struct20::get_field27() const& {
  return field27;
}

 ::cpp2::Struct9 Struct20::get_field27() && {
  return std::move(field27);
}

const std::map<int16_t, int64_t>& Struct20::get_field29() const& {
  return field29;
}

std::map<int16_t, int64_t> Struct20::get_field29() && {
  return std::move(field29);
}

const std::set<std::set<std::vector<int8_t>>>& Struct20::get_field30() const& {
  return field30;
}

std::set<std::set<std::vector<int8_t>>> Struct20::get_field30() && {
  return std::move(field30);
}

const  ::cpp2::Struct11& Struct20::get_field31() const& {
  return field31;
}

 ::cpp2::Struct11 Struct20::get_field31() && {
  return std::move(field31);
}

const std::vector<std::string>& Struct20::get_field32() const& {
  return field32;
}

std::vector<std::string> Struct20::get_field32() && {
  return std::move(field32);
}

const std::map<int16_t, double>& Struct20::get_field33() const& {
  return field33;
}

std::map<int16_t, double> Struct20::get_field33() && {
  return std::move(field33);
}

const std::vector<int64_t>& Struct20::get_field36() const& {
  return field36;
}

std::vector<int64_t> Struct20::get_field36() && {
  return std::move(field36);
}

const std::set<bool>& Struct20::get_field37() const& {
  return field37;
}

std::set<bool> Struct20::get_field37() && {
  return std::move(field37);
}

const std::vector<double>& Struct20::get_field39() const& {
  return field39;
}

std::vector<double> Struct20::get_field39() && {
  return std::move(field39);
}

const std::set<std::map<bool, std::set<std::string>>>& Struct20::get_field40() const& {
  return field40;
}

std::set<std::map<bool, std::set<std::string>>> Struct20::get_field40() && {
  return std::move(field40);
}

const  ::cpp2::Struct13& Struct20::get_field41() const& {
  return field41;
}

 ::cpp2::Struct13 Struct20::get_field41() && {
  return std::move(field41);
}

const std::vector<std::string>& Struct20::get_field42() const& {
  return field42;
}

std::vector<std::string> Struct20::get_field42() && {
  return std::move(field42);
}

const std::vector<std::vector<bool>>& Struct20::get_field43() const& {
  return field43;
}

std::vector<std::vector<bool>> Struct20::get_field43() && {
  return std::move(field43);
}

const  ::cpp2::Struct7& Struct20::get_field49() const& {
  return field49;
}

 ::cpp2::Struct7 Struct20::get_field49() && {
  return std::move(field49);
}

const  ::cpp2::Struct0& Struct20::get_field51() const& {
  return field51;
}

 ::cpp2::Struct0 Struct20::get_field51() && {
  return std::move(field51);
}

const std::set<std::string>& Struct20::get_field52() const& {
  return field52;
}

std::set<std::string> Struct20::get_field52() && {
  return std::move(field52);
}

const std::set<int64_t>& Struct20::get_field57() const& {
  return field57;
}

std::set<int64_t> Struct20::get_field57() && {
  return std::move(field57);
}

const  ::cpp2::Struct5& Struct20::get_field60() const& {
  return field60;
}

 ::cpp2::Struct5 Struct20::get_field60() && {
  return std::move(field60);
}

const  ::cpp2::Struct3& Struct20::get_field61() const& {
  return field61;
}

 ::cpp2::Struct3 Struct20::get_field61() && {
  return std::move(field61);
}

const std::set<int32_t>& Struct20::get_field62() const& {
  return field62;
}

std::set<int32_t> Struct20::get_field62() && {
  return std::move(field62);
}

const std::vector< ::cpp2::Struct8>& Struct20::get_field64() const& {
  return field64;
}

std::vector< ::cpp2::Struct8> Struct20::get_field64() && {
  return std::move(field64);
}

const std::map<float, std::string>& Struct20::get_field68() const& {
  return field68;
}

std::map<float, std::string> Struct20::get_field68() && {
  return std::move(field68);
}

const std::vector<std::vector<int64_t>>& Struct20::get_field69() const& {
  return field69;
}

std::vector<std::vector<int64_t>> Struct20::get_field69() && {
  return std::move(field69);
}

const  ::cpp2::Struct3& Struct20::get_field70() const& {
  return field70;
}

 ::cpp2::Struct3 Struct20::get_field70() && {
  return std::move(field70);
}

const  ::cpp2::Struct12& Struct20::get_field71() const& {
  return field71;
}

 ::cpp2::Struct12 Struct20::get_field71() && {
  return std::move(field71);
}

const std::set<std::vector<float>>& Struct20::get_field74() const& {
  return field74;
}

std::set<std::vector<float>> Struct20::get_field74() && {
  return std::move(field74);
}

const std::set<float>& Struct20::get_field75() const& {
  return field75;
}

std::set<float> Struct20::get_field75() && {
  return std::move(field75);
}

const std::vector<bool>& Struct20::get_field76() const& {
  return field76;
}

std::vector<bool> Struct20::get_field76() && {
  return std::move(field76);
}

const std::set<std::string>& Struct20::get_field77() const& {
  return field77;
}

std::set<std::string> Struct20::get_field77() && {
  return std::move(field77);
}

const  ::cpp2::Struct8& Struct20::get_field78() const& {
  return field78;
}

 ::cpp2::Struct8 Struct20::get_field78() && {
  return std::move(field78);
}

const std::map<std::vector<int16_t>,  ::cpp2::Struct6>& Struct20::get_field79() const& {
  return field79;
}

std::map<std::vector<int16_t>,  ::cpp2::Struct6> Struct20::get_field79() && {
  return std::move(field79);
}

const std::set<std::string>& Struct20::get_field80() const& {
  return field80;
}

std::set<std::string> Struct20::get_field80() && {
  return std::move(field80);
}

const std::set<double>& Struct20::get_field81() const& {
  return field81;
}

std::set<double> Struct20::get_field81() && {
  return std::move(field81);
}

void Struct20::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_I64;
  }
}

void swap(Struct20& a, Struct20& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct20::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct20::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct20::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct20::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct20::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct20::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct20::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct20::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct21::__clear() {
  // clear all fields
  field1.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field2);
  field3 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field4 = 0;
  field5 = 0;
  field6 = 0;
  field7.clear();
  field8 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::clear(&field9);
  field10 = 0;
  field11 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field12 = 0;
  field13.clear();
  field14 = 0;
  field15 = 0;
  field16 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field17);
  field18 = 0;
  field19 = 0;
  field20 = 0;
  field21.clear();
  field22.clear();
  field23.clear();
  field24.clear();
  field25 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field26);
  field27.clear();
  field28 = 0;
  field29 = 0;
  field30.clear();
  field31 = 0;
  field32.clear();
  field33.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::clear(&field34);
  field35.clear();
  field36.clear();
  field37 = 0;
  field38.clear();
  field39.clear();
  field40 = 0;
  field41 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field42 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field43);
  field44.clear();
  field45.clear();
  field46.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field47);
  field48 = 0;
  field49 = 0;
  field50 = 0;
  field51.clear();
  field52 = 0;
  field53.clear();
  field54 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::clear(&field55);
  field56.clear();
  field57.clear();
  field58 = 0;
  field59 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::clear(&field60);
  field61.clear();
  field62 = 0;
  field63 = 0;
  field64 = 0;
  field65 = 0;
  field66 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field67 = 0;
  field68.clear();
  field69 = 0;
  field70.clear();
  field71 = 0;
  field72.clear();
  field73.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field74);
  field75 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field76.clear();
  field77.clear();
  field78.clear();
  field79 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field80 = 0;
  field81 = 0;
  field82 = 0;
  field83.clear();
  field84.clear();
  field85.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field86);
  field87 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field88 = 0;
  field89.clear();
  field90 = 0;
  field91 = 0;
  field92.clear();
  field93 = 0;
  field94 = 0;
  field95 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field96);
  field97 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field98 = 0;
  field99.clear();
  field100.clear();
  field101 = 0;
  field102.clear();
  field103 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field104 = 0;
  field105.clear();
  field106 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field107.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::clear(&field108);
  field109 = 0;
  field110 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field111 = 0;
  field112.clear();
  field113.clear();
  field114 = 0;
  field115 = 0;
  field116 = 0;
  field117.clear();
  field118 = 0;
  field119.clear();
  field120 = 0;
  field121 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field122 = 0;
  field123.clear();
  field124 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field125 = 0;
  field126 = 0;
  field127 = 0;
  field128 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field129.clear();
  field130.clear();
  field131.clear();
  field132 = 0;
  field133 = 0;
  field134.clear();
  field135 = 0;
  field136.clear();
  field137.clear();
  field138.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field139);
  field140 = 0;
  field141 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field142 = 0;
  field143 = 0;
  field144.clear();
  field145.clear();
  field146 = 0;
  field147.clear();
  field148 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field149 = 0;
  field150.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::clear(&field151);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field152);
  field153.clear();
  field154.clear();
  field155 = 0;
  field156 = 0;
  field157 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field158);
  field159 = 0;
  field160 = 0;
  field161 = 0;
  field162.clear();
  field163.clear();
  field164.clear();
  field165.clear();
  field166.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field167);
  field168 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field169 = 0;
  field170 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field171.clear();
  field172.clear();
  field173.clear();
  field174 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool Struct21::operator==(const Struct21& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field11, rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field41, rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field79, rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!((field83 == rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  if (!((field85 == rhs.field85))) {
    return false;
  }
  if (!((field86 == rhs.field86))) {
    return false;
  }
  if (!((field87 == rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!((field89 == rhs.field89))) {
    return false;
  }
  if (!((field90 == rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!((field92 == rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!((field94 == rhs.field94))) {
    return false;
  }
  if (!((field95 == rhs.field95))) {
    return false;
  }
  if (!((field96 == rhs.field96))) {
    return false;
  }
  if (!((field97 == rhs.field97))) {
    return false;
  }
  if (!((field98 == rhs.field98))) {
    return false;
  }
  if (!((field99 == rhs.field99))) {
    return false;
  }
  if (!((field100 == rhs.field100))) {
    return false;
  }
  if (!((field101 == rhs.field101))) {
    return false;
  }
  if (!((field102 == rhs.field102))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field103, rhs.field103))) {
    return false;
  }
  if (!((field104 == rhs.field104))) {
    return false;
  }
  if (!((field105 == rhs.field105))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field106, rhs.field106))) {
    return false;
  }
  if (!((field107 == rhs.field107))) {
    return false;
  }
  if (!((field108 == rhs.field108))) {
    return false;
  }
  if (!((field109 == rhs.field109))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field110, rhs.field110))) {
    return false;
  }
  if (!((field111 == rhs.field111))) {
    return false;
  }
  if (!((field112 == rhs.field112))) {
    return false;
  }
  if (!((field113 == rhs.field113))) {
    return false;
  }
  if (!((field114 == rhs.field114))) {
    return false;
  }
  if (!((field115 == rhs.field115))) {
    return false;
  }
  if (!((field116 == rhs.field116))) {
    return false;
  }
  if (!((field117 == rhs.field117))) {
    return false;
  }
  if (!((field118 == rhs.field118))) {
    return false;
  }
  if (!((field119 == rhs.field119))) {
    return false;
  }
  if (!((field120 == rhs.field120))) {
    return false;
  }
  if (!((field121 == rhs.field121))) {
    return false;
  }
  if (!((field122 == rhs.field122))) {
    return false;
  }
  if (!((field123 == rhs.field123))) {
    return false;
  }
  if (!((field124 == rhs.field124))) {
    return false;
  }
  if (!((field125 == rhs.field125))) {
    return false;
  }
  if (!((field126 == rhs.field126))) {
    return false;
  }
  if (!((field127 == rhs.field127))) {
    return false;
  }
  if (!((field128 == rhs.field128))) {
    return false;
  }
  if (!((field129 == rhs.field129))) {
    return false;
  }
  if (!((field130 == rhs.field130))) {
    return false;
  }
  if (!((field131 == rhs.field131))) {
    return false;
  }
  if (!((field132 == rhs.field132))) {
    return false;
  }
  if (!((field133 == rhs.field133))) {
    return false;
  }
  if (!((field134 == rhs.field134))) {
    return false;
  }
  if (!((field135 == rhs.field135))) {
    return false;
  }
  if (!((field136 == rhs.field136))) {
    return false;
  }
  if (!((field137 == rhs.field137))) {
    return false;
  }
  if (!((field138 == rhs.field138))) {
    return false;
  }
  if (!((field139 == rhs.field139))) {
    return false;
  }
  if (!((field140 == rhs.field140))) {
    return false;
  }
  if (!((field141 == rhs.field141))) {
    return false;
  }
  if (!((field142 == rhs.field142))) {
    return false;
  }
  if (!((field143 == rhs.field143))) {
    return false;
  }
  if (!((field144 == rhs.field144))) {
    return false;
  }
  if (!((field145 == rhs.field145))) {
    return false;
  }
  if (!((field146 == rhs.field146))) {
    return false;
  }
  if (!((field147 == rhs.field147))) {
    return false;
  }
  if (!((field148 == rhs.field148))) {
    return false;
  }
  if (!((field149 == rhs.field149))) {
    return false;
  }
  if (!((field150 == rhs.field150))) {
    return false;
  }
  if (!((field151 == rhs.field151))) {
    return false;
  }
  if (!((field152 == rhs.field152))) {
    return false;
  }
  if (!((field153 == rhs.field153))) {
    return false;
  }
  if (!((field154 == rhs.field154))) {
    return false;
  }
  if (!((field155 == rhs.field155))) {
    return false;
  }
  if (!((field156 == rhs.field156))) {
    return false;
  }
  if (!((field157 == rhs.field157))) {
    return false;
  }
  if (!((field158 == rhs.field158))) {
    return false;
  }
  if (!((field159 == rhs.field159))) {
    return false;
  }
  if (!((field160 == rhs.field160))) {
    return false;
  }
  if (!((field161 == rhs.field161))) {
    return false;
  }
  if (!((field162 == rhs.field162))) {
    return false;
  }
  if (!((field163 == rhs.field163))) {
    return false;
  }
  if (!((field164 == rhs.field164))) {
    return false;
  }
  if (!((field165 == rhs.field165))) {
    return false;
  }
  if (!((field166 == rhs.field166))) {
    return false;
  }
  if (!((field167 == rhs.field167))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field168, rhs.field168))) {
    return false;
  }
  if (!((field169 == rhs.field169))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field170, rhs.field170))) {
    return false;
  }
  if (!((field171 == rhs.field171))) {
    return false;
  }
  if (!((field172 == rhs.field172))) {
    return false;
  }
  if (!((field173 == rhs.field173))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field174, rhs.field174))) {
    return false;
  }
  return true;
}

const std::vector<int8_t>& Struct21::get_field1() const& {
  return field1;
}

std::vector<int8_t> Struct21::get_field1() && {
  return std::move(field1);
}

const  ::cpp2::Struct1& Struct21::get_field2() const& {
  return field2;
}

 ::cpp2::Struct1 Struct21::get_field2() && {
  return std::move(field2);
}

const std::map<int16_t, std::vector<float>>& Struct21::get_field7() const& {
  return field7;
}

std::map<int16_t, std::vector<float>> Struct21::get_field7() && {
  return std::move(field7);
}

const  ::cpp2::Struct12& Struct21::get_field9() const& {
  return field9;
}

 ::cpp2::Struct12 Struct21::get_field9() && {
  return std::move(field9);
}

const std::vector<bool>& Struct21::get_field13() const& {
  return field13;
}

std::vector<bool> Struct21::get_field13() && {
  return std::move(field13);
}

const  ::cpp2::Struct2& Struct21::get_field17() const& {
  return field17;
}

 ::cpp2::Struct2 Struct21::get_field17() && {
  return std::move(field17);
}

const std::map< ::cpp2::Struct10, std::vector<double>>& Struct21::get_field21() const& {
  return field21;
}

std::map< ::cpp2::Struct10, std::vector<double>> Struct21::get_field21() && {
  return std::move(field21);
}

const std::set<int32_t>& Struct21::get_field22() const& {
  return field22;
}

std::set<int32_t> Struct21::get_field22() && {
  return std::move(field22);
}

const std::vector<bool>& Struct21::get_field23() const& {
  return field23;
}

std::vector<bool> Struct21::get_field23() && {
  return std::move(field23);
}

const std::set<float>& Struct21::get_field24() const& {
  return field24;
}

std::set<float> Struct21::get_field24() && {
  return std::move(field24);
}

const  ::cpp2::Struct1& Struct21::get_field26() const& {
  return field26;
}

 ::cpp2::Struct1 Struct21::get_field26() && {
  return std::move(field26);
}

const std::map<std::string, bool>& Struct21::get_field27() const& {
  return field27;
}

std::map<std::string, bool> Struct21::get_field27() && {
  return std::move(field27);
}

const std::vector<int16_t>& Struct21::get_field30() const& {
  return field30;
}

std::vector<int16_t> Struct21::get_field30() && {
  return std::move(field30);
}

const std::vector<int32_t>& Struct21::get_field32() const& {
  return field32;
}

std::vector<int32_t> Struct21::get_field32() && {
  return std::move(field32);
}

const std::set<std::vector<int16_t>>& Struct21::get_field33() const& {
  return field33;
}

std::set<std::vector<int16_t>> Struct21::get_field33() && {
  return std::move(field33);
}

const  ::cpp2::Struct16& Struct21::get_field34() const& {
  return field34;
}

 ::cpp2::Struct16 Struct21::get_field34() && {
  return std::move(field34);
}

const std::map<int16_t, std::string>& Struct21::get_field35() const& {
  return field35;
}

std::map<int16_t, std::string> Struct21::get_field35() && {
  return std::move(field35);
}

const std::map<bool, std::vector< ::cpp2::Struct5>>& Struct21::get_field36() const& {
  return field36;
}

std::map<bool, std::vector< ::cpp2::Struct5>> Struct21::get_field36() && {
  return std::move(field36);
}

const std::map<float, int16_t>& Struct21::get_field38() const& {
  return field38;
}

std::map<float, int16_t> Struct21::get_field38() && {
  return std::move(field38);
}

const std::set<int64_t>& Struct21::get_field39() const& {
  return field39;
}

std::set<int64_t> Struct21::get_field39() && {
  return std::move(field39);
}

const  ::cpp2::Struct9& Struct21::get_field43() const& {
  return field43;
}

 ::cpp2::Struct9 Struct21::get_field43() && {
  return std::move(field43);
}

const std::set<std::string>& Struct21::get_field44() const& {
  return field44;
}

std::set<std::string> Struct21::get_field44() && {
  return std::move(field44);
}

const std::map<int32_t,  ::cpp2::Struct3>& Struct21::get_field45() const& {
  return field45;
}

std::map<int32_t,  ::cpp2::Struct3> Struct21::get_field45() && {
  return std::move(field45);
}

const std::set<int64_t>& Struct21::get_field46() const& {
  return field46;
}

std::set<int64_t> Struct21::get_field46() && {
  return std::move(field46);
}

const  ::cpp2::Struct2& Struct21::get_field47() const& {
  return field47;
}

 ::cpp2::Struct2 Struct21::get_field47() && {
  return std::move(field47);
}

const std::vector< ::cpp2::Struct10>& Struct21::get_field51() const& {
  return field51;
}

std::vector< ::cpp2::Struct10> Struct21::get_field51() && {
  return std::move(field51);
}

const std::set<std::string>& Struct21::get_field53() const& {
  return field53;
}

std::set<std::string> Struct21::get_field53() && {
  return std::move(field53);
}

const  ::cpp2::Struct11& Struct21::get_field55() const& {
  return field55;
}

 ::cpp2::Struct11 Struct21::get_field55() && {
  return std::move(field55);
}

const std::vector<bool>& Struct21::get_field56() const& {
  return field56;
}

std::vector<bool> Struct21::get_field56() && {
  return std::move(field56);
}

const std::map<std::string, std::vector<std::string>>& Struct21::get_field57() const& {
  return field57;
}

std::map<std::string, std::vector<std::string>> Struct21::get_field57() && {
  return std::move(field57);
}

const  ::cpp2::Struct11& Struct21::get_field60() const& {
  return field60;
}

 ::cpp2::Struct11 Struct21::get_field60() && {
  return std::move(field60);
}

const std::set<int64_t>& Struct21::get_field61() const& {
  return field61;
}

std::set<int64_t> Struct21::get_field61() && {
  return std::move(field61);
}

const std::set<int8_t>& Struct21::get_field68() const& {
  return field68;
}

std::set<int8_t> Struct21::get_field68() && {
  return std::move(field68);
}

const std::set<std::set<float>>& Struct21::get_field70() const& {
  return field70;
}

std::set<std::set<float>> Struct21::get_field70() && {
  return std::move(field70);
}

const std::vector<std::string>& Struct21::get_field72() const& {
  return field72;
}

std::vector<std::string> Struct21::get_field72() && {
  return std::move(field72);
}

const std::map< ::cpp2::Struct1, std::vector<int16_t>>& Struct21::get_field73() const& {
  return field73;
}

std::map< ::cpp2::Struct1, std::vector<int16_t>> Struct21::get_field73() && {
  return std::move(field73);
}

const  ::cpp2::Struct3& Struct21::get_field74() const& {
  return field74;
}

 ::cpp2::Struct3 Struct21::get_field74() && {
  return std::move(field74);
}

const std::vector<std::vector<double>>& Struct21::get_field76() const& {
  return field76;
}

std::vector<std::vector<double>> Struct21::get_field76() && {
  return std::move(field76);
}

const std::vector<bool>& Struct21::get_field77() const& {
  return field77;
}

std::vector<bool> Struct21::get_field77() && {
  return std::move(field77);
}

const std::set< ::cpp2::Struct14>& Struct21::get_field78() const& {
  return field78;
}

std::set< ::cpp2::Struct14> Struct21::get_field78() && {
  return std::move(field78);
}

const std::map< ::cpp2::Struct2, double>& Struct21::get_field83() const& {
  return field83;
}

std::map< ::cpp2::Struct2, double> Struct21::get_field83() && {
  return std::move(field83);
}

const std::vector<std::map< ::cpp2::Struct2, bool>>& Struct21::get_field84() const& {
  return field84;
}

std::vector<std::map< ::cpp2::Struct2, bool>> Struct21::get_field84() && {
  return std::move(field84);
}

const std::map<bool, std::vector<std::string>>& Struct21::get_field85() const& {
  return field85;
}

std::map<bool, std::vector<std::string>> Struct21::get_field85() && {
  return std::move(field85);
}

const  ::cpp2::Struct6& Struct21::get_field86() const& {
  return field86;
}

 ::cpp2::Struct6 Struct21::get_field86() && {
  return std::move(field86);
}

const std::vector<bool>& Struct21::get_field89() const& {
  return field89;
}

std::vector<bool> Struct21::get_field89() && {
  return std::move(field89);
}

const std::map<bool, std::vector<double>>& Struct21::get_field92() const& {
  return field92;
}

std::map<bool, std::vector<double>> Struct21::get_field92() && {
  return std::move(field92);
}

const  ::cpp2::Struct4& Struct21::get_field96() const& {
  return field96;
}

 ::cpp2::Struct4 Struct21::get_field96() && {
  return std::move(field96);
}

const std::set<std::string>& Struct21::get_field99() const& {
  return field99;
}

std::set<std::string> Struct21::get_field99() && {
  return std::move(field99);
}

const std::map<double, int64_t>& Struct21::get_field100() const& {
  return field100;
}

std::map<double, int64_t> Struct21::get_field100() && {
  return std::move(field100);
}

const std::set<std::string>& Struct21::get_field102() const& {
  return field102;
}

std::set<std::string> Struct21::get_field102() && {
  return std::move(field102);
}

const std::map<int8_t, std::string>& Struct21::get_field105() const& {
  return field105;
}

std::map<int8_t, std::string> Struct21::get_field105() && {
  return std::move(field105);
}

const std::set<std::string>& Struct21::get_field107() const& {
  return field107;
}

std::set<std::string> Struct21::get_field107() && {
  return std::move(field107);
}

const  ::cpp2::Struct8& Struct21::get_field108() const& {
  return field108;
}

 ::cpp2::Struct8 Struct21::get_field108() && {
  return std::move(field108);
}

const std::set<double>& Struct21::get_field112() const& {
  return field112;
}

std::set<double> Struct21::get_field112() && {
  return std::move(field112);
}

const std::vector<int16_t>& Struct21::get_field113() const& {
  return field113;
}

std::vector<int16_t> Struct21::get_field113() && {
  return std::move(field113);
}

const std::map<int32_t, int16_t>& Struct21::get_field117() const& {
  return field117;
}

std::map<int32_t, int16_t> Struct21::get_field117() && {
  return std::move(field117);
}

const std::vector<double>& Struct21::get_field119() const& {
  return field119;
}

std::vector<double> Struct21::get_field119() && {
  return std::move(field119);
}

const std::map<std::string, std::map<int8_t, double>>& Struct21::get_field123() const& {
  return field123;
}

std::map<std::string, std::map<int8_t, double>> Struct21::get_field123() && {
  return std::move(field123);
}

const std::map<std::string, std::set<int32_t>>& Struct21::get_field129() const& {
  return field129;
}

std::map<std::string, std::set<int32_t>> Struct21::get_field129() && {
  return std::move(field129);
}

const std::map<int64_t, std::string>& Struct21::get_field130() const& {
  return field130;
}

std::map<int64_t, std::string> Struct21::get_field130() && {
  return std::move(field130);
}

const std::map< ::cpp2::Struct18, std::set<int8_t>>& Struct21::get_field131() const& {
  return field131;
}

std::map< ::cpp2::Struct18, std::set<int8_t>> Struct21::get_field131() && {
  return std::move(field131);
}

const std::map<int64_t, int8_t>& Struct21::get_field134() const& {
  return field134;
}

std::map<int64_t, int8_t> Struct21::get_field134() && {
  return std::move(field134);
}

const std::map<int32_t, std::string>& Struct21::get_field136() const& {
  return field136;
}

std::map<int32_t, std::string> Struct21::get_field136() && {
  return std::move(field136);
}

const std::vector<std::string>& Struct21::get_field137() const& {
  return field137;
}

std::vector<std::string> Struct21::get_field137() && {
  return std::move(field137);
}

const std::map<std::string, int16_t>& Struct21::get_field138() const& {
  return field138;
}

std::map<std::string, int16_t> Struct21::get_field138() && {
  return std::move(field138);
}

const  ::cpp2::Struct5& Struct21::get_field139() const& {
  return field139;
}

 ::cpp2::Struct5 Struct21::get_field139() && {
  return std::move(field139);
}

const std::set<double>& Struct21::get_field144() const& {
  return field144;
}

std::set<double> Struct21::get_field144() && {
  return std::move(field144);
}

const std::vector<int8_t>& Struct21::get_field145() const& {
  return field145;
}

std::vector<int8_t> Struct21::get_field145() && {
  return std::move(field145);
}

const std::set<double>& Struct21::get_field147() const& {
  return field147;
}

std::set<double> Struct21::get_field147() && {
  return std::move(field147);
}

const std::set<std::map<int16_t, float>>& Struct21::get_field150() const& {
  return field150;
}

std::set<std::map<int16_t, float>> Struct21::get_field150() && {
  return std::move(field150);
}

const  ::cpp2::Struct14& Struct21::get_field151() const& {
  return field151;
}

 ::cpp2::Struct14 Struct21::get_field151() && {
  return std::move(field151);
}

const  ::cpp2::Struct3& Struct21::get_field152() const& {
  return field152;
}

 ::cpp2::Struct3 Struct21::get_field152() && {
  return std::move(field152);
}

const std::set<std::string>& Struct21::get_field153() const& {
  return field153;
}

std::set<std::string> Struct21::get_field153() && {
  return std::move(field153);
}

const std::vector<int8_t>& Struct21::get_field154() const& {
  return field154;
}

std::vector<int8_t> Struct21::get_field154() && {
  return std::move(field154);
}

const  ::cpp2::Struct2& Struct21::get_field158() const& {
  return field158;
}

 ::cpp2::Struct2 Struct21::get_field158() && {
  return std::move(field158);
}

const std::vector<std::string>& Struct21::get_field162() const& {
  return field162;
}

std::vector<std::string> Struct21::get_field162() && {
  return std::move(field162);
}

const std::map< ::cpp2::Struct7, std::map<int64_t,  ::cpp2::Struct4>>& Struct21::get_field163() const& {
  return field163;
}

std::map< ::cpp2::Struct7, std::map<int64_t,  ::cpp2::Struct4>> Struct21::get_field163() && {
  return std::move(field163);
}

const std::set<double>& Struct21::get_field164() const& {
  return field164;
}

std::set<double> Struct21::get_field164() && {
  return std::move(field164);
}

const std::vector<int64_t>& Struct21::get_field165() const& {
  return field165;
}

std::vector<int64_t> Struct21::get_field165() && {
  return std::move(field165);
}

const std::set<int8_t>& Struct21::get_field166() const& {
  return field166;
}

std::set<int8_t> Struct21::get_field166() && {
  return std::move(field166);
}

const  ::cpp2::Struct4& Struct21::get_field167() const& {
  return field167;
}

 ::cpp2::Struct4 Struct21::get_field167() && {
  return std::move(field167);
}

const std::map<int16_t, int16_t>& Struct21::get_field171() const& {
  return field171;
}

std::map<int16_t, int16_t> Struct21::get_field171() && {
  return std::move(field171);
}

const std::set<int32_t>& Struct21::get_field172() const& {
  return field172;
}

std::set<int32_t> Struct21::get_field172() && {
  return std::move(field172);
}

const std::set< ::cpp2::Struct5>& Struct21::get_field173() const& {
  return field173;
}

std::set< ::cpp2::Struct5> Struct21::get_field173() && {
  return std::move(field173);
}

void Struct21::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field96") {
    fid = 96;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field97") {
    fid = 97;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field98") {
    fid = 98;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field99") {
    fid = 99;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field100") {
    fid = 100;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field101") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field102") {
    fid = 102;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field103") {
    fid = 103;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field104") {
    fid = 104;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field105") {
    fid = 105;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field106") {
    fid = 106;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field107") {
    fid = 107;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field108") {
    fid = 108;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field109") {
    fid = 109;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field110") {
    fid = 110;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field111") {
    fid = 111;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field112") {
    fid = 112;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field113") {
    fid = 113;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field114") {
    fid = 114;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field115") {
    fid = 115;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field116") {
    fid = 116;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field117") {
    fid = 117;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field118") {
    fid = 118;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field119") {
    fid = 119;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field120") {
    fid = 120;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field121") {
    fid = 121;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field122") {
    fid = 122;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field123") {
    fid = 123;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field124") {
    fid = 124;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field125") {
    fid = 125;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field126") {
    fid = 126;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field127") {
    fid = 127;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field128") {
    fid = 128;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field129") {
    fid = 129;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field130") {
    fid = 130;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field131") {
    fid = 131;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field132") {
    fid = 132;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field133") {
    fid = 133;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field134") {
    fid = 134;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field135") {
    fid = 135;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field136") {
    fid = 136;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field137") {
    fid = 137;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field138") {
    fid = 138;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field139") {
    fid = 139;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field140") {
    fid = 140;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field141") {
    fid = 141;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field142") {
    fid = 142;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field143") {
    fid = 143;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field144") {
    fid = 144;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field145") {
    fid = 145;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field146") {
    fid = 146;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field147") {
    fid = 147;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field148") {
    fid = 148;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field149") {
    fid = 149;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field150") {
    fid = 150;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field151") {
    fid = 151;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field152") {
    fid = 152;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field153") {
    fid = 153;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field154") {
    fid = 154;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field155") {
    fid = 155;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field156") {
    fid = 156;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field157") {
    fid = 157;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field158") {
    fid = 158;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field159") {
    fid = 159;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field160") {
    fid = 160;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field161") {
    fid = 161;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field162") {
    fid = 162;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field163") {
    fid = 163;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field164") {
    fid = 164;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field165") {
    fid = 165;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field166") {
    fid = 166;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field167") {
    fid = 167;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field168") {
    fid = 168;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field169") {
    fid = 169;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field170") {
    fid = 170;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field171") {
    fid = 171;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field172") {
    fid = 172;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field173") {
    fid = 173;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field174") {
    fid = 174;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

void swap(Struct21& a, Struct21& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.field96, b.field96);
  swap(a.field97, b.field97);
  swap(a.field98, b.field98);
  swap(a.field99, b.field99);
  swap(a.field100, b.field100);
  swap(a.field101, b.field101);
  swap(a.field102, b.field102);
  swap(a.field103, b.field103);
  swap(a.field104, b.field104);
  swap(a.field105, b.field105);
  swap(a.field106, b.field106);
  swap(a.field107, b.field107);
  swap(a.field108, b.field108);
  swap(a.field109, b.field109);
  swap(a.field110, b.field110);
  swap(a.field111, b.field111);
  swap(a.field112, b.field112);
  swap(a.field113, b.field113);
  swap(a.field114, b.field114);
  swap(a.field115, b.field115);
  swap(a.field116, b.field116);
  swap(a.field117, b.field117);
  swap(a.field118, b.field118);
  swap(a.field119, b.field119);
  swap(a.field120, b.field120);
  swap(a.field121, b.field121);
  swap(a.field122, b.field122);
  swap(a.field123, b.field123);
  swap(a.field124, b.field124);
  swap(a.field125, b.field125);
  swap(a.field126, b.field126);
  swap(a.field127, b.field127);
  swap(a.field128, b.field128);
  swap(a.field129, b.field129);
  swap(a.field130, b.field130);
  swap(a.field131, b.field131);
  swap(a.field132, b.field132);
  swap(a.field133, b.field133);
  swap(a.field134, b.field134);
  swap(a.field135, b.field135);
  swap(a.field136, b.field136);
  swap(a.field137, b.field137);
  swap(a.field138, b.field138);
  swap(a.field139, b.field139);
  swap(a.field140, b.field140);
  swap(a.field141, b.field141);
  swap(a.field142, b.field142);
  swap(a.field143, b.field143);
  swap(a.field144, b.field144);
  swap(a.field145, b.field145);
  swap(a.field146, b.field146);
  swap(a.field147, b.field147);
  swap(a.field148, b.field148);
  swap(a.field149, b.field149);
  swap(a.field150, b.field150);
  swap(a.field151, b.field151);
  swap(a.field152, b.field152);
  swap(a.field153, b.field153);
  swap(a.field154, b.field154);
  swap(a.field155, b.field155);
  swap(a.field156, b.field156);
  swap(a.field157, b.field157);
  swap(a.field158, b.field158);
  swap(a.field159, b.field159);
  swap(a.field160, b.field160);
  swap(a.field161, b.field161);
  swap(a.field162, b.field162);
  swap(a.field163, b.field163);
  swap(a.field164, b.field164);
  swap(a.field165, b.field165);
  swap(a.field166, b.field166);
  swap(a.field167, b.field167);
  swap(a.field168, b.field168);
  swap(a.field169, b.field169);
  swap(a.field170, b.field170);
  swap(a.field171, b.field171);
  swap(a.field172, b.field172);
  swap(a.field173, b.field173);
  swap(a.field174, b.field174);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct21::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct21::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct21::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct21::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct21::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct21::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct21::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct21::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct22::__clear() {
  // clear all fields
  field1 = 0;
  field2 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field3);
  field4.clear();
  field5.clear();
  field6 = 0;
  field7 = 0;
  field8.clear();
  field9 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field10.clear();
  field11 = 0;
  field12 = 0;
  field13.clear();
  field14 = 0;
  field15.clear();
  field16 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field17);
  field18.clear();
  field19 = 0;
  field20 = 0;
  field21 = 0;
  field22 = 0;
  field23 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::clear(&field24);
  field25 = 0;
  field26 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field27 = 0;
  field28.clear();
  field29.clear();
  field30 = 0;
  field31.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field32);
  field33 = 0;
  field34.clear();
  field35.clear();
  field36.clear();
  field37.clear();
  field38 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field39.clear();
  field40 = 0;
  field41.clear();
  field42 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field43 = 0;
  field44.clear();
  field45 = 0;
  field46 = 0;
  field47 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field48);
  field49.clear();
  field50 = 0;
  field51.clear();
  field52.clear();
  field53 = 0;
  field54 = 0;
  field55 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field56);
  field57 = 0;
  field58.clear();
  field59 = 0;
  field60 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field61 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field62 = 0;
  field63.clear();
  field64 = 0;
  field65 = 0;
  field66.clear();
  field67 = 0;
  field68 = 0;
  field69 = 0;
  field70.clear();
  field71 = 0;
  field72 = 0;
  field73 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field74 = 0;
  field75.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::clear(&field76);
  field77.clear();
  field78.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field79);
  field80 = 0;
  field81 = 0;
  field82 = 0;
  field83.clear();
  field84.clear();
  field85 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field86);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::clear(&field87);
  field88 = 0;
  field89.clear();
  field90 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field91 = 0;
  field92.clear();
  field93 = 0;
  field94 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field95.clear();
  __isset.__clear();
}

bool Struct22::operator==(const Struct22& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field38, rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field47, rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field60, rhs.field60))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field61, rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field73, rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!((field83 == rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  if (!((field85 == rhs.field85))) {
    return false;
  }
  if (!((field86 == rhs.field86))) {
    return false;
  }
  if (!((field87 == rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!((field89 == rhs.field89))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field90, rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!((field92 == rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field94, rhs.field94))) {
    return false;
  }
  if (!((field95 == rhs.field95))) {
    return false;
  }
  return true;
}

const  ::cpp2::Struct9& Struct22::get_field3() const& {
  return field3;
}

 ::cpp2::Struct9 Struct22::get_field3() && {
  return std::move(field3);
}

const std::map<float, std::vector<bool>>& Struct22::get_field4() const& {
  return field4;
}

std::map<float, std::vector<bool>> Struct22::get_field4() && {
  return std::move(field4);
}

const std::map<std::string, bool>& Struct22::get_field5() const& {
  return field5;
}

std::map<std::string, bool> Struct22::get_field5() && {
  return std::move(field5);
}

const std::set<int8_t>& Struct22::get_field8() const& {
  return field8;
}

std::set<int8_t> Struct22::get_field8() && {
  return std::move(field8);
}

const std::map< ::cpp2::Struct3, bool>& Struct22::get_field10() const& {
  return field10;
}

std::map< ::cpp2::Struct3, bool> Struct22::get_field10() && {
  return std::move(field10);
}

const std::vector<std::vector<float>>& Struct22::get_field13() const& {
  return field13;
}

std::vector<std::vector<float>> Struct22::get_field13() && {
  return std::move(field13);
}

const std::vector<std::string>& Struct22::get_field15() const& {
  return field15;
}

std::vector<std::string> Struct22::get_field15() && {
  return std::move(field15);
}

const  ::cpp2::Struct9& Struct22::get_field17() const& {
  return field17;
}

 ::cpp2::Struct9 Struct22::get_field17() && {
  return std::move(field17);
}

const std::map<int64_t, int8_t>& Struct22::get_field18() const& {
  return field18;
}

std::map<int64_t, int8_t> Struct22::get_field18() && {
  return std::move(field18);
}

const  ::cpp2::Struct12& Struct22::get_field24() const& {
  return field24;
}

 ::cpp2::Struct12 Struct22::get_field24() && {
  return std::move(field24);
}

const std::vector<std::vector<std::string>>& Struct22::get_field28() const& {
  return field28;
}

std::vector<std::vector<std::string>> Struct22::get_field28() && {
  return std::move(field28);
}

const std::vector<int16_t>& Struct22::get_field29() const& {
  return field29;
}

std::vector<int16_t> Struct22::get_field29() && {
  return std::move(field29);
}

const std::set<double>& Struct22::get_field31() const& {
  return field31;
}

std::set<double> Struct22::get_field31() && {
  return std::move(field31);
}

const  ::cpp2::Struct0& Struct22::get_field32() const& {
  return field32;
}

 ::cpp2::Struct0 Struct22::get_field32() && {
  return std::move(field32);
}

const std::map<std::string, std::string>& Struct22::get_field34() const& {
  return field34;
}

std::map<std::string, std::string> Struct22::get_field34() && {
  return std::move(field34);
}

const std::vector<double>& Struct22::get_field35() const& {
  return field35;
}

std::vector<double> Struct22::get_field35() && {
  return std::move(field35);
}

const std::vector<int32_t>& Struct22::get_field36() const& {
  return field36;
}

std::vector<int32_t> Struct22::get_field36() && {
  return std::move(field36);
}

const std::vector< ::cpp2::Struct2>& Struct22::get_field37() const& {
  return field37;
}

std::vector< ::cpp2::Struct2> Struct22::get_field37() && {
  return std::move(field37);
}

const std::set<int32_t>& Struct22::get_field39() const& {
  return field39;
}

std::set<int32_t> Struct22::get_field39() && {
  return std::move(field39);
}

const std::map<int64_t, float>& Struct22::get_field41() const& {
  return field41;
}

std::map<int64_t, float> Struct22::get_field41() && {
  return std::move(field41);
}

const std::map<int16_t, float>& Struct22::get_field44() const& {
  return field44;
}

std::map<int16_t, float> Struct22::get_field44() && {
  return std::move(field44);
}

const  ::cpp2::Struct9& Struct22::get_field48() const& {
  return field48;
}

 ::cpp2::Struct9 Struct22::get_field48() && {
  return std::move(field48);
}

const std::map<double, std::vector<std::string>>& Struct22::get_field49() const& {
  return field49;
}

std::map<double, std::vector<std::string>> Struct22::get_field49() && {
  return std::move(field49);
}

const std::set<bool>& Struct22::get_field51() const& {
  return field51;
}

std::set<bool> Struct22::get_field51() && {
  return std::move(field51);
}

const std::map<float, float>& Struct22::get_field52() const& {
  return field52;
}

std::map<float, float> Struct22::get_field52() && {
  return std::move(field52);
}

const  ::cpp2::Struct9& Struct22::get_field56() const& {
  return field56;
}

 ::cpp2::Struct9 Struct22::get_field56() && {
  return std::move(field56);
}

const std::vector<std::string>& Struct22::get_field58() const& {
  return field58;
}

std::vector<std::string> Struct22::get_field58() && {
  return std::move(field58);
}

const std::set<int16_t>& Struct22::get_field63() const& {
  return field63;
}

std::set<int16_t> Struct22::get_field63() && {
  return std::move(field63);
}

const std::map<int8_t, std::string>& Struct22::get_field66() const& {
  return field66;
}

std::map<int8_t, std::string> Struct22::get_field66() && {
  return std::move(field66);
}

const std::map<int32_t, int8_t>& Struct22::get_field70() const& {
  return field70;
}

std::map<int32_t, int8_t> Struct22::get_field70() && {
  return std::move(field70);
}

const std::vector<bool>& Struct22::get_field75() const& {
  return field75;
}

std::vector<bool> Struct22::get_field75() && {
  return std::move(field75);
}

const  ::cpp2::Struct15& Struct22::get_field76() const& {
  return field76;
}

 ::cpp2::Struct15 Struct22::get_field76() && {
  return std::move(field76);
}

const std::map<double, std::map<float, std::vector<int32_t>>>& Struct22::get_field77() const& {
  return field77;
}

std::map<double, std::map<float, std::vector<int32_t>>> Struct22::get_field77() && {
  return std::move(field77);
}

const std::vector<std::string>& Struct22::get_field78() const& {
  return field78;
}

std::vector<std::string> Struct22::get_field78() && {
  return std::move(field78);
}

const  ::cpp2::Struct7& Struct22::get_field79() const& {
  return field79;
}

 ::cpp2::Struct7 Struct22::get_field79() && {
  return std::move(field79);
}

const std::vector<double>& Struct22::get_field83() const& {
  return field83;
}

std::vector<double> Struct22::get_field83() && {
  return std::move(field83);
}

const std::set<double>& Struct22::get_field84() const& {
  return field84;
}

std::set<double> Struct22::get_field84() && {
  return std::move(field84);
}

const  ::cpp2::Struct3& Struct22::get_field86() const& {
  return field86;
}

 ::cpp2::Struct3 Struct22::get_field86() && {
  return std::move(field86);
}

const  ::cpp2::Struct15& Struct22::get_field87() const& {
  return field87;
}

 ::cpp2::Struct15 Struct22::get_field87() && {
  return std::move(field87);
}

const std::vector<std::vector<int8_t>>& Struct22::get_field89() const& {
  return field89;
}

std::vector<std::vector<int8_t>> Struct22::get_field89() && {
  return std::move(field89);
}

const std::set<std::vector<int16_t>>& Struct22::get_field92() const& {
  return field92;
}

std::set<std::vector<int16_t>> Struct22::get_field92() && {
  return std::move(field92);
}

const std::map<float, std::set<int64_t>>& Struct22::get_field95() const& {
  return field95;
}

std::map<float, std::set<int64_t>> Struct22::get_field95() && {
  return std::move(field95);
}

void Struct22::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_MAP;
  }
}

void swap(Struct22& a, Struct22& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct22::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct22::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct22::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct22::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct22::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct22::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct22::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct22::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct23::__clear() {
  // clear all fields
  field1 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::clear(&field2);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::clear(&field3);
  field4 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field5 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field6 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field7);
  field8.clear();
  field9.clear();
  field10 = 0;
  field11 = 0;
  field12 = 0;
  field13 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field14);
  field15.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field16);
  field17 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field18.clear();
  field19 = 0;
  field20.clear();
  field21.clear();
  field22 = 0;
  field23.clear();
  field24.clear();
  field25 = 0;
  field26.clear();
  field27.clear();
  field28.clear();
  field29 = 0;
  field30 = 0;
  field31 = 0;
  field32 = 0;
  field33.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field34);
  field35.clear();
  field36 = 0;
  field37.clear();
  field38.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field39);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field40);
  field41 = 0;
  __isset.__clear();
}

bool Struct23::operator==(const Struct23& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  return true;
}

const  ::cpp2::Struct15& Struct23::get_field2() const& {
  return field2;
}

 ::cpp2::Struct15 Struct23::get_field2() && {
  return std::move(field2);
}

const  ::cpp2::Struct15& Struct23::get_field3() const& {
  return field3;
}

 ::cpp2::Struct15 Struct23::get_field3() && {
  return std::move(field3);
}

const  ::cpp2::Struct6& Struct23::get_field7() const& {
  return field7;
}

 ::cpp2::Struct6 Struct23::get_field7() && {
  return std::move(field7);
}

const std::vector<std::string>& Struct23::get_field8() const& {
  return field8;
}

std::vector<std::string> Struct23::get_field8() && {
  return std::move(field8);
}

const std::map<std::set<int16_t>, std::string>& Struct23::get_field9() const& {
  return field9;
}

std::map<std::set<int16_t>, std::string> Struct23::get_field9() && {
  return std::move(field9);
}

const  ::cpp2::Struct6& Struct23::get_field14() const& {
  return field14;
}

 ::cpp2::Struct6 Struct23::get_field14() && {
  return std::move(field14);
}

const std::vector<std::set<std::string>>& Struct23::get_field15() const& {
  return field15;
}

std::vector<std::set<std::string>> Struct23::get_field15() && {
  return std::move(field15);
}

const  ::cpp2::Struct1& Struct23::get_field16() const& {
  return field16;
}

 ::cpp2::Struct1 Struct23::get_field16() && {
  return std::move(field16);
}

const std::map<int8_t, int64_t>& Struct23::get_field18() const& {
  return field18;
}

std::map<int8_t, int64_t> Struct23::get_field18() && {
  return std::move(field18);
}

const std::vector<std::map<int8_t, bool>>& Struct23::get_field20() const& {
  return field20;
}

std::vector<std::map<int8_t, bool>> Struct23::get_field20() && {
  return std::move(field20);
}

const std::set<std::string>& Struct23::get_field21() const& {
  return field21;
}

std::set<std::string> Struct23::get_field21() && {
  return std::move(field21);
}

const std::vector<int8_t>& Struct23::get_field23() const& {
  return field23;
}

std::vector<int8_t> Struct23::get_field23() && {
  return std::move(field23);
}

const std::map<std::map<double, float>, float>& Struct23::get_field24() const& {
  return field24;
}

std::map<std::map<double, float>, float> Struct23::get_field24() && {
  return std::move(field24);
}

const std::set<std::string>& Struct23::get_field26() const& {
  return field26;
}

std::set<std::string> Struct23::get_field26() && {
  return std::move(field26);
}

const std::map< ::cpp2::Struct1, int64_t>& Struct23::get_field27() const& {
  return field27;
}

std::map< ::cpp2::Struct1, int64_t> Struct23::get_field27() && {
  return std::move(field27);
}

const std::vector<std::string>& Struct23::get_field28() const& {
  return field28;
}

std::vector<std::string> Struct23::get_field28() && {
  return std::move(field28);
}

const std::set<std::string>& Struct23::get_field33() const& {
  return field33;
}

std::set<std::string> Struct23::get_field33() && {
  return std::move(field33);
}

const  ::cpp2::Struct1& Struct23::get_field34() const& {
  return field34;
}

 ::cpp2::Struct1 Struct23::get_field34() && {
  return std::move(field34);
}

const std::map<int32_t, int16_t>& Struct23::get_field35() const& {
  return field35;
}

std::map<int32_t, int16_t> Struct23::get_field35() && {
  return std::move(field35);
}

const std::vector<double>& Struct23::get_field37() const& {
  return field37;
}

std::vector<double> Struct23::get_field37() && {
  return std::move(field37);
}

const std::vector<int32_t>& Struct23::get_field38() const& {
  return field38;
}

std::vector<int32_t> Struct23::get_field38() && {
  return std::move(field38);
}

const  ::cpp2::Struct4& Struct23::get_field39() const& {
  return field39;
}

 ::cpp2::Struct4 Struct23::get_field39() && {
  return std::move(field39);
}

const  ::cpp2::Struct9& Struct23::get_field40() const& {
  return field40;
}

 ::cpp2::Struct9 Struct23::get_field40() && {
  return std::move(field40);
}

void Struct23::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_I64;
  }
}

void swap(Struct23& a, Struct23& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct23::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct23::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct23::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct23::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct23::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct23::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct23::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct23::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct24::__clear() {
  // clear all fields
  field1.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field2);
  field3 = 0;
  field4 = 0;
  field5 = 0;
  field6.clear();
  field7 = 0;
  field8 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field9 = 0;
  field10 = 0;
  field11 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field12.clear();
  field13.clear();
  field14.clear();
  field15.clear();
  field16 = 0;
  field17.clear();
  field18.clear();
  field19.clear();
  field20.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field21);
  field22.clear();
  field23 = 0;
  field24 = 0;
  field25.clear();
  field26 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field27 = 0;
  field28.clear();
  field29 = 0;
  field30 = 0;
  field31 = 0;
  field32.clear();
  field33.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field34);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field35);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field36);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field37);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field38);
  field39 = 0;
  field40.clear();
  field41 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field42);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::clear(&field43);
  field44 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field45 = 0;
  field46 = 0;
  field47 = 0;
  field48.clear();
  field49 = 0;
  field50 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field51);
  field52.clear();
  field53 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field54 = 0;
  field55.clear();
  field56.clear();
  __isset.__clear();
}

bool Struct24::operator==(const Struct24& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field11, rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  return true;
}

const std::set<std::string>& Struct24::get_field1() const& {
  return field1;
}

std::set<std::string> Struct24::get_field1() && {
  return std::move(field1);
}

const  ::cpp2::Struct4& Struct24::get_field2() const& {
  return field2;
}

 ::cpp2::Struct4 Struct24::get_field2() && {
  return std::move(field2);
}

const std::vector<std::string>& Struct24::get_field6() const& {
  return field6;
}

std::vector<std::string> Struct24::get_field6() && {
  return std::move(field6);
}

const std::set<int8_t>& Struct24::get_field12() const& {
  return field12;
}

std::set<int8_t> Struct24::get_field12() && {
  return std::move(field12);
}

const std::set<int32_t>& Struct24::get_field13() const& {
  return field13;
}

std::set<int32_t> Struct24::get_field13() && {
  return std::move(field13);
}

const std::map<int64_t, int64_t>& Struct24::get_field14() const& {
  return field14;
}

std::map<int64_t, int64_t> Struct24::get_field14() && {
  return std::move(field14);
}

const std::set<int32_t>& Struct24::get_field15() const& {
  return field15;
}

std::set<int32_t> Struct24::get_field15() && {
  return std::move(field15);
}

const std::map<std::map<double, int8_t>, int16_t>& Struct24::get_field17() const& {
  return field17;
}

std::map<std::map<double, int8_t>, int16_t> Struct24::get_field17() && {
  return std::move(field17);
}

const std::set<bool>& Struct24::get_field18() const& {
  return field18;
}

std::set<bool> Struct24::get_field18() && {
  return std::move(field18);
}

const std::map<std::string, std::map<double, int16_t>>& Struct24::get_field19() const& {
  return field19;
}

std::map<std::string, std::map<double, int16_t>> Struct24::get_field19() && {
  return std::move(field19);
}

const std::map<float, double>& Struct24::get_field20() const& {
  return field20;
}

std::map<float, double> Struct24::get_field20() && {
  return std::move(field20);
}

const  ::cpp2::Struct7& Struct24::get_field21() const& {
  return field21;
}

 ::cpp2::Struct7 Struct24::get_field21() && {
  return std::move(field21);
}

const std::set<float>& Struct24::get_field22() const& {
  return field22;
}

std::set<float> Struct24::get_field22() && {
  return std::move(field22);
}

const std::vector<std::vector<bool>>& Struct24::get_field25() const& {
  return field25;
}

std::vector<std::vector<bool>> Struct24::get_field25() && {
  return std::move(field25);
}

const std::map<std::set<bool>, bool>& Struct24::get_field28() const& {
  return field28;
}

std::map<std::set<bool>, bool> Struct24::get_field28() && {
  return std::move(field28);
}

const std::vector<int32_t>& Struct24::get_field32() const& {
  return field32;
}

std::vector<int32_t> Struct24::get_field32() && {
  return std::move(field32);
}

const std::set<int64_t>& Struct24::get_field33() const& {
  return field33;
}

std::set<int64_t> Struct24::get_field33() && {
  return std::move(field33);
}

const  ::cpp2::Struct4& Struct24::get_field34() const& {
  return field34;
}

 ::cpp2::Struct4 Struct24::get_field34() && {
  return std::move(field34);
}

const  ::cpp2::Struct0& Struct24::get_field35() const& {
  return field35;
}

 ::cpp2::Struct0 Struct24::get_field35() && {
  return std::move(field35);
}

const  ::cpp2::Struct9& Struct24::get_field36() const& {
  return field36;
}

 ::cpp2::Struct9 Struct24::get_field36() && {
  return std::move(field36);
}

const  ::cpp2::Struct9& Struct24::get_field37() const& {
  return field37;
}

 ::cpp2::Struct9 Struct24::get_field37() && {
  return std::move(field37);
}

const  ::cpp2::Struct1& Struct24::get_field38() const& {
  return field38;
}

 ::cpp2::Struct1 Struct24::get_field38() && {
  return std::move(field38);
}

const std::vector<bool>& Struct24::get_field40() const& {
  return field40;
}

std::vector<bool> Struct24::get_field40() && {
  return std::move(field40);
}

const  ::cpp2::Struct3& Struct24::get_field42() const& {
  return field42;
}

 ::cpp2::Struct3 Struct24::get_field42() && {
  return std::move(field42);
}

const  ::cpp2::Struct8& Struct24::get_field43() const& {
  return field43;
}

 ::cpp2::Struct8 Struct24::get_field43() && {
  return std::move(field43);
}

const std::set< ::cpp2::Struct18>& Struct24::get_field48() const& {
  return field48;
}

std::set< ::cpp2::Struct18> Struct24::get_field48() && {
  return std::move(field48);
}

const  ::cpp2::Struct5& Struct24::get_field51() const& {
  return field51;
}

 ::cpp2::Struct5 Struct24::get_field51() && {
  return std::move(field51);
}

const std::set<std::vector<int64_t>>& Struct24::get_field52() const& {
  return field52;
}

std::set<std::vector<int64_t>> Struct24::get_field52() && {
  return std::move(field52);
}

const std::map<int8_t, bool>& Struct24::get_field55() const& {
  return field55;
}

std::map<int8_t, bool> Struct24::get_field55() && {
  return std::move(field55);
}

const std::vector<std::vector<double>>& Struct24::get_field56() const& {
  return field56;
}

std::vector<std::vector<double>> Struct24::get_field56() && {
  return std::move(field56);
}

void Struct24::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_LIST;
  }
}

void swap(Struct24& a, Struct24& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct24::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct24::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct24::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct24::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct24::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct24::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct24::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct24::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct25::__clear() {
  // clear all fields
  field1 = 0;
  field2.clear();
  field3.clear();
  field4.clear();
  field5.clear();
  field6 = 0;
  field7 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field8 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field9 = 0;
  field10 = 0;
  field11.clear();
  field12.clear();
  field13 = 0;
  field14.clear();
  field15.clear();
  field16 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field17.clear();
  field18 = 0;
  field19 = 0;
  field20.clear();
  field21 = 0;
  field22.clear();
  field23.clear();
  field24.clear();
  field25 = 0;
  field26 = 0;
  field27.clear();
  field28 = 0;
  field29 = 0;
  field30.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field31);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::clear(&field32);
  field33 = 0;
  field34.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field35);
  field36 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field37.clear();
  field38.clear();
  field39.clear();
  field40 = 0;
  field41 = 0;
  field42.clear();
  field43.clear();
  field44 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field45.clear();
  field46 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::clear(&field47);
  field48 = 0;
  field49 = 0;
  field50.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::clear(&field51);
  field52 = 0;
  field53.clear();
  field54.clear();
  field55.clear();
  field56 = 0;
  field57.clear();
  field58 = 0;
  field59.clear();
  field60 = 0;
  field61 = 0;
  field62 = 0;
  field63 = 0;
  field64.clear();
  field65.clear();
  field66 = 0;
  field67.clear();
  field68 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field69.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::clear(&field70);
  field71 = 0;
  field72.clear();
  field73.clear();
  field74.clear();
  field75 = 0;
  field76 = 0;
  field77 = 0;
  field78 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field79.clear();
  __isset.__clear();
}

bool Struct25::operator==(const Struct25& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field7, rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field16, rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field36, rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field68, rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  return true;
}

const std::map<int8_t, int64_t>& Struct25::get_field2() const& {
  return field2;
}

std::map<int8_t, int64_t> Struct25::get_field2() && {
  return std::move(field2);
}

const std::set<int8_t>& Struct25::get_field3() const& {
  return field3;
}

std::set<int8_t> Struct25::get_field3() && {
  return std::move(field3);
}

const std::map<std::string,  ::cpp2::Struct6>& Struct25::get_field4() const& {
  return field4;
}

std::map<std::string,  ::cpp2::Struct6> Struct25::get_field4() && {
  return std::move(field4);
}

const std::set<int8_t>& Struct25::get_field5() const& {
  return field5;
}

std::set<int8_t> Struct25::get_field5() && {
  return std::move(field5);
}

const std::map<std::string,  ::cpp2::Struct15>& Struct25::get_field11() const& {
  return field11;
}

std::map<std::string,  ::cpp2::Struct15> Struct25::get_field11() && {
  return std::move(field11);
}

const std::map<std::string,  ::cpp2::Struct20>& Struct25::get_field12() const& {
  return field12;
}

std::map<std::string,  ::cpp2::Struct20> Struct25::get_field12() && {
  return std::move(field12);
}

const std::set<int16_t>& Struct25::get_field14() const& {
  return field14;
}

std::set<int16_t> Struct25::get_field14() && {
  return std::move(field14);
}

const std::set<float>& Struct25::get_field15() const& {
  return field15;
}

std::set<float> Struct25::get_field15() && {
  return std::move(field15);
}

const std::map<std::vector<std::vector<std::string>>, int16_t>& Struct25::get_field17() const& {
  return field17;
}

std::map<std::vector<std::vector<std::string>>, int16_t> Struct25::get_field17() && {
  return std::move(field17);
}

const std::vector<std::vector<bool>>& Struct25::get_field20() const& {
  return field20;
}

std::vector<std::vector<bool>> Struct25::get_field20() && {
  return std::move(field20);
}

const std::set<std::vector<int32_t>>& Struct25::get_field22() const& {
  return field22;
}

std::set<std::vector<int32_t>> Struct25::get_field22() && {
  return std::move(field22);
}

const std::set<bool>& Struct25::get_field23() const& {
  return field23;
}

std::set<bool> Struct25::get_field23() && {
  return std::move(field23);
}

const std::map<std::set<int64_t>, int16_t>& Struct25::get_field24() const& {
  return field24;
}

std::map<std::set<int64_t>, int16_t> Struct25::get_field24() && {
  return std::move(field24);
}

const std::set< ::cpp2::Struct12>& Struct25::get_field27() const& {
  return field27;
}

std::set< ::cpp2::Struct12> Struct25::get_field27() && {
  return std::move(field27);
}

const std::set<std::string>& Struct25::get_field30() const& {
  return field30;
}

std::set<std::string> Struct25::get_field30() && {
  return std::move(field30);
}

const  ::cpp2::Struct3& Struct25::get_field31() const& {
  return field31;
}

 ::cpp2::Struct3 Struct25::get_field31() && {
  return std::move(field31);
}

const  ::cpp2::Struct10& Struct25::get_field32() const& {
  return field32;
}

 ::cpp2::Struct10 Struct25::get_field32() && {
  return std::move(field32);
}

const std::map<std::set<std::string>, int8_t>& Struct25::get_field34() const& {
  return field34;
}

std::map<std::set<std::string>, int8_t> Struct25::get_field34() && {
  return std::move(field34);
}

const  ::cpp2::Struct1& Struct25::get_field35() const& {
  return field35;
}

 ::cpp2::Struct1 Struct25::get_field35() && {
  return std::move(field35);
}

const std::set<std::string>& Struct25::get_field37() const& {
  return field37;
}

std::set<std::string> Struct25::get_field37() && {
  return std::move(field37);
}

const std::vector< ::cpp2::Struct3>& Struct25::get_field38() const& {
  return field38;
}

std::vector< ::cpp2::Struct3> Struct25::get_field38() && {
  return std::move(field38);
}

const std::set<std::string>& Struct25::get_field39() const& {
  return field39;
}

std::set<std::string> Struct25::get_field39() && {
  return std::move(field39);
}

const std::map<int16_t, std::map<std::vector<double>, double>>& Struct25::get_field42() const& {
  return field42;
}

std::map<int16_t, std::map<std::vector<double>, double>> Struct25::get_field42() && {
  return std::move(field42);
}

const std::vector<double>& Struct25::get_field43() const& {
  return field43;
}

std::vector<double> Struct25::get_field43() && {
  return std::move(field43);
}

const std::set< ::cpp2::Struct9>& Struct25::get_field45() const& {
  return field45;
}

std::set< ::cpp2::Struct9> Struct25::get_field45() && {
  return std::move(field45);
}

const  ::cpp2::Struct10& Struct25::get_field47() const& {
  return field47;
}

 ::cpp2::Struct10 Struct25::get_field47() && {
  return std::move(field47);
}

const std::map<int32_t, std::string>& Struct25::get_field50() const& {
  return field50;
}

std::map<int32_t, std::string> Struct25::get_field50() && {
  return std::move(field50);
}

const  ::cpp2::Struct10& Struct25::get_field51() const& {
  return field51;
}

 ::cpp2::Struct10 Struct25::get_field51() && {
  return std::move(field51);
}

const std::vector<std::vector<double>>& Struct25::get_field53() const& {
  return field53;
}

std::vector<std::vector<double>> Struct25::get_field53() && {
  return std::move(field53);
}

const std::vector<double>& Struct25::get_field54() const& {
  return field54;
}

std::vector<double> Struct25::get_field54() && {
  return std::move(field54);
}

const std::map<double, float>& Struct25::get_field55() const& {
  return field55;
}

std::map<double, float> Struct25::get_field55() && {
  return std::move(field55);
}

const std::map< ::cpp2::Struct4, int8_t>& Struct25::get_field57() const& {
  return field57;
}

std::map< ::cpp2::Struct4, int8_t> Struct25::get_field57() && {
  return std::move(field57);
}

const std::vector<std::map<std::vector<bool>, int64_t>>& Struct25::get_field59() const& {
  return field59;
}

std::vector<std::map<std::vector<bool>, int64_t>> Struct25::get_field59() && {
  return std::move(field59);
}

const std::map<std::string, std::vector<double>>& Struct25::get_field64() const& {
  return field64;
}

std::map<std::string, std::vector<double>> Struct25::get_field64() && {
  return std::move(field64);
}

const std::vector<double>& Struct25::get_field65() const& {
  return field65;
}

std::vector<double> Struct25::get_field65() && {
  return std::move(field65);
}

const std::set<std::map<float, float>>& Struct25::get_field67() const& {
  return field67;
}

std::set<std::map<float, float>> Struct25::get_field67() && {
  return std::move(field67);
}

const std::vector<std::string>& Struct25::get_field69() const& {
  return field69;
}

std::vector<std::string> Struct25::get_field69() && {
  return std::move(field69);
}

const  ::cpp2::Struct15& Struct25::get_field70() const& {
  return field70;
}

 ::cpp2::Struct15 Struct25::get_field70() && {
  return std::move(field70);
}

const std::set<int16_t>& Struct25::get_field72() const& {
  return field72;
}

std::set<int16_t> Struct25::get_field72() && {
  return std::move(field72);
}

const std::vector<float>& Struct25::get_field73() const& {
  return field73;
}

std::vector<float> Struct25::get_field73() && {
  return std::move(field73);
}

const std::map<std::map<std::string, int16_t>, double>& Struct25::get_field74() const& {
  return field74;
}

std::map<std::map<std::string, int16_t>, double> Struct25::get_field74() && {
  return std::move(field74);
}

const std::set<int8_t>& Struct25::get_field79() const& {
  return field79;
}

std::set<int8_t> Struct25::get_field79() && {
  return std::move(field79);
}

void Struct25::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_SET;
  }
}

void swap(Struct25& a, Struct25& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct25::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct25::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct25::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct25::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct25::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct25::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct25::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct25::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct26::__clear() {
  // clear all fields
  field1.clear();
  field2 = 0;
  field3.clear();
  field4 = 0;
  field5.clear();
  field6.clear();
  field7 = 0;
  field8 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field9 = 0;
  field10.clear();
  field11.clear();
  field12.clear();
  field13 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::clear(&field14);
  field15 = 0;
  field16 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field17.clear();
  field18 = 0;
  field19.clear();
  field20 = 0;
  field21 = 0;
  field22 = 0;
  field23 = 0;
  field24 = 0;
  field25 = 0;
  field26 = 0;
  field27.clear();
  field28.clear();
  field29 = 0;
  field30.clear();
  field31 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct17>::clear(&field32);
  field33.clear();
  field34 = 0;
  field35 = 0;
  field36 = 0;
  field37.clear();
  field38 = 0;
  field39 = 0;
  field40.clear();
  field41 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::clear(&field42);
  field43.clear();
  field44 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field45);
  field46.clear();
  field47.clear();
  field48 = 0;
  field49 = 0;
  field50 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::clear(&field51);
  field52 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field53);
  field54 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field55);
  field56 = 0;
  field57.clear();
  field58 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field59);
  field60 = 0;
  field61.clear();
  field62 = 0;
  field63.clear();
  field64.clear();
  field65.clear();
  field66 = 0;
  field67.clear();
  field68 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field69 = 0;
  field70.clear();
  field71 = 0;
  field72.clear();
  field73 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field74 = 0;
  field75.clear();
  field76 = 0;
  field77 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field78);
  field79 = 0;
  field80.clear();
  field81 = 0;
  field82 = 0;
  field83 = 0;
  field84.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field85);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field86);
  field87.clear();
  field88 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field89.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct19>::clear(&field90);
  field91 = 0;
  field92 = 0;
  field93 = 0;
  field94 = 0;
  field95 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field96);
  field97 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field98);
  field99.clear();
  field100 = 0;
  field101 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field102.clear();
  field103 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field104 = 0;
  field105 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool Struct26::operator==(const Struct26& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field16, rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field50, rhs.field50))) {
    return false;
  }
  if (!((field51 == rhs.field51))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field52, rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field58, rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field68, rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!((field83 == rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  if (!((field85 == rhs.field85))) {
    return false;
  }
  if (!((field86 == rhs.field86))) {
    return false;
  }
  if (!((field87 == rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!((field89 == rhs.field89))) {
    return false;
  }
  if (!((field90 == rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!((field92 == rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!((field94 == rhs.field94))) {
    return false;
  }
  if (!((field95 == rhs.field95))) {
    return false;
  }
  if (!((field96 == rhs.field96))) {
    return false;
  }
  if (!((field97 == rhs.field97))) {
    return false;
  }
  if (!((field98 == rhs.field98))) {
    return false;
  }
  if (!((field99 == rhs.field99))) {
    return false;
  }
  if (!((field100 == rhs.field100))) {
    return false;
  }
  if (!((field101 == rhs.field101))) {
    return false;
  }
  if (!((field102 == rhs.field102))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field103, rhs.field103))) {
    return false;
  }
  if (!((field104 == rhs.field104))) {
    return false;
  }
  if (!((field105 == rhs.field105))) {
    return false;
  }
  return true;
}

const std::set<double>& Struct26::get_field1() const& {
  return field1;
}

std::set<double> Struct26::get_field1() && {
  return std::move(field1);
}

const std::map<int8_t, float>& Struct26::get_field3() const& {
  return field3;
}

std::map<int8_t, float> Struct26::get_field3() && {
  return std::move(field3);
}

const std::map<std::set<double>, int16_t>& Struct26::get_field5() const& {
  return field5;
}

std::map<std::set<double>, int16_t> Struct26::get_field5() && {
  return std::move(field5);
}

const std::set<int16_t>& Struct26::get_field6() const& {
  return field6;
}

std::set<int16_t> Struct26::get_field6() && {
  return std::move(field6);
}

const std::map<double, std::map<std::map<double, int32_t>, bool>>& Struct26::get_field10() const& {
  return field10;
}

std::map<double, std::map<std::map<double, int32_t>, bool>> Struct26::get_field10() && {
  return std::move(field10);
}

const std::set<std::set<int32_t>>& Struct26::get_field11() const& {
  return field11;
}

std::set<std::set<int32_t>> Struct26::get_field11() && {
  return std::move(field11);
}

const std::vector<std::string>& Struct26::get_field12() const& {
  return field12;
}

std::vector<std::string> Struct26::get_field12() && {
  return std::move(field12);
}

const  ::cpp2::Struct10& Struct26::get_field14() const& {
  return field14;
}

 ::cpp2::Struct10 Struct26::get_field14() && {
  return std::move(field14);
}

const std::set<int8_t>& Struct26::get_field17() const& {
  return field17;
}

std::set<int8_t> Struct26::get_field17() && {
  return std::move(field17);
}

const std::set<double>& Struct26::get_field19() const& {
  return field19;
}

std::set<double> Struct26::get_field19() && {
  return std::move(field19);
}

const std::set<std::string>& Struct26::get_field27() const& {
  return field27;
}

std::set<std::string> Struct26::get_field27() && {
  return std::move(field27);
}

const std::vector<double>& Struct26::get_field28() const& {
  return field28;
}

std::vector<double> Struct26::get_field28() && {
  return std::move(field28);
}

const std::vector<int16_t>& Struct26::get_field30() const& {
  return field30;
}

std::vector<int16_t> Struct26::get_field30() && {
  return std::move(field30);
}

const  ::cpp2::Struct17& Struct26::get_field32() const& {
  return field32;
}

 ::cpp2::Struct17 Struct26::get_field32() && {
  return std::move(field32);
}

const std::vector<int16_t>& Struct26::get_field33() const& {
  return field33;
}

std::vector<int16_t> Struct26::get_field33() && {
  return std::move(field33);
}

const std::set<int8_t>& Struct26::get_field37() const& {
  return field37;
}

std::set<int8_t> Struct26::get_field37() && {
  return std::move(field37);
}

const std::map<float, bool>& Struct26::get_field40() const& {
  return field40;
}

std::map<float, bool> Struct26::get_field40() && {
  return std::move(field40);
}

const  ::cpp2::Struct14& Struct26::get_field42() const& {
  return field42;
}

 ::cpp2::Struct14 Struct26::get_field42() && {
  return std::move(field42);
}

const std::map<int32_t, bool>& Struct26::get_field43() const& {
  return field43;
}

std::map<int32_t, bool> Struct26::get_field43() && {
  return std::move(field43);
}

const  ::cpp2::Struct7& Struct26::get_field45() const& {
  return field45;
}

 ::cpp2::Struct7 Struct26::get_field45() && {
  return std::move(field45);
}

const std::set<int16_t>& Struct26::get_field46() const& {
  return field46;
}

std::set<int16_t> Struct26::get_field46() && {
  return std::move(field46);
}

const std::map<std::string, std::map<std::string, bool>>& Struct26::get_field47() const& {
  return field47;
}

std::map<std::string, std::map<std::string, bool>> Struct26::get_field47() && {
  return std::move(field47);
}

const  ::cpp2::Struct10& Struct26::get_field51() const& {
  return field51;
}

 ::cpp2::Struct10 Struct26::get_field51() && {
  return std::move(field51);
}

const  ::cpp2::Struct5& Struct26::get_field53() const& {
  return field53;
}

 ::cpp2::Struct5 Struct26::get_field53() && {
  return std::move(field53);
}

const  ::cpp2::Struct0& Struct26::get_field55() const& {
  return field55;
}

 ::cpp2::Struct0 Struct26::get_field55() && {
  return std::move(field55);
}

const std::set<double>& Struct26::get_field57() const& {
  return field57;
}

std::set<double> Struct26::get_field57() && {
  return std::move(field57);
}

const  ::cpp2::Struct4& Struct26::get_field59() const& {
  return field59;
}

 ::cpp2::Struct4 Struct26::get_field59() && {
  return std::move(field59);
}

const std::vector<std::set<float>>& Struct26::get_field61() const& {
  return field61;
}

std::vector<std::set<float>> Struct26::get_field61() && {
  return std::move(field61);
}

const std::set<std::map<int8_t, int32_t>>& Struct26::get_field63() const& {
  return field63;
}

std::set<std::map<int8_t, int32_t>> Struct26::get_field63() && {
  return std::move(field63);
}

const std::vector<int64_t>& Struct26::get_field64() const& {
  return field64;
}

std::vector<int64_t> Struct26::get_field64() && {
  return std::move(field64);
}

const std::set<std::vector<double>>& Struct26::get_field65() const& {
  return field65;
}

std::set<std::vector<double>> Struct26::get_field65() && {
  return std::move(field65);
}

const std::set<std::string>& Struct26::get_field67() const& {
  return field67;
}

std::set<std::string> Struct26::get_field67() && {
  return std::move(field67);
}

const std::map<int8_t, std::map<float, std::string>>& Struct26::get_field70() const& {
  return field70;
}

std::map<int8_t, std::map<float, std::string>> Struct26::get_field70() && {
  return std::move(field70);
}

const std::set<int8_t>& Struct26::get_field72() const& {
  return field72;
}

std::set<int8_t> Struct26::get_field72() && {
  return std::move(field72);
}

const std::map<bool, std::map<std::vector<std::string>, int64_t>>& Struct26::get_field75() const& {
  return field75;
}

std::map<bool, std::map<std::vector<std::string>, int64_t>> Struct26::get_field75() && {
  return std::move(field75);
}

const  ::cpp2::Struct9& Struct26::get_field78() const& {
  return field78;
}

 ::cpp2::Struct9 Struct26::get_field78() && {
  return std::move(field78);
}

const std::set<int64_t>& Struct26::get_field80() const& {
  return field80;
}

std::set<int64_t> Struct26::get_field80() && {
  return std::move(field80);
}

const std::vector< ::cpp2::Struct15>& Struct26::get_field84() const& {
  return field84;
}

std::vector< ::cpp2::Struct15> Struct26::get_field84() && {
  return std::move(field84);
}

const  ::cpp2::Struct2& Struct26::get_field85() const& {
  return field85;
}

 ::cpp2::Struct2 Struct26::get_field85() && {
  return std::move(field85);
}

const  ::cpp2::Struct9& Struct26::get_field86() const& {
  return field86;
}

 ::cpp2::Struct9 Struct26::get_field86() && {
  return std::move(field86);
}

const std::vector<std::string>& Struct26::get_field87() const& {
  return field87;
}

std::vector<std::string> Struct26::get_field87() && {
  return std::move(field87);
}

const std::map<int8_t, std::string>& Struct26::get_field89() const& {
  return field89;
}

std::map<int8_t, std::string> Struct26::get_field89() && {
  return std::move(field89);
}

const  ::cpp2::Struct19& Struct26::get_field90() const& {
  return field90;
}

 ::cpp2::Struct19 Struct26::get_field90() && {
  return std::move(field90);
}

const  ::cpp2::Struct5& Struct26::get_field96() const& {
  return field96;
}

 ::cpp2::Struct5 Struct26::get_field96() && {
  return std::move(field96);
}

const  ::cpp2::Struct6& Struct26::get_field98() const& {
  return field98;
}

 ::cpp2::Struct6 Struct26::get_field98() && {
  return std::move(field98);
}

const std::set<bool>& Struct26::get_field99() const& {
  return field99;
}

std::set<bool> Struct26::get_field99() && {
  return std::move(field99);
}

const std::map<int64_t, int64_t>& Struct26::get_field102() const& {
  return field102;
}

std::map<int64_t, int64_t> Struct26::get_field102() && {
  return std::move(field102);
}

void Struct26::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field96") {
    fid = 96;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field97") {
    fid = 97;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field98") {
    fid = 98;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field99") {
    fid = 99;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field100") {
    fid = 100;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field101") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field102") {
    fid = 102;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field103") {
    fid = 103;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field104") {
    fid = 104;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field105") {
    fid = 105;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

void swap(Struct26& a, Struct26& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.field96, b.field96);
  swap(a.field97, b.field97);
  swap(a.field98, b.field98);
  swap(a.field99, b.field99);
  swap(a.field100, b.field100);
  swap(a.field101, b.field101);
  swap(a.field102, b.field102);
  swap(a.field103, b.field103);
  swap(a.field104, b.field104);
  swap(a.field105, b.field105);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct26::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct26::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct26::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct26::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct26::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct26::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct26::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct26::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Struct27::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::clear(&field1);
  field2 = 0;
  field3.clear();
  field4 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field5.clear();
  field6.clear();
  field7 = 0;
  field8.clear();
  field9.clear();
  field10.clear();
  field11 = 0;
  field12.clear();
  field13.clear();
  field14 = 0;
  field15 = 0;
  field16 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field17);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field18);
  field19.clear();
  field20 = 0;
  field21.clear();
  field22 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field23 = 0;
  field24.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field25);
  field26.clear();
  field27.clear();
  field28 = 0;
  field29.clear();
  field30 = 0;
  field31.clear();
  field32 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field33);
  field34.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::clear(&field35);
  field36 = 0;
  field37 = 0;
  field38 = 0;
  field39.clear();
  field40.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field41);
  field42 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field43);
  field44 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field45 = 0;
  field46 = 0;
  field47.clear();
  field48 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field49);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct19>::clear(&field50);
  field51 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::clear(&field52);
  field53.clear();
  field54.clear();
  field55 = 0;
  field56 = 0;
  field57.clear();
  field58.clear();
  field59.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field60);
  field61 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::clear(&field62);
  field63.clear();
  field64 = 0;
  field65 = 0;
  field66.clear();
  field67 = 0;
  field68 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field69);
  field70 = 0;
  field71 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field72);
  field73 = 0;
  field74 = 0;
  field75 = 0;
  field76.clear();
  field77.clear();
  field78.clear();
  field79 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field80);
  field81 = 0;
  field82 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field83.clear();
  field84 = 0;
  field85 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field86 = 0;
  field87 = 0;
  field88.clear();
  field89 = 0;
  field90 = 0;
  field91.clear();
  field92 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field93.clear();
  field94 = 0;
  field95 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field96 = 0;
  field97 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field98 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field99 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::clear(&field100);
  field101 = 0;
  field102 = 0;
  field103 = 0;
  field104 = 0;
  field105 = 0;
  field106.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field107);
  field108.clear();
  field109 = 0;
  field110 = 0;
  field111.clear();
  field112 = 0;
  field113 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field114);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field115);
  field116 = 0;
  field117.clear();
  field118 = 0;
  field119.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::clear(&field120);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::clear(&field121);
  field122 = 0;
  field123.clear();
  field124 = 0;
  field125 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field126.clear();
  field127 = 0;
  field128.clear();
  field129 = 0;
  field130.clear();
  field131.clear();
  field132.clear();
  field133.clear();
  field134.clear();
  field135.clear();
  field136 = 0;
  field137.clear();
  field138.clear();
  field139.clear();
  field140.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::clear(&field141);
  field142 = 0;
  field143 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field144.clear();
  field145 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct17>::clear(&field146);
  field147 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field148 = 0;
  field149 = 0;
  field150.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::clear(&field151);
  field152 = 0;
  field153 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field154 = 0;
  field155.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field156);
  field157 = 0;
  field158.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::clear(&field159);
  field160 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field161 = 0;
  field162 = 0;
  field163.clear();
  field164.clear();
  field165.clear();
  field166 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field167 = 0;
  field168.clear();
  field169.clear();
  field170 = 0;
  field171.clear();
  field172.clear();
  field173 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field174 = 0;
  field175 = 0;
  field176 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field177.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field178);
  field179.clear();
  field180.clear();
  field181 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::clear(&field182);
  field183 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field184.clear();
  field185 = 0;
  field186 = 0;
  field187 = 0;
  field188.clear();
  field189 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field190.clear();
  field191.clear();
  field192 = 0;
  field193 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field194 = 0;
  field195.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field196);
  field197 = 0;
  field198.clear();
  field199.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::clear(&field200);
  field201 = 0;
  field202 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::clear(&field203);
  field204.clear();
  field205 = 0;
  field206.clear();
  field207 = 0;
  field208.clear();
  field209 = 0;
  field210.clear();
  field211 = 0;
  field212 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field213.clear();
  field214.clear();
  field215.clear();
  field216 = 0;
  field217.clear();
  field218 = 0;
  field219 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field220.clear();
  field221.clear();
  field222 = 0;
  field223.clear();
  field224.clear();
  field225.clear();
  field226 = 0;
  field227 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field228.clear();
  field229 = 0;
  field230 = 0;
  __isset.__clear();
}

bool Struct27::operator==(const Struct27& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field4, rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!((field6 == rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!((field9 == rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!((field26 == rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field51, rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!((field61 == rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!((field77 == rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!((field81 == rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!((field83 == rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field85, rhs.field85))) {
    return false;
  }
  if (!((field86 == rhs.field86))) {
    return false;
  }
  if (!((field87 == rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!((field89 == rhs.field89))) {
    return false;
  }
  if (!((field90 == rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field92, rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!((field94 == rhs.field94))) {
    return false;
  }
  if (!((field95 == rhs.field95))) {
    return false;
  }
  if (!((field96 == rhs.field96))) {
    return false;
  }
  if (!((field97 == rhs.field97))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field98, rhs.field98))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field99, rhs.field99))) {
    return false;
  }
  if (!((field100 == rhs.field100))) {
    return false;
  }
  if (!((field101 == rhs.field101))) {
    return false;
  }
  if (!((field102 == rhs.field102))) {
    return false;
  }
  if (!((field103 == rhs.field103))) {
    return false;
  }
  if (!((field104 == rhs.field104))) {
    return false;
  }
  if (!((field105 == rhs.field105))) {
    return false;
  }
  if (!((field106 == rhs.field106))) {
    return false;
  }
  if (!((field107 == rhs.field107))) {
    return false;
  }
  if (!((field108 == rhs.field108))) {
    return false;
  }
  if (!((field109 == rhs.field109))) {
    return false;
  }
  if (!((field110 == rhs.field110))) {
    return false;
  }
  if (!((field111 == rhs.field111))) {
    return false;
  }
  if (!((field112 == rhs.field112))) {
    return false;
  }
  if (!((field113 == rhs.field113))) {
    return false;
  }
  if (!((field114 == rhs.field114))) {
    return false;
  }
  if (!((field115 == rhs.field115))) {
    return false;
  }
  if (!((field116 == rhs.field116))) {
    return false;
  }
  if (!((field117 == rhs.field117))) {
    return false;
  }
  if (!((field118 == rhs.field118))) {
    return false;
  }
  if (!((field119 == rhs.field119))) {
    return false;
  }
  if (!((field120 == rhs.field120))) {
    return false;
  }
  if (!((field121 == rhs.field121))) {
    return false;
  }
  if (!((field122 == rhs.field122))) {
    return false;
  }
  if (!((field123 == rhs.field123))) {
    return false;
  }
  if (!((field124 == rhs.field124))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field125, rhs.field125))) {
    return false;
  }
  if (!((field126 == rhs.field126))) {
    return false;
  }
  if (!((field127 == rhs.field127))) {
    return false;
  }
  if (!((field128 == rhs.field128))) {
    return false;
  }
  if (!((field129 == rhs.field129))) {
    return false;
  }
  if (!((field130 == rhs.field130))) {
    return false;
  }
  if (!((field131 == rhs.field131))) {
    return false;
  }
  if (!((field132 == rhs.field132))) {
    return false;
  }
  if (!((field133 == rhs.field133))) {
    return false;
  }
  if (!((field134 == rhs.field134))) {
    return false;
  }
  if (!((field135 == rhs.field135))) {
    return false;
  }
  if (!((field136 == rhs.field136))) {
    return false;
  }
  if (!((field137 == rhs.field137))) {
    return false;
  }
  if (!((field138 == rhs.field138))) {
    return false;
  }
  if (!((field139 == rhs.field139))) {
    return false;
  }
  if (!((field140 == rhs.field140))) {
    return false;
  }
  if (!((field141 == rhs.field141))) {
    return false;
  }
  if (!((field142 == rhs.field142))) {
    return false;
  }
  if (!((field143 == rhs.field143))) {
    return false;
  }
  if (!((field144 == rhs.field144))) {
    return false;
  }
  if (!((field145 == rhs.field145))) {
    return false;
  }
  if (!((field146 == rhs.field146))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field147, rhs.field147))) {
    return false;
  }
  if (!((field148 == rhs.field148))) {
    return false;
  }
  if (!((field149 == rhs.field149))) {
    return false;
  }
  if (!((field150 == rhs.field150))) {
    return false;
  }
  if (!((field151 == rhs.field151))) {
    return false;
  }
  if (!((field152 == rhs.field152))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field153, rhs.field153))) {
    return false;
  }
  if (!((field154 == rhs.field154))) {
    return false;
  }
  if (!((field155 == rhs.field155))) {
    return false;
  }
  if (!((field156 == rhs.field156))) {
    return false;
  }
  if (!((field157 == rhs.field157))) {
    return false;
  }
  if (!((field158 == rhs.field158))) {
    return false;
  }
  if (!((field159 == rhs.field159))) {
    return false;
  }
  if (!((field160 == rhs.field160))) {
    return false;
  }
  if (!((field161 == rhs.field161))) {
    return false;
  }
  if (!((field162 == rhs.field162))) {
    return false;
  }
  if (!((field163 == rhs.field163))) {
    return false;
  }
  if (!((field164 == rhs.field164))) {
    return false;
  }
  if (!((field165 == rhs.field165))) {
    return false;
  }
  if (!((field166 == rhs.field166))) {
    return false;
  }
  if (!((field167 == rhs.field167))) {
    return false;
  }
  if (!((field168 == rhs.field168))) {
    return false;
  }
  if (!((field169 == rhs.field169))) {
    return false;
  }
  if (!((field170 == rhs.field170))) {
    return false;
  }
  if (!((field171 == rhs.field171))) {
    return false;
  }
  if (!((field172 == rhs.field172))) {
    return false;
  }
  if (!((field173 == rhs.field173))) {
    return false;
  }
  if (!((field174 == rhs.field174))) {
    return false;
  }
  if (!((field175 == rhs.field175))) {
    return false;
  }
  if (!((field176 == rhs.field176))) {
    return false;
  }
  if (!((field177 == rhs.field177))) {
    return false;
  }
  if (!((field178 == rhs.field178))) {
    return false;
  }
  if (!((field179 == rhs.field179))) {
    return false;
  }
  if (!((field180 == rhs.field180))) {
    return false;
  }
  if (!((field181 == rhs.field181))) {
    return false;
  }
  if (!((field182 == rhs.field182))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field183, rhs.field183))) {
    return false;
  }
  if (!((field184 == rhs.field184))) {
    return false;
  }
  if (!((field185 == rhs.field185))) {
    return false;
  }
  if (!((field186 == rhs.field186))) {
    return false;
  }
  if (!((field187 == rhs.field187))) {
    return false;
  }
  if (!((field188 == rhs.field188))) {
    return false;
  }
  if (!((field189 == rhs.field189))) {
    return false;
  }
  if (!((field190 == rhs.field190))) {
    return false;
  }
  if (!((field191 == rhs.field191))) {
    return false;
  }
  if (!((field192 == rhs.field192))) {
    return false;
  }
  if (!((field193 == rhs.field193))) {
    return false;
  }
  if (!((field194 == rhs.field194))) {
    return false;
  }
  if (!((field195 == rhs.field195))) {
    return false;
  }
  if (!((field196 == rhs.field196))) {
    return false;
  }
  if (!((field197 == rhs.field197))) {
    return false;
  }
  if (!((field198 == rhs.field198))) {
    return false;
  }
  if (!((field199 == rhs.field199))) {
    return false;
  }
  if (!((field200 == rhs.field200))) {
    return false;
  }
  if (!((field201 == rhs.field201))) {
    return false;
  }
  if (!((field202 == rhs.field202))) {
    return false;
  }
  if (!((field203 == rhs.field203))) {
    return false;
  }
  if (!((field204 == rhs.field204))) {
    return false;
  }
  if (!((field205 == rhs.field205))) {
    return false;
  }
  if (!((field206 == rhs.field206))) {
    return false;
  }
  if (!((field207 == rhs.field207))) {
    return false;
  }
  if (!((field208 == rhs.field208))) {
    return false;
  }
  if (!((field209 == rhs.field209))) {
    return false;
  }
  if (!((field210 == rhs.field210))) {
    return false;
  }
  if (!((field211 == rhs.field211))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field212, rhs.field212))) {
    return false;
  }
  if (!((field213 == rhs.field213))) {
    return false;
  }
  if (!((field214 == rhs.field214))) {
    return false;
  }
  if (!((field215 == rhs.field215))) {
    return false;
  }
  if (!((field216 == rhs.field216))) {
    return false;
  }
  if (!((field217 == rhs.field217))) {
    return false;
  }
  if (!((field218 == rhs.field218))) {
    return false;
  }
  if (!((field219 == rhs.field219))) {
    return false;
  }
  if (!((field220 == rhs.field220))) {
    return false;
  }
  if (!((field221 == rhs.field221))) {
    return false;
  }
  if (!((field222 == rhs.field222))) {
    return false;
  }
  if (!((field223 == rhs.field223))) {
    return false;
  }
  if (!((field224 == rhs.field224))) {
    return false;
  }
  if (!((field225 == rhs.field225))) {
    return false;
  }
  if (!((field226 == rhs.field226))) {
    return false;
  }
  if (!((field227 == rhs.field227))) {
    return false;
  }
  if (!((field228 == rhs.field228))) {
    return false;
  }
  if (!((field229 == rhs.field229))) {
    return false;
  }
  if (!((field230 == rhs.field230))) {
    return false;
  }
  return true;
}

const  ::cpp2::Struct8& Struct27::get_field1() const& {
  return field1;
}

 ::cpp2::Struct8 Struct27::get_field1() && {
  return std::move(field1);
}

const std::set<double>& Struct27::get_field3() const& {
  return field3;
}

std::set<double> Struct27::get_field3() && {
  return std::move(field3);
}

const std::map<int8_t, std::string>& Struct27::get_field5() const& {
  return field5;
}

std::map<int8_t, std::string> Struct27::get_field5() && {
  return std::move(field5);
}

const std::vector<double>& Struct27::get_field6() const& {
  return field6;
}

std::vector<double> Struct27::get_field6() && {
  return std::move(field6);
}

const std::set<double>& Struct27::get_field8() const& {
  return field8;
}

std::set<double> Struct27::get_field8() && {
  return std::move(field8);
}

const std::set< ::cpp2::Struct1>& Struct27::get_field9() const& {
  return field9;
}

std::set< ::cpp2::Struct1> Struct27::get_field9() && {
  return std::move(field9);
}

const std::set<std::string>& Struct27::get_field10() const& {
  return field10;
}

std::set<std::string> Struct27::get_field10() && {
  return std::move(field10);
}

const std::set<std::set<float>>& Struct27::get_field12() const& {
  return field12;
}

std::set<std::set<float>> Struct27::get_field12() && {
  return std::move(field12);
}

const std::map<bool, std::string>& Struct27::get_field13() const& {
  return field13;
}

std::map<bool, std::string> Struct27::get_field13() && {
  return std::move(field13);
}

const  ::cpp2::Struct3& Struct27::get_field17() const& {
  return field17;
}

 ::cpp2::Struct3 Struct27::get_field17() && {
  return std::move(field17);
}

const  ::cpp2::Struct6& Struct27::get_field18() const& {
  return field18;
}

 ::cpp2::Struct6 Struct27::get_field18() && {
  return std::move(field18);
}

const std::set<bool>& Struct27::get_field19() const& {
  return field19;
}

std::set<bool> Struct27::get_field19() && {
  return std::move(field19);
}

const std::set<int64_t>& Struct27::get_field21() const& {
  return field21;
}

std::set<int64_t> Struct27::get_field21() && {
  return std::move(field21);
}

const std::map<int16_t, float>& Struct27::get_field24() const& {
  return field24;
}

std::map<int16_t, float> Struct27::get_field24() && {
  return std::move(field24);
}

const  ::cpp2::Struct0& Struct27::get_field25() const& {
  return field25;
}

 ::cpp2::Struct0 Struct27::get_field25() && {
  return std::move(field25);
}

const std::map<std::string, std::map<std::string, std::map<int32_t, float>>>& Struct27::get_field26() const& {
  return field26;
}

std::map<std::string, std::map<std::string, std::map<int32_t, float>>> Struct27::get_field26() && {
  return std::move(field26);
}

const std::set<int64_t>& Struct27::get_field27() const& {
  return field27;
}

std::set<int64_t> Struct27::get_field27() && {
  return std::move(field27);
}

const std::vector<int32_t>& Struct27::get_field29() const& {
  return field29;
}

std::vector<int32_t> Struct27::get_field29() && {
  return std::move(field29);
}

const std::vector<bool>& Struct27::get_field31() const& {
  return field31;
}

std::vector<bool> Struct27::get_field31() && {
  return std::move(field31);
}

const  ::cpp2::Struct9& Struct27::get_field33() const& {
  return field33;
}

 ::cpp2::Struct9 Struct27::get_field33() && {
  return std::move(field33);
}

const std::set<int8_t>& Struct27::get_field34() const& {
  return field34;
}

std::set<int8_t> Struct27::get_field34() && {
  return std::move(field34);
}

const  ::cpp2::Struct15& Struct27::get_field35() const& {
  return field35;
}

 ::cpp2::Struct15 Struct27::get_field35() && {
  return std::move(field35);
}

const std::map<std::map<std::vector<float>, int8_t>, int32_t>& Struct27::get_field39() const& {
  return field39;
}

std::map<std::map<std::vector<float>, int8_t>, int32_t> Struct27::get_field39() && {
  return std::move(field39);
}

const std::vector<std::string>& Struct27::get_field40() const& {
  return field40;
}

std::vector<std::string> Struct27::get_field40() && {
  return std::move(field40);
}

const  ::cpp2::Struct4& Struct27::get_field41() const& {
  return field41;
}

 ::cpp2::Struct4 Struct27::get_field41() && {
  return std::move(field41);
}

const  ::cpp2::Struct7& Struct27::get_field43() const& {
  return field43;
}

 ::cpp2::Struct7 Struct27::get_field43() && {
  return std::move(field43);
}

const std::map<double, std::string>& Struct27::get_field47() const& {
  return field47;
}

std::map<double, std::string> Struct27::get_field47() && {
  return std::move(field47);
}

const  ::cpp2::Struct5& Struct27::get_field49() const& {
  return field49;
}

 ::cpp2::Struct5 Struct27::get_field49() && {
  return std::move(field49);
}

const  ::cpp2::Struct19& Struct27::get_field50() const& {
  return field50;
}

 ::cpp2::Struct19 Struct27::get_field50() && {
  return std::move(field50);
}

const  ::cpp2::Struct16& Struct27::get_field52() const& {
  return field52;
}

 ::cpp2::Struct16 Struct27::get_field52() && {
  return std::move(field52);
}

const std::set<std::string>& Struct27::get_field53() const& {
  return field53;
}

std::set<std::string> Struct27::get_field53() && {
  return std::move(field53);
}

const std::set<std::vector<std::string>>& Struct27::get_field54() const& {
  return field54;
}

std::set<std::vector<std::string>> Struct27::get_field54() && {
  return std::move(field54);
}

const std::vector<int32_t>& Struct27::get_field57() const& {
  return field57;
}

std::vector<int32_t> Struct27::get_field57() && {
  return std::move(field57);
}

const std::set<std::string>& Struct27::get_field58() const& {
  return field58;
}

std::set<std::string> Struct27::get_field58() && {
  return std::move(field58);
}

const std::map<std::map<std::map<int32_t, int64_t>, std::string>, float>& Struct27::get_field59() const& {
  return field59;
}

std::map<std::map<std::map<int32_t, int64_t>, std::string>, float> Struct27::get_field59() && {
  return std::move(field59);
}

const  ::cpp2::Struct2& Struct27::get_field60() const& {
  return field60;
}

 ::cpp2::Struct2 Struct27::get_field60() && {
  return std::move(field60);
}

const  ::cpp2::Struct16& Struct27::get_field62() const& {
  return field62;
}

 ::cpp2::Struct16 Struct27::get_field62() && {
  return std::move(field62);
}

const std::set<int16_t>& Struct27::get_field63() const& {
  return field63;
}

std::set<int16_t> Struct27::get_field63() && {
  return std::move(field63);
}

const std::vector<bool>& Struct27::get_field66() const& {
  return field66;
}

std::vector<bool> Struct27::get_field66() && {
  return std::move(field66);
}

const  ::cpp2::Struct6& Struct27::get_field69() const& {
  return field69;
}

 ::cpp2::Struct6 Struct27::get_field69() && {
  return std::move(field69);
}

const  ::cpp2::Struct6& Struct27::get_field72() const& {
  return field72;
}

 ::cpp2::Struct6 Struct27::get_field72() && {
  return std::move(field72);
}

const std::vector<int8_t>& Struct27::get_field76() const& {
  return field76;
}

std::vector<int8_t> Struct27::get_field76() && {
  return std::move(field76);
}

const std::vector<bool>& Struct27::get_field77() const& {
  return field77;
}

std::vector<bool> Struct27::get_field77() && {
  return std::move(field77);
}

const std::vector<std::string>& Struct27::get_field78() const& {
  return field78;
}

std::vector<std::string> Struct27::get_field78() && {
  return std::move(field78);
}

const  ::cpp2::Struct4& Struct27::get_field80() const& {
  return field80;
}

 ::cpp2::Struct4 Struct27::get_field80() && {
  return std::move(field80);
}

const std::vector<std::map<std::map<float, bool>, int8_t>>& Struct27::get_field83() const& {
  return field83;
}

std::vector<std::map<std::map<float, bool>, int8_t>> Struct27::get_field83() && {
  return std::move(field83);
}

const std::set<int64_t>& Struct27::get_field88() const& {
  return field88;
}

std::set<int64_t> Struct27::get_field88() && {
  return std::move(field88);
}

const std::vector<std::vector<std::vector<int64_t>>>& Struct27::get_field91() const& {
  return field91;
}

std::vector<std::vector<std::vector<int64_t>>> Struct27::get_field91() && {
  return std::move(field91);
}

const std::set<std::set<int64_t>>& Struct27::get_field93() const& {
  return field93;
}

std::set<std::set<int64_t>> Struct27::get_field93() && {
  return std::move(field93);
}

const  ::cpp2::Struct13& Struct27::get_field100() const& {
  return field100;
}

 ::cpp2::Struct13 Struct27::get_field100() && {
  return std::move(field100);
}

const std::set<double>& Struct27::get_field106() const& {
  return field106;
}

std::set<double> Struct27::get_field106() && {
  return std::move(field106);
}

const  ::cpp2::Struct9& Struct27::get_field107() const& {
  return field107;
}

 ::cpp2::Struct9 Struct27::get_field107() && {
  return std::move(field107);
}

const std::map<int64_t, std::vector<bool>>& Struct27::get_field108() const& {
  return field108;
}

std::map<int64_t, std::vector<bool>> Struct27::get_field108() && {
  return std::move(field108);
}

const std::vector<int8_t>& Struct27::get_field111() const& {
  return field111;
}

std::vector<int8_t> Struct27::get_field111() && {
  return std::move(field111);
}

const  ::cpp2::Struct4& Struct27::get_field114() const& {
  return field114;
}

 ::cpp2::Struct4 Struct27::get_field114() && {
  return std::move(field114);
}

const  ::cpp2::Struct2& Struct27::get_field115() const& {
  return field115;
}

 ::cpp2::Struct2 Struct27::get_field115() && {
  return std::move(field115);
}

const std::set<std::string>& Struct27::get_field117() const& {
  return field117;
}

std::set<std::string> Struct27::get_field117() && {
  return std::move(field117);
}

const std::vector<double>& Struct27::get_field119() const& {
  return field119;
}

std::vector<double> Struct27::get_field119() && {
  return std::move(field119);
}

const  ::cpp2::Struct8& Struct27::get_field120() const& {
  return field120;
}

 ::cpp2::Struct8 Struct27::get_field120() && {
  return std::move(field120);
}

const  ::cpp2::Struct14& Struct27::get_field121() const& {
  return field121;
}

 ::cpp2::Struct14 Struct27::get_field121() && {
  return std::move(field121);
}

const std::map<int32_t, std::string>& Struct27::get_field123() const& {
  return field123;
}

std::map<int32_t, std::string> Struct27::get_field123() && {
  return std::move(field123);
}

const std::vector<bool>& Struct27::get_field126() const& {
  return field126;
}

std::vector<bool> Struct27::get_field126() && {
  return std::move(field126);
}

const std::set<float>& Struct27::get_field128() const& {
  return field128;
}

std::set<float> Struct27::get_field128() && {
  return std::move(field128);
}

const std::set<bool>& Struct27::get_field130() const& {
  return field130;
}

std::set<bool> Struct27::get_field130() && {
  return std::move(field130);
}

const std::vector<int16_t>& Struct27::get_field131() const& {
  return field131;
}

std::vector<int16_t> Struct27::get_field131() && {
  return std::move(field131);
}

const std::map<std::set<std::string>, float>& Struct27::get_field132() const& {
  return field132;
}

std::map<std::set<std::string>, float> Struct27::get_field132() && {
  return std::move(field132);
}

const std::vector<std::map<std::vector<std::vector<float>>, int32_t>>& Struct27::get_field133() const& {
  return field133;
}

std::vector<std::map<std::vector<std::vector<float>>, int32_t>> Struct27::get_field133() && {
  return std::move(field133);
}

const std::vector<int64_t>& Struct27::get_field134() const& {
  return field134;
}

std::vector<int64_t> Struct27::get_field134() && {
  return std::move(field134);
}

const std::map< ::cpp2::Struct13, double>& Struct27::get_field135() const& {
  return field135;
}

std::map< ::cpp2::Struct13, double> Struct27::get_field135() && {
  return std::move(field135);
}

const std::map<int8_t, float>& Struct27::get_field137() const& {
  return field137;
}

std::map<int8_t, float> Struct27::get_field137() && {
  return std::move(field137);
}

const std::map<double,  ::cpp2::Struct7>& Struct27::get_field138() const& {
  return field138;
}

std::map<double,  ::cpp2::Struct7> Struct27::get_field138() && {
  return std::move(field138);
}

const std::vector<std::set<std::string>>& Struct27::get_field139() const& {
  return field139;
}

std::vector<std::set<std::string>> Struct27::get_field139() && {
  return std::move(field139);
}

const std::map<std::set<double>, std::string>& Struct27::get_field140() const& {
  return field140;
}

std::map<std::set<double>, std::string> Struct27::get_field140() && {
  return std::move(field140);
}

const  ::cpp2::Struct12& Struct27::get_field141() const& {
  return field141;
}

 ::cpp2::Struct12 Struct27::get_field141() && {
  return std::move(field141);
}

const std::set<double>& Struct27::get_field144() const& {
  return field144;
}

std::set<double> Struct27::get_field144() && {
  return std::move(field144);
}

const  ::cpp2::Struct17& Struct27::get_field146() const& {
  return field146;
}

 ::cpp2::Struct17 Struct27::get_field146() && {
  return std::move(field146);
}

const std::set<bool>& Struct27::get_field150() const& {
  return field150;
}

std::set<bool> Struct27::get_field150() && {
  return std::move(field150);
}

const  ::cpp2::Struct18& Struct27::get_field151() const& {
  return field151;
}

 ::cpp2::Struct18 Struct27::get_field151() && {
  return std::move(field151);
}

const std::vector<std::string>& Struct27::get_field155() const& {
  return field155;
}

std::vector<std::string> Struct27::get_field155() && {
  return std::move(field155);
}

const  ::cpp2::Struct3& Struct27::get_field156() const& {
  return field156;
}

 ::cpp2::Struct3 Struct27::get_field156() && {
  return std::move(field156);
}

const std::map<int16_t, int16_t>& Struct27::get_field158() const& {
  return field158;
}

std::map<int16_t, int16_t> Struct27::get_field158() && {
  return std::move(field158);
}

const  ::cpp2::Struct8& Struct27::get_field159() const& {
  return field159;
}

 ::cpp2::Struct8 Struct27::get_field159() && {
  return std::move(field159);
}

const std::set<double>& Struct27::get_field163() const& {
  return field163;
}

std::set<double> Struct27::get_field163() && {
  return std::move(field163);
}

const std::vector<std::map<int64_t, int32_t>>& Struct27::get_field164() const& {
  return field164;
}

std::vector<std::map<int64_t, int32_t>> Struct27::get_field164() && {
  return std::move(field164);
}

const std::vector<int64_t>& Struct27::get_field165() const& {
  return field165;
}

std::vector<int64_t> Struct27::get_field165() && {
  return std::move(field165);
}

const std::map<std::string, std::string>& Struct27::get_field168() const& {
  return field168;
}

std::map<std::string, std::string> Struct27::get_field168() && {
  return std::move(field168);
}

const std::map<int8_t, int8_t>& Struct27::get_field169() const& {
  return field169;
}

std::map<int8_t, int8_t> Struct27::get_field169() && {
  return std::move(field169);
}

const std::map<std::string, std::string>& Struct27::get_field171() const& {
  return field171;
}

std::map<std::string, std::string> Struct27::get_field171() && {
  return std::move(field171);
}

const std::map< ::cpp2::Struct3, float>& Struct27::get_field172() const& {
  return field172;
}

std::map< ::cpp2::Struct3, float> Struct27::get_field172() && {
  return std::move(field172);
}

const std::map<float, int16_t>& Struct27::get_field177() const& {
  return field177;
}

std::map<float, int16_t> Struct27::get_field177() && {
  return std::move(field177);
}

const  ::cpp2::Struct0& Struct27::get_field178() const& {
  return field178;
}

 ::cpp2::Struct0 Struct27::get_field178() && {
  return std::move(field178);
}

const std::map<int64_t, std::set<int64_t>>& Struct27::get_field179() const& {
  return field179;
}

std::map<int64_t, std::set<int64_t>> Struct27::get_field179() && {
  return std::move(field179);
}

const std::map<double, std::string>& Struct27::get_field180() const& {
  return field180;
}

std::map<double, std::string> Struct27::get_field180() && {
  return std::move(field180);
}

const  ::cpp2::Struct21& Struct27::get_field182() const& {
  return field182;
}

 ::cpp2::Struct21 Struct27::get_field182() && {
  return std::move(field182);
}

const std::set<std::string>& Struct27::get_field184() const& {
  return field184;
}

std::set<std::string> Struct27::get_field184() && {
  return std::move(field184);
}

const std::set<std::set<double>>& Struct27::get_field188() const& {
  return field188;
}

std::set<std::set<double>> Struct27::get_field188() && {
  return std::move(field188);
}

const std::set<double>& Struct27::get_field190() const& {
  return field190;
}

std::set<double> Struct27::get_field190() && {
  return std::move(field190);
}

const std::set<bool>& Struct27::get_field191() const& {
  return field191;
}

std::set<bool> Struct27::get_field191() && {
  return std::move(field191);
}

const std::map<int64_t, int8_t>& Struct27::get_field195() const& {
  return field195;
}

std::map<int64_t, int8_t> Struct27::get_field195() && {
  return std::move(field195);
}

const  ::cpp2::Struct5& Struct27::get_field196() const& {
  return field196;
}

 ::cpp2::Struct5 Struct27::get_field196() && {
  return std::move(field196);
}

const std::map<double, int32_t>& Struct27::get_field198() const& {
  return field198;
}

std::map<double, int32_t> Struct27::get_field198() && {
  return std::move(field198);
}

const std::set<int16_t>& Struct27::get_field199() const& {
  return field199;
}

std::set<int16_t> Struct27::get_field199() && {
  return std::move(field199);
}

const  ::cpp2::Struct18& Struct27::get_field200() const& {
  return field200;
}

 ::cpp2::Struct18 Struct27::get_field200() && {
  return std::move(field200);
}

const  ::cpp2::Struct16& Struct27::get_field203() const& {
  return field203;
}

 ::cpp2::Struct16 Struct27::get_field203() && {
  return std::move(field203);
}

const std::map<std::vector<bool>, std::string>& Struct27::get_field204() const& {
  return field204;
}

std::map<std::vector<bool>, std::string> Struct27::get_field204() && {
  return std::move(field204);
}

const std::vector<int8_t>& Struct27::get_field206() const& {
  return field206;
}

std::vector<int8_t> Struct27::get_field206() && {
  return std::move(field206);
}

const std::map<int8_t, int32_t>& Struct27::get_field208() const& {
  return field208;
}

std::map<int8_t, int32_t> Struct27::get_field208() && {
  return std::move(field208);
}

const std::vector<int32_t>& Struct27::get_field210() const& {
  return field210;
}

std::vector<int32_t> Struct27::get_field210() && {
  return std::move(field210);
}

const std::set<float>& Struct27::get_field213() const& {
  return field213;
}

std::set<float> Struct27::get_field213() && {
  return std::move(field213);
}

const std::vector<std::string>& Struct27::get_field214() const& {
  return field214;
}

std::vector<std::string> Struct27::get_field214() && {
  return std::move(field214);
}

const std::map<std::string,  ::cpp2::Struct5>& Struct27::get_field215() const& {
  return field215;
}

std::map<std::string,  ::cpp2::Struct5> Struct27::get_field215() && {
  return std::move(field215);
}

const std::map<int64_t, double>& Struct27::get_field217() const& {
  return field217;
}

std::map<int64_t, double> Struct27::get_field217() && {
  return std::move(field217);
}

const std::set<int8_t>& Struct27::get_field220() const& {
  return field220;
}

std::set<int8_t> Struct27::get_field220() && {
  return std::move(field220);
}

const std::map<std::vector<std::vector<std::string>>, std::vector<float>>& Struct27::get_field221() const& {
  return field221;
}

std::map<std::vector<std::vector<std::string>>, std::vector<float>> Struct27::get_field221() && {
  return std::move(field221);
}

const std::vector<int8_t>& Struct27::get_field223() const& {
  return field223;
}

std::vector<int8_t> Struct27::get_field223() && {
  return std::move(field223);
}

const std::set<std::string>& Struct27::get_field224() const& {
  return field224;
}

std::set<std::string> Struct27::get_field224() && {
  return std::move(field224);
}

const std::map<float, bool>& Struct27::get_field225() const& {
  return field225;
}

std::map<float, bool> Struct27::get_field225() && {
  return std::move(field225);
}

const std::vector<double>& Struct27::get_field228() const& {
  return field228;
}

std::vector<double> Struct27::get_field228() && {
  return std::move(field228);
}

void Struct27::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field96") {
    fid = 96;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field97") {
    fid = 97;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field98") {
    fid = 98;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field99") {
    fid = 99;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field100") {
    fid = 100;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field101") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field102") {
    fid = 102;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field103") {
    fid = 103;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field104") {
    fid = 104;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field105") {
    fid = 105;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field106") {
    fid = 106;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field107") {
    fid = 107;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field108") {
    fid = 108;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field109") {
    fid = 109;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field110") {
    fid = 110;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field111") {
    fid = 111;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field112") {
    fid = 112;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field113") {
    fid = 113;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field114") {
    fid = 114;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field115") {
    fid = 115;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field116") {
    fid = 116;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field117") {
    fid = 117;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field118") {
    fid = 118;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field119") {
    fid = 119;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field120") {
    fid = 120;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field121") {
    fid = 121;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field122") {
    fid = 122;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field123") {
    fid = 123;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field124") {
    fid = 124;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field125") {
    fid = 125;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field126") {
    fid = 126;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field127") {
    fid = 127;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field128") {
    fid = 128;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field129") {
    fid = 129;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field130") {
    fid = 130;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field131") {
    fid = 131;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field132") {
    fid = 132;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field133") {
    fid = 133;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field134") {
    fid = 134;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field135") {
    fid = 135;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field136") {
    fid = 136;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field137") {
    fid = 137;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field138") {
    fid = 138;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field139") {
    fid = 139;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field140") {
    fid = 140;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field141") {
    fid = 141;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field142") {
    fid = 142;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field143") {
    fid = 143;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field144") {
    fid = 144;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field145") {
    fid = 145;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field146") {
    fid = 146;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field147") {
    fid = 147;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field148") {
    fid = 148;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field149") {
    fid = 149;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field150") {
    fid = 150;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field151") {
    fid = 151;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field152") {
    fid = 152;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field153") {
    fid = 153;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field154") {
    fid = 154;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field155") {
    fid = 155;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field156") {
    fid = 156;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field157") {
    fid = 157;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field158") {
    fid = 158;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field159") {
    fid = 159;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field160") {
    fid = 160;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field161") {
    fid = 161;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field162") {
    fid = 162;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field163") {
    fid = 163;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field164") {
    fid = 164;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field165") {
    fid = 165;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field166") {
    fid = 166;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field167") {
    fid = 167;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field168") {
    fid = 168;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field169") {
    fid = 169;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field170") {
    fid = 170;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field171") {
    fid = 171;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field172") {
    fid = 172;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field173") {
    fid = 173;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field174") {
    fid = 174;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field175") {
    fid = 175;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field176") {
    fid = 176;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field177") {
    fid = 177;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field178") {
    fid = 178;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field179") {
    fid = 179;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field180") {
    fid = 180;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field181") {
    fid = 181;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field182") {
    fid = 182;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field183") {
    fid = 183;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field184") {
    fid = 184;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field185") {
    fid = 185;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field186") {
    fid = 186;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field187") {
    fid = 187;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field188") {
    fid = 188;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field189") {
    fid = 189;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field190") {
    fid = 190;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field191") {
    fid = 191;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field192") {
    fid = 192;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field193") {
    fid = 193;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field194") {
    fid = 194;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field195") {
    fid = 195;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field196") {
    fid = 196;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field197") {
    fid = 197;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field198") {
    fid = 198;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field199") {
    fid = 199;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field200") {
    fid = 200;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field201") {
    fid = 201;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field202") {
    fid = 202;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field203") {
    fid = 203;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field204") {
    fid = 204;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field205") {
    fid = 205;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field206") {
    fid = 206;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field207") {
    fid = 207;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field208") {
    fid = 208;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field209") {
    fid = 209;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field210") {
    fid = 210;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field211") {
    fid = 211;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field212") {
    fid = 212;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field213") {
    fid = 213;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field214") {
    fid = 214;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field215") {
    fid = 215;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field216") {
    fid = 216;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field217") {
    fid = 217;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field218") {
    fid = 218;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field219") {
    fid = 219;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field220") {
    fid = 220;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field221") {
    fid = 221;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field222") {
    fid = 222;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field223") {
    fid = 223;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field224") {
    fid = 224;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field225") {
    fid = 225;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field226") {
    fid = 226;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field227") {
    fid = 227;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field228") {
    fid = 228;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field229") {
    fid = 229;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field230") {
    fid = 230;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
}

void swap(Struct27& a, Struct27& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.field96, b.field96);
  swap(a.field97, b.field97);
  swap(a.field98, b.field98);
  swap(a.field99, b.field99);
  swap(a.field100, b.field100);
  swap(a.field101, b.field101);
  swap(a.field102, b.field102);
  swap(a.field103, b.field103);
  swap(a.field104, b.field104);
  swap(a.field105, b.field105);
  swap(a.field106, b.field106);
  swap(a.field107, b.field107);
  swap(a.field108, b.field108);
  swap(a.field109, b.field109);
  swap(a.field110, b.field110);
  swap(a.field111, b.field111);
  swap(a.field112, b.field112);
  swap(a.field113, b.field113);
  swap(a.field114, b.field114);
  swap(a.field115, b.field115);
  swap(a.field116, b.field116);
  swap(a.field117, b.field117);
  swap(a.field118, b.field118);
  swap(a.field119, b.field119);
  swap(a.field120, b.field120);
  swap(a.field121, b.field121);
  swap(a.field122, b.field122);
  swap(a.field123, b.field123);
  swap(a.field124, b.field124);
  swap(a.field125, b.field125);
  swap(a.field126, b.field126);
  swap(a.field127, b.field127);
  swap(a.field128, b.field128);
  swap(a.field129, b.field129);
  swap(a.field130, b.field130);
  swap(a.field131, b.field131);
  swap(a.field132, b.field132);
  swap(a.field133, b.field133);
  swap(a.field134, b.field134);
  swap(a.field135, b.field135);
  swap(a.field136, b.field136);
  swap(a.field137, b.field137);
  swap(a.field138, b.field138);
  swap(a.field139, b.field139);
  swap(a.field140, b.field140);
  swap(a.field141, b.field141);
  swap(a.field142, b.field142);
  swap(a.field143, b.field143);
  swap(a.field144, b.field144);
  swap(a.field145, b.field145);
  swap(a.field146, b.field146);
  swap(a.field147, b.field147);
  swap(a.field148, b.field148);
  swap(a.field149, b.field149);
  swap(a.field150, b.field150);
  swap(a.field151, b.field151);
  swap(a.field152, b.field152);
  swap(a.field153, b.field153);
  swap(a.field154, b.field154);
  swap(a.field155, b.field155);
  swap(a.field156, b.field156);
  swap(a.field157, b.field157);
  swap(a.field158, b.field158);
  swap(a.field159, b.field159);
  swap(a.field160, b.field160);
  swap(a.field161, b.field161);
  swap(a.field162, b.field162);
  swap(a.field163, b.field163);
  swap(a.field164, b.field164);
  swap(a.field165, b.field165);
  swap(a.field166, b.field166);
  swap(a.field167, b.field167);
  swap(a.field168, b.field168);
  swap(a.field169, b.field169);
  swap(a.field170, b.field170);
  swap(a.field171, b.field171);
  swap(a.field172, b.field172);
  swap(a.field173, b.field173);
  swap(a.field174, b.field174);
  swap(a.field175, b.field175);
  swap(a.field176, b.field176);
  swap(a.field177, b.field177);
  swap(a.field178, b.field178);
  swap(a.field179, b.field179);
  swap(a.field180, b.field180);
  swap(a.field181, b.field181);
  swap(a.field182, b.field182);
  swap(a.field183, b.field183);
  swap(a.field184, b.field184);
  swap(a.field185, b.field185);
  swap(a.field186, b.field186);
  swap(a.field187, b.field187);
  swap(a.field188, b.field188);
  swap(a.field189, b.field189);
  swap(a.field190, b.field190);
  swap(a.field191, b.field191);
  swap(a.field192, b.field192);
  swap(a.field193, b.field193);
  swap(a.field194, b.field194);
  swap(a.field195, b.field195);
  swap(a.field196, b.field196);
  swap(a.field197, b.field197);
  swap(a.field198, b.field198);
  swap(a.field199, b.field199);
  swap(a.field200, b.field200);
  swap(a.field201, b.field201);
  swap(a.field202, b.field202);
  swap(a.field203, b.field203);
  swap(a.field204, b.field204);
  swap(a.field205, b.field205);
  swap(a.field206, b.field206);
  swap(a.field207, b.field207);
  swap(a.field208, b.field208);
  swap(a.field209, b.field209);
  swap(a.field210, b.field210);
  swap(a.field211, b.field211);
  swap(a.field212, b.field212);
  swap(a.field213, b.field213);
  swap(a.field214, b.field214);
  swap(a.field215, b.field215);
  swap(a.field216, b.field216);
  swap(a.field217, b.field217);
  swap(a.field218, b.field218);
  swap(a.field219, b.field219);
  swap(a.field220, b.field220);
  swap(a.field221, b.field221);
  swap(a.field222, b.field222);
  swap(a.field223, b.field223);
  swap(a.field224, b.field224);
  swap(a.field225, b.field225);
  swap(a.field226, b.field226);
  swap(a.field227, b.field227);
  swap(a.field228, b.field228);
  swap(a.field229, b.field229);
  swap(a.field230, b.field230);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct27::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct27::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct27::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct27::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct27::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct27::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct27::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct27::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
